
realtimeOscilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088a4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08008a6c  08008a6c  00018a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a84  08008a84  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008a84  08008a84  00018a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a8c  08008a8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a8c  08008a8c  00018a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a90  08008a90  00018a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006bc  2000000c  08008aa0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  200006c8  08008aa0  000206c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025430  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042d5  00000000  00000000  0004546c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f10  00000000  00000000  00049748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d50  00000000  00000000  0004b658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e252  00000000  00000000  0004d3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002726b  00000000  00000000  0007b5fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b2af  00000000  00000000  000a2865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001adb14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008564  00000000  00000000  001adb64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008a54 	.word	0x08008a54

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08008a54 	.word	0x08008a54

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <HAL_ADC_ConvCpltCallback>:
#include "stm32f7xx_hal.h"
#include "main.h"

extern "C" void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc){
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	volatile uint32_t value = HAL_ADC_GetValue(hadc);
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f002 fbe9 	bl	8002cec <HAL_ADC_GetValue>
 800051a:	4603      	mov	r3, r0
 800051c:	60fb      	str	r3, [r7, #12]
}
 800051e:	bf00      	nop
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f002 f985 	bl	800283a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000530:	f000 f836 	bl	80005a0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000534:	f000 f8a6 	bl	8000684 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f000 ff5a 	bl	80013f0 <MX_GPIO_Init>
  MX_ADC3_Init();
 800053c:	f000 f8cc 	bl	80006d8 <MX_ADC3_Init>
  MX_CRC_Init();
 8000540:	f000 f91c 	bl	800077c <MX_CRC_Init>
  MX_DCMI_Init();
 8000544:	f000 f93c 	bl	80007c0 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000548:	f000 f96e 	bl	8000828 <MX_DMA2D_Init>
  MX_FMC_Init();
 800054c:	f000 ff00 	bl	8001350 <MX_FMC_Init>
  MX_I2C3_Init();
 8000550:	f000 f99c 	bl	800088c <MX_I2C3_Init>
  MX_LTDC_Init();
 8000554:	f000 f9da 	bl	800090c <MX_LTDC_Init>
  MX_RTC_Init();
 8000558:	f000 fa5a 	bl	8000a10 <MX_RTC_Init>
  MX_SAI2_Init();
 800055c:	f000 fafe 	bl	8000b5c <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 8000560:	f000 fba4 	bl	8000cac <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000564:	f000 fbd2 	bl	8000d0c <MX_SPI2_Init>
  MX_TIM1_Init();
 8000568:	f000 fc0e 	bl	8000d88 <MX_TIM1_Init>
  MX_TIM2_Init();
 800056c:	f000 fcc0 	bl	8000ef0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000570:	f000 fd34 	bl	8000fdc <MX_TIM3_Init>
  MX_TIM5_Init();
 8000574:	f000 fdaa 	bl	80010cc <MX_TIM5_Init>
  MX_TIM8_Init();
 8000578:	f000 fe20 	bl	80011bc <MX_TIM8_Init>
  MX_TIM12_Init();
 800057c:	f000 fe72 	bl	8001264 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000580:	f000 feb6 	bl	80012f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, htim1.Channel);
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <main+0x70>)
 8000586:	7f1b      	ldrb	r3, [r3, #28]
 8000588:	4619      	mov	r1, r3
 800058a:	4803      	ldr	r0, [pc, #12]	; (8000598 <main+0x70>)
 800058c:	f006 fafe 	bl	8006b8c <HAL_TIM_OC_Start_IT>
  HAL_ADC_Start_IT(&hadc3);
 8000590:	4802      	ldr	r0, [pc, #8]	; (800059c <main+0x74>)
 8000592:	f002 f9c3 	bl	800291c <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000596:	e7fe      	b.n	8000596 <main+0x6e>
 8000598:	200003f0 	.word	0x200003f0
 800059c:	20000028 	.word	0x20000028

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	2230      	movs	r2, #48	; 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f008 fa48 	bl	8008a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005c4:	f004 f898 	bl	80046f8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	4b2c      	ldr	r3, [pc, #176]	; (800067c <SystemClock_Config+0xdc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	4a2b      	ldr	r2, [pc, #172]	; (800067c <SystemClock_Config+0xdc>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	; 0x40
 80005d4:	4b29      	ldr	r3, [pc, #164]	; (800067c <SystemClock_Config+0xdc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e0:	4b27      	ldr	r3, [pc, #156]	; (8000680 <SystemClock_Config+0xe0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a26      	ldr	r2, [pc, #152]	; (8000680 <SystemClock_Config+0xe0>)
 80005e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b24      	ldr	r3, [pc, #144]	; (8000680 <SystemClock_Config+0xe0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80005f8:	2309      	movs	r3, #9
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000602:	2301      	movs	r3, #1
 8000604:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000606:	2302      	movs	r3, #2
 8000608:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000610:	2319      	movs	r3, #25
 8000612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000614:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000618:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800061e:	2309      	movs	r3, #9
 8000620:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	4618      	mov	r0, r3
 8000628:	f004 f8c6 	bl	80047b8 <HAL_RCC_OscConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000632:	f001 f98d 	bl	8001950 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000636:	f004 f86f 	bl	8004718 <HAL_PWREx_EnableOverDrive>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000640:	f001 f986 	bl	8001950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	2302      	movs	r3, #2
 800064a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000650:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000654:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2106      	movs	r1, #6
 8000662:	4618      	mov	r0, r3
 8000664:	f004 fb4c 	bl	8004d00 <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800066e:	f001 f96f 	bl	8001950 <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3750      	adds	r7, #80	; 0x50
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b0a2      	sub	sp, #136	; 0x88
 8000688:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2284      	movs	r2, #132	; 0x84
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f008 f9d7 	bl	8008a44 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2;
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <PeriphCommonClock_Config+0x50>)
 8000698:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800069a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800069e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80006a0:	2305      	movs	r3, #5
 80006a2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80006a8:	2303      	movs	r3, #3
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80006b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006b4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80006b6:	2300      	movs	r3, #0
 80006b8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4618      	mov	r0, r3
 80006be:	f004 fd37 	bl	8005130 <HAL_RCCEx_PeriphCLKConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 80006c8:	f001 f942 	bl	8001950 <Error_Handler>
  }
}
 80006cc:	bf00      	nop
 80006ce:	3788      	adds	r7, #136	; 0x88
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	00100008 	.word	0x00100008

080006d8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006de:	463b      	mov	r3, r7
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80006ea:	4b22      	ldr	r3, [pc, #136]	; (8000774 <MX_ADC3_Init+0x9c>)
 80006ec:	4a22      	ldr	r2, [pc, #136]	; (8000778 <MX_ADC3_Init+0xa0>)
 80006ee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f0:	4b20      	ldr	r3, [pc, #128]	; (8000774 <MX_ADC3_Init+0x9c>)
 80006f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006f6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <MX_ADC3_Init+0x9c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <MX_ADC3_Init+0x9c>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_ADC3_Init+0x9c>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800070a:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_ADC3_Init+0x9c>)
 800070c:	2200      	movs	r2, #0
 800070e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_ADC3_Init+0x9c>)
 8000714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000718:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_ADC3_Init+0x9c>)
 800071c:	2200      	movs	r2, #0
 800071e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_ADC3_Init+0x9c>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_ADC3_Init+0x9c>)
 8000728:	2201      	movs	r2, #1
 800072a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_ADC3_Init+0x9c>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_ADC3_Init+0x9c>)
 8000736:	2201      	movs	r2, #1
 8000738:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800073a:	480e      	ldr	r0, [pc, #56]	; (8000774 <MX_ADC3_Init+0x9c>)
 800073c:	f002 f8aa 	bl	8002894 <HAL_ADC_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC3_Init+0x72>
  {
    Error_Handler();
 8000746:	f001 f903 	bl	8001950 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800074e:	2301      	movs	r3, #1
 8000750:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000756:	463b      	mov	r3, r7
 8000758:	4619      	mov	r1, r3
 800075a:	4806      	ldr	r0, [pc, #24]	; (8000774 <MX_ADC3_Init+0x9c>)
 800075c:	f002 fae8 	bl	8002d30 <HAL_ADC_ConfigChannel>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC3_Init+0x92>
  {
    Error_Handler();
 8000766:	f001 f8f3 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000028 	.word	0x20000028
 8000778:	40012200 	.word	0x40012200

0800077c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000780:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <MX_CRC_Init+0x3c>)
 8000782:	4a0e      	ldr	r2, [pc, #56]	; (80007bc <MX_CRC_Init+0x40>)
 8000784:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_CRC_Init+0x3c>)
 8000788:	2200      	movs	r2, #0
 800078a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_CRC_Init+0x3c>)
 800078e:	2200      	movs	r2, #0
 8000790:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_CRC_Init+0x3c>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_CRC_Init+0x3c>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_CRC_Init+0x3c>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_CRC_Init+0x3c>)
 80007a6:	f002 fdff 	bl	80033a8 <HAL_CRC_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007b0:	f001 f8ce 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000070 	.word	0x20000070
 80007bc:	40023000 	.word	0x40023000

080007c0 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80007c4:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_DCMI_Init+0x60>)
 80007c6:	4a17      	ldr	r2, [pc, #92]	; (8000824 <MX_DCMI_Init+0x64>)
 80007c8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <MX_DCMI_Init+0x60>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80007d0:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_DCMI_Init+0x60>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_DCMI_Init+0x60>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80007dc:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_DCMI_Init+0x60>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_DCMI_Init+0x60>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80007e8:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <MX_DCMI_Init+0x60>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_DCMI_Init+0x60>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <MX_DCMI_Init+0x60>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_DCMI_Init+0x60>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <MX_DCMI_Init+0x60>)
 8000802:	2200      	movs	r2, #0
 8000804:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_DCMI_Init+0x60>)
 8000808:	2200      	movs	r2, #0
 800080a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_DCMI_Init+0x60>)
 800080e:	f002 feb5 	bl	800357c <HAL_DCMI_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000818:	f001 f89a 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000094 	.word	0x20000094
 8000824:	50050000 	.word	0x50050000

08000828 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_DMA2D_Init+0x5c>)
 800082e:	4a16      	ldr	r2, [pc, #88]	; (8000888 <MX_DMA2D_Init+0x60>)
 8000830:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_DMA2D_Init+0x5c>)
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_DMA2D_Init+0x5c>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_DMA2D_Init+0x5c>)
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_DMA2D_Init+0x5c>)
 8000846:	2200      	movs	r2, #0
 8000848:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_DMA2D_Init+0x5c>)
 800084c:	2200      	movs	r2, #0
 800084e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_DMA2D_Init+0x5c>)
 8000852:	2200      	movs	r2, #0
 8000854:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_DMA2D_Init+0x5c>)
 8000858:	2200      	movs	r2, #0
 800085a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800085c:	4809      	ldr	r0, [pc, #36]	; (8000884 <MX_DMA2D_Init+0x5c>)
 800085e:	f002 ff07 	bl	8003670 <HAL_DMA2D_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000868:	f001 f872 	bl	8001950 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800086c:	2101      	movs	r1, #1
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_DMA2D_Init+0x5c>)
 8000870:	f003 f858 	bl	8003924 <HAL_DMA2D_ConfigLayer>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800087a:	f001 f869 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200000e4 	.word	0x200000e4
 8000888:	4002b000 	.word	0x4002b000

0800088c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <MX_I2C3_Init+0x74>)
 8000892:	4a1c      	ldr	r2, [pc, #112]	; (8000904 <MX_I2C3_Init+0x78>)
 8000894:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000896:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_I2C3_Init+0x74>)
 8000898:	4a1b      	ldr	r2, [pc, #108]	; (8000908 <MX_I2C3_Init+0x7c>)
 800089a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_I2C3_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_I2C3_Init+0x74>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_I2C3_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_I2C3_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_I2C3_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_I2C3_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_I2C3_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008c6:	480e      	ldr	r0, [pc, #56]	; (8000900 <MX_I2C3_Init+0x74>)
 80008c8:	f003 fa84 	bl	8003dd4 <HAL_I2C_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80008d2:	f001 f83d 	bl	8001950 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d6:	2100      	movs	r1, #0
 80008d8:	4809      	ldr	r0, [pc, #36]	; (8000900 <MX_I2C3_Init+0x74>)
 80008da:	f003 fb0b 	bl	8003ef4 <HAL_I2CEx_ConfigAnalogFilter>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80008e4:	f001 f834 	bl	8001950 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008e8:	2100      	movs	r1, #0
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_I2C3_Init+0x74>)
 80008ec:	f003 fb4d 	bl	8003f8a <HAL_I2CEx_ConfigDigitalFilter>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80008f6:	f001 f82b 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000124 	.word	0x20000124
 8000904:	40005c00 	.word	0x40005c00
 8000908:	00c0eaff 	.word	0x00c0eaff

0800090c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08e      	sub	sp, #56	; 0x38
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2234      	movs	r2, #52	; 0x34
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f008 f893 	bl	8008a44 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800091e:	4b3a      	ldr	r3, [pc, #232]	; (8000a08 <MX_LTDC_Init+0xfc>)
 8000920:	4a3a      	ldr	r2, [pc, #232]	; (8000a0c <MX_LTDC_Init+0x100>)
 8000922:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000924:	4b38      	ldr	r3, [pc, #224]	; (8000a08 <MX_LTDC_Init+0xfc>)
 8000926:	2200      	movs	r2, #0
 8000928:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800092a:	4b37      	ldr	r3, [pc, #220]	; (8000a08 <MX_LTDC_Init+0xfc>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000930:	4b35      	ldr	r3, [pc, #212]	; (8000a08 <MX_LTDC_Init+0xfc>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000936:	4b34      	ldr	r3, [pc, #208]	; (8000a08 <MX_LTDC_Init+0xfc>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800093c:	4b32      	ldr	r3, [pc, #200]	; (8000a08 <MX_LTDC_Init+0xfc>)
 800093e:	2228      	movs	r2, #40	; 0x28
 8000940:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000942:	4b31      	ldr	r3, [pc, #196]	; (8000a08 <MX_LTDC_Init+0xfc>)
 8000944:	2209      	movs	r2, #9
 8000946:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000948:	4b2f      	ldr	r3, [pc, #188]	; (8000a08 <MX_LTDC_Init+0xfc>)
 800094a:	2235      	movs	r2, #53	; 0x35
 800094c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800094e:	4b2e      	ldr	r3, [pc, #184]	; (8000a08 <MX_LTDC_Init+0xfc>)
 8000950:	220b      	movs	r2, #11
 8000952:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000954:	4b2c      	ldr	r3, [pc, #176]	; (8000a08 <MX_LTDC_Init+0xfc>)
 8000956:	f240 2215 	movw	r2, #533	; 0x215
 800095a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800095c:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <MX_LTDC_Init+0xfc>)
 800095e:	f240 121b 	movw	r2, #283	; 0x11b
 8000962:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000964:	4b28      	ldr	r3, [pc, #160]	; (8000a08 <MX_LTDC_Init+0xfc>)
 8000966:	f240 2235 	movw	r2, #565	; 0x235
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800096c:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <MX_LTDC_Init+0xfc>)
 800096e:	f240 121d 	movw	r2, #285	; 0x11d
 8000972:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000974:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <MX_LTDC_Init+0xfc>)
 8000976:	2200      	movs	r2, #0
 8000978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <MX_LTDC_Init+0xfc>)
 800097e:	2200      	movs	r2, #0
 8000980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000984:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <MX_LTDC_Init+0xfc>)
 8000986:	2200      	movs	r2, #0
 8000988:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800098c:	481e      	ldr	r0, [pc, #120]	; (8000a08 <MX_LTDC_Init+0xfc>)
 800098e:	f003 fb49 	bl	8004024 <HAL_LTDC_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000998:	f000 ffda 	bl	8001950 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80009a0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80009a4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80009aa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80009ae:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80009b0:	2302      	movs	r3, #2
 80009b2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80009b4:	23ff      	movs	r3, #255	; 0xff
 80009b6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80009bc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009c0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80009c2:	2307      	movs	r3, #7
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80009c6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80009cc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80009d2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2200      	movs	r2, #0
 80009ee:	4619      	mov	r1, r3
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_LTDC_Init+0xfc>)
 80009f2:	f003 fca9 	bl	8004348 <HAL_LTDC_ConfigLayer>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80009fc:	f000 ffa8 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	3738      	adds	r7, #56	; 0x38
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000170 	.word	0x20000170
 8000a0c:	40016800 	.word	0x40016800

08000a10 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b092      	sub	sp, #72	; 0x48
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
 8000a26:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	222c      	movs	r2, #44	; 0x2c
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f008 f806 	bl	8008a44 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a38:	4b46      	ldr	r3, [pc, #280]	; (8000b54 <MX_RTC_Init+0x144>)
 8000a3a:	4a47      	ldr	r2, [pc, #284]	; (8000b58 <MX_RTC_Init+0x148>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a3e:	4b45      	ldr	r3, [pc, #276]	; (8000b54 <MX_RTC_Init+0x144>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a44:	4b43      	ldr	r3, [pc, #268]	; (8000b54 <MX_RTC_Init+0x144>)
 8000a46:	227f      	movs	r2, #127	; 0x7f
 8000a48:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a4a:	4b42      	ldr	r3, [pc, #264]	; (8000b54 <MX_RTC_Init+0x144>)
 8000a4c:	22ff      	movs	r2, #255	; 0xff
 8000a4e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a50:	4b40      	ldr	r3, [pc, #256]	; (8000b54 <MX_RTC_Init+0x144>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a56:	4b3f      	ldr	r3, [pc, #252]	; (8000b54 <MX_RTC_Init+0x144>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a5c:	4b3d      	ldr	r3, [pc, #244]	; (8000b54 <MX_RTC_Init+0x144>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a62:	483c      	ldr	r0, [pc, #240]	; (8000b54 <MX_RTC_Init+0x144>)
 8000a64:	f005 f898 	bl	8005b98 <HAL_RTC_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000a6e:	f000 ff6f 	bl	8001950 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a90:	2201      	movs	r2, #1
 8000a92:	4619      	mov	r1, r3
 8000a94:	482f      	ldr	r0, [pc, #188]	; (8000b54 <MX_RTC_Init+0x144>)
 8000a96:	f005 f911 	bl	8005cbc <HAL_RTC_SetTime>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000aa0:	f000 ff56 	bl	8001950 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000abc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4823      	ldr	r0, [pc, #140]	; (8000b54 <MX_RTC_Init+0x144>)
 8000ac6:	f005 f9b7 	bl	8005e38 <HAL_RTC_SetDate>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000ad0:	f000 ff3e 	bl	8001950 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000b04:	463b      	mov	r3, r7
 8000b06:	2201      	movs	r2, #1
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4812      	ldr	r0, [pc, #72]	; (8000b54 <MX_RTC_Init+0x144>)
 8000b0c:	f005 fa3c 	bl	8005f88 <HAL_RTC_SetAlarm>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000b16:	f000 ff1b 	bl	8001950 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000b1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000b20:	463b      	mov	r3, r7
 8000b22:	2201      	movs	r2, #1
 8000b24:	4619      	mov	r1, r3
 8000b26:	480b      	ldr	r0, [pc, #44]	; (8000b54 <MX_RTC_Init+0x144>)
 8000b28:	f005 fa2e 	bl	8005f88 <HAL_RTC_SetAlarm>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000b32:	f000 ff0d 	bl	8001950 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000b36:	2202      	movs	r2, #2
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <MX_RTC_Init+0x144>)
 8000b3c:	f005 fbae 	bl	800629c <HAL_RTCEx_SetTimeStamp>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000b46:	f000 ff03 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	3748      	adds	r7, #72	; 0x48
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000218 	.word	0x20000218
 8000b58:	40002800 	.word	0x40002800

08000b5c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000b60:	4b4d      	ldr	r3, [pc, #308]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000b62:	4a4e      	ldr	r2, [pc, #312]	; (8000c9c <MX_SAI2_Init+0x140>)
 8000b64:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b66:	4b4c      	ldr	r3, [pc, #304]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000b6c:	4b4a      	ldr	r3, [pc, #296]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000b72:	4b49      	ldr	r3, [pc, #292]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000b74:	2240      	movs	r2, #64	; 0x40
 8000b76:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000b78:	4b47      	ldr	r3, [pc, #284]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000b7e:	4b46      	ldr	r3, [pc, #280]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b84:	4b44      	ldr	r3, [pc, #272]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b8a:	4b43      	ldr	r3, [pc, #268]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b90:	4b41      	ldr	r3, [pc, #260]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b96:	4b40      	ldr	r3, [pc, #256]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000b9c:	4b3e      	ldr	r3, [pc, #248]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000b9e:	4a40      	ldr	r2, [pc, #256]	; (8000ca0 <MX_SAI2_Init+0x144>)
 8000ba0:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ba2:	4b3d      	ldr	r3, [pc, #244]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ba8:	4b3b      	ldr	r3, [pc, #236]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000bae:	4b3a      	ldr	r3, [pc, #232]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000bb4:	4b38      	ldr	r3, [pc, #224]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000bba:	4b37      	ldr	r3, [pc, #220]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000bbc:	2208      	movs	r2, #8
 8000bbe:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000bc0:	4b35      	ldr	r3, [pc, #212]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000bc6:	4b34      	ldr	r3, [pc, #208]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000bcc:	4b32      	ldr	r3, [pc, #200]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000bd2:	4b31      	ldr	r3, [pc, #196]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000bd8:	4b2f      	ldr	r3, [pc, #188]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000bde:	4b2e      	ldr	r3, [pc, #184]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000be4:	4b2c      	ldr	r3, [pc, #176]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000bea:	4b2b      	ldr	r3, [pc, #172]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000bf0:	4829      	ldr	r0, [pc, #164]	; (8000c98 <MX_SAI2_Init+0x13c>)
 8000bf2:	f005 fba9 	bl	8006348 <HAL_SAI_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000bfc:	f000 fea8 	bl	8001950 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000c00:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <MX_SAI2_Init+0x148>)
 8000c02:	4a29      	ldr	r2, [pc, #164]	; (8000ca8 <MX_SAI2_Init+0x14c>)
 8000c04:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000c06:	4b27      	ldr	r3, [pc, #156]	; (8000ca4 <MX_SAI2_Init+0x148>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000c0c:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <MX_SAI2_Init+0x148>)
 8000c0e:	2203      	movs	r2, #3
 8000c10:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000c12:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <MX_SAI2_Init+0x148>)
 8000c14:	2240      	movs	r2, #64	; 0x40
 8000c16:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000c18:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <MX_SAI2_Init+0x148>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <MX_SAI2_Init+0x148>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000c24:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <MX_SAI2_Init+0x148>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <MX_SAI2_Init+0x148>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c30:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <MX_SAI2_Init+0x148>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c36:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <MX_SAI2_Init+0x148>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c3c:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <MX_SAI2_Init+0x148>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <MX_SAI2_Init+0x148>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_SAI2_Init+0x148>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_SAI2_Init+0x148>)
 8000c50:	2208      	movs	r2, #8
 8000c52:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <MX_SAI2_Init+0x148>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000c5a:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <MX_SAI2_Init+0x148>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000c60:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <MX_SAI2_Init+0x148>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_SAI2_Init+0x148>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000c6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <MX_SAI2_Init+0x148>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <MX_SAI2_Init+0x148>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <MX_SAI2_Init+0x148>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_SAI2_Init+0x148>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000c84:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <MX_SAI2_Init+0x148>)
 8000c86:	f005 fb5f 	bl	8006348 <HAL_SAI_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000c90:	f000 fe5e 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000238 	.word	0x20000238
 8000c9c:	40015c04 	.word	0x40015c04
 8000ca0:	0002ee00 	.word	0x0002ee00
 8000ca4:	200002bc 	.word	0x200002bc
 8000ca8:	40015c24 	.word	0x40015c24

08000cac <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <MX_SPDIFRX_Init+0x5c>)
 8000cb2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000cb6:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <MX_SPDIFRX_Init+0x5c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <MX_SPDIFRX_Init+0x5c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000cc4:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <MX_SPDIFRX_Init+0x5c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <MX_SPDIFRX_Init+0x5c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <MX_SPDIFRX_Init+0x5c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <MX_SPDIFRX_Init+0x5c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <MX_SPDIFRX_Init+0x5c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_SPDIFRX_Init+0x5c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <MX_SPDIFRX_Init+0x5c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <MX_SPDIFRX_Init+0x5c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000cf4:	4804      	ldr	r0, [pc, #16]	; (8000d08 <MX_SPDIFRX_Init+0x5c>)
 8000cf6:	f005 fd11 	bl	800671c <HAL_SPDIFRX_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000d00:	f000 fe26 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000340 	.word	0x20000340

08000d0c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d12:	4a1c      	ldr	r2, [pc, #112]	; (8000d84 <MX_SPI2_Init+0x78>)
 8000d14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d24:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d26:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d2a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d3e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d5a:	2207      	movs	r2, #7
 8000d5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d66:	2208      	movs	r2, #8
 8000d68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d6c:	f005 fd32 	bl	80067d4 <HAL_SPI_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000d76:	f000 fdeb 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	2000038c 	.word	0x2000038c
 8000d84:	40003800 	.word	0x40003800

08000d88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b09a      	sub	sp, #104	; 0x68
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
 8000db8:	615a      	str	r2, [r3, #20]
 8000dba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	222c      	movs	r2, #44	; 0x2c
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f007 fe3e 	bl	8008a44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dc8:	4b47      	ldr	r3, [pc, #284]	; (8000ee8 <MX_TIM1_Init+0x160>)
 8000dca:	4a48      	ldr	r2, [pc, #288]	; (8000eec <MX_TIM1_Init+0x164>)
 8000dcc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100;
 8000dce:	4b46      	ldr	r3, [pc, #280]	; (8000ee8 <MX_TIM1_Init+0x160>)
 8000dd0:	2264      	movs	r2, #100	; 0x64
 8000dd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd4:	4b44      	ldr	r3, [pc, #272]	; (8000ee8 <MX_TIM1_Init+0x160>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000dda:	4b43      	ldr	r3, [pc, #268]	; (8000ee8 <MX_TIM1_Init+0x160>)
 8000ddc:	2264      	movs	r2, #100	; 0x64
 8000dde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de0:	4b41      	ldr	r3, [pc, #260]	; (8000ee8 <MX_TIM1_Init+0x160>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000de6:	4b40      	ldr	r3, [pc, #256]	; (8000ee8 <MX_TIM1_Init+0x160>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dec:	4b3e      	ldr	r3, [pc, #248]	; (8000ee8 <MX_TIM1_Init+0x160>)
 8000dee:	2280      	movs	r2, #128	; 0x80
 8000df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000df2:	483d      	ldr	r0, [pc, #244]	; (8000ee8 <MX_TIM1_Init+0x160>)
 8000df4:	f005 fd99 	bl	800692a <HAL_TIM_Base_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000dfe:	f000 fda7 	bl	8001950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e06:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4836      	ldr	r0, [pc, #216]	; (8000ee8 <MX_TIM1_Init+0x160>)
 8000e10:	f006 fb08 	bl	8007424 <HAL_TIM_ConfigClockSource>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e1a:	f000 fd99 	bl	8001950 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000e1e:	4832      	ldr	r0, [pc, #200]	; (8000ee8 <MX_TIM1_Init+0x160>)
 8000e20:	f005 fe52 	bl	8006ac8 <HAL_TIM_OC_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000e2a:	f000 fd91 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e32:	2300      	movs	r3, #0
 8000e34:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4829      	ldr	r0, [pc, #164]	; (8000ee8 <MX_TIM1_Init+0x160>)
 8000e42:	f006 ff9f 	bl	8007d84 <HAL_TIMEx_MasterConfigSynchronization>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000e4c:	f000 fd80 	bl	8001950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000e50:	2330      	movs	r3, #48	; 0x30
 8000e52:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e64:	2300      	movs	r3, #0
 8000e66:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e70:	2200      	movs	r2, #0
 8000e72:	4619      	mov	r1, r3
 8000e74:	481c      	ldr	r0, [pc, #112]	; (8000ee8 <MX_TIM1_Init+0x160>)
 8000e76:	f006 f947 	bl	8007108 <HAL_TIM_OC_ConfigChannel>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000e80:	f000 fd66 	bl	8001950 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8000e84:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <MX_TIM1_Init+0x160>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	699a      	ldr	r2, [r3, #24]
 8000e8a:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <MX_TIM1_Init+0x160>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 0208 	orr.w	r2, r2, #8
 8000e92:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ea8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000eb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <MX_TIM1_Init+0x160>)
 8000eca:	f006 ffe9 	bl	8007ea0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8000ed4:	f000 fd3c 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ed8:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <MX_TIM1_Init+0x160>)
 8000eda:	f001 f973 	bl	80021c4 <HAL_TIM_MspPostInit>

}
 8000ede:	bf00      	nop
 8000ee0:	3768      	adds	r7, #104	; 0x68
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200003f0 	.word	0x200003f0
 8000eec:	40010000 	.word	0x40010000

08000ef0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08e      	sub	sp, #56	; 0x38
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f10:	463b      	mov	r3, r7
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]
 8000f1e:	615a      	str	r2, [r3, #20]
 8000f20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f22:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <MX_TIM2_Init+0xe8>)
 8000f24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f2a:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <MX_TIM2_Init+0xe8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f30:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <MX_TIM2_Init+0xe8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f36:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <MX_TIM2_Init+0xe8>)
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295
 8000f3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3e:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <MX_TIM2_Init+0xe8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f44:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <MX_TIM2_Init+0xe8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f4a:	4823      	ldr	r0, [pc, #140]	; (8000fd8 <MX_TIM2_Init+0xe8>)
 8000f4c:	f005 fced 	bl	800692a <HAL_TIM_Base_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000f56:	f000 fcfb 	bl	8001950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f64:	4619      	mov	r1, r3
 8000f66:	481c      	ldr	r0, [pc, #112]	; (8000fd8 <MX_TIM2_Init+0xe8>)
 8000f68:	f006 fa5c 	bl	8007424 <HAL_TIM_ConfigClockSource>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000f72:	f000 fced 	bl	8001950 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f76:	4818      	ldr	r0, [pc, #96]	; (8000fd8 <MX_TIM2_Init+0xe8>)
 8000f78:	f005 ff50 	bl	8006e1c <HAL_TIM_PWM_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000f82:	f000 fce5 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4619      	mov	r1, r3
 8000f94:	4810      	ldr	r0, [pc, #64]	; (8000fd8 <MX_TIM2_Init+0xe8>)
 8000f96:	f006 fef5 	bl	8007d84 <HAL_TIMEx_MasterConfigSynchronization>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000fa0:	f000 fcd6 	bl	8001950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fa4:	2360      	movs	r3, #96	; 0x60
 8000fa6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <MX_TIM2_Init+0xe8>)
 8000fbc:	f006 f91e 	bl	80071fc <HAL_TIM_PWM_ConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000fc6:	f000 fcc3 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fca:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <MX_TIM2_Init+0xe8>)
 8000fcc:	f001 f8fa 	bl	80021c4 <HAL_TIM_MspPostInit>

}
 8000fd0:	bf00      	nop
 8000fd2:	3738      	adds	r7, #56	; 0x38
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	2000043c 	.word	0x2000043c

08000fdc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08e      	sub	sp, #56	; 0x38
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]
 800100a:	615a      	str	r2, [r3, #20]
 800100c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800100e:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <MX_TIM3_Init+0xe8>)
 8001010:	4a2d      	ldr	r2, [pc, #180]	; (80010c8 <MX_TIM3_Init+0xec>)
 8001012:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001014:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <MX_TIM3_Init+0xe8>)
 8001016:	2200      	movs	r2, #0
 8001018:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101a:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <MX_TIM3_Init+0xe8>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001020:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <MX_TIM3_Init+0xe8>)
 8001022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001026:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001028:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <MX_TIM3_Init+0xe8>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102e:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <MX_TIM3_Init+0xe8>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001034:	4823      	ldr	r0, [pc, #140]	; (80010c4 <MX_TIM3_Init+0xe8>)
 8001036:	f005 fc78 	bl	800692a <HAL_TIM_Base_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001040:	f000 fc86 	bl	8001950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800104a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800104e:	4619      	mov	r1, r3
 8001050:	481c      	ldr	r0, [pc, #112]	; (80010c4 <MX_TIM3_Init+0xe8>)
 8001052:	f006 f9e7 	bl	8007424 <HAL_TIM_ConfigClockSource>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800105c:	f000 fc78 	bl	8001950 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001060:	4818      	ldr	r0, [pc, #96]	; (80010c4 <MX_TIM3_Init+0xe8>)
 8001062:	f005 fedb 	bl	8006e1c <HAL_TIM_PWM_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800106c:	f000 fc70 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	4619      	mov	r1, r3
 800107e:	4811      	ldr	r0, [pc, #68]	; (80010c4 <MX_TIM3_Init+0xe8>)
 8001080:	f006 fe80 	bl	8007d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800108a:	f000 fc61 	bl	8001950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800108e:	2360      	movs	r3, #96	; 0x60
 8001090:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800109e:	463b      	mov	r3, r7
 80010a0:	2200      	movs	r2, #0
 80010a2:	4619      	mov	r1, r3
 80010a4:	4807      	ldr	r0, [pc, #28]	; (80010c4 <MX_TIM3_Init+0xe8>)
 80010a6:	f006 f8a9 	bl	80071fc <HAL_TIM_PWM_ConfigChannel>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80010b0:	f000 fc4e 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010b4:	4803      	ldr	r0, [pc, #12]	; (80010c4 <MX_TIM3_Init+0xe8>)
 80010b6:	f001 f885 	bl	80021c4 <HAL_TIM_MspPostInit>

}
 80010ba:	bf00      	nop
 80010bc:	3738      	adds	r7, #56	; 0x38
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000488 	.word	0x20000488
 80010c8:	40000400 	.word	0x40000400

080010cc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08e      	sub	sp, #56	; 0x38
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ec:	463b      	mov	r3, r7
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]
 80010fa:	615a      	str	r2, [r3, #20]
 80010fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010fe:	4b2d      	ldr	r3, [pc, #180]	; (80011b4 <MX_TIM5_Init+0xe8>)
 8001100:	4a2d      	ldr	r2, [pc, #180]	; (80011b8 <MX_TIM5_Init+0xec>)
 8001102:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001104:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <MX_TIM5_Init+0xe8>)
 8001106:	2200      	movs	r2, #0
 8001108:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <MX_TIM5_Init+0xe8>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001110:	4b28      	ldr	r3, [pc, #160]	; (80011b4 <MX_TIM5_Init+0xe8>)
 8001112:	f04f 32ff 	mov.w	r2, #4294967295
 8001116:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001118:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <MX_TIM5_Init+0xe8>)
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111e:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <MX_TIM5_Init+0xe8>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001124:	4823      	ldr	r0, [pc, #140]	; (80011b4 <MX_TIM5_Init+0xe8>)
 8001126:	f005 fc00 	bl	800692a <HAL_TIM_Base_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001130:	f000 fc0e 	bl	8001950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800113a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800113e:	4619      	mov	r1, r3
 8001140:	481c      	ldr	r0, [pc, #112]	; (80011b4 <MX_TIM5_Init+0xe8>)
 8001142:	f006 f96f 	bl	8007424 <HAL_TIM_ConfigClockSource>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800114c:	f000 fc00 	bl	8001950 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001150:	4818      	ldr	r0, [pc, #96]	; (80011b4 <MX_TIM5_Init+0xe8>)
 8001152:	f005 fe63 	bl	8006e1c <HAL_TIM_PWM_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800115c:	f000 fbf8 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4619      	mov	r1, r3
 800116e:	4811      	ldr	r0, [pc, #68]	; (80011b4 <MX_TIM5_Init+0xe8>)
 8001170:	f006 fe08 	bl	8007d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800117a:	f000 fbe9 	bl	8001950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800117e:	2360      	movs	r3, #96	; 0x60
 8001180:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800118e:	463b      	mov	r3, r7
 8001190:	220c      	movs	r2, #12
 8001192:	4619      	mov	r1, r3
 8001194:	4807      	ldr	r0, [pc, #28]	; (80011b4 <MX_TIM5_Init+0xe8>)
 8001196:	f006 f831 	bl	80071fc <HAL_TIM_PWM_ConfigChannel>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80011a0:	f000 fbd6 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80011a4:	4803      	ldr	r0, [pc, #12]	; (80011b4 <MX_TIM5_Init+0xe8>)
 80011a6:	f001 f80d 	bl	80021c4 <HAL_TIM_MspPostInit>

}
 80011aa:	bf00      	nop
 80011ac:	3738      	adds	r7, #56	; 0x38
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200004d4 	.word	0x200004d4
 80011b8:	40000c00 	.word	0x40000c00

080011bc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <MX_TIM8_Init+0xa0>)
 80011dc:	4a20      	ldr	r2, [pc, #128]	; (8001260 <MX_TIM8_Init+0xa4>)
 80011de:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80011e0:	4b1e      	ldr	r3, [pc, #120]	; (800125c <MX_TIM8_Init+0xa0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <MX_TIM8_Init+0xa0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <MX_TIM8_Init+0xa0>)
 80011ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <MX_TIM8_Init+0xa0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <MX_TIM8_Init+0xa0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <MX_TIM8_Init+0xa0>)
 8001202:	2200      	movs	r2, #0
 8001204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001206:	4815      	ldr	r0, [pc, #84]	; (800125c <MX_TIM8_Init+0xa0>)
 8001208:	f005 fb8f 	bl	800692a <HAL_TIM_Base_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001212:	f000 fb9d 	bl	8001950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	4619      	mov	r1, r3
 8001222:	480e      	ldr	r0, [pc, #56]	; (800125c <MX_TIM8_Init+0xa0>)
 8001224:	f006 f8fe 	bl	8007424 <HAL_TIM_ConfigClockSource>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800122e:	f000 fb8f 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	4619      	mov	r1, r3
 8001242:	4806      	ldr	r0, [pc, #24]	; (800125c <MX_TIM8_Init+0xa0>)
 8001244:	f006 fd9e 	bl	8007d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800124e:	f000 fb7f 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	3720      	adds	r7, #32
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000520 	.word	0x20000520
 8001260:	40010400 	.word	0x40010400

08001264 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
 8001278:	615a      	str	r2, [r3, #20]
 800127a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_TIM12_Init+0x84>)
 800127e:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <MX_TIM12_Init+0x88>)
 8001280:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001282:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <MX_TIM12_Init+0x84>)
 8001284:	2200      	movs	r2, #0
 8001286:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001288:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <MX_TIM12_Init+0x84>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <MX_TIM12_Init+0x84>)
 8001290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001294:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <MX_TIM12_Init+0x84>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <MX_TIM12_Init+0x84>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80012a2:	4811      	ldr	r0, [pc, #68]	; (80012e8 <MX_TIM12_Init+0x84>)
 80012a4:	f005 fdba 	bl	8006e1c <HAL_TIM_PWM_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80012ae:	f000 fb4f 	bl	8001950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b2:	2360      	movs	r3, #96	; 0x60
 80012b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2200      	movs	r2, #0
 80012c6:	4619      	mov	r1, r3
 80012c8:	4807      	ldr	r0, [pc, #28]	; (80012e8 <MX_TIM12_Init+0x84>)
 80012ca:	f005 ff97 	bl	80071fc <HAL_TIM_PWM_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80012d4:	f000 fb3c 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80012d8:	4803      	ldr	r0, [pc, #12]	; (80012e8 <MX_TIM12_Init+0x84>)
 80012da:	f000 ff73 	bl	80021c4 <HAL_TIM_MspPostInit>

}
 80012de:	bf00      	nop
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000056c 	.word	0x2000056c
 80012ec:	40001800 	.word	0x40001800

080012f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012f4:	4b14      	ldr	r3, [pc, #80]	; (8001348 <MX_USART1_UART_Init+0x58>)
 80012f6:	4a15      	ldr	r2, [pc, #84]	; (800134c <MX_USART1_UART_Init+0x5c>)
 80012f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <MX_USART1_UART_Init+0x58>)
 80012fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001300:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <MX_USART1_UART_Init+0x58>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <MX_USART1_UART_Init+0x58>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <MX_USART1_UART_Init+0x58>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <MX_USART1_UART_Init+0x58>)
 8001316:	220c      	movs	r2, #12
 8001318:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <MX_USART1_UART_Init+0x58>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <MX_USART1_UART_Init+0x58>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <MX_USART1_UART_Init+0x58>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_USART1_UART_Init+0x58>)
 800132e:	2200      	movs	r2, #0
 8001330:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_USART1_UART_Init+0x58>)
 8001334:	f006 fe50 	bl	8007fd8 <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800133e:	f000 fb07 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200005b8 	.word	0x200005b8
 800134c:	40011000 	.word	0x40011000

08001350 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
 8001364:	615a      	str	r2, [r3, #20]
 8001366:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001368:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <MX_FMC_Init+0x98>)
 800136a:	4a20      	ldr	r2, [pc, #128]	; (80013ec <MX_FMC_Init+0x9c>)
 800136c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800136e:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <MX_FMC_Init+0x98>)
 8001370:	2200      	movs	r2, #0
 8001372:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001374:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <MX_FMC_Init+0x98>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <MX_FMC_Init+0x98>)
 800137c:	2204      	movs	r2, #4
 800137e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001380:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <MX_FMC_Init+0x98>)
 8001382:	2210      	movs	r2, #16
 8001384:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <MX_FMC_Init+0x98>)
 8001388:	2240      	movs	r2, #64	; 0x40
 800138a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <MX_FMC_Init+0x98>)
 800138e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001392:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <MX_FMC_Init+0x98>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <MX_FMC_Init+0x98>)
 800139c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013a0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_FMC_Init+0x98>)
 80013a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_FMC_Init+0x98>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80013b0:	2302      	movs	r3, #2
 80013b2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80013b4:	2307      	movs	r3, #7
 80013b6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80013b8:	2304      	movs	r3, #4
 80013ba:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80013bc:	2307      	movs	r3, #7
 80013be:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80013c0:	2303      	movs	r3, #3
 80013c2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80013c4:	2302      	movs	r3, #2
 80013c6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80013c8:	2302      	movs	r3, #2
 80013ca:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	4619      	mov	r1, r3
 80013d0:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_FMC_Init+0x98>)
 80013d2:	f005 f96f 	bl	80066b4 <HAL_SDRAM_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80013dc:	f000 fab8 	bl	8001950 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80013e0:	bf00      	nop
 80013e2:	3720      	adds	r7, #32
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	2000063c 	.word	0x2000063c
 80013ec:	a0000140 	.word	0xa0000140

080013f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b090      	sub	sp, #64	; 0x40
 80013f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001406:	4baf      	ldr	r3, [pc, #700]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4aae      	ldr	r2, [pc, #696]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 800140c:	f043 0310 	orr.w	r3, r3, #16
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4bac      	ldr	r3, [pc, #688]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0310 	and.w	r3, r3, #16
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
 800141c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800141e:	4ba9      	ldr	r3, [pc, #676]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4aa8      	ldr	r2, [pc, #672]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 8001424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4ba6      	ldr	r3, [pc, #664]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	4ba3      	ldr	r3, [pc, #652]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4aa2      	ldr	r2, [pc, #648]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4ba0      	ldr	r3, [pc, #640]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	623b      	str	r3, [r7, #32]
 800144c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800144e:	4b9d      	ldr	r3, [pc, #628]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a9c      	ldr	r2, [pc, #624]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 8001454:	f043 0308 	orr.w	r3, r3, #8
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b9a      	ldr	r3, [pc, #616]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0308 	and.w	r3, r3, #8
 8001462:	61fb      	str	r3, [r7, #28]
 8001464:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	4b97      	ldr	r3, [pc, #604]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a96      	ldr	r2, [pc, #600]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b94      	ldr	r3, [pc, #592]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	61bb      	str	r3, [r7, #24]
 800147c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	4b91      	ldr	r3, [pc, #580]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a90      	ldr	r2, [pc, #576]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b8e      	ldr	r3, [pc, #568]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001496:	4b8b      	ldr	r3, [pc, #556]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a8a      	ldr	r2, [pc, #552]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 800149c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b88      	ldr	r3, [pc, #544]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80014ae:	4b85      	ldr	r3, [pc, #532]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a84      	ldr	r2, [pc, #528]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 80014b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b82      	ldr	r3, [pc, #520]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80014c6:	4b7f      	ldr	r3, [pc, #508]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a7e      	ldr	r2, [pc, #504]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 80014cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b7c      	ldr	r3, [pc, #496]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014de:	4b79      	ldr	r3, [pc, #484]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a78      	ldr	r2, [pc, #480]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 80014e4:	f043 0320 	orr.w	r3, r3, #32
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b76      	ldr	r3, [pc, #472]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0320 	and.w	r3, r3, #32
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014f6:	4b73      	ldr	r3, [pc, #460]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a72      	ldr	r2, [pc, #456]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 80014fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b70      	ldr	r3, [pc, #448]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800150e:	2201      	movs	r2, #1
 8001510:	2120      	movs	r1, #32
 8001512:	486d      	ldr	r0, [pc, #436]	; (80016c8 <MX_GPIO_Init+0x2d8>)
 8001514:	f002 fc44 	bl	8003da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	210c      	movs	r1, #12
 800151c:	486b      	ldr	r0, [pc, #428]	; (80016cc <MX_GPIO_Init+0x2dc>)
 800151e:	f002 fc3f 	bl	8003da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001522:	2201      	movs	r2, #1
 8001524:	2108      	movs	r1, #8
 8001526:	486a      	ldr	r0, [pc, #424]	; (80016d0 <MX_GPIO_Init+0x2e0>)
 8001528:	f002 fc3a 	bl	8003da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001532:	4866      	ldr	r0, [pc, #408]	; (80016cc <MX_GPIO_Init+0x2dc>)
 8001534:	f002 fc34 	bl	8003da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800153e:	4865      	ldr	r0, [pc, #404]	; (80016d4 <MX_GPIO_Init+0x2e4>)
 8001540:	f002 fc2e 	bl	8003da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	21c8      	movs	r1, #200	; 0xc8
 8001548:	4863      	ldr	r0, [pc, #396]	; (80016d8 <MX_GPIO_Init+0x2e8>)
 800154a:	f002 fc29 	bl	8003da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800154e:	2308      	movs	r3, #8
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001552:	2300      	movs	r3, #0
 8001554:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800155e:	4619      	mov	r1, r3
 8001560:	485e      	ldr	r0, [pc, #376]	; (80016dc <MX_GPIO_Init+0x2ec>)
 8001562:	f002 fa71 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001566:	2304      	movs	r3, #4
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001572:	2303      	movs	r3, #3
 8001574:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001576:	2309      	movs	r3, #9
 8001578:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800157a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800157e:	4619      	mov	r1, r3
 8001580:	4856      	ldr	r0, [pc, #344]	; (80016dc <MX_GPIO_Init+0x2ec>)
 8001582:	f002 fa61 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001586:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001598:	230b      	movs	r3, #11
 800159a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800159c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015a0:	4619      	mov	r1, r3
 80015a2:	484d      	ldr	r0, [pc, #308]	; (80016d8 <MX_GPIO_Init+0x2e8>)
 80015a4:	f002 fa50 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80015a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ae:	2312      	movs	r3, #18
 80015b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ba:	2304      	movs	r3, #4
 80015bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c2:	4619      	mov	r1, r3
 80015c4:	4846      	ldr	r0, [pc, #280]	; (80016e0 <MX_GPIO_Init+0x2f0>)
 80015c6:	f002 fa3f 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80015ca:	f643 4323 	movw	r3, #15395	; 0x3c23
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80015dc:	230a      	movs	r3, #10
 80015de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015e4:	4619      	mov	r1, r3
 80015e6:	483e      	ldr	r0, [pc, #248]	; (80016e0 <MX_GPIO_Init+0x2f0>)
 80015e8:	f002 fa2e 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80015ec:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015fe:	230c      	movs	r3, #12
 8001600:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001602:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001606:	4619      	mov	r1, r3
 8001608:	4836      	ldr	r0, [pc, #216]	; (80016e4 <MX_GPIO_Init+0x2f4>)
 800160a:	f002 fa1d 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800160e:	2340      	movs	r3, #64	; 0x40
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800161e:	230a      	movs	r3, #10
 8001620:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001626:	4619      	mov	r1, r3
 8001628:	482d      	ldr	r0, [pc, #180]	; (80016e0 <MX_GPIO_Init+0x2f0>)
 800162a:	f002 fa0d 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800162e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001634:	2300      	movs	r3, #0
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001640:	4619      	mov	r1, r3
 8001642:	4829      	ldr	r0, [pc, #164]	; (80016e8 <MX_GPIO_Init+0x2f8>)
 8001644:	f002 fa00 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001648:	2340      	movs	r3, #64	; 0x40
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800164c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001650:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001656:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800165a:	4619      	mov	r1, r3
 800165c:	481a      	ldr	r0, [pc, #104]	; (80016c8 <MX_GPIO_Init+0x2d8>)
 800165e:	f002 f9f3 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001662:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001674:	230a      	movs	r3, #10
 8001676:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800167c:	4619      	mov	r1, r3
 800167e:	481b      	ldr	r0, [pc, #108]	; (80016ec <MX_GPIO_Init+0x2fc>)
 8001680:	f002 f9e2 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001684:	2320      	movs	r3, #32
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001694:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001698:	4619      	mov	r1, r3
 800169a:	480b      	ldr	r0, [pc, #44]	; (80016c8 <MX_GPIO_Init+0x2d8>)
 800169c:	f002 f9d4 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80016a0:	f241 030c 	movw	r3, #4108	; 0x100c
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a6:	2301      	movs	r3, #1
 80016a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2300      	movs	r3, #0
 80016b0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80016b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b6:	4619      	mov	r1, r3
 80016b8:	4804      	ldr	r0, [pc, #16]	; (80016cc <MX_GPIO_Init+0x2dc>)
 80016ba:	f002 f9c5 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80016be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c2:	e015      	b.n	80016f0 <MX_GPIO_Init+0x300>
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020c00 	.word	0x40020c00
 80016cc:	40022000 	.word	0x40022000
 80016d0:	40022800 	.word	0x40022800
 80016d4:	40021c00 	.word	0x40021c00
 80016d8:	40021800 	.word	0x40021800
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40020400 	.word	0x40020400
 80016e4:	40020800 	.word	0x40020800
 80016e8:	40022400 	.word	0x40022400
 80016ec:	40020000 	.word	0x40020000
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f2:	2300      	movs	r3, #0
 80016f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80016fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016fe:	4619      	mov	r1, r3
 8001700:	4881      	ldr	r0, [pc, #516]	; (8001908 <MX_GPIO_Init+0x518>)
 8001702:	f002 f9a1 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001706:	2308      	movs	r3, #8
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	2301      	movs	r3, #1
 800170c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001716:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800171a:	4619      	mov	r1, r3
 800171c:	487b      	ldr	r0, [pc, #492]	; (800190c <MX_GPIO_Init+0x51c>)
 800171e:	f002 f993 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001722:	2310      	movs	r3, #16
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001726:	2300      	movs	r3, #0
 8001728:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800172e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001732:	4619      	mov	r1, r3
 8001734:	4876      	ldr	r0, [pc, #472]	; (8001910 <MX_GPIO_Init+0x520>)
 8001736:	f002 f987 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800173a:	2304      	movs	r3, #4
 800173c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001746:	2303      	movs	r3, #3
 8001748:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800174a:	230c      	movs	r3, #12
 800174c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800174e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001752:	4619      	mov	r1, r3
 8001754:	486e      	ldr	r0, [pc, #440]	; (8001910 <MX_GPIO_Init+0x520>)
 8001756:	f002 f977 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800175a:	f248 0304 	movw	r3, #32772	; 0x8004
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001760:	2300      	movs	r3, #0
 8001762:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800176c:	4619      	mov	r1, r3
 800176e:	4869      	ldr	r0, [pc, #420]	; (8001914 <MX_GPIO_Init+0x524>)
 8001770:	f002 f96a 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177a:	2301      	movs	r3, #1
 800177c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001786:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800178a:	4619      	mov	r1, r3
 800178c:	4861      	ldr	r0, [pc, #388]	; (8001914 <MX_GPIO_Init+0x524>)
 800178e:	f002 f95b 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001792:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001798:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800179c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a6:	4619      	mov	r1, r3
 80017a8:	485b      	ldr	r0, [pc, #364]	; (8001918 <MX_GPIO_Init+0x528>)
 80017aa:	f002 f94d 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80017ae:	23c0      	movs	r3, #192	; 0xc0
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80017be:	2308      	movs	r3, #8
 80017c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c6:	4619      	mov	r1, r3
 80017c8:	484f      	ldr	r0, [pc, #316]	; (8001908 <MX_GPIO_Init+0x518>)
 80017ca:	f002 f93d 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80017ce:	2310      	movs	r3, #16
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017da:	2303      	movs	r3, #3
 80017dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017de:	230a      	movs	r3, #10
 80017e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80017e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e6:	4619      	mov	r1, r3
 80017e8:	484a      	ldr	r0, [pc, #296]	; (8001914 <MX_GPIO_Init+0x524>)
 80017ea:	f002 f92d 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80017ee:	23c8      	movs	r3, #200	; 0xc8
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001802:	4619      	mov	r1, r3
 8001804:	4845      	ldr	r0, [pc, #276]	; (800191c <MX_GPIO_Init+0x52c>)
 8001806:	f002 f91f 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800180a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001810:	2303      	movs	r3, #3
 8001812:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001818:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800181c:	4619      	mov	r1, r3
 800181e:	4840      	ldr	r0, [pc, #256]	; (8001920 <MX_GPIO_Init+0x530>)
 8001820:	f002 f912 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001824:	2305      	movs	r3, #5
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001830:	2303      	movs	r3, #3
 8001832:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001834:	230a      	movs	r3, #10
 8001836:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800183c:	4619      	mov	r1, r3
 800183e:	4832      	ldr	r0, [pc, #200]	; (8001908 <MX_GPIO_Init+0x518>)
 8001840:	f002 f902 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001844:	2332      	movs	r3, #50	; 0x32
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001854:	230b      	movs	r3, #11
 8001856:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800185c:	4619      	mov	r1, r3
 800185e:	482a      	ldr	r0, [pc, #168]	; (8001908 <MX_GPIO_Init+0x518>)
 8001860:	f002 f8f2 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001864:	2304      	movs	r3, #4
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001870:	2303      	movs	r3, #3
 8001872:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001874:	2309      	movs	r3, #9
 8001876:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800187c:	4619      	mov	r1, r3
 800187e:	4829      	ldr	r0, [pc, #164]	; (8001924 <MX_GPIO_Init+0x534>)
 8001880:	f002 f8e2 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001884:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001896:	2309      	movs	r3, #9
 8001898:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800189a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800189e:	4619      	mov	r1, r3
 80018a0:	481b      	ldr	r0, [pc, #108]	; (8001910 <MX_GPIO_Init+0x520>)
 80018a2:	f002 f8d1 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80018a6:	2304      	movs	r3, #4
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018aa:	2300      	movs	r3, #0
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80018b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b6:	4619      	mov	r1, r3
 80018b8:	4818      	ldr	r0, [pc, #96]	; (800191c <MX_GPIO_Init+0x52c>)
 80018ba:	f002 f8c5 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80018be:	2386      	movs	r3, #134	; 0x86
 80018c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ca:	2303      	movs	r3, #3
 80018cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018ce:	230b      	movs	r3, #11
 80018d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d6:	4619      	mov	r1, r3
 80018d8:	4813      	ldr	r0, [pc, #76]	; (8001928 <MX_GPIO_Init+0x538>)
 80018da:	f002 f8b5 	bl	8003a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80018de:	2328      	movs	r3, #40	; 0x28
 80018e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ea:	2303      	movs	r3, #3
 80018ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80018ee:	230a      	movs	r3, #10
 80018f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f6:	4619      	mov	r1, r3
 80018f8:	480b      	ldr	r0, [pc, #44]	; (8001928 <MX_GPIO_Init+0x538>)
 80018fa:	f002 f8a5 	bl	8003a48 <HAL_GPIO_Init>

}
 80018fe:	bf00      	nop
 8001900:	3740      	adds	r7, #64	; 0x40
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40020800 	.word	0x40020800
 800190c:	40022800 	.word	0x40022800
 8001910:	40020c00 	.word	0x40020c00
 8001914:	40021c00 	.word	0x40021c00
 8001918:	40022000 	.word	0x40022000
 800191c:	40021800 	.word	0x40021800
 8001920:	40021400 	.word	0x40021400
 8001924:	40020400 	.word	0x40020400
 8001928:	40020000 	.word	0x40020000

0800192c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d101      	bne.n	8001942 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800193e:	f000 ff89 	bl	8002854 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40001000 	.word	0x40001000

08001950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001954:	b672      	cpsid	i
}
 8001956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001958:	e7fe      	b.n	8001958 <Error_Handler+0x8>
	...

0800195c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_MspInit+0x44>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <HAL_MspInit+0x44>)
 8001968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <HAL_MspInit+0x44>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_MspInit+0x44>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <HAL_MspInit+0x44>)
 8001980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001984:	6453      	str	r3, [r2, #68]	; 0x44
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_MspInit+0x44>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800

080019a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	; 0x28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a25      	ldr	r2, [pc, #148]	; (8001a58 <HAL_ADC_MspInit+0xb4>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d144      	bne.n	8001a50 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80019c6:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <HAL_ADC_MspInit+0xb8>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	4a24      	ldr	r2, [pc, #144]	; (8001a5c <HAL_ADC_MspInit+0xb8>)
 80019cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019d0:	6453      	str	r3, [r2, #68]	; 0x44
 80019d2:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <HAL_ADC_MspInit+0xb8>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019de:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <HAL_ADC_MspInit+0xb8>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a1e      	ldr	r2, [pc, #120]	; (8001a5c <HAL_ADC_MspInit+0xb8>)
 80019e4:	f043 0320 	orr.w	r3, r3, #32
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <HAL_ADC_MspInit+0xb8>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0320 	and.w	r3, r3, #32
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <HAL_ADC_MspInit+0xb8>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a18      	ldr	r2, [pc, #96]	; (8001a5c <HAL_ADC_MspInit+0xb8>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <HAL_ADC_MspInit+0xb8>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> ADC3_IN4
    PF10     ------> ADC3_IN8
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A3_Pin;
 8001a0e:	f44f 63b8 	mov.w	r3, #1472	; 0x5c0
 8001a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a14:	2303      	movs	r3, #3
 8001a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	480f      	ldr	r0, [pc, #60]	; (8001a60 <HAL_ADC_MspInit+0xbc>)
 8001a24:	f002 f810 	bl	8003a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	4619      	mov	r1, r3
 8001a3a:	480a      	ldr	r0, [pc, #40]	; (8001a64 <HAL_ADC_MspInit+0xc0>)
 8001a3c:	f002 f804 	bl	8003a48 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	2012      	movs	r0, #18
 8001a46:	f001 fc85 	bl	8003354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001a4a:	2012      	movs	r0, #18
 8001a4c:	f001 fc9e 	bl	800338c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a50:	bf00      	nop
 8001a52:	3728      	adds	r7, #40	; 0x28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40012200 	.word	0x40012200
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40021400 	.word	0x40021400
 8001a64:	40020000 	.word	0x40020000

08001a68 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <HAL_CRC_MspInit+0x38>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d10b      	bne.n	8001a92 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_CRC_MspInit+0x3c>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a09      	ldr	r2, [pc, #36]	; (8001aa4 <HAL_CRC_MspInit+0x3c>)
 8001a80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <HAL_CRC_MspInit+0x3c>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001a92:	bf00      	nop
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40023000 	.word	0x40023000
 8001aa4:	40023800 	.word	0x40023800

08001aa8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08e      	sub	sp, #56	; 0x38
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a50      	ldr	r2, [pc, #320]	; (8001c08 <HAL_DCMI_MspInit+0x160>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	f040 809a 	bne.w	8001c00 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001acc:	4b4f      	ldr	r3, [pc, #316]	; (8001c0c <HAL_DCMI_MspInit+0x164>)
 8001ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad0:	4a4e      	ldr	r2, [pc, #312]	; (8001c0c <HAL_DCMI_MspInit+0x164>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6353      	str	r3, [r2, #52]	; 0x34
 8001ad8:	4b4c      	ldr	r3, [pc, #304]	; (8001c0c <HAL_DCMI_MspInit+0x164>)
 8001ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	623b      	str	r3, [r7, #32]
 8001ae2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ae4:	4b49      	ldr	r3, [pc, #292]	; (8001c0c <HAL_DCMI_MspInit+0x164>)
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	4a48      	ldr	r2, [pc, #288]	; (8001c0c <HAL_DCMI_MspInit+0x164>)
 8001aea:	f043 0310 	orr.w	r3, r3, #16
 8001aee:	6313      	str	r3, [r2, #48]	; 0x30
 8001af0:	4b46      	ldr	r3, [pc, #280]	; (8001c0c <HAL_DCMI_MspInit+0x164>)
 8001af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	61fb      	str	r3, [r7, #28]
 8001afa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afc:	4b43      	ldr	r3, [pc, #268]	; (8001c0c <HAL_DCMI_MspInit+0x164>)
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	4a42      	ldr	r2, [pc, #264]	; (8001c0c <HAL_DCMI_MspInit+0x164>)
 8001b02:	f043 0308 	orr.w	r3, r3, #8
 8001b06:	6313      	str	r3, [r2, #48]	; 0x30
 8001b08:	4b40      	ldr	r3, [pc, #256]	; (8001c0c <HAL_DCMI_MspInit+0x164>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	61bb      	str	r3, [r7, #24]
 8001b12:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b14:	4b3d      	ldr	r3, [pc, #244]	; (8001c0c <HAL_DCMI_MspInit+0x164>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	4a3c      	ldr	r2, [pc, #240]	; (8001c0c <HAL_DCMI_MspInit+0x164>)
 8001b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b20:	4b3a      	ldr	r3, [pc, #232]	; (8001c0c <HAL_DCMI_MspInit+0x164>)
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b2c:	4b37      	ldr	r3, [pc, #220]	; (8001c0c <HAL_DCMI_MspInit+0x164>)
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b30:	4a36      	ldr	r2, [pc, #216]	; (8001c0c <HAL_DCMI_MspInit+0x164>)
 8001b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b36:	6313      	str	r3, [r2, #48]	; 0x30
 8001b38:	4b34      	ldr	r3, [pc, #208]	; (8001c0c <HAL_DCMI_MspInit+0x164>)
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b44:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <HAL_DCMI_MspInit+0x164>)
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	4a30      	ldr	r2, [pc, #192]	; (8001c0c <HAL_DCMI_MspInit+0x164>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b50:	4b2e      	ldr	r3, [pc, #184]	; (8001c0c <HAL_DCMI_MspInit+0x164>)
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001b5c:	2360      	movs	r3, #96	; 0x60
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b6c:	230d      	movs	r3, #13
 8001b6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b74:	4619      	mov	r1, r3
 8001b76:	4826      	ldr	r0, [pc, #152]	; (8001c10 <HAL_DCMI_MspInit+0x168>)
 8001b78:	f001 ff66 	bl	8003a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001b7c:	2308      	movs	r3, #8
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b8c:	230d      	movs	r3, #13
 8001b8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b94:	4619      	mov	r1, r3
 8001b96:	481f      	ldr	r0, [pc, #124]	; (8001c14 <HAL_DCMI_MspInit+0x16c>)
 8001b98:	f001 ff56 	bl	8003a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001bae:	230d      	movs	r3, #13
 8001bb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4817      	ldr	r0, [pc, #92]	; (8001c18 <HAL_DCMI_MspInit+0x170>)
 8001bba:	f001 ff45 	bl	8003a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001bbe:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001bd0:	230d      	movs	r3, #13
 8001bd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4810      	ldr	r0, [pc, #64]	; (8001c1c <HAL_DCMI_MspInit+0x174>)
 8001bdc:	f001 ff34 	bl	8003a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001be0:	2350      	movs	r3, #80	; 0x50
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be4:	2302      	movs	r3, #2
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bec:	2300      	movs	r3, #0
 8001bee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001bf0:	230d      	movs	r3, #13
 8001bf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4809      	ldr	r0, [pc, #36]	; (8001c20 <HAL_DCMI_MspInit+0x178>)
 8001bfc:	f001 ff24 	bl	8003a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001c00:	bf00      	nop
 8001c02:	3738      	adds	r7, #56	; 0x38
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	50050000 	.word	0x50050000
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40020c00 	.word	0x40020c00
 8001c18:	40021800 	.word	0x40021800
 8001c1c:	40021c00 	.word	0x40021c00
 8001c20:	40020000 	.word	0x40020000

08001c24 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0d      	ldr	r2, [pc, #52]	; (8001c68 <HAL_DMA2D_MspInit+0x44>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d113      	bne.n	8001c5e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <HAL_DMA2D_MspInit+0x48>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	4a0c      	ldr	r2, [pc, #48]	; (8001c6c <HAL_DMA2D_MspInit+0x48>)
 8001c3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <HAL_DMA2D_MspInit+0x48>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2100      	movs	r1, #0
 8001c52:	205a      	movs	r0, #90	; 0x5a
 8001c54:	f001 fb7e 	bl	8003354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001c58:	205a      	movs	r0, #90	; 0x5a
 8001c5a:	f001 fb97 	bl	800338c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	4002b000 	.word	0x4002b000
 8001c6c:	40023800 	.word	0x40023800

08001c70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b0aa      	sub	sp, #168	; 0xa8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c88:	f107 0310 	add.w	r3, r7, #16
 8001c8c:	2284      	movs	r2, #132	; 0x84
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4618      	mov	r0, r3
 8001c92:	f006 fed7 	bl	8008a44 <memset>
  if(hi2c->Instance==I2C3)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a22      	ldr	r2, [pc, #136]	; (8001d24 <HAL_I2C_MspInit+0xb4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d13c      	bne.n	8001d1a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001ca0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ca4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001caa:	f107 0310 	add.w	r3, r7, #16
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f003 fa3e 	bl	8005130 <HAL_RCCEx_PeriphCLKConfig>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001cba:	f7ff fe49 	bl	8001950 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cbe:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <HAL_I2C_MspInit+0xb8>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a19      	ldr	r2, [pc, #100]	; (8001d28 <HAL_I2C_MspInit+0xb8>)
 8001cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <HAL_I2C_MspInit+0xb8>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001cd6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001cda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cde:	2312      	movs	r3, #18
 8001ce0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cea:	2303      	movs	r3, #3
 8001cec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cf0:	2304      	movs	r3, #4
 8001cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cf6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480b      	ldr	r0, [pc, #44]	; (8001d2c <HAL_I2C_MspInit+0xbc>)
 8001cfe:	f001 fea3 	bl	8003a48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_I2C_MspInit+0xb8>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	4a08      	ldr	r2, [pc, #32]	; (8001d28 <HAL_I2C_MspInit+0xb8>)
 8001d08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_I2C_MspInit+0xb8>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001d1a:	bf00      	nop
 8001d1c:	37a8      	adds	r7, #168	; 0xa8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40005c00 	.word	0x40005c00
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40021c00 	.word	0x40021c00

08001d30 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08e      	sub	sp, #56	; 0x38
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a55      	ldr	r2, [pc, #340]	; (8001ea4 <HAL_LTDC_MspInit+0x174>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	f040 80a3 	bne.w	8001e9a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001d54:	4b54      	ldr	r3, [pc, #336]	; (8001ea8 <HAL_LTDC_MspInit+0x178>)
 8001d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d58:	4a53      	ldr	r2, [pc, #332]	; (8001ea8 <HAL_LTDC_MspInit+0x178>)
 8001d5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d5e:	6453      	str	r3, [r2, #68]	; 0x44
 8001d60:	4b51      	ldr	r3, [pc, #324]	; (8001ea8 <HAL_LTDC_MspInit+0x178>)
 8001d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d68:	623b      	str	r3, [r7, #32]
 8001d6a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d6c:	4b4e      	ldr	r3, [pc, #312]	; (8001ea8 <HAL_LTDC_MspInit+0x178>)
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	4a4d      	ldr	r2, [pc, #308]	; (8001ea8 <HAL_LTDC_MspInit+0x178>)
 8001d72:	f043 0310 	orr.w	r3, r3, #16
 8001d76:	6313      	str	r3, [r2, #48]	; 0x30
 8001d78:	4b4b      	ldr	r3, [pc, #300]	; (8001ea8 <HAL_LTDC_MspInit+0x178>)
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001d84:	4b48      	ldr	r3, [pc, #288]	; (8001ea8 <HAL_LTDC_MspInit+0x178>)
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	4a47      	ldr	r2, [pc, #284]	; (8001ea8 <HAL_LTDC_MspInit+0x178>)
 8001d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d90:	4b45      	ldr	r3, [pc, #276]	; (8001ea8 <HAL_LTDC_MspInit+0x178>)
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d98:	61bb      	str	r3, [r7, #24]
 8001d9a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001d9c:	4b42      	ldr	r3, [pc, #264]	; (8001ea8 <HAL_LTDC_MspInit+0x178>)
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	4a41      	ldr	r2, [pc, #260]	; (8001ea8 <HAL_LTDC_MspInit+0x178>)
 8001da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001da6:	6313      	str	r3, [r2, #48]	; 0x30
 8001da8:	4b3f      	ldr	r3, [pc, #252]	; (8001ea8 <HAL_LTDC_MspInit+0x178>)
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001db4:	4b3c      	ldr	r3, [pc, #240]	; (8001ea8 <HAL_LTDC_MspInit+0x178>)
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	4a3b      	ldr	r2, [pc, #236]	; (8001ea8 <HAL_LTDC_MspInit+0x178>)
 8001dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc0:	4b39      	ldr	r3, [pc, #228]	; (8001ea8 <HAL_LTDC_MspInit+0x178>)
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001dcc:	4b36      	ldr	r3, [pc, #216]	; (8001ea8 <HAL_LTDC_MspInit+0x178>)
 8001dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd0:	4a35      	ldr	r2, [pc, #212]	; (8001ea8 <HAL_LTDC_MspInit+0x178>)
 8001dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd8:	4b33      	ldr	r3, [pc, #204]	; (8001ea8 <HAL_LTDC_MspInit+0x178>)
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001de4:	2310      	movs	r3, #16
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001df4:	230e      	movs	r3, #14
 8001df6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	482b      	ldr	r0, [pc, #172]	; (8001eac <HAL_LTDC_MspInit+0x17c>)
 8001e00:	f001 fe22 	bl	8003a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001e04:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e16:	230e      	movs	r3, #14
 8001e18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4823      	ldr	r0, [pc, #140]	; (8001eb0 <HAL_LTDC_MspInit+0x180>)
 8001e22:	f001 fe11 	bl	8003a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001e26:	23f7      	movs	r3, #247	; 0xf7
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	2300      	movs	r3, #0
 8001e34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e36:	230e      	movs	r3, #14
 8001e38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3e:	4619      	mov	r1, r3
 8001e40:	481c      	ldr	r0, [pc, #112]	; (8001eb4 <HAL_LTDC_MspInit+0x184>)
 8001e42:	f001 fe01 	bl	8003a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e58:	2309      	movs	r3, #9
 8001e5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e60:	4619      	mov	r1, r3
 8001e62:	4815      	ldr	r0, [pc, #84]	; (8001eb8 <HAL_LTDC_MspInit+0x188>)
 8001e64:	f001 fdf0 	bl	8003a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001e68:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e76:	2300      	movs	r3, #0
 8001e78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e7a:	230e      	movs	r3, #14
 8001e7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e82:	4619      	mov	r1, r3
 8001e84:	480d      	ldr	r0, [pc, #52]	; (8001ebc <HAL_LTDC_MspInit+0x18c>)
 8001e86:	f001 fddf 	bl	8003a48 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	2058      	movs	r0, #88	; 0x58
 8001e90:	f001 fa60 	bl	8003354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001e94:	2058      	movs	r0, #88	; 0x58
 8001e96:	f001 fa79 	bl	800338c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001e9a:	bf00      	nop
 8001e9c:	3738      	adds	r7, #56	; 0x38
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40016800 	.word	0x40016800
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40022400 	.word	0x40022400
 8001eb4:	40022800 	.word	0x40022800
 8001eb8:	40021800 	.word	0x40021800
 8001ebc:	40022000 	.word	0x40022000

08001ec0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b0a4      	sub	sp, #144	; 0x90
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ec8:	f107 030c 	add.w	r3, r7, #12
 8001ecc:	2284      	movs	r2, #132	; 0x84
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f006 fdb7 	bl	8008a44 <memset>
  if(hrtc->Instance==RTC)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <HAL_RTC_MspInit+0x54>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d114      	bne.n	8001f0a <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ee0:	2320      	movs	r3, #32
 8001ee2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ee4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eea:	f107 030c 	add.w	r3, r7, #12
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f003 f91e 	bl	8005130 <HAL_RCCEx_PeriphCLKConfig>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001efa:	f7ff fd29 	bl	8001950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_RTC_MspInit+0x58>)
 8001f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f02:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <HAL_RTC_MspInit+0x58>)
 8001f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f08:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f0a:	bf00      	nop
 8001f0c:	3790      	adds	r7, #144	; 0x90
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40002800 	.word	0x40002800
 8001f18:	40023800 	.word	0x40023800

08001f1c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b0aa      	sub	sp, #168	; 0xa8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f34:	f107 0310 	add.w	r3, r7, #16
 8001f38:	2284      	movs	r2, #132	; 0x84
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f006 fd81 	bl	8008a44 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8001f4a:	d143      	bne.n	8001fd4 <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8001f4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f50:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001f52:	2364      	movs	r3, #100	; 0x64
 8001f54:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001f56:	2302      	movs	r3, #2
 8001f58:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001f62:	2301      	movs	r3, #1
 8001f64:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f66:	f107 0310 	add.w	r3, r7, #16
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f003 f8e0 	bl	8005130 <HAL_RCCEx_PeriphCLKConfig>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8001f76:	f7ff fceb 	bl	8001950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <HAL_SPDIFRX_MspInit+0xc0>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	4a17      	ldr	r2, [pc, #92]	; (8001fdc <HAL_SPDIFRX_MspInit+0xc0>)
 8001f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f84:	6413      	str	r3, [r2, #64]	; 0x40
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <HAL_SPDIFRX_MspInit+0xc0>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f92:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_SPDIFRX_MspInit+0xc0>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a11      	ldr	r2, [pc, #68]	; (8001fdc <HAL_SPDIFRX_MspInit+0xc0>)
 8001f98:	f043 0308 	orr.w	r3, r3, #8
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <HAL_SPDIFRX_MspInit+0xc0>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001fc2:	2308      	movs	r3, #8
 8001fc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001fc8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4804      	ldr	r0, [pc, #16]	; (8001fe0 <HAL_SPDIFRX_MspInit+0xc4>)
 8001fd0:	f001 fd3a 	bl	8003a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8001fd4:	bf00      	nop
 8001fd6:	37a8      	adds	r7, #168	; 0xa8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40020c00 	.word	0x40020c00

08001fe4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a25      	ldr	r2, [pc, #148]	; (8002098 <HAL_SPI_MspInit+0xb4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d144      	bne.n	8002090 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002006:	4b25      	ldr	r3, [pc, #148]	; (800209c <HAL_SPI_MspInit+0xb8>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	4a24      	ldr	r2, [pc, #144]	; (800209c <HAL_SPI_MspInit+0xb8>)
 800200c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002010:	6413      	str	r3, [r2, #64]	; 0x40
 8002012:	4b22      	ldr	r3, [pc, #136]	; (800209c <HAL_SPI_MspInit+0xb8>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800201e:	4b1f      	ldr	r3, [pc, #124]	; (800209c <HAL_SPI_MspInit+0xb8>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a1e      	ldr	r2, [pc, #120]	; (800209c <HAL_SPI_MspInit+0xb8>)
 8002024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b1c      	ldr	r3, [pc, #112]	; (800209c <HAL_SPI_MspInit+0xb8>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002036:	4b19      	ldr	r3, [pc, #100]	; (800209c <HAL_SPI_MspInit+0xb8>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a18      	ldr	r2, [pc, #96]	; (800209c <HAL_SPI_MspInit+0xb8>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b16      	ldr	r3, [pc, #88]	; (800209c <HAL_SPI_MspInit+0xb8>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800204e:	2302      	movs	r3, #2
 8002050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205a:	2300      	movs	r3, #0
 800205c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800205e:	2305      	movs	r3, #5
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002062:	f107 0314 	add.w	r3, r7, #20
 8002066:	4619      	mov	r1, r3
 8002068:	480d      	ldr	r0, [pc, #52]	; (80020a0 <HAL_SPI_MspInit+0xbc>)
 800206a:	f001 fced 	bl	8003a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800206e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002080:	2305      	movs	r3, #5
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	4619      	mov	r1, r3
 800208a:	4806      	ldr	r0, [pc, #24]	; (80020a4 <HAL_SPI_MspInit+0xc0>)
 800208c:	f001 fcdc 	bl	8003a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002090:	bf00      	nop
 8002092:	3728      	adds	r7, #40	; 0x28
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40003800 	.word	0x40003800
 800209c:	40023800 	.word	0x40023800
 80020a0:	40022000 	.word	0x40022000
 80020a4:	40020400 	.word	0x40020400

080020a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b089      	sub	sp, #36	; 0x24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a2e      	ldr	r2, [pc, #184]	; (8002170 <HAL_TIM_Base_MspInit+0xc8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d10c      	bne.n	80020d4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ba:	4b2e      	ldr	r3, [pc, #184]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	4a2d      	ldr	r2, [pc, #180]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6453      	str	r3, [r2, #68]	; 0x44
 80020c6:	4b2b      	ldr	r3, [pc, #172]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	61fb      	str	r3, [r7, #28]
 80020d0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80020d2:	e046      	b.n	8002162 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020dc:	d10c      	bne.n	80020f8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020de:	4b25      	ldr	r3, [pc, #148]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	4a24      	ldr	r2, [pc, #144]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ea:	4b22      	ldr	r3, [pc, #136]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	61bb      	str	r3, [r7, #24]
 80020f4:	69bb      	ldr	r3, [r7, #24]
}
 80020f6:	e034      	b.n	8002162 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1e      	ldr	r2, [pc, #120]	; (8002178 <HAL_TIM_Base_MspInit+0xd0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d10c      	bne.n	800211c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002102:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	4a1b      	ldr	r2, [pc, #108]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	6413      	str	r3, [r2, #64]	; 0x40
 800210e:	4b19      	ldr	r3, [pc, #100]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	697b      	ldr	r3, [r7, #20]
}
 800211a:	e022      	b.n	8002162 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a16      	ldr	r2, [pc, #88]	; (800217c <HAL_TIM_Base_MspInit+0xd4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d10c      	bne.n	8002140 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	4a12      	ldr	r2, [pc, #72]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 800212c:	f043 0308 	orr.w	r3, r3, #8
 8002130:	6413      	str	r3, [r2, #64]	; 0x40
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]
}
 800213e:	e010      	b.n	8002162 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0e      	ldr	r2, [pc, #56]	; (8002180 <HAL_TIM_Base_MspInit+0xd8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d10b      	bne.n	8002162 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	4a09      	ldr	r2, [pc, #36]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 8002150:	f043 0302 	orr.w	r3, r3, #2
 8002154:	6453      	str	r3, [r2, #68]	; 0x44
 8002156:	4b07      	ldr	r3, [pc, #28]	; (8002174 <HAL_TIM_Base_MspInit+0xcc>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
}
 8002162:	bf00      	nop
 8002164:	3724      	adds	r7, #36	; 0x24
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40010000 	.word	0x40010000
 8002174:	40023800 	.word	0x40023800
 8002178:	40000400 	.word	0x40000400
 800217c:	40000c00 	.word	0x40000c00
 8002180:	40010400 	.word	0x40010400

08002184 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <HAL_TIM_PWM_MspInit+0x38>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d10b      	bne.n	80021ae <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a09      	ldr	r2, [pc, #36]	; (80021c0 <HAL_TIM_PWM_MspInit+0x3c>)
 800219c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <HAL_TIM_PWM_MspInit+0x3c>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40001800 	.word	0x40001800
 80021c0:	40023800 	.word	0x40023800

080021c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08c      	sub	sp, #48	; 0x30
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 031c 	add.w	r3, r7, #28
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a56      	ldr	r2, [pc, #344]	; (800233c <HAL_TIM_MspPostInit+0x178>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d11d      	bne.n	8002222 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e6:	4b56      	ldr	r3, [pc, #344]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4a55      	ldr	r2, [pc, #340]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6313      	str	r3, [r2, #48]	; 0x30
 80021f2:	4b53      	ldr	r3, [pc, #332]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	61bb      	str	r3, [r7, #24]
 80021fc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80021fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002204:	2302      	movs	r3, #2
 8002206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002210:	2301      	movs	r3, #1
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002214:	f107 031c 	add.w	r3, r7, #28
 8002218:	4619      	mov	r1, r3
 800221a:	484a      	ldr	r0, [pc, #296]	; (8002344 <HAL_TIM_MspPostInit+0x180>)
 800221c:	f001 fc14 	bl	8003a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002220:	e087      	b.n	8002332 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800222a:	d11d      	bne.n	8002268 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222c:	4b44      	ldr	r3, [pc, #272]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	4a43      	ldr	r2, [pc, #268]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6313      	str	r3, [r2, #48]	; 0x30
 8002238:	4b41      	ldr	r3, [pc, #260]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002252:	2300      	movs	r3, #0
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002256:	2301      	movs	r3, #1
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800225a:	f107 031c 	add.w	r3, r7, #28
 800225e:	4619      	mov	r1, r3
 8002260:	4838      	ldr	r0, [pc, #224]	; (8002344 <HAL_TIM_MspPostInit+0x180>)
 8002262:	f001 fbf1 	bl	8003a48 <HAL_GPIO_Init>
}
 8002266:	e064      	b.n	8002332 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a36      	ldr	r2, [pc, #216]	; (8002348 <HAL_TIM_MspPostInit+0x184>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d11c      	bne.n	80022ac <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002272:	4b33      	ldr	r3, [pc, #204]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4a32      	ldr	r2, [pc, #200]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 8002278:	f043 0302 	orr.w	r3, r3, #2
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4b30      	ldr	r3, [pc, #192]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800228a:	2310      	movs	r3, #16
 800228c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228e:	2302      	movs	r3, #2
 8002290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002296:	2300      	movs	r3, #0
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800229a:	2302      	movs	r3, #2
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800229e:	f107 031c 	add.w	r3, r7, #28
 80022a2:	4619      	mov	r1, r3
 80022a4:	4829      	ldr	r0, [pc, #164]	; (800234c <HAL_TIM_MspPostInit+0x188>)
 80022a6:	f001 fbcf 	bl	8003a48 <HAL_GPIO_Init>
}
 80022aa:	e042      	b.n	8002332 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a27      	ldr	r2, [pc, #156]	; (8002350 <HAL_TIM_MspPostInit+0x18c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d11c      	bne.n	80022f0 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80022b6:	4b22      	ldr	r3, [pc, #136]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a21      	ldr	r2, [pc, #132]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 80022bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80022ce:	2301      	movs	r3, #1
 80022d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022da:	2300      	movs	r3, #0
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80022de:	2302      	movs	r3, #2
 80022e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80022e2:	f107 031c 	add.w	r3, r7, #28
 80022e6:	4619      	mov	r1, r3
 80022e8:	481a      	ldr	r0, [pc, #104]	; (8002354 <HAL_TIM_MspPostInit+0x190>)
 80022ea:	f001 fbad 	bl	8003a48 <HAL_GPIO_Init>
}
 80022ee:	e020      	b.n	8002332 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a18      	ldr	r2, [pc, #96]	; (8002358 <HAL_TIM_MspPostInit+0x194>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d11b      	bne.n	8002332 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a10      	ldr	r2, [pc, #64]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 8002300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <HAL_TIM_MspPostInit+0x17c>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002312:	2340      	movs	r3, #64	; 0x40
 8002314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002322:	2309      	movs	r3, #9
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002326:	f107 031c 	add.w	r3, r7, #28
 800232a:	4619      	mov	r1, r3
 800232c:	480b      	ldr	r0, [pc, #44]	; (800235c <HAL_TIM_MspPostInit+0x198>)
 800232e:	f001 fb8b 	bl	8003a48 <HAL_GPIO_Init>
}
 8002332:	bf00      	nop
 8002334:	3730      	adds	r7, #48	; 0x30
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40010000 	.word	0x40010000
 8002340:	40023800 	.word	0x40023800
 8002344:	40020000 	.word	0x40020000
 8002348:	40000400 	.word	0x40000400
 800234c:	40020400 	.word	0x40020400
 8002350:	40000c00 	.word	0x40000c00
 8002354:	40022000 	.word	0x40022000
 8002358:	40001800 	.word	0x40001800
 800235c:	40021c00 	.word	0x40021c00

08002360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b0ac      	sub	sp, #176	; 0xb0
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002378:	f107 0318 	add.w	r3, r7, #24
 800237c:	2284      	movs	r2, #132	; 0x84
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f006 fb5f 	bl	8008a44 <memset>
  if(huart->Instance==USART1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a32      	ldr	r2, [pc, #200]	; (8002454 <HAL_UART_MspInit+0xf4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d15c      	bne.n	800244a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002390:	2340      	movs	r3, #64	; 0x40
 8002392:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002394:	2300      	movs	r3, #0
 8002396:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002398:	f107 0318 	add.w	r3, r7, #24
 800239c:	4618      	mov	r0, r3
 800239e:	f002 fec7 	bl	8005130 <HAL_RCCEx_PeriphCLKConfig>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023a8:	f7ff fad2 	bl	8001950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ac:	4b2a      	ldr	r3, [pc, #168]	; (8002458 <HAL_UART_MspInit+0xf8>)
 80023ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b0:	4a29      	ldr	r2, [pc, #164]	; (8002458 <HAL_UART_MspInit+0xf8>)
 80023b2:	f043 0310 	orr.w	r3, r3, #16
 80023b6:	6453      	str	r3, [r2, #68]	; 0x44
 80023b8:	4b27      	ldr	r3, [pc, #156]	; (8002458 <HAL_UART_MspInit+0xf8>)
 80023ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023bc:	f003 0310 	and.w	r3, r3, #16
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c4:	4b24      	ldr	r3, [pc, #144]	; (8002458 <HAL_UART_MspInit+0xf8>)
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	4a23      	ldr	r2, [pc, #140]	; (8002458 <HAL_UART_MspInit+0xf8>)
 80023ca:	f043 0302 	orr.w	r3, r3, #2
 80023ce:	6313      	str	r3, [r2, #48]	; 0x30
 80023d0:	4b21      	ldr	r3, [pc, #132]	; (8002458 <HAL_UART_MspInit+0xf8>)
 80023d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023dc:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <HAL_UART_MspInit+0xf8>)
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	4a1d      	ldr	r2, [pc, #116]	; (8002458 <HAL_UART_MspInit+0xf8>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6313      	str	r3, [r2, #48]	; 0x30
 80023e8:	4b1b      	ldr	r3, [pc, #108]	; (8002458 <HAL_UART_MspInit+0xf8>)
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fa:	2302      	movs	r3, #2
 80023fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002406:	2300      	movs	r3, #0
 8002408:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800240c:	2307      	movs	r3, #7
 800240e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002412:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002416:	4619      	mov	r1, r3
 8002418:	4810      	ldr	r0, [pc, #64]	; (800245c <HAL_UART_MspInit+0xfc>)
 800241a:	f001 fb15 	bl	8003a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800241e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002422:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002426:	2302      	movs	r3, #2
 8002428:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	2300      	movs	r3, #0
 8002434:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002438:	2307      	movs	r3, #7
 800243a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800243e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002442:	4619      	mov	r1, r3
 8002444:	4806      	ldr	r0, [pc, #24]	; (8002460 <HAL_UART_MspInit+0x100>)
 8002446:	f001 faff 	bl	8003a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800244a:	bf00      	nop
 800244c:	37b0      	adds	r7, #176	; 0xb0
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40011000 	.word	0x40011000
 8002458:	40023800 	.word	0x40023800
 800245c:	40020400 	.word	0x40020400
 8002460:	40020000 	.word	0x40020000

08002464 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002478:	4b3a      	ldr	r3, [pc, #232]	; (8002564 <HAL_FMC_MspInit+0x100>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d16d      	bne.n	800255c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002480:	4b38      	ldr	r3, [pc, #224]	; (8002564 <HAL_FMC_MspInit+0x100>)
 8002482:	2201      	movs	r2, #1
 8002484:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002486:	4b38      	ldr	r3, [pc, #224]	; (8002568 <HAL_FMC_MspInit+0x104>)
 8002488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248a:	4a37      	ldr	r2, [pc, #220]	; (8002568 <HAL_FMC_MspInit+0x104>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6393      	str	r3, [r2, #56]	; 0x38
 8002492:	4b35      	ldr	r3, [pc, #212]	; (8002568 <HAL_FMC_MspInit+0x104>)
 8002494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	603b      	str	r3, [r7, #0]
 800249c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800249e:	f64f 7383 	movw	r3, #65411	; 0xff83
 80024a2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a4:	2302      	movs	r3, #2
 80024a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ac:	2303      	movs	r3, #3
 80024ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024b0:	230c      	movs	r3, #12
 80024b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	4619      	mov	r1, r3
 80024b8:	482c      	ldr	r0, [pc, #176]	; (800256c <HAL_FMC_MspInit+0x108>)
 80024ba:	f001 fac5 	bl	8003a48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80024be:	f248 1333 	movw	r3, #33075	; 0x8133
 80024c2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c4:	2302      	movs	r3, #2
 80024c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024cc:	2303      	movs	r3, #3
 80024ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024d0:	230c      	movs	r3, #12
 80024d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	4619      	mov	r1, r3
 80024d8:	4825      	ldr	r0, [pc, #148]	; (8002570 <HAL_FMC_MspInit+0x10c>)
 80024da:	f001 fab5 	bl	8003a48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80024de:	f24c 7303 	movw	r3, #50947	; 0xc703
 80024e2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	2302      	movs	r3, #2
 80024e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ec:	2303      	movs	r3, #3
 80024ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024f0:	230c      	movs	r3, #12
 80024f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	4619      	mov	r1, r3
 80024f8:	481e      	ldr	r0, [pc, #120]	; (8002574 <HAL_FMC_MspInit+0x110>)
 80024fa:	f001 faa5 	bl	8003a48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80024fe:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002502:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	2302      	movs	r3, #2
 8002506:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250c:	2303      	movs	r3, #3
 800250e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002510:	230c      	movs	r3, #12
 8002512:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	4619      	mov	r1, r3
 8002518:	4817      	ldr	r0, [pc, #92]	; (8002578 <HAL_FMC_MspInit+0x114>)
 800251a:	f001 fa95 	bl	8003a48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800251e:	2328      	movs	r3, #40	; 0x28
 8002520:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002522:	2302      	movs	r3, #2
 8002524:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252a:	2303      	movs	r3, #3
 800252c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800252e:	230c      	movs	r3, #12
 8002530:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002532:	1d3b      	adds	r3, r7, #4
 8002534:	4619      	mov	r1, r3
 8002536:	4811      	ldr	r0, [pc, #68]	; (800257c <HAL_FMC_MspInit+0x118>)
 8002538:	f001 fa86 	bl	8003a48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800253c:	2308      	movs	r3, #8
 800253e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002540:	2302      	movs	r3, #2
 8002542:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002548:	2303      	movs	r3, #3
 800254a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800254c:	230c      	movs	r3, #12
 800254e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002550:	1d3b      	adds	r3, r7, #4
 8002552:	4619      	mov	r1, r3
 8002554:	480a      	ldr	r0, [pc, #40]	; (8002580 <HAL_FMC_MspInit+0x11c>)
 8002556:	f001 fa77 	bl	8003a48 <HAL_GPIO_Init>
 800255a:	e000      	b.n	800255e <HAL_FMC_MspInit+0xfa>
    return;
 800255c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000670 	.word	0x20000670
 8002568:	40023800 	.word	0x40023800
 800256c:	40021000 	.word	0x40021000
 8002570:	40021800 	.word	0x40021800
 8002574:	40020c00 	.word	0x40020c00
 8002578:	40021400 	.word	0x40021400
 800257c:	40021c00 	.word	0x40021c00
 8002580:	40020800 	.word	0x40020800

08002584 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800258c:	f7ff ff6a 	bl	8002464 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08a      	sub	sp, #40	; 0x28
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a2b      	ldr	r2, [pc, #172]	; (8002654 <HAL_SAI_MspInit+0xbc>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d124      	bne.n	80025f4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80025aa:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <HAL_SAI_MspInit+0xc0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10b      	bne.n	80025ca <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80025b2:	4b2a      	ldr	r3, [pc, #168]	; (800265c <HAL_SAI_MspInit+0xc4>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	4a29      	ldr	r2, [pc, #164]	; (800265c <HAL_SAI_MspInit+0xc4>)
 80025b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025bc:	6453      	str	r3, [r2, #68]	; 0x44
 80025be:	4b27      	ldr	r3, [pc, #156]	; (800265c <HAL_SAI_MspInit+0xc4>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80025ca:	4b23      	ldr	r3, [pc, #140]	; (8002658 <HAL_SAI_MspInit+0xc0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	3301      	adds	r3, #1
 80025d0:	4a21      	ldr	r2, [pc, #132]	; (8002658 <HAL_SAI_MspInit+0xc0>)
 80025d2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80025d4:	23f0      	movs	r3, #240	; 0xf0
 80025d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d8:	2302      	movs	r3, #2
 80025da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e0:	2300      	movs	r3, #0
 80025e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80025e4:	230a      	movs	r3, #10
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	4619      	mov	r1, r3
 80025ee:	481c      	ldr	r0, [pc, #112]	; (8002660 <HAL_SAI_MspInit+0xc8>)
 80025f0:	f001 fa2a 	bl	8003a48 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a1a      	ldr	r2, [pc, #104]	; (8002664 <HAL_SAI_MspInit+0xcc>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d125      	bne.n	800264a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80025fe:	4b16      	ldr	r3, [pc, #88]	; (8002658 <HAL_SAI_MspInit+0xc0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10b      	bne.n	800261e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002606:	4b15      	ldr	r3, [pc, #84]	; (800265c <HAL_SAI_MspInit+0xc4>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	4a14      	ldr	r2, [pc, #80]	; (800265c <HAL_SAI_MspInit+0xc4>)
 800260c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002610:	6453      	str	r3, [r2, #68]	; 0x44
 8002612:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_SAI_MspInit+0xc4>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800261e:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <HAL_SAI_MspInit+0xc0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	3301      	adds	r3, #1
 8002624:	4a0c      	ldr	r2, [pc, #48]	; (8002658 <HAL_SAI_MspInit+0xc0>)
 8002626:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800262c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262e:	2302      	movs	r3, #2
 8002630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002636:	2300      	movs	r3, #0
 8002638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800263a:	230a      	movs	r3, #10
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800263e:	f107 0314 	add.w	r3, r7, #20
 8002642:	4619      	mov	r1, r3
 8002644:	4808      	ldr	r0, [pc, #32]	; (8002668 <HAL_SAI_MspInit+0xd0>)
 8002646:	f001 f9ff 	bl	8003a48 <HAL_GPIO_Init>

    }
}
 800264a:	bf00      	nop
 800264c:	3728      	adds	r7, #40	; 0x28
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40015c04 	.word	0x40015c04
 8002658:	20000674 	.word	0x20000674
 800265c:	40023800 	.word	0x40023800
 8002660:	40022000 	.word	0x40022000
 8002664:	40015c24 	.word	0x40015c24
 8002668:	40021800 	.word	0x40021800

0800266c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08c      	sub	sp, #48	; 0x30
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800267c:	2200      	movs	r2, #0
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	2036      	movs	r0, #54	; 0x36
 8002682:	f000 fe67 	bl	8003354 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002686:	2036      	movs	r0, #54	; 0x36
 8002688:	f000 fe80 	bl	800338c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800268c:	4b1f      	ldr	r3, [pc, #124]	; (800270c <HAL_InitTick+0xa0>)
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	4a1e      	ldr	r2, [pc, #120]	; (800270c <HAL_InitTick+0xa0>)
 8002692:	f043 0310 	orr.w	r3, r3, #16
 8002696:	6413      	str	r3, [r2, #64]	; 0x40
 8002698:	4b1c      	ldr	r3, [pc, #112]	; (800270c <HAL_InitTick+0xa0>)
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026a4:	f107 0210 	add.w	r2, r7, #16
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	4611      	mov	r1, r2
 80026ae:	4618      	mov	r0, r3
 80026b0:	f002 fd0c 	bl	80050cc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80026b4:	f002 fce2 	bl	800507c <HAL_RCC_GetPCLK1Freq>
 80026b8:	4603      	mov	r3, r0
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c0:	4a13      	ldr	r2, [pc, #76]	; (8002710 <HAL_InitTick+0xa4>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	0c9b      	lsrs	r3, r3, #18
 80026c8:	3b01      	subs	r3, #1
 80026ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80026cc:	4b11      	ldr	r3, [pc, #68]	; (8002714 <HAL_InitTick+0xa8>)
 80026ce:	4a12      	ldr	r2, [pc, #72]	; (8002718 <HAL_InitTick+0xac>)
 80026d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <HAL_InitTick+0xa8>)
 80026d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026d8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80026da:	4a0e      	ldr	r2, [pc, #56]	; (8002714 <HAL_InitTick+0xa8>)
 80026dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026de:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <HAL_InitTick+0xa8>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e6:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_InitTick+0xa8>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80026ec:	4809      	ldr	r0, [pc, #36]	; (8002714 <HAL_InitTick+0xa8>)
 80026ee:	f004 f91c 	bl	800692a <HAL_TIM_Base_Init>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d104      	bne.n	8002702 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80026f8:	4806      	ldr	r0, [pc, #24]	; (8002714 <HAL_InitTick+0xa8>)
 80026fa:	f004 f96d 	bl	80069d8 <HAL_TIM_Base_Start_IT>
 80026fe:	4603      	mov	r3, r0
 8002700:	e000      	b.n	8002704 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
}
 8002704:	4618      	mov	r0, r3
 8002706:	3730      	adds	r7, #48	; 0x30
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40023800 	.word	0x40023800
 8002710:	431bde83 	.word	0x431bde83
 8002714:	20000678 	.word	0x20000678
 8002718:	40001000 	.word	0x40001000

0800271c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002720:	e7fe      	b.n	8002720 <NMI_Handler+0x4>

08002722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002722:	b480      	push	{r7}
 8002724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002726:	e7fe      	b.n	8002726 <HardFault_Handler+0x4>

08002728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800272c:	e7fe      	b.n	800272c <MemManage_Handler+0x4>

0800272e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800272e:	b480      	push	{r7}
 8002730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002732:	e7fe      	b.n	8002732 <BusFault_Handler+0x4>

08002734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002738:	e7fe      	b.n	8002738 <UsageFault_Handler+0x4>

0800273a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800273a:	b480      	push	{r7}
 800273c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800273e:	bf00      	nop
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002778:	4802      	ldr	r0, [pc, #8]	; (8002784 <ADC_IRQHandler+0x10>)
 800277a:	f000 f9a7 	bl	8002acc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000028 	.word	0x20000028

08002788 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800278c:	4802      	ldr	r0, [pc, #8]	; (8002798 <TIM6_DAC_IRQHandler+0x10>)
 800278e:	f004 fb9c 	bl	8006eca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000678 	.word	0x20000678

0800279c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80027a0:	4802      	ldr	r0, [pc, #8]	; (80027ac <LTDC_IRQHandler+0x10>)
 80027a2:	f001 fd0f 	bl	80041c4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000170 	.word	0x20000170

080027b0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80027b4:	4802      	ldr	r0, [pc, #8]	; (80027c0 <DMA2D_IRQHandler+0x10>)
 80027b6:	f000 ffa5 	bl	8003704 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	200000e4 	.word	0x200000e4

080027c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <SystemInit+0x20>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ce:	4a05      	ldr	r2, [pc, #20]	; (80027e4 <SystemInit+0x20>)
 80027d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002820 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027ec:	480d      	ldr	r0, [pc, #52]	; (8002824 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027ee:	490e      	ldr	r1, [pc, #56]	; (8002828 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027f0:	4a0e      	ldr	r2, [pc, #56]	; (800282c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027f4:	e002      	b.n	80027fc <LoopCopyDataInit>

080027f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027fa:	3304      	adds	r3, #4

080027fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002800:	d3f9      	bcc.n	80027f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002802:	4a0b      	ldr	r2, [pc, #44]	; (8002830 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002804:	4c0b      	ldr	r4, [pc, #44]	; (8002834 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002808:	e001      	b.n	800280e <LoopFillZerobss>

0800280a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800280a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800280c:	3204      	adds	r2, #4

0800280e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800280e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002810:	d3fb      	bcc.n	800280a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002812:	f7ff ffd7 	bl	80027c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002816:	f006 f8f1 	bl	80089fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800281a:	f7fd fe85 	bl	8000528 <main>
  bx  lr    
 800281e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002820:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002828:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800282c:	08008a94 	.word	0x08008a94
  ldr r2, =_sbss
 8002830:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002834:	200006c8 	.word	0x200006c8

08002838 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002838:	e7fe      	b.n	8002838 <CAN1_RX0_IRQHandler>

0800283a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800283e:	2003      	movs	r0, #3
 8002840:	f000 fd7d 	bl	800333e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002844:	200f      	movs	r0, #15
 8002846:	f7ff ff11 	bl	800266c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800284a:	f7ff f887 	bl	800195c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_IncTick+0x20>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_IncTick+0x24>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4413      	add	r3, r2
 8002864:	4a04      	ldr	r2, [pc, #16]	; (8002878 <HAL_IncTick+0x24>)
 8002866:	6013      	str	r3, [r2, #0]
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	20000008 	.word	0x20000008
 8002878:	200006c4 	.word	0x200006c4

0800287c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return uwTick;
 8002880:	4b03      	ldr	r3, [pc, #12]	; (8002890 <HAL_GetTick+0x14>)
 8002882:	681b      	ldr	r3, [r3, #0]
}
 8002884:	4618      	mov	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	200006c4 	.word	0x200006c4

08002894 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e031      	b.n	800290e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff f876 	bl	80019a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f003 0310 	and.w	r3, r3, #16
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d116      	bne.n	8002900 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <HAL_ADC_Init+0x84>)
 80028d8:	4013      	ands	r3, r2
 80028da:	f043 0202 	orr.w	r2, r3, #2
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fb7a 	bl	8002fdc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f023 0303 	bic.w	r3, r3, #3
 80028f6:	f043 0201 	orr.w	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	641a      	str	r2, [r3, #64]	; 0x40
 80028fe:	e001      	b.n	8002904 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800290c:	7bfb      	ldrb	r3, [r7, #15]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	ffffeefd 	.word	0xffffeefd

0800291c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_ADC_Start_IT+0x1a>
 8002932:	2302      	movs	r3, #2
 8002934:	e0b5      	b.n	8002aa2 <HAL_ADC_Start_IT+0x186>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b01      	cmp	r3, #1
 800294a:	d018      	beq.n	800297e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800295c:	4b54      	ldr	r3, [pc, #336]	; (8002ab0 <HAL_ADC_Start_IT+0x194>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a54      	ldr	r2, [pc, #336]	; (8002ab4 <HAL_ADC_Start_IT+0x198>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	0c9a      	lsrs	r2, r3, #18
 8002968:	4613      	mov	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	4413      	add	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002970:	e002      	b.n	8002978 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	3b01      	subs	r3, #1
 8002976:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f9      	bne.n	8002972 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b01      	cmp	r3, #1
 800298a:	d17d      	bne.n	8002a88 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002990:	4b49      	ldr	r3, [pc, #292]	; (8002ab8 <HAL_ADC_Start_IT+0x19c>)
 8002992:	4013      	ands	r3, r2
 8002994:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d007      	beq.n	80029ba <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c6:	d106      	bne.n	80029d6 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029cc:	f023 0206 	bic.w	r2, r3, #6
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	645a      	str	r2, [r3, #68]	; 0x44
 80029d4:	e002      	b.n	80029dc <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80029ec:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6859      	ldr	r1, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4b30      	ldr	r3, [pc, #192]	; (8002abc <HAL_ADC_Start_IT+0x1a0>)
 80029fa:	430b      	orrs	r3, r1
 80029fc:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80029fe:	4b30      	ldr	r3, [pc, #192]	; (8002ac0 <HAL_ADC_Start_IT+0x1a4>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 031f 	and.w	r3, r3, #31
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10f      	bne.n	8002a2a <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d143      	bne.n	8002aa0 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	e03a      	b.n	8002aa0 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a25      	ldr	r2, [pc, #148]	; (8002ac4 <HAL_ADC_Start_IT+0x1a8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d10e      	bne.n	8002a52 <HAL_ADC_Start_IT+0x136>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d107      	bne.n	8002a52 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a50:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002a52:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <HAL_ADC_Start_IT+0x1a4>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d120      	bne.n	8002aa0 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a19      	ldr	r2, [pc, #100]	; (8002ac8 <HAL_ADC_Start_IT+0x1ac>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d11b      	bne.n	8002aa0 <HAL_ADC_Start_IT+0x184>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d114      	bne.n	8002aa0 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a84:	609a      	str	r2, [r3, #8]
 8002a86:	e00b      	b.n	8002aa0 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	f043 0210 	orr.w	r2, r3, #16
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a98:	f043 0201 	orr.w	r2, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20000000 	.word	0x20000000
 8002ab4:	431bde83 	.word	0x431bde83
 8002ab8:	fffff8fe 	.word	0xfffff8fe
 8002abc:	04000020 	.word	0x04000020
 8002ac0:	40012300 	.word	0x40012300
 8002ac4:	40012000 	.word	0x40012000
 8002ac8:	40012200 	.word	0x40012200

08002acc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	2300      	movs	r3, #0
 8002ada:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d049      	beq.n	8002b96 <HAL_ADC_IRQHandler+0xca>
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d046      	beq.n	8002b96 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	f003 0310 	and.w	r3, r3, #16
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d105      	bne.n	8002b20 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d12b      	bne.n	8002b86 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d127      	bne.n	8002b86 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d006      	beq.n	8002b52 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d119      	bne.n	8002b86 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0220 	bic.w	r2, r2, #32
 8002b60:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d105      	bne.n	8002b86 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f043 0201 	orr.w	r2, r3, #1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fd fcc0 	bl	800050c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0212 	mvn.w	r2, #18
 8002b94:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d057      	beq.n	8002c5c <HAL_ADC_IRQHandler+0x190>
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d054      	beq.n	8002c5c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d105      	bne.n	8002bca <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d139      	bne.n	8002c4c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bde:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d006      	beq.n	8002bf4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d12b      	bne.n	8002c4c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d124      	bne.n	8002c4c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d11d      	bne.n	8002c4c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d119      	bne.n	8002c4c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c26:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d105      	bne.n	8002c4c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	f043 0201 	orr.w	r2, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fabf 	bl	80031d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f06f 020c 	mvn.w	r2, #12
 8002c5a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d017      	beq.n	8002ca2 <HAL_ADC_IRQHandler+0x1d6>
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d014      	beq.n	8002ca2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d10d      	bne.n	8002ca2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f837 	bl	8002d06 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0201 	mvn.w	r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cb0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d015      	beq.n	8002ce4 <HAL_ADC_IRQHandler+0x218>
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d012      	beq.n	8002ce4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	f043 0202 	orr.w	r2, r3, #2
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f06f 0220 	mvn.w	r2, #32
 8002cd2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f820 	bl	8002d1a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f06f 0220 	mvn.w	r2, #32
 8002ce2:	601a      	str	r2, [r3, #0]
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x1c>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e136      	b.n	8002fba <HAL_ADC_ConfigChannel+0x28a>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b09      	cmp	r3, #9
 8002d5a:	d93a      	bls.n	8002dd2 <HAL_ADC_ConfigChannel+0xa2>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d64:	d035      	beq.n	8002dd2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68d9      	ldr	r1, [r3, #12]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	4613      	mov	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	3b1e      	subs	r3, #30
 8002d7c:	2207      	movs	r2, #7
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43da      	mvns	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	400a      	ands	r2, r1
 8002d8a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a8d      	ldr	r2, [pc, #564]	; (8002fc8 <HAL_ADC_ConfigChannel+0x298>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d10a      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68d9      	ldr	r1, [r3, #12]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	061a      	lsls	r2, r3, #24
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002daa:	e035      	b.n	8002e18 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68d9      	ldr	r1, [r3, #12]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	4403      	add	r3, r0
 8002dc4:	3b1e      	subs	r3, #30
 8002dc6:	409a      	lsls	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dd0:	e022      	b.n	8002e18 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6919      	ldr	r1, [r3, #16]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	4613      	mov	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4413      	add	r3, r2
 8002de6:	2207      	movs	r2, #7
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43da      	mvns	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	400a      	ands	r2, r1
 8002df4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6919      	ldr	r1, [r3, #16]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	4618      	mov	r0, r3
 8002e08:	4603      	mov	r3, r0
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	4403      	add	r3, r0
 8002e0e:	409a      	lsls	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b06      	cmp	r3, #6
 8002e1e:	d824      	bhi.n	8002e6a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	3b05      	subs	r3, #5
 8002e32:	221f      	movs	r2, #31
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43da      	mvns	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	400a      	ands	r2, r1
 8002e40:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	4618      	mov	r0, r3
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	3b05      	subs	r3, #5
 8002e5c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	635a      	str	r2, [r3, #52]	; 0x34
 8002e68:	e04c      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b0c      	cmp	r3, #12
 8002e70:	d824      	bhi.n	8002ebc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	3b23      	subs	r3, #35	; 0x23
 8002e84:	221f      	movs	r2, #31
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43da      	mvns	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	400a      	ands	r2, r1
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	3b23      	subs	r3, #35	; 0x23
 8002eae:	fa00 f203 	lsl.w	r2, r0, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
 8002eba:	e023      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	3b41      	subs	r3, #65	; 0x41
 8002ece:	221f      	movs	r2, #31
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43da      	mvns	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	400a      	ands	r2, r1
 8002edc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	4618      	mov	r0, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3b41      	subs	r3, #65	; 0x41
 8002ef8:	fa00 f203 	lsl.w	r2, r0, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a30      	ldr	r2, [pc, #192]	; (8002fcc <HAL_ADC_ConfigChannel+0x29c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d10a      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x1f4>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f16:	d105      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002f18:	4b2d      	ldr	r3, [pc, #180]	; (8002fd0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4a2c      	ldr	r2, [pc, #176]	; (8002fd0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f1e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002f22:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a28      	ldr	r2, [pc, #160]	; (8002fcc <HAL_ADC_ConfigChannel+0x29c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d10f      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x21e>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b12      	cmp	r3, #18
 8002f34:	d10b      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002f36:	4b26      	ldr	r3, [pc, #152]	; (8002fd0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	4a25      	ldr	r2, [pc, #148]	; (8002fd0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f3c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f40:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002f42:	4b23      	ldr	r3, [pc, #140]	; (8002fd0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	4a22      	ldr	r2, [pc, #136]	; (8002fd0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f4c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a1e      	ldr	r2, [pc, #120]	; (8002fcc <HAL_ADC_ConfigChannel+0x29c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d12b      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x280>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a1a      	ldr	r2, [pc, #104]	; (8002fc8 <HAL_ADC_ConfigChannel+0x298>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d003      	beq.n	8002f6a <HAL_ADC_ConfigChannel+0x23a>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b11      	cmp	r3, #17
 8002f68:	d122      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002f6a:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4a18      	ldr	r2, [pc, #96]	; (8002fd0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f70:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002f74:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002f76:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	4a15      	ldr	r2, [pc, #84]	; (8002fd0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f80:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a10      	ldr	r2, [pc, #64]	; (8002fc8 <HAL_ADC_ConfigChannel+0x298>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d111      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <HAL_ADC_ConfigChannel+0x2a4>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a11      	ldr	r2, [pc, #68]	; (8002fd8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	0c9a      	lsrs	r2, r3, #18
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002fa2:	e002      	b.n	8002faa <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f9      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	10000012 	.word	0x10000012
 8002fcc:	40012000 	.word	0x40012000
 8002fd0:	40012300 	.word	0x40012300
 8002fd4:	20000000 	.word	0x20000000
 8002fd8:	431bde83 	.word	0x431bde83

08002fdc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002fe4:	4b78      	ldr	r3, [pc, #480]	; (80031c8 <ADC_Init+0x1ec>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	4a77      	ldr	r2, [pc, #476]	; (80031c8 <ADC_Init+0x1ec>)
 8002fea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002fee:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002ff0:	4b75      	ldr	r3, [pc, #468]	; (80031c8 <ADC_Init+0x1ec>)
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	4973      	ldr	r1, [pc, #460]	; (80031c8 <ADC_Init+0x1ec>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800300c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6859      	ldr	r1, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	021a      	lsls	r2, r3, #8
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003030:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6859      	ldr	r1, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003052:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6899      	ldr	r1, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	4a58      	ldr	r2, [pc, #352]	; (80031cc <ADC_Init+0x1f0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d022      	beq.n	80030b6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800307e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6899      	ldr	r1, [r3, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6899      	ldr	r1, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	e00f      	b.n	80030d6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0202 	bic.w	r2, r2, #2
 80030e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6899      	ldr	r1, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	005a      	lsls	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d01b      	beq.n	800313c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003112:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003122:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6859      	ldr	r1, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	3b01      	subs	r3, #1
 8003130:	035a      	lsls	r2, r3, #13
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	e007      	b.n	800314c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800314a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800315a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	3b01      	subs	r3, #1
 8003168:	051a      	lsls	r2, r3, #20
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003180:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6899      	ldr	r1, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800318e:	025a      	lsls	r2, r3, #9
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6899      	ldr	r1, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	029a      	lsls	r2, r3, #10
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	609a      	str	r2, [r3, #8]
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	40012300 	.word	0x40012300
 80031cc:	0f000001 	.word	0x0f000001

080031d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <__NVIC_SetPriorityGrouping+0x40>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003200:	4013      	ands	r3, r2
 8003202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <__NVIC_SetPriorityGrouping+0x44>)
 800320e:	4313      	orrs	r3, r2
 8003210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003212:	4a04      	ldr	r2, [pc, #16]	; (8003224 <__NVIC_SetPriorityGrouping+0x40>)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	60d3      	str	r3, [r2, #12]
}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000ed00 	.word	0xe000ed00
 8003228:	05fa0000 	.word	0x05fa0000

0800322c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003230:	4b04      	ldr	r3, [pc, #16]	; (8003244 <__NVIC_GetPriorityGrouping+0x18>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	0a1b      	lsrs	r3, r3, #8
 8003236:	f003 0307 	and.w	r3, r3, #7
}
 800323a:	4618      	mov	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	2b00      	cmp	r3, #0
 8003258:	db0b      	blt.n	8003272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	f003 021f 	and.w	r2, r3, #31
 8003260:	4907      	ldr	r1, [pc, #28]	; (8003280 <__NVIC_EnableIRQ+0x38>)
 8003262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	2001      	movs	r0, #1
 800326a:	fa00 f202 	lsl.w	r2, r0, r2
 800326e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	e000e100 	.word	0xe000e100

08003284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	6039      	str	r1, [r7, #0]
 800328e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003294:	2b00      	cmp	r3, #0
 8003296:	db0a      	blt.n	80032ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	b2da      	uxtb	r2, r3
 800329c:	490c      	ldr	r1, [pc, #48]	; (80032d0 <__NVIC_SetPriority+0x4c>)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	0112      	lsls	r2, r2, #4
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	440b      	add	r3, r1
 80032a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032ac:	e00a      	b.n	80032c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	4908      	ldr	r1, [pc, #32]	; (80032d4 <__NVIC_SetPriority+0x50>)
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	3b04      	subs	r3, #4
 80032bc:	0112      	lsls	r2, r2, #4
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	440b      	add	r3, r1
 80032c2:	761a      	strb	r2, [r3, #24]
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	e000e100 	.word	0xe000e100
 80032d4:	e000ed00 	.word	0xe000ed00

080032d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d8:	b480      	push	{r7}
 80032da:	b089      	sub	sp, #36	; 0x24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f1c3 0307 	rsb	r3, r3, #7
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	bf28      	it	cs
 80032f6:	2304      	movcs	r3, #4
 80032f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3304      	adds	r3, #4
 80032fe:	2b06      	cmp	r3, #6
 8003300:	d902      	bls.n	8003308 <NVIC_EncodePriority+0x30>
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3b03      	subs	r3, #3
 8003306:	e000      	b.n	800330a <NVIC_EncodePriority+0x32>
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800330c:	f04f 32ff 	mov.w	r2, #4294967295
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43da      	mvns	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	401a      	ands	r2, r3
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003320:	f04f 31ff 	mov.w	r1, #4294967295
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	fa01 f303 	lsl.w	r3, r1, r3
 800332a:	43d9      	mvns	r1, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003330:	4313      	orrs	r3, r2
         );
}
 8003332:	4618      	mov	r0, r3
 8003334:	3724      	adds	r7, #36	; 0x24
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ff4c 	bl	80031e4 <__NVIC_SetPriorityGrouping>
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003366:	f7ff ff61 	bl	800322c <__NVIC_GetPriorityGrouping>
 800336a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	6978      	ldr	r0, [r7, #20]
 8003372:	f7ff ffb1 	bl	80032d8 <NVIC_EncodePriority>
 8003376:	4602      	mov	r2, r0
 8003378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337c:	4611      	mov	r1, r2
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff ff80 	bl	8003284 <__NVIC_SetPriority>
}
 8003384:	bf00      	nop
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff ff54 	bl	8003248 <__NVIC_EnableIRQ>
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e054      	b.n	8003464 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	7f5b      	ldrb	r3, [r3, #29]
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d105      	bne.n	80033d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7fe fb4c 	bl	8001a68 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	791b      	ldrb	r3, [r3, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10c      	bne.n	80033f8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a22      	ldr	r2, [pc, #136]	; (800346c <HAL_CRC_Init+0xc4>)
 80033e4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0218 	bic.w	r2, r2, #24
 80033f4:	609a      	str	r2, [r3, #8]
 80033f6:	e00c      	b.n	8003412 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6899      	ldr	r1, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	461a      	mov	r2, r3
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f834 	bl	8003470 <HAL_CRCEx_Polynomial_Set>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e028      	b.n	8003464 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	795b      	ldrb	r3, [r3, #5]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d105      	bne.n	8003426 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f04f 32ff 	mov.w	r2, #4294967295
 8003422:	611a      	str	r2, [r3, #16]
 8003424:	e004      	b.n	8003430 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6912      	ldr	r2, [r2, #16]
 800342e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699a      	ldr	r2, [r3, #24]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	04c11db7 	.word	0x04c11db7

08003470 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003480:	231f      	movs	r3, #31
 8003482:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003484:	bf00      	nop
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1e5a      	subs	r2, r3, #1
 800348a:	613a      	str	r2, [r7, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d009      	beq.n	80034a4 <HAL_CRCEx_Polynomial_Set+0x34>
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	fa22 f303 	lsr.w	r3, r2, r3
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b18      	cmp	r3, #24
 80034a8:	d846      	bhi.n	8003538 <HAL_CRCEx_Polynomial_Set+0xc8>
 80034aa:	a201      	add	r2, pc, #4	; (adr r2, 80034b0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80034ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b0:	0800353f 	.word	0x0800353f
 80034b4:	08003539 	.word	0x08003539
 80034b8:	08003539 	.word	0x08003539
 80034bc:	08003539 	.word	0x08003539
 80034c0:	08003539 	.word	0x08003539
 80034c4:	08003539 	.word	0x08003539
 80034c8:	08003539 	.word	0x08003539
 80034cc:	08003539 	.word	0x08003539
 80034d0:	0800352d 	.word	0x0800352d
 80034d4:	08003539 	.word	0x08003539
 80034d8:	08003539 	.word	0x08003539
 80034dc:	08003539 	.word	0x08003539
 80034e0:	08003539 	.word	0x08003539
 80034e4:	08003539 	.word	0x08003539
 80034e8:	08003539 	.word	0x08003539
 80034ec:	08003539 	.word	0x08003539
 80034f0:	08003521 	.word	0x08003521
 80034f4:	08003539 	.word	0x08003539
 80034f8:	08003539 	.word	0x08003539
 80034fc:	08003539 	.word	0x08003539
 8003500:	08003539 	.word	0x08003539
 8003504:	08003539 	.word	0x08003539
 8003508:	08003539 	.word	0x08003539
 800350c:	08003539 	.word	0x08003539
 8003510:	08003515 	.word	0x08003515
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2b06      	cmp	r3, #6
 8003518:	d913      	bls.n	8003542 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800351e:	e010      	b.n	8003542 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	2b07      	cmp	r3, #7
 8003524:	d90f      	bls.n	8003546 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800352a:	e00c      	b.n	8003546 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	2b0f      	cmp	r3, #15
 8003530:	d90b      	bls.n	800354a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003536:	e008      	b.n	800354a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	75fb      	strb	r3, [r7, #23]
      break;
 800353c:	e006      	b.n	800354c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800353e:	bf00      	nop
 8003540:	e004      	b.n	800354c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003542:	bf00      	nop
 8003544:	e002      	b.n	800354c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003546:	bf00      	nop
 8003548:	e000      	b.n	800354c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800354a:	bf00      	nop
  }
  if (status == HAL_OK)
 800354c:	7dfb      	ldrb	r3, [r7, #23]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10d      	bne.n	800356e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f023 0118 	bic.w	r1, r3, #24
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	430a      	orrs	r2, r1
 800356c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800356e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003570:	4618      	mov	r0, r3
 8003572:	371c      	adds	r7, #28
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e069      	b.n	8003662 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d102      	bne.n	80035a0 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fe fa84 	bl	8001aa8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6819      	ldr	r1, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	4b2a      	ldr	r3, [pc, #168]	; (800366c <HAL_DCMI_Init+0xf0>)
 80035c2:	400b      	ands	r3, r1
 80035c4:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6819      	ldr	r1, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80035da:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80035e6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80035f2:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80035fe:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800360a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b10      	cmp	r3, #16
 800361a:	d112      	bne.n	8003642 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	7f1b      	ldrb	r3, [r3, #28]
 8003620:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	7f5b      	ldrb	r3, [r3, #29]
 8003626:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003628:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	7f9b      	ldrb	r3, [r3, #30]
 800362e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003630:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	7fdb      	ldrb	r3, [r3, #31]
 8003638:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800363e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003640:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 021e 	orr.w	r2, r2, #30
 8003650:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	ffe0f007 	.word	0xffe0f007

08003670 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e039      	b.n	80036f6 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fe fac4 	bl	8001c24 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c0:	f023 0107 	bic.w	r1, r3, #7
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036d6:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <HAL_DMA2D_Init+0x90>)
 80036d8:	4013      	ands	r3, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68d1      	ldr	r1, [r2, #12]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6812      	ldr	r2, [r2, #0]
 80036e2:	430b      	orrs	r3, r1
 80036e4:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	ffffc000 	.word	0xffffc000

08003704 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d026      	beq.n	8003774 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d021      	beq.n	8003774 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800373e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003744:	f043 0201 	orr.w	r2, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2201      	movs	r2, #1
 8003752:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2204      	movs	r2, #4
 8003758:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b00      	cmp	r3, #0
 800377c:	d026      	beq.n	80037cc <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d021      	beq.n	80037cc <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003796:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2220      	movs	r2, #32
 800379e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a4:	f043 0202 	orr.w	r2, r3, #2
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2204      	movs	r2, #4
 80037b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d026      	beq.n	8003824 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d021      	beq.n	8003824 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ee:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2208      	movs	r2, #8
 80037f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fc:	f043 0204 	orr.w	r2, r3, #4
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2204      	movs	r2, #4
 8003808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b00      	cmp	r3, #0
 800382c:	d013      	beq.n	8003856 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00e      	beq.n	8003856 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003846:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2204      	movs	r2, #4
 800384e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f853 	bl	80038fc <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d024      	beq.n	80038aa <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003866:	2b00      	cmp	r3, #0
 8003868:	d01f      	beq.n	80038aa <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003878:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2202      	movs	r2, #2
 8003880:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d01f      	beq.n	80038f4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d01a      	beq.n	80038f4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038cc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2210      	movs	r2, #16
 80038d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f80e 	bl	8003910 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80038f4:	bf00      	nop
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_DMA2D_ConfigLayer+0x20>
 8003940:	2302      	movs	r3, #2
 8003942:	e079      	b.n	8003a38 <HAL_DMA2D_ConfigLayer+0x114>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	3318      	adds	r3, #24
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	4413      	add	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	041b      	lsls	r3, r3, #16
 800396a:	4313      	orrs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800396e:	4b35      	ldr	r3, [pc, #212]	; (8003a44 <HAL_DMA2D_ConfigLayer+0x120>)
 8003970:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b0a      	cmp	r3, #10
 8003978:	d003      	beq.n	8003982 <HAL_DMA2D_ConfigLayer+0x5e>
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b09      	cmp	r3, #9
 8003980:	d107      	bne.n	8003992 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	4313      	orrs	r3, r2
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	e005      	b.n	800399e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	061b      	lsls	r3, r3, #24
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	4313      	orrs	r3, r2
 800399c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d120      	bne.n	80039e6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	43db      	mvns	r3, r3
 80039ae:	ea02 0103 	and.w	r1, r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b0a      	cmp	r3, #10
 80039cc:	d003      	beq.n	80039d6 <HAL_DMA2D_ConfigLayer+0xb2>
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b09      	cmp	r3, #9
 80039d4:	d127      	bne.n	8003a26 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80039e2:	629a      	str	r2, [r3, #40]	; 0x28
 80039e4:	e01f      	b.n	8003a26 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69da      	ldr	r2, [r3, #28]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	43db      	mvns	r3, r3
 80039f0:	ea02 0103 	and.w	r1, r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b0a      	cmp	r3, #10
 8003a0e:	d003      	beq.n	8003a18 <HAL_DMA2D_ConfigLayer+0xf4>
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b09      	cmp	r3, #9
 8003a16:	d106      	bne.n	8003a26 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003a24:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	ff03000f 	.word	0xff03000f

08003a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b089      	sub	sp, #36	; 0x24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a62:	2300      	movs	r3, #0
 8003a64:	61fb      	str	r3, [r7, #28]
 8003a66:	e175      	b.n	8003d54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003a68:	2201      	movs	r2, #1
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	f040 8164 	bne.w	8003d4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d005      	beq.n	8003a9e <HAL_GPIO_Init+0x56>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d130      	bne.n	8003b00 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	f003 0201 	and.w	r2, r3, #1
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 0303 	and.w	r3, r3, #3
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d017      	beq.n	8003b3c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	2203      	movs	r2, #3
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f003 0303 	and.w	r3, r3, #3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d123      	bne.n	8003b90 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	08da      	lsrs	r2, r3, #3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3208      	adds	r2, #8
 8003b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	220f      	movs	r2, #15
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	08da      	lsrs	r2, r3, #3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3208      	adds	r2, #8
 8003b8a:	69b9      	ldr	r1, [r7, #24]
 8003b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	2203      	movs	r2, #3
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 0203 	and.w	r2, r3, #3
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 80be 	beq.w	8003d4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bd2:	4b66      	ldr	r3, [pc, #408]	; (8003d6c <HAL_GPIO_Init+0x324>)
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd6:	4a65      	ldr	r2, [pc, #404]	; (8003d6c <HAL_GPIO_Init+0x324>)
 8003bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8003bde:	4b63      	ldr	r3, [pc, #396]	; (8003d6c <HAL_GPIO_Init+0x324>)
 8003be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003bea:	4a61      	ldr	r2, [pc, #388]	; (8003d70 <HAL_GPIO_Init+0x328>)
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	089b      	lsrs	r3, r3, #2
 8003bf0:	3302      	adds	r3, #2
 8003bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	220f      	movs	r2, #15
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	43db      	mvns	r3, r3
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a58      	ldr	r2, [pc, #352]	; (8003d74 <HAL_GPIO_Init+0x32c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d037      	beq.n	8003c86 <HAL_GPIO_Init+0x23e>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a57      	ldr	r2, [pc, #348]	; (8003d78 <HAL_GPIO_Init+0x330>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d031      	beq.n	8003c82 <HAL_GPIO_Init+0x23a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a56      	ldr	r2, [pc, #344]	; (8003d7c <HAL_GPIO_Init+0x334>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d02b      	beq.n	8003c7e <HAL_GPIO_Init+0x236>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a55      	ldr	r2, [pc, #340]	; (8003d80 <HAL_GPIO_Init+0x338>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d025      	beq.n	8003c7a <HAL_GPIO_Init+0x232>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a54      	ldr	r2, [pc, #336]	; (8003d84 <HAL_GPIO_Init+0x33c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d01f      	beq.n	8003c76 <HAL_GPIO_Init+0x22e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a53      	ldr	r2, [pc, #332]	; (8003d88 <HAL_GPIO_Init+0x340>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d019      	beq.n	8003c72 <HAL_GPIO_Init+0x22a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a52      	ldr	r2, [pc, #328]	; (8003d8c <HAL_GPIO_Init+0x344>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d013      	beq.n	8003c6e <HAL_GPIO_Init+0x226>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a51      	ldr	r2, [pc, #324]	; (8003d90 <HAL_GPIO_Init+0x348>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00d      	beq.n	8003c6a <HAL_GPIO_Init+0x222>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a50      	ldr	r2, [pc, #320]	; (8003d94 <HAL_GPIO_Init+0x34c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d007      	beq.n	8003c66 <HAL_GPIO_Init+0x21e>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a4f      	ldr	r2, [pc, #316]	; (8003d98 <HAL_GPIO_Init+0x350>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d101      	bne.n	8003c62 <HAL_GPIO_Init+0x21a>
 8003c5e:	2309      	movs	r3, #9
 8003c60:	e012      	b.n	8003c88 <HAL_GPIO_Init+0x240>
 8003c62:	230a      	movs	r3, #10
 8003c64:	e010      	b.n	8003c88 <HAL_GPIO_Init+0x240>
 8003c66:	2308      	movs	r3, #8
 8003c68:	e00e      	b.n	8003c88 <HAL_GPIO_Init+0x240>
 8003c6a:	2307      	movs	r3, #7
 8003c6c:	e00c      	b.n	8003c88 <HAL_GPIO_Init+0x240>
 8003c6e:	2306      	movs	r3, #6
 8003c70:	e00a      	b.n	8003c88 <HAL_GPIO_Init+0x240>
 8003c72:	2305      	movs	r3, #5
 8003c74:	e008      	b.n	8003c88 <HAL_GPIO_Init+0x240>
 8003c76:	2304      	movs	r3, #4
 8003c78:	e006      	b.n	8003c88 <HAL_GPIO_Init+0x240>
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e004      	b.n	8003c88 <HAL_GPIO_Init+0x240>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e002      	b.n	8003c88 <HAL_GPIO_Init+0x240>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <HAL_GPIO_Init+0x240>
 8003c86:	2300      	movs	r3, #0
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	f002 0203 	and.w	r2, r2, #3
 8003c8e:	0092      	lsls	r2, r2, #2
 8003c90:	4093      	lsls	r3, r2
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c98:	4935      	ldr	r1, [pc, #212]	; (8003d70 <HAL_GPIO_Init+0x328>)
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	089b      	lsrs	r3, r3, #2
 8003c9e:	3302      	adds	r3, #2
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ca6:	4b3d      	ldr	r3, [pc, #244]	; (8003d9c <HAL_GPIO_Init+0x354>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cca:	4a34      	ldr	r2, [pc, #208]	; (8003d9c <HAL_GPIO_Init+0x354>)
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cd0:	4b32      	ldr	r3, [pc, #200]	; (8003d9c <HAL_GPIO_Init+0x354>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cf4:	4a29      	ldr	r2, [pc, #164]	; (8003d9c <HAL_GPIO_Init+0x354>)
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cfa:	4b28      	ldr	r3, [pc, #160]	; (8003d9c <HAL_GPIO_Init+0x354>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	43db      	mvns	r3, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4013      	ands	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d1e:	4a1f      	ldr	r2, [pc, #124]	; (8003d9c <HAL_GPIO_Init+0x354>)
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d24:	4b1d      	ldr	r3, [pc, #116]	; (8003d9c <HAL_GPIO_Init+0x354>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d48:	4a14      	ldr	r2, [pc, #80]	; (8003d9c <HAL_GPIO_Init+0x354>)
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	3301      	adds	r3, #1
 8003d52:	61fb      	str	r3, [r7, #28]
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	2b0f      	cmp	r3, #15
 8003d58:	f67f ae86 	bls.w	8003a68 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003d5c:	bf00      	nop
 8003d5e:	bf00      	nop
 8003d60:	3724      	adds	r7, #36	; 0x24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	40013800 	.word	0x40013800
 8003d74:	40020000 	.word	0x40020000
 8003d78:	40020400 	.word	0x40020400
 8003d7c:	40020800 	.word	0x40020800
 8003d80:	40020c00 	.word	0x40020c00
 8003d84:	40021000 	.word	0x40021000
 8003d88:	40021400 	.word	0x40021400
 8003d8c:	40021800 	.word	0x40021800
 8003d90:	40021c00 	.word	0x40021c00
 8003d94:	40022000 	.word	0x40022000
 8003d98:	40022400 	.word	0x40022400
 8003d9c:	40013c00 	.word	0x40013c00

08003da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	807b      	strh	r3, [r7, #2]
 8003dac:	4613      	mov	r3, r2
 8003dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003db0:	787b      	ldrb	r3, [r7, #1]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003db6:	887a      	ldrh	r2, [r7, #2]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003dbc:	e003      	b.n	8003dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003dbe:	887b      	ldrh	r3, [r7, #2]
 8003dc0:	041a      	lsls	r2, r3, #16
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	619a      	str	r2, [r3, #24]
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
	...

08003dd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e07f      	b.n	8003ee6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fd ff38 	bl	8001c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2224      	movs	r2, #36	; 0x24
 8003e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0201 	bic.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d107      	bne.n	8003e4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e4a:	609a      	str	r2, [r3, #8]
 8003e4c:	e006      	b.n	8003e5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d104      	bne.n	8003e6e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6859      	ldr	r1, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	4b1d      	ldr	r3, [pc, #116]	; (8003ef0 <HAL_I2C_Init+0x11c>)
 8003e7a:	430b      	orrs	r3, r1
 8003e7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691a      	ldr	r2, [r3, #16]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	69d9      	ldr	r1, [r3, #28]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a1a      	ldr	r2, [r3, #32]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	02008000 	.word	0x02008000

08003ef4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b20      	cmp	r3, #32
 8003f08:	d138      	bne.n	8003f7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e032      	b.n	8003f7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2224      	movs	r2, #36	; 0x24
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0201 	bic.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6819      	ldr	r1, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0201 	orr.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	e000      	b.n	8003f7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f7c:	2302      	movs	r3, #2
  }
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b085      	sub	sp, #20
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d139      	bne.n	8004014 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003faa:	2302      	movs	r3, #2
 8003fac:	e033      	b.n	8004016 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2224      	movs	r2, #36	; 0x24
 8003fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0201 	bic.w	r2, r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003fdc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	021b      	lsls	r3, r3, #8
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	e000      	b.n	8004016 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004014:	2302      	movs	r3, #2
  }
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
	...

08004024 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e0bf      	b.n	80041b6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7fd fe70 	bl	8001d30 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004066:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6999      	ldr	r1, [r3, #24]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800407c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6899      	ldr	r1, [r3, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	4b4a      	ldr	r3, [pc, #296]	; (80041c0 <HAL_LTDC_Init+0x19c>)
 8004098:	400b      	ands	r3, r1
 800409a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	041b      	lsls	r3, r3, #16
 80040a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6899      	ldr	r1, [r3, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699a      	ldr	r2, [r3, #24]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	431a      	orrs	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68d9      	ldr	r1, [r3, #12]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	4b3e      	ldr	r3, [pc, #248]	; (80041c0 <HAL_LTDC_Init+0x19c>)
 80040c6:	400b      	ands	r3, r1
 80040c8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	041b      	lsls	r3, r3, #16
 80040d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68d9      	ldr	r1, [r3, #12]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1a      	ldr	r2, [r3, #32]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6919      	ldr	r1, [r3, #16]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	4b33      	ldr	r3, [pc, #204]	; (80041c0 <HAL_LTDC_Init+0x19c>)
 80040f4:	400b      	ands	r3, r1
 80040f6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	041b      	lsls	r3, r3, #16
 80040fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6919      	ldr	r1, [r3, #16]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6959      	ldr	r1, [r3, #20]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	4b27      	ldr	r3, [pc, #156]	; (80041c0 <HAL_LTDC_Init+0x19c>)
 8004122:	400b      	ands	r3, r1
 8004124:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412a:	041b      	lsls	r3, r3, #16
 800412c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6959      	ldr	r1, [r3, #20]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004154:	041b      	lsls	r3, r3, #16
 8004156:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004166:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0206 	orr.w	r2, r2, #6
 8004192:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	f000f800 	.word	0xf000f800

080041c4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041da:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d023      	beq.n	800422e <HAL_LTDC_IRQHandler+0x6a>
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d01e      	beq.n	800422e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0204 	bic.w	r2, r2, #4
 80041fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2204      	movs	r2, #4
 8004206:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800420e:	f043 0201 	orr.w	r2, r3, #1
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2204      	movs	r2, #4
 800421c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f86f 	bl	800430c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d023      	beq.n	8004280 <HAL_LTDC_IRQHandler+0xbc>
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d01e      	beq.n	8004280 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0202 	bic.w	r2, r2, #2
 8004250:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2202      	movs	r2, #2
 8004258:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004260:	f043 0202 	orr.w	r2, r3, #2
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2204      	movs	r2, #4
 800426e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f846 	bl	800430c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d01b      	beq.n	80042c2 <HAL_LTDC_IRQHandler+0xfe>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b00      	cmp	r3, #0
 8004292:	d016      	beq.n	80042c2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0201 	bic.w	r2, r2, #1
 80042a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2201      	movs	r2, #1
 80042aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f82f 	bl	8004320 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d01b      	beq.n	8004304 <HAL_LTDC_IRQHandler+0x140>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d016      	beq.n	8004304 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0208 	bic.w	r2, r2, #8
 80042e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2208      	movs	r2, #8
 80042ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f818 	bl	8004334 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004348:	b5b0      	push	{r4, r5, r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800435a:	2b01      	cmp	r3, #1
 800435c:	d101      	bne.n	8004362 <HAL_LTDC_ConfigLayer+0x1a>
 800435e:	2302      	movs	r3, #2
 8004360:	e02c      	b.n	80043bc <HAL_LTDC_ConfigLayer+0x74>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2202      	movs	r2, #2
 800436e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2134      	movs	r1, #52	; 0x34
 8004378:	fb01 f303 	mul.w	r3, r1, r3
 800437c:	4413      	add	r3, r2
 800437e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4614      	mov	r4, r2
 8004386:	461d      	mov	r5, r3
 8004388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800438a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800438c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800438e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004394:	682b      	ldr	r3, [r5, #0]
 8004396:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 f811 	bl	80043c4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2201      	movs	r2, #1
 80043a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bdb0      	pop	{r4, r5, r7, pc}

080043c4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b089      	sub	sp, #36	; 0x24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	0c1b      	lsrs	r3, r3, #16
 80043dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e0:	4413      	add	r3, r2
 80043e2:	041b      	lsls	r3, r3, #16
 80043e4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	01db      	lsls	r3, r3, #7
 80043f0:	4413      	add	r3, r2
 80043f2:	3384      	adds	r3, #132	; 0x84
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	6812      	ldr	r2, [r2, #0]
 80043fa:	4611      	mov	r1, r2
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	01d2      	lsls	r2, r2, #7
 8004400:	440a      	add	r2, r1
 8004402:	3284      	adds	r2, #132	; 0x84
 8004404:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004408:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	0c1b      	lsrs	r3, r3, #16
 8004416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800441a:	4413      	add	r3, r2
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4619      	mov	r1, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	01db      	lsls	r3, r3, #7
 8004428:	440b      	add	r3, r1
 800442a:	3384      	adds	r3, #132	; 0x84
 800442c:	4619      	mov	r1, r3
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	4313      	orrs	r3, r2
 8004432:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004442:	4413      	add	r3, r2
 8004444:	041b      	lsls	r3, r3, #16
 8004446:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	461a      	mov	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	01db      	lsls	r3, r3, #7
 8004452:	4413      	add	r3, r2
 8004454:	3384      	adds	r3, #132	; 0x84
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	4611      	mov	r1, r2
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	01d2      	lsls	r2, r2, #7
 8004462:	440a      	add	r2, r1
 8004464:	3284      	adds	r2, #132	; 0x84
 8004466:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800446a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800447a:	4413      	add	r3, r2
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4619      	mov	r1, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	01db      	lsls	r3, r3, #7
 8004488:	440b      	add	r3, r1
 800448a:	3384      	adds	r3, #132	; 0x84
 800448c:	4619      	mov	r1, r3
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	4313      	orrs	r3, r2
 8004492:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	01db      	lsls	r3, r3, #7
 800449e:	4413      	add	r3, r2
 80044a0:	3384      	adds	r3, #132	; 0x84
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	6812      	ldr	r2, [r2, #0]
 80044a8:	4611      	mov	r1, r2
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	01d2      	lsls	r2, r2, #7
 80044ae:	440a      	add	r2, r1
 80044b0:	3284      	adds	r2, #132	; 0x84
 80044b2:	f023 0307 	bic.w	r3, r3, #7
 80044b6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	461a      	mov	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	01db      	lsls	r3, r3, #7
 80044c2:	4413      	add	r3, r2
 80044c4:	3384      	adds	r3, #132	; 0x84
 80044c6:	461a      	mov	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80044d4:	021b      	lsls	r3, r3, #8
 80044d6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80044de:	041b      	lsls	r3, r3, #16
 80044e0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	061b      	lsls	r3, r3, #24
 80044e8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	01db      	lsls	r3, r3, #7
 80044f4:	4413      	add	r3, r2
 80044f6:	3384      	adds	r3, #132	; 0x84
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	01db      	lsls	r3, r3, #7
 8004504:	4413      	add	r3, r2
 8004506:	3384      	adds	r3, #132	; 0x84
 8004508:	461a      	mov	r2, r3
 800450a:	2300      	movs	r3, #0
 800450c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004514:	461a      	mov	r2, r3
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	431a      	orrs	r2, r3
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	431a      	orrs	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4619      	mov	r1, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	01db      	lsls	r3, r3, #7
 8004528:	440b      	add	r3, r1
 800452a:	3384      	adds	r3, #132	; 0x84
 800452c:	4619      	mov	r1, r3
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	4313      	orrs	r3, r2
 8004532:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	461a      	mov	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	01db      	lsls	r3, r3, #7
 800453e:	4413      	add	r3, r2
 8004540:	3384      	adds	r3, #132	; 0x84
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	6812      	ldr	r2, [r2, #0]
 8004548:	4611      	mov	r1, r2
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	01d2      	lsls	r2, r2, #7
 800454e:	440a      	add	r2, r1
 8004550:	3284      	adds	r2, #132	; 0x84
 8004552:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004556:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	461a      	mov	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	01db      	lsls	r3, r3, #7
 8004562:	4413      	add	r3, r2
 8004564:	3384      	adds	r3, #132	; 0x84
 8004566:	461a      	mov	r2, r3
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	01db      	lsls	r3, r3, #7
 8004578:	4413      	add	r3, r2
 800457a:	3384      	adds	r3, #132	; 0x84
 800457c:	69da      	ldr	r2, [r3, #28]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4619      	mov	r1, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	01db      	lsls	r3, r3, #7
 8004588:	440b      	add	r3, r1
 800458a:	3384      	adds	r3, #132	; 0x84
 800458c:	4619      	mov	r1, r3
 800458e:	4b58      	ldr	r3, [pc, #352]	; (80046f0 <LTDC_SetConfig+0x32c>)
 8004590:	4013      	ands	r3, r2
 8004592:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	69da      	ldr	r2, [r3, #28]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	68f9      	ldr	r1, [r7, #12]
 800459e:	6809      	ldr	r1, [r1, #0]
 80045a0:	4608      	mov	r0, r1
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	01c9      	lsls	r1, r1, #7
 80045a6:	4401      	add	r1, r0
 80045a8:	3184      	adds	r1, #132	; 0x84
 80045aa:	4313      	orrs	r3, r2
 80045ac:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	01db      	lsls	r3, r3, #7
 80045b8:	4413      	add	r3, r2
 80045ba:	3384      	adds	r3, #132	; 0x84
 80045bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	01db      	lsls	r3, r3, #7
 80045c8:	4413      	add	r3, r2
 80045ca:	3384      	adds	r3, #132	; 0x84
 80045cc:	461a      	mov	r2, r3
 80045ce:	2300      	movs	r3, #0
 80045d0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	01db      	lsls	r3, r3, #7
 80045dc:	4413      	add	r3, r2
 80045de:	3384      	adds	r3, #132	; 0x84
 80045e0:	461a      	mov	r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d102      	bne.n	80045f6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80045f0:	2304      	movs	r3, #4
 80045f2:	61fb      	str	r3, [r7, #28]
 80045f4:	e01b      	b.n	800462e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d102      	bne.n	8004604 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80045fe:	2303      	movs	r3, #3
 8004600:	61fb      	str	r3, [r7, #28]
 8004602:	e014      	b.n	800462e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	2b04      	cmp	r3, #4
 800460a:	d00b      	beq.n	8004624 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004610:	2b02      	cmp	r3, #2
 8004612:	d007      	beq.n	8004624 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004618:	2b03      	cmp	r3, #3
 800461a:	d003      	beq.n	8004624 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004620:	2b07      	cmp	r3, #7
 8004622:	d102      	bne.n	800462a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004624:	2302      	movs	r3, #2
 8004626:	61fb      	str	r3, [r7, #28]
 8004628:	e001      	b.n	800462e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800462a:	2301      	movs	r3, #1
 800462c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	01db      	lsls	r3, r3, #7
 8004638:	4413      	add	r3, r2
 800463a:	3384      	adds	r3, #132	; 0x84
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	6812      	ldr	r2, [r2, #0]
 8004642:	4611      	mov	r1, r2
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	01d2      	lsls	r2, r2, #7
 8004648:	440a      	add	r2, r1
 800464a:	3284      	adds	r2, #132	; 0x84
 800464c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004650:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004656:	69fa      	ldr	r2, [r7, #28]
 8004658:	fb02 f303 	mul.w	r3, r2, r3
 800465c:	041a      	lsls	r2, r3, #16
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	6859      	ldr	r1, [r3, #4]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	1acb      	subs	r3, r1, r3
 8004668:	69f9      	ldr	r1, [r7, #28]
 800466a:	fb01 f303 	mul.w	r3, r1, r3
 800466e:	3303      	adds	r3, #3
 8004670:	68f9      	ldr	r1, [r7, #12]
 8004672:	6809      	ldr	r1, [r1, #0]
 8004674:	4608      	mov	r0, r1
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	01c9      	lsls	r1, r1, #7
 800467a:	4401      	add	r1, r0
 800467c:	3184      	adds	r1, #132	; 0x84
 800467e:	4313      	orrs	r3, r2
 8004680:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	461a      	mov	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	01db      	lsls	r3, r3, #7
 800468c:	4413      	add	r3, r2
 800468e:	3384      	adds	r3, #132	; 0x84
 8004690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4619      	mov	r1, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	01db      	lsls	r3, r3, #7
 800469c:	440b      	add	r3, r1
 800469e:	3384      	adds	r3, #132	; 0x84
 80046a0:	4619      	mov	r1, r3
 80046a2:	4b14      	ldr	r3, [pc, #80]	; (80046f4 <LTDC_SetConfig+0x330>)
 80046a4:	4013      	ands	r3, r2
 80046a6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	461a      	mov	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	01db      	lsls	r3, r3, #7
 80046b2:	4413      	add	r3, r2
 80046b4:	3384      	adds	r3, #132	; 0x84
 80046b6:	461a      	mov	r2, r3
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	461a      	mov	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	01db      	lsls	r3, r3, #7
 80046c8:	4413      	add	r3, r2
 80046ca:	3384      	adds	r3, #132	; 0x84
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	6812      	ldr	r2, [r2, #0]
 80046d2:	4611      	mov	r1, r2
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	01d2      	lsls	r2, r2, #7
 80046d8:	440a      	add	r2, r1
 80046da:	3284      	adds	r2, #132	; 0x84
 80046dc:	f043 0301 	orr.w	r3, r3, #1
 80046e0:	6013      	str	r3, [r2, #0]
}
 80046e2:	bf00      	nop
 80046e4:	3724      	adds	r7, #36	; 0x24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	fffff8f8 	.word	0xfffff8f8
 80046f4:	fffff800 	.word	0xfffff800

080046f8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046fc:	4b05      	ldr	r3, [pc, #20]	; (8004714 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a04      	ldr	r2, [pc, #16]	; (8004714 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004706:	6013      	str	r3, [r2, #0]
}
 8004708:	bf00      	nop
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	40007000 	.word	0x40007000

08004718 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800471e:	2300      	movs	r3, #0
 8004720:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004722:	4b23      	ldr	r3, [pc, #140]	; (80047b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	4a22      	ldr	r2, [pc, #136]	; (80047b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472c:	6413      	str	r3, [r2, #64]	; 0x40
 800472e:	4b20      	ldr	r3, [pc, #128]	; (80047b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800473a:	4b1e      	ldr	r3, [pc, #120]	; (80047b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a1d      	ldr	r2, [pc, #116]	; (80047b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004744:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004746:	f7fe f899 	bl	800287c <HAL_GetTick>
 800474a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800474c:	e009      	b.n	8004762 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800474e:	f7fe f895 	bl	800287c <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800475c:	d901      	bls.n	8004762 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e022      	b.n	80047a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004762:	4b14      	ldr	r3, [pc, #80]	; (80047b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800476a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476e:	d1ee      	bne.n	800474e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004770:	4b10      	ldr	r3, [pc, #64]	; (80047b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a0f      	ldr	r2, [pc, #60]	; (80047b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800477a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800477c:	f7fe f87e 	bl	800287c <HAL_GetTick>
 8004780:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004782:	e009      	b.n	8004798 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004784:	f7fe f87a 	bl	800287c <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004792:	d901      	bls.n	8004798 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e007      	b.n	80047a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004798:	4b06      	ldr	r3, [pc, #24]	; (80047b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047a4:	d1ee      	bne.n	8004784 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40023800 	.word	0x40023800
 80047b4:	40007000 	.word	0x40007000

080047b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80047c0:	2300      	movs	r3, #0
 80047c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e291      	b.n	8004cf2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 8087 	beq.w	80048ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047dc:	4b96      	ldr	r3, [pc, #600]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 030c 	and.w	r3, r3, #12
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d00c      	beq.n	8004802 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047e8:	4b93      	ldr	r3, [pc, #588]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 030c 	and.w	r3, r3, #12
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d112      	bne.n	800481a <HAL_RCC_OscConfig+0x62>
 80047f4:	4b90      	ldr	r3, [pc, #576]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004800:	d10b      	bne.n	800481a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004802:	4b8d      	ldr	r3, [pc, #564]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d06c      	beq.n	80048e8 <HAL_RCC_OscConfig+0x130>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d168      	bne.n	80048e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e26b      	b.n	8004cf2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004822:	d106      	bne.n	8004832 <HAL_RCC_OscConfig+0x7a>
 8004824:	4b84      	ldr	r3, [pc, #528]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a83      	ldr	r2, [pc, #524]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 800482a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800482e:	6013      	str	r3, [r2, #0]
 8004830:	e02e      	b.n	8004890 <HAL_RCC_OscConfig+0xd8>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10c      	bne.n	8004854 <HAL_RCC_OscConfig+0x9c>
 800483a:	4b7f      	ldr	r3, [pc, #508]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a7e      	ldr	r2, [pc, #504]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 8004840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	4b7c      	ldr	r3, [pc, #496]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a7b      	ldr	r2, [pc, #492]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 800484c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	e01d      	b.n	8004890 <HAL_RCC_OscConfig+0xd8>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800485c:	d10c      	bne.n	8004878 <HAL_RCC_OscConfig+0xc0>
 800485e:	4b76      	ldr	r3, [pc, #472]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a75      	ldr	r2, [pc, #468]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 8004864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	4b73      	ldr	r3, [pc, #460]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a72      	ldr	r2, [pc, #456]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 8004870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	e00b      	b.n	8004890 <HAL_RCC_OscConfig+0xd8>
 8004878:	4b6f      	ldr	r3, [pc, #444]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a6e      	ldr	r2, [pc, #440]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 800487e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004882:	6013      	str	r3, [r2, #0]
 8004884:	4b6c      	ldr	r3, [pc, #432]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a6b      	ldr	r2, [pc, #428]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 800488a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800488e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d013      	beq.n	80048c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004898:	f7fd fff0 	bl	800287c <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a0:	f7fd ffec 	bl	800287c <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b64      	cmp	r3, #100	; 0x64
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e21f      	b.n	8004cf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b2:	4b61      	ldr	r3, [pc, #388]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0f0      	beq.n	80048a0 <HAL_RCC_OscConfig+0xe8>
 80048be:	e014      	b.n	80048ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c0:	f7fd ffdc 	bl	800287c <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048c8:	f7fd ffd8 	bl	800287c <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b64      	cmp	r3, #100	; 0x64
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e20b      	b.n	8004cf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048da:	4b57      	ldr	r3, [pc, #348]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x110>
 80048e6:	e000      	b.n	80048ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d069      	beq.n	80049ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048f6:	4b50      	ldr	r3, [pc, #320]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 030c 	and.w	r3, r3, #12
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00b      	beq.n	800491a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004902:	4b4d      	ldr	r3, [pc, #308]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 030c 	and.w	r3, r3, #12
 800490a:	2b08      	cmp	r3, #8
 800490c:	d11c      	bne.n	8004948 <HAL_RCC_OscConfig+0x190>
 800490e:	4b4a      	ldr	r3, [pc, #296]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d116      	bne.n	8004948 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800491a:	4b47      	ldr	r3, [pc, #284]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d005      	beq.n	8004932 <HAL_RCC_OscConfig+0x17a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d001      	beq.n	8004932 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e1df      	b.n	8004cf2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004932:	4b41      	ldr	r3, [pc, #260]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	493d      	ldr	r1, [pc, #244]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 8004942:	4313      	orrs	r3, r2
 8004944:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004946:	e040      	b.n	80049ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d023      	beq.n	8004998 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004950:	4b39      	ldr	r3, [pc, #228]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a38      	ldr	r2, [pc, #224]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 8004956:	f043 0301 	orr.w	r3, r3, #1
 800495a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495c:	f7fd ff8e 	bl	800287c <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004964:	f7fd ff8a 	bl	800287c <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e1bd      	b.n	8004cf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004976:	4b30      	ldr	r3, [pc, #192]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f0      	beq.n	8004964 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004982:	4b2d      	ldr	r3, [pc, #180]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	4929      	ldr	r1, [pc, #164]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 8004992:	4313      	orrs	r3, r2
 8004994:	600b      	str	r3, [r1, #0]
 8004996:	e018      	b.n	80049ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004998:	4b27      	ldr	r3, [pc, #156]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a26      	ldr	r2, [pc, #152]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a4:	f7fd ff6a 	bl	800287c <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ac:	f7fd ff66 	bl	800287c <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e199      	b.n	8004cf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049be:	4b1e      	ldr	r3, [pc, #120]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1f0      	bne.n	80049ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d038      	beq.n	8004a48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d019      	beq.n	8004a12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049de:	4b16      	ldr	r3, [pc, #88]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 80049e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e2:	4a15      	ldr	r2, [pc, #84]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 80049e4:	f043 0301 	orr.w	r3, r3, #1
 80049e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ea:	f7fd ff47 	bl	800287c <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049f2:	f7fd ff43 	bl	800287c <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e176      	b.n	8004cf2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a04:	4b0c      	ldr	r3, [pc, #48]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 8004a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0f0      	beq.n	80049f2 <HAL_RCC_OscConfig+0x23a>
 8004a10:	e01a      	b.n	8004a48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a12:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 8004a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a16:	4a08      	ldr	r2, [pc, #32]	; (8004a38 <HAL_RCC_OscConfig+0x280>)
 8004a18:	f023 0301 	bic.w	r3, r3, #1
 8004a1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1e:	f7fd ff2d 	bl	800287c <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a24:	e00a      	b.n	8004a3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a26:	f7fd ff29 	bl	800287c <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d903      	bls.n	8004a3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e15c      	b.n	8004cf2 <HAL_RCC_OscConfig+0x53a>
 8004a38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a3c:	4b91      	ldr	r3, [pc, #580]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1ee      	bne.n	8004a26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 80a4 	beq.w	8004b9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a56:	4b8b      	ldr	r3, [pc, #556]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10d      	bne.n	8004a7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a62:	4b88      	ldr	r3, [pc, #544]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	4a87      	ldr	r2, [pc, #540]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a6e:	4b85      	ldr	r3, [pc, #532]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a76:	60bb      	str	r3, [r7, #8]
 8004a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a7e:	4b82      	ldr	r3, [pc, #520]	; (8004c88 <HAL_RCC_OscConfig+0x4d0>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d118      	bne.n	8004abc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004a8a:	4b7f      	ldr	r3, [pc, #508]	; (8004c88 <HAL_RCC_OscConfig+0x4d0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a7e      	ldr	r2, [pc, #504]	; (8004c88 <HAL_RCC_OscConfig+0x4d0>)
 8004a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a96:	f7fd fef1 	bl	800287c <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a9e:	f7fd feed 	bl	800287c <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b64      	cmp	r3, #100	; 0x64
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e120      	b.n	8004cf2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ab0:	4b75      	ldr	r3, [pc, #468]	; (8004c88 <HAL_RCC_OscConfig+0x4d0>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0f0      	beq.n	8004a9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d106      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x31a>
 8004ac4:	4b6f      	ldr	r3, [pc, #444]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac8:	4a6e      	ldr	r2, [pc, #440]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004aca:	f043 0301 	orr.w	r3, r3, #1
 8004ace:	6713      	str	r3, [r2, #112]	; 0x70
 8004ad0:	e02d      	b.n	8004b2e <HAL_RCC_OscConfig+0x376>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10c      	bne.n	8004af4 <HAL_RCC_OscConfig+0x33c>
 8004ada:	4b6a      	ldr	r3, [pc, #424]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ade:	4a69      	ldr	r2, [pc, #420]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004ae0:	f023 0301 	bic.w	r3, r3, #1
 8004ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae6:	4b67      	ldr	r3, [pc, #412]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aea:	4a66      	ldr	r2, [pc, #408]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004aec:	f023 0304 	bic.w	r3, r3, #4
 8004af0:	6713      	str	r3, [r2, #112]	; 0x70
 8004af2:	e01c      	b.n	8004b2e <HAL_RCC_OscConfig+0x376>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	2b05      	cmp	r3, #5
 8004afa:	d10c      	bne.n	8004b16 <HAL_RCC_OscConfig+0x35e>
 8004afc:	4b61      	ldr	r3, [pc, #388]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b00:	4a60      	ldr	r2, [pc, #384]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004b02:	f043 0304 	orr.w	r3, r3, #4
 8004b06:	6713      	str	r3, [r2, #112]	; 0x70
 8004b08:	4b5e      	ldr	r3, [pc, #376]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0c:	4a5d      	ldr	r2, [pc, #372]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004b0e:	f043 0301 	orr.w	r3, r3, #1
 8004b12:	6713      	str	r3, [r2, #112]	; 0x70
 8004b14:	e00b      	b.n	8004b2e <HAL_RCC_OscConfig+0x376>
 8004b16:	4b5b      	ldr	r3, [pc, #364]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1a:	4a5a      	ldr	r2, [pc, #360]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004b1c:	f023 0301 	bic.w	r3, r3, #1
 8004b20:	6713      	str	r3, [r2, #112]	; 0x70
 8004b22:	4b58      	ldr	r3, [pc, #352]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b26:	4a57      	ldr	r2, [pc, #348]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004b28:	f023 0304 	bic.w	r3, r3, #4
 8004b2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d015      	beq.n	8004b62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b36:	f7fd fea1 	bl	800287c <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b3c:	e00a      	b.n	8004b54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b3e:	f7fd fe9d 	bl	800287c <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e0ce      	b.n	8004cf2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b54:	4b4b      	ldr	r3, [pc, #300]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0ee      	beq.n	8004b3e <HAL_RCC_OscConfig+0x386>
 8004b60:	e014      	b.n	8004b8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b62:	f7fd fe8b 	bl	800287c <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b68:	e00a      	b.n	8004b80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b6a:	f7fd fe87 	bl	800287c <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e0b8      	b.n	8004cf2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b80:	4b40      	ldr	r3, [pc, #256]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1ee      	bne.n	8004b6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b8c:	7dfb      	ldrb	r3, [r7, #23]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d105      	bne.n	8004b9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b92:	4b3c      	ldr	r3, [pc, #240]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	4a3b      	ldr	r2, [pc, #236]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 80a4 	beq.w	8004cf0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ba8:	4b36      	ldr	r3, [pc, #216]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f003 030c 	and.w	r3, r3, #12
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d06b      	beq.n	8004c8c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d149      	bne.n	8004c50 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bbc:	4b31      	ldr	r3, [pc, #196]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a30      	ldr	r2, [pc, #192]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7fd fe58 	bl	800287c <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd0:	f7fd fe54 	bl	800287c <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e087      	b.n	8004cf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be2:	4b28      	ldr	r3, [pc, #160]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f0      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	69da      	ldr	r2, [r3, #28]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	019b      	lsls	r3, r3, #6
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c04:	085b      	lsrs	r3, r3, #1
 8004c06:	3b01      	subs	r3, #1
 8004c08:	041b      	lsls	r3, r3, #16
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c10:	061b      	lsls	r3, r3, #24
 8004c12:	4313      	orrs	r3, r2
 8004c14:	4a1b      	ldr	r2, [pc, #108]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004c16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c1a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c1c:	4b19      	ldr	r3, [pc, #100]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a18      	ldr	r2, [pc, #96]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c28:	f7fd fe28 	bl	800287c <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c30:	f7fd fe24 	bl	800287c <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e057      	b.n	8004cf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c42:	4b10      	ldr	r3, [pc, #64]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f0      	beq.n	8004c30 <HAL_RCC_OscConfig+0x478>
 8004c4e:	e04f      	b.n	8004cf0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c50:	4b0c      	ldr	r3, [pc, #48]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a0b      	ldr	r2, [pc, #44]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5c:	f7fd fe0e 	bl	800287c <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c64:	f7fd fe0a 	bl	800287c <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e03d      	b.n	8004cf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c76:	4b03      	ldr	r3, [pc, #12]	; (8004c84 <HAL_RCC_OscConfig+0x4cc>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1f0      	bne.n	8004c64 <HAL_RCC_OscConfig+0x4ac>
 8004c82:	e035      	b.n	8004cf0 <HAL_RCC_OscConfig+0x538>
 8004c84:	40023800 	.word	0x40023800
 8004c88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004c8c:	4b1b      	ldr	r3, [pc, #108]	; (8004cfc <HAL_RCC_OscConfig+0x544>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d028      	beq.n	8004cec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d121      	bne.n	8004cec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d11a      	bne.n	8004cec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cc2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d111      	bne.n	8004cec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd2:	085b      	lsrs	r3, r3, #1
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d107      	bne.n	8004cec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e000      	b.n	8004cf2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	40023800 	.word	0x40023800

08004d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0d0      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d18:	4b6a      	ldr	r3, [pc, #424]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 030f 	and.w	r3, r3, #15
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d910      	bls.n	8004d48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d26:	4b67      	ldr	r3, [pc, #412]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f023 020f 	bic.w	r2, r3, #15
 8004d2e:	4965      	ldr	r1, [pc, #404]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d36:	4b63      	ldr	r3, [pc, #396]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d001      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0b8      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d020      	beq.n	8004d96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d005      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d60:	4b59      	ldr	r3, [pc, #356]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	4a58      	ldr	r2, [pc, #352]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0308 	and.w	r3, r3, #8
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d005      	beq.n	8004d84 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d78:	4b53      	ldr	r3, [pc, #332]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	4a52      	ldr	r2, [pc, #328]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d84:	4b50      	ldr	r3, [pc, #320]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	494d      	ldr	r1, [pc, #308]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d040      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d107      	bne.n	8004dba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004daa:	4b47      	ldr	r3, [pc, #284]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d115      	bne.n	8004de2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e07f      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d107      	bne.n	8004dd2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dc2:	4b41      	ldr	r3, [pc, #260]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d109      	bne.n	8004de2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e073      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd2:	4b3d      	ldr	r3, [pc, #244]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e06b      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004de2:	4b39      	ldr	r3, [pc, #228]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f023 0203 	bic.w	r2, r3, #3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	4936      	ldr	r1, [pc, #216]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df4:	f7fd fd42 	bl	800287c <HAL_GetTick>
 8004df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dfa:	e00a      	b.n	8004e12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dfc:	f7fd fd3e 	bl	800287c <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e053      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e12:	4b2d      	ldr	r3, [pc, #180]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 020c 	and.w	r2, r3, #12
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d1eb      	bne.n	8004dfc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e24:	4b27      	ldr	r3, [pc, #156]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 030f 	and.w	r3, r3, #15
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d210      	bcs.n	8004e54 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e32:	4b24      	ldr	r3, [pc, #144]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f023 020f 	bic.w	r2, r3, #15
 8004e3a:	4922      	ldr	r1, [pc, #136]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e42:	4b20      	ldr	r3, [pc, #128]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d001      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e032      	b.n	8004eba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d008      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e60:	4b19      	ldr	r3, [pc, #100]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	4916      	ldr	r1, [pc, #88]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d009      	beq.n	8004e92 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e7e:	4b12      	ldr	r3, [pc, #72]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	490e      	ldr	r1, [pc, #56]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e92:	f000 f821 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
 8004e96:	4602      	mov	r2, r0
 8004e98:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	091b      	lsrs	r3, r3, #4
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	490a      	ldr	r1, [pc, #40]	; (8004ecc <HAL_RCC_ClockConfig+0x1cc>)
 8004ea4:	5ccb      	ldrb	r3, [r1, r3]
 8004ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eaa:	4a09      	ldr	r2, [pc, #36]	; (8004ed0 <HAL_RCC_ClockConfig+0x1d0>)
 8004eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004eae:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <HAL_RCC_ClockConfig+0x1d4>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fd fbda 	bl	800266c <HAL_InitTick>

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40023c00 	.word	0x40023c00
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	08008a6c 	.word	0x08008a6c
 8004ed0:	20000000 	.word	0x20000000
 8004ed4:	20000004 	.word	0x20000004

08004ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004edc:	b090      	sub	sp, #64	; 0x40
 8004ede:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ee8:	2300      	movs	r3, #0
 8004eea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ef0:	4b59      	ldr	r3, [pc, #356]	; (8005058 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 030c 	and.w	r3, r3, #12
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d00d      	beq.n	8004f18 <HAL_RCC_GetSysClockFreq+0x40>
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	f200 80a1 	bhi.w	8005044 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <HAL_RCC_GetSysClockFreq+0x34>
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d003      	beq.n	8004f12 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f0a:	e09b      	b.n	8005044 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f0c:	4b53      	ldr	r3, [pc, #332]	; (800505c <HAL_RCC_GetSysClockFreq+0x184>)
 8004f0e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f10:	e09b      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f12:	4b53      	ldr	r3, [pc, #332]	; (8005060 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f16:	e098      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f18:	4b4f      	ldr	r3, [pc, #316]	; (8005058 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f20:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004f22:	4b4d      	ldr	r3, [pc, #308]	; (8005058 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d028      	beq.n	8004f80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f2e:	4b4a      	ldr	r3, [pc, #296]	; (8005058 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	099b      	lsrs	r3, r3, #6
 8004f34:	2200      	movs	r2, #0
 8004f36:	623b      	str	r3, [r7, #32]
 8004f38:	627a      	str	r2, [r7, #36]	; 0x24
 8004f3a:	6a3b      	ldr	r3, [r7, #32]
 8004f3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f40:	2100      	movs	r1, #0
 8004f42:	4b47      	ldr	r3, [pc, #284]	; (8005060 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f44:	fb03 f201 	mul.w	r2, r3, r1
 8004f48:	2300      	movs	r3, #0
 8004f4a:	fb00 f303 	mul.w	r3, r0, r3
 8004f4e:	4413      	add	r3, r2
 8004f50:	4a43      	ldr	r2, [pc, #268]	; (8005060 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f52:	fba0 1202 	umull	r1, r2, r0, r2
 8004f56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f58:	460a      	mov	r2, r1
 8004f5a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f5e:	4413      	add	r3, r2
 8004f60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f64:	2200      	movs	r2, #0
 8004f66:	61bb      	str	r3, [r7, #24]
 8004f68:	61fa      	str	r2, [r7, #28]
 8004f6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004f72:	f7fb f949 	bl	8000208 <__aeabi_uldivmod>
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f7e:	e053      	b.n	8005028 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f80:	4b35      	ldr	r3, [pc, #212]	; (8005058 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	099b      	lsrs	r3, r3, #6
 8004f86:	2200      	movs	r2, #0
 8004f88:	613b      	str	r3, [r7, #16]
 8004f8a:	617a      	str	r2, [r7, #20]
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004f92:	f04f 0b00 	mov.w	fp, #0
 8004f96:	4652      	mov	r2, sl
 8004f98:	465b      	mov	r3, fp
 8004f9a:	f04f 0000 	mov.w	r0, #0
 8004f9e:	f04f 0100 	mov.w	r1, #0
 8004fa2:	0159      	lsls	r1, r3, #5
 8004fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fa8:	0150      	lsls	r0, r2, #5
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	ebb2 080a 	subs.w	r8, r2, sl
 8004fb2:	eb63 090b 	sbc.w	r9, r3, fp
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004fc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004fc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004fca:	ebb2 0408 	subs.w	r4, r2, r8
 8004fce:	eb63 0509 	sbc.w	r5, r3, r9
 8004fd2:	f04f 0200 	mov.w	r2, #0
 8004fd6:	f04f 0300 	mov.w	r3, #0
 8004fda:	00eb      	lsls	r3, r5, #3
 8004fdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fe0:	00e2      	lsls	r2, r4, #3
 8004fe2:	4614      	mov	r4, r2
 8004fe4:	461d      	mov	r5, r3
 8004fe6:	eb14 030a 	adds.w	r3, r4, sl
 8004fea:	603b      	str	r3, [r7, #0]
 8004fec:	eb45 030b 	adc.w	r3, r5, fp
 8004ff0:	607b      	str	r3, [r7, #4]
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ffe:	4629      	mov	r1, r5
 8005000:	028b      	lsls	r3, r1, #10
 8005002:	4621      	mov	r1, r4
 8005004:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005008:	4621      	mov	r1, r4
 800500a:	028a      	lsls	r2, r1, #10
 800500c:	4610      	mov	r0, r2
 800500e:	4619      	mov	r1, r3
 8005010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005012:	2200      	movs	r2, #0
 8005014:	60bb      	str	r3, [r7, #8]
 8005016:	60fa      	str	r2, [r7, #12]
 8005018:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800501c:	f7fb f8f4 	bl	8000208 <__aeabi_uldivmod>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4613      	mov	r3, r2
 8005026:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005028:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <HAL_RCC_GetSysClockFreq+0x180>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	0c1b      	lsrs	r3, r3, #16
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	3301      	adds	r3, #1
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8005038:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005040:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005042:	e002      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005044:	4b05      	ldr	r3, [pc, #20]	; (800505c <HAL_RCC_GetSysClockFreq+0x184>)
 8005046:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800504a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800504c:	4618      	mov	r0, r3
 800504e:	3740      	adds	r7, #64	; 0x40
 8005050:	46bd      	mov	sp, r7
 8005052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005056:	bf00      	nop
 8005058:	40023800 	.word	0x40023800
 800505c:	00f42400 	.word	0x00f42400
 8005060:	017d7840 	.word	0x017d7840

08005064 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005068:	4b03      	ldr	r3, [pc, #12]	; (8005078 <HAL_RCC_GetHCLKFreq+0x14>)
 800506a:	681b      	ldr	r3, [r3, #0]
}
 800506c:	4618      	mov	r0, r3
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	20000000 	.word	0x20000000

0800507c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005080:	f7ff fff0 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 8005084:	4602      	mov	r2, r0
 8005086:	4b05      	ldr	r3, [pc, #20]	; (800509c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	0a9b      	lsrs	r3, r3, #10
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	4903      	ldr	r1, [pc, #12]	; (80050a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005092:	5ccb      	ldrb	r3, [r1, r3]
 8005094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005098:	4618      	mov	r0, r3
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40023800 	.word	0x40023800
 80050a0:	08008a7c 	.word	0x08008a7c

080050a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050a8:	f7ff ffdc 	bl	8005064 <HAL_RCC_GetHCLKFreq>
 80050ac:	4602      	mov	r2, r0
 80050ae:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	0b5b      	lsrs	r3, r3, #13
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	4903      	ldr	r1, [pc, #12]	; (80050c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ba:	5ccb      	ldrb	r3, [r1, r3]
 80050bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40023800 	.word	0x40023800
 80050c8:	08008a7c 	.word	0x08008a7c

080050cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	220f      	movs	r2, #15
 80050da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80050dc:	4b12      	ldr	r3, [pc, #72]	; (8005128 <HAL_RCC_GetClockConfig+0x5c>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 0203 	and.w	r2, r3, #3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80050e8:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <HAL_RCC_GetClockConfig+0x5c>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80050f4:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <HAL_RCC_GetClockConfig+0x5c>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005100:	4b09      	ldr	r3, [pc, #36]	; (8005128 <HAL_RCC_GetClockConfig+0x5c>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	08db      	lsrs	r3, r3, #3
 8005106:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800510e:	4b07      	ldr	r3, [pc, #28]	; (800512c <HAL_RCC_GetClockConfig+0x60>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 020f 	and.w	r2, r3, #15
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	601a      	str	r2, [r3, #0]
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40023800 	.word	0x40023800
 800512c:	40023c00 	.word	0x40023c00

08005130 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005138:	2300      	movs	r3, #0
 800513a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005140:	2300      	movs	r3, #0
 8005142:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005144:	2300      	movs	r3, #0
 8005146:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005148:	2300      	movs	r3, #0
 800514a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	2b00      	cmp	r3, #0
 8005156:	d012      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005158:	4b69      	ldr	r3, [pc, #420]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	4a68      	ldr	r2, [pc, #416]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800515e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005162:	6093      	str	r3, [r2, #8]
 8005164:	4b66      	ldr	r3, [pc, #408]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516c:	4964      	ldr	r1, [pc, #400]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800516e:	4313      	orrs	r3, r2
 8005170:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800517a:	2301      	movs	r3, #1
 800517c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d017      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800518a:	4b5d      	ldr	r3, [pc, #372]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800518c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005190:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005198:	4959      	ldr	r1, [pc, #356]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051a8:	d101      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80051aa:	2301      	movs	r3, #1
 80051ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80051b6:	2301      	movs	r3, #1
 80051b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d017      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051c6:	4b4e      	ldr	r3, [pc, #312]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	494a      	ldr	r1, [pc, #296]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051e4:	d101      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80051e6:	2301      	movs	r3, #1
 80051e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80051f2:	2301      	movs	r3, #1
 80051f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005202:	2301      	movs	r3, #1
 8005204:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0320 	and.w	r3, r3, #32
 800520e:	2b00      	cmp	r3, #0
 8005210:	f000 808b 	beq.w	800532a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005214:	4b3a      	ldr	r3, [pc, #232]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005218:	4a39      	ldr	r2, [pc, #228]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800521a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800521e:	6413      	str	r3, [r2, #64]	; 0x40
 8005220:	4b37      	ldr	r3, [pc, #220]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005228:	60bb      	str	r3, [r7, #8]
 800522a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800522c:	4b35      	ldr	r3, [pc, #212]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a34      	ldr	r2, [pc, #208]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005236:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005238:	f7fd fb20 	bl	800287c <HAL_GetTick>
 800523c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800523e:	e008      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005240:	f7fd fb1c 	bl	800287c <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b64      	cmp	r3, #100	; 0x64
 800524c:	d901      	bls.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e357      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005252:	4b2c      	ldr	r3, [pc, #176]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d0f0      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800525e:	4b28      	ldr	r3, [pc, #160]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005266:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d035      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	429a      	cmp	r2, r3
 800527a:	d02e      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800527c:	4b20      	ldr	r3, [pc, #128]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800527e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005284:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005286:	4b1e      	ldr	r3, [pc, #120]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528a:	4a1d      	ldr	r2, [pc, #116]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800528c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005290:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005292:	4b1b      	ldr	r3, [pc, #108]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005296:	4a1a      	ldr	r2, [pc, #104]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800529c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800529e:	4a18      	ldr	r2, [pc, #96]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052a4:	4b16      	ldr	r3, [pc, #88]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d114      	bne.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b0:	f7fd fae4 	bl	800287c <HAL_GetTick>
 80052b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b6:	e00a      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052b8:	f7fd fae0 	bl	800287c <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d901      	bls.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e319      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ce:	4b0c      	ldr	r3, [pc, #48]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0ee      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052e6:	d111      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80052e8:	4b05      	ldr	r3, [pc, #20]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052f4:	4b04      	ldr	r3, [pc, #16]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80052f6:	400b      	ands	r3, r1
 80052f8:	4901      	ldr	r1, [pc, #4]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	608b      	str	r3, [r1, #8]
 80052fe:	e00b      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005300:	40023800 	.word	0x40023800
 8005304:	40007000 	.word	0x40007000
 8005308:	0ffffcff 	.word	0x0ffffcff
 800530c:	4baa      	ldr	r3, [pc, #680]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	4aa9      	ldr	r2, [pc, #676]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005312:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005316:	6093      	str	r3, [r2, #8]
 8005318:	4ba7      	ldr	r3, [pc, #668]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800531a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005324:	49a4      	ldr	r1, [pc, #656]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005326:	4313      	orrs	r3, r2
 8005328:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0310 	and.w	r3, r3, #16
 8005332:	2b00      	cmp	r3, #0
 8005334:	d010      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005336:	4ba0      	ldr	r3, [pc, #640]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800533c:	4a9e      	ldr	r2, [pc, #632]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800533e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005342:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005346:	4b9c      	ldr	r3, [pc, #624]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005348:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005350:	4999      	ldr	r1, [pc, #612]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00a      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005364:	4b94      	ldr	r3, [pc, #592]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005372:	4991      	ldr	r1, [pc, #580]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005374:	4313      	orrs	r3, r2
 8005376:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005386:	4b8c      	ldr	r3, [pc, #560]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005394:	4988      	ldr	r1, [pc, #544]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00a      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053a8:	4b83      	ldr	r3, [pc, #524]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053b6:	4980      	ldr	r1, [pc, #512]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053ca:	4b7b      	ldr	r3, [pc, #492]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d8:	4977      	ldr	r1, [pc, #476]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053ec:	4b72      	ldr	r3, [pc, #456]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f2:	f023 0203 	bic.w	r2, r3, #3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fa:	496f      	ldr	r1, [pc, #444]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800540e:	4b6a      	ldr	r3, [pc, #424]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005414:	f023 020c 	bic.w	r2, r3, #12
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800541c:	4966      	ldr	r1, [pc, #408]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005430:	4b61      	ldr	r3, [pc, #388]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005436:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800543e:	495e      	ldr	r1, [pc, #376]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005452:	4b59      	ldr	r3, [pc, #356]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005458:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005460:	4955      	ldr	r1, [pc, #340]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005474:	4b50      	ldr	r3, [pc, #320]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005482:	494d      	ldr	r1, [pc, #308]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005496:	4b48      	ldr	r3, [pc, #288]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a4:	4944      	ldr	r1, [pc, #272]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80054b8:	4b3f      	ldr	r3, [pc, #252]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c6:	493c      	ldr	r1, [pc, #240]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80054da:	4b37      	ldr	r3, [pc, #220]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e8:	4933      	ldr	r1, [pc, #204]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054fc:	4b2e      	ldr	r3, [pc, #184]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005502:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800550a:	492b      	ldr	r1, [pc, #172]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800550c:	4313      	orrs	r3, r2
 800550e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d011      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800551e:	4b26      	ldr	r3, [pc, #152]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005524:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800552c:	4922      	ldr	r1, [pc, #136]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005538:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800553c:	d101      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800553e:	2301      	movs	r3, #1
 8005540:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0308 	and.w	r3, r3, #8
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800554e:	2301      	movs	r3, #1
 8005550:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800555e:	4b16      	ldr	r3, [pc, #88]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005564:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800556c:	4912      	ldr	r1, [pc, #72]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800556e:	4313      	orrs	r3, r2
 8005570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00b      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005580:	4b0d      	ldr	r3, [pc, #52]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005586:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005590:	4909      	ldr	r1, [pc, #36]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d006      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 80d9 	beq.w	800575e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055ac:	4b02      	ldr	r3, [pc, #8]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a01      	ldr	r2, [pc, #4]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055b6:	e001      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80055b8:	40023800 	.word	0x40023800
 80055bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055be:	f7fd f95d 	bl	800287c <HAL_GetTick>
 80055c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055c4:	e008      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055c6:	f7fd f959 	bl	800287c <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b64      	cmp	r3, #100	; 0x64
 80055d2:	d901      	bls.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e194      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055d8:	4b6c      	ldr	r3, [pc, #432]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1f0      	bne.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d021      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d11d      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80055f8:	4b64      	ldr	r3, [pc, #400]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055fe:	0c1b      	lsrs	r3, r3, #16
 8005600:	f003 0303 	and.w	r3, r3, #3
 8005604:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005606:	4b61      	ldr	r3, [pc, #388]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800560c:	0e1b      	lsrs	r3, r3, #24
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	019a      	lsls	r2, r3, #6
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	041b      	lsls	r3, r3, #16
 800561e:	431a      	orrs	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	061b      	lsls	r3, r3, #24
 8005624:	431a      	orrs	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	071b      	lsls	r3, r3, #28
 800562c:	4957      	ldr	r1, [pc, #348]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800562e:	4313      	orrs	r3, r2
 8005630:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d004      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005648:	d00a      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005652:	2b00      	cmp	r3, #0
 8005654:	d02e      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800565e:	d129      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005660:	4b4a      	ldr	r3, [pc, #296]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005662:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005666:	0c1b      	lsrs	r3, r3, #16
 8005668:	f003 0303 	and.w	r3, r3, #3
 800566c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800566e:	4b47      	ldr	r3, [pc, #284]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005674:	0f1b      	lsrs	r3, r3, #28
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	019a      	lsls	r2, r3, #6
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	041b      	lsls	r3, r3, #16
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	061b      	lsls	r3, r3, #24
 800568e:	431a      	orrs	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	071b      	lsls	r3, r3, #28
 8005694:	493d      	ldr	r1, [pc, #244]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800569c:	4b3b      	ldr	r3, [pc, #236]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800569e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056a2:	f023 021f 	bic.w	r2, r3, #31
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	3b01      	subs	r3, #1
 80056ac:	4937      	ldr	r1, [pc, #220]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d01d      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056c0:	4b32      	ldr	r3, [pc, #200]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056c6:	0e1b      	lsrs	r3, r3, #24
 80056c8:	f003 030f 	and.w	r3, r3, #15
 80056cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056ce:	4b2f      	ldr	r3, [pc, #188]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056d4:	0f1b      	lsrs	r3, r3, #28
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	019a      	lsls	r2, r3, #6
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	041b      	lsls	r3, r3, #16
 80056e8:	431a      	orrs	r2, r3
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	061b      	lsls	r3, r3, #24
 80056ee:	431a      	orrs	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	071b      	lsls	r3, r3, #28
 80056f4:	4925      	ldr	r1, [pc, #148]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d011      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	019a      	lsls	r2, r3, #6
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	041b      	lsls	r3, r3, #16
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	061b      	lsls	r3, r3, #24
 800571c:	431a      	orrs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	071b      	lsls	r3, r3, #28
 8005724:	4919      	ldr	r1, [pc, #100]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005726:	4313      	orrs	r3, r2
 8005728:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800572c:	4b17      	ldr	r3, [pc, #92]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a16      	ldr	r2, [pc, #88]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005732:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005736:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005738:	f7fd f8a0 	bl	800287c <HAL_GetTick>
 800573c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800573e:	e008      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005740:	f7fd f89c 	bl	800287c <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b64      	cmp	r3, #100	; 0x64
 800574c:	d901      	bls.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e0d7      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005752:	4b0e      	ldr	r3, [pc, #56]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0f0      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	2b01      	cmp	r3, #1
 8005762:	f040 80cd 	bne.w	8005900 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005766:	4b09      	ldr	r3, [pc, #36]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a08      	ldr	r2, [pc, #32]	; (800578c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800576c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005770:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005772:	f7fd f883 	bl	800287c <HAL_GetTick>
 8005776:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005778:	e00a      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800577a:	f7fd f87f 	bl	800287c <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b64      	cmp	r3, #100	; 0x64
 8005786:	d903      	bls.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e0ba      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800578c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005790:	4b5e      	ldr	r3, [pc, #376]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800579c:	d0ed      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d009      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d02e      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d12a      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057c6:	4b51      	ldr	r3, [pc, #324]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057cc:	0c1b      	lsrs	r3, r3, #16
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057d4:	4b4d      	ldr	r3, [pc, #308]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057da:	0f1b      	lsrs	r3, r3, #28
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	019a      	lsls	r2, r3, #6
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	041b      	lsls	r3, r3, #16
 80057ec:	431a      	orrs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	061b      	lsls	r3, r3, #24
 80057f4:	431a      	orrs	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	071b      	lsls	r3, r3, #28
 80057fa:	4944      	ldr	r1, [pc, #272]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005802:	4b42      	ldr	r3, [pc, #264]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005808:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005810:	3b01      	subs	r3, #1
 8005812:	021b      	lsls	r3, r3, #8
 8005814:	493d      	ldr	r1, [pc, #244]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005816:	4313      	orrs	r3, r2
 8005818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d022      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800582c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005830:	d11d      	bne.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005832:	4b36      	ldr	r3, [pc, #216]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005838:	0e1b      	lsrs	r3, r3, #24
 800583a:	f003 030f 	and.w	r3, r3, #15
 800583e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005840:	4b32      	ldr	r3, [pc, #200]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005846:	0f1b      	lsrs	r3, r3, #28
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	019a      	lsls	r2, r3, #6
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	041b      	lsls	r3, r3, #16
 800585a:	431a      	orrs	r2, r3
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	061b      	lsls	r3, r3, #24
 8005860:	431a      	orrs	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	071b      	lsls	r3, r3, #28
 8005866:	4929      	ldr	r1, [pc, #164]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005868:	4313      	orrs	r3, r2
 800586a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	2b00      	cmp	r3, #0
 8005878:	d028      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800587a:	4b24      	ldr	r3, [pc, #144]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800587c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005880:	0e1b      	lsrs	r3, r3, #24
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005888:	4b20      	ldr	r3, [pc, #128]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800588a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588e:	0c1b      	lsrs	r3, r3, #16
 8005890:	f003 0303 	and.w	r3, r3, #3
 8005894:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	019a      	lsls	r2, r3, #6
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	041b      	lsls	r3, r3, #16
 80058a0:	431a      	orrs	r2, r3
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	061b      	lsls	r3, r3, #24
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	071b      	lsls	r3, r3, #28
 80058ae:	4917      	ldr	r1, [pc, #92]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80058b6:	4b15      	ldr	r3, [pc, #84]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c4:	4911      	ldr	r1, [pc, #68]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058cc:	4b0f      	ldr	r3, [pc, #60]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a0e      	ldr	r2, [pc, #56]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058d8:	f7fc ffd0 	bl	800287c <HAL_GetTick>
 80058dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058de:	e008      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058e0:	f7fc ffcc 	bl	800287c <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b64      	cmp	r3, #100	; 0x64
 80058ec:	d901      	bls.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e007      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058f2:	4b06      	ldr	r3, [pc, #24]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058fe:	d1ef      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3720      	adds	r7, #32
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40023800 	.word	0x40023800

08005910 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800591c:	2300      	movs	r3, #0
 800591e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8005920:	2300      	movs	r3, #0
 8005922:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8005924:	2300      	movs	r3, #0
 8005926:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800592e:	f040 808c 	bne.w	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005932:	4b95      	ldr	r3, [pc, #596]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005938:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005940:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005948:	d07c      	beq.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005950:	d87d      	bhi.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d004      	beq.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800595e:	d039      	beq.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005960:	e075      	b.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005962:	4b89      	ldr	r3, [pc, #548]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d108      	bne.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800596e:	4b86      	ldr	r3, [pc, #536]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005976:	4a85      	ldr	r2, [pc, #532]	; (8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005978:	fbb2 f3f3 	udiv	r3, r2, r3
 800597c:	613b      	str	r3, [r7, #16]
 800597e:	e007      	b.n	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005980:	4b81      	ldr	r3, [pc, #516]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005988:	4a81      	ldr	r2, [pc, #516]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800598a:	fbb2 f3f3 	udiv	r3, r2, r3
 800598e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005990:	4b7d      	ldr	r3, [pc, #500]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005996:	0e1b      	lsrs	r3, r3, #24
 8005998:	f003 030f 	and.w	r3, r3, #15
 800599c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800599e:	4b7a      	ldr	r3, [pc, #488]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a4:	099b      	lsrs	r3, r3, #6
 80059a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	fb03 f202 	mul.w	r2, r3, r2
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80059b8:	4b73      	ldr	r3, [pc, #460]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059be:	0a1b      	lsrs	r3, r3, #8
 80059c0:	f003 031f 	and.w	r3, r3, #31
 80059c4:	3301      	adds	r3, #1
 80059c6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d0:	617b      	str	r3, [r7, #20]
        break;
 80059d2:	e03d      	b.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80059d4:	4b6c      	ldr	r3, [pc, #432]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d108      	bne.n	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80059e0:	4b69      	ldr	r3, [pc, #420]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059e8:	4a68      	ldr	r2, [pc, #416]	; (8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80059ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ee:	613b      	str	r3, [r7, #16]
 80059f0:	e007      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80059f2:	4b65      	ldr	r3, [pc, #404]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059fa:	4a65      	ldr	r2, [pc, #404]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80059fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a00:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005a02:	4b61      	ldr	r3, [pc, #388]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a08:	0e1b      	lsrs	r3, r3, #24
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005a10:	4b5d      	ldr	r3, [pc, #372]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a16:	099b      	lsrs	r3, r3, #6
 8005a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	fb03 f202 	mul.w	r2, r3, r2
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a28:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005a2a:	4b57      	ldr	r3, [pc, #348]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a30:	f003 031f 	and.w	r3, r3, #31
 8005a34:	3301      	adds	r3, #1
 8005a36:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a40:	617b      	str	r3, [r7, #20]
        break;
 8005a42:	e005      	b.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005a44:	4b53      	ldr	r3, [pc, #332]	; (8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005a46:	617b      	str	r3, [r7, #20]
        break;
 8005a48:	e002      	b.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 8005a4a:	bf00      	nop
 8005a4c:	e000      	b.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 8005a4e:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a56:	f040 808c 	bne.w	8005b72 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005a5a:	4b4b      	ldr	r3, [pc, #300]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a60:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005a68:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a70:	d07c      	beq.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a78:	d87d      	bhi.n	8005b76 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d004      	beq.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a86:	d039      	beq.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005a88:	e075      	b.n	8005b76 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005a8a:	4b3f      	ldr	r3, [pc, #252]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d108      	bne.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a96:	4b3c      	ldr	r3, [pc, #240]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a9e:	4a3b      	ldr	r2, [pc, #236]	; (8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	e007      	b.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005aa8:	4b37      	ldr	r3, [pc, #220]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ab0:	4a37      	ldr	r2, [pc, #220]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005ab8:	4b33      	ldr	r3, [pc, #204]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005abe:	0e1b      	lsrs	r3, r3, #24
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005ac6:	4b30      	ldr	r3, [pc, #192]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005acc:	099b      	lsrs	r3, r3, #6
 8005ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	fb03 f202 	mul.w	r2, r3, r2
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ade:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005ae0:	4b29      	ldr	r3, [pc, #164]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ae6:	0a1b      	lsrs	r3, r3, #8
 8005ae8:	f003 031f 	and.w	r3, r3, #31
 8005aec:	3301      	adds	r3, #1
 8005aee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af8:	617b      	str	r3, [r7, #20]
        break;
 8005afa:	e03d      	b.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005afc:	4b22      	ldr	r3, [pc, #136]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d108      	bne.n	8005b1a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b08:	4b1f      	ldr	r3, [pc, #124]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b10:	4a1e      	ldr	r2, [pc, #120]	; (8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b16:	613b      	str	r3, [r7, #16]
 8005b18:	e007      	b.n	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005b1a:	4b1b      	ldr	r3, [pc, #108]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b22:	4a1b      	ldr	r2, [pc, #108]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b28:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005b2a:	4b17      	ldr	r3, [pc, #92]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b30:	0e1b      	lsrs	r3, r3, #24
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005b38:	4b13      	ldr	r3, [pc, #76]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b3e:	099b      	lsrs	r3, r3, #6
 8005b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	fb03 f202 	mul.w	r2, r3, r2
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b50:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005b52:	4b0d      	ldr	r3, [pc, #52]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b58:	f003 031f 	and.w	r3, r3, #31
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b68:	617b      	str	r3, [r7, #20]
        break;
 8005b6a:	e005      	b.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005b6c:	4b09      	ldr	r3, [pc, #36]	; (8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005b6e:	617b      	str	r3, [r7, #20]
        break;
 8005b70:	e002      	b.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 8005b72:	bf00      	nop
 8005b74:	e000      	b.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 8005b76:	bf00      	nop

  return frequency;
 8005b78:	697b      	ldr	r3, [r7, #20]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	371c      	adds	r7, #28
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40023800 	.word	0x40023800
 8005b8c:	00f42400 	.word	0x00f42400
 8005b90:	017d7840 	.word	0x017d7840
 8005b94:	00bb8000 	.word	0x00bb8000

08005b98 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e081      	b.n	8005cae <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	7f5b      	ldrb	r3, [r3, #29]
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d105      	bne.n	8005bc0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7fc f980 	bl	8001ec0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	22ca      	movs	r2, #202	; 0xca
 8005bcc:	625a      	str	r2, [r3, #36]	; 0x24
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2253      	movs	r2, #83	; 0x53
 8005bd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fb16 	bl	8006208 <RTC_EnterInitMode>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d008      	beq.n	8005bf4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	22ff      	movs	r2, #255	; 0xff
 8005be8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2204      	movs	r2, #4
 8005bee:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e05c      	b.n	8005cae <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6899      	ldr	r1, [r3, #8]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	4b2e      	ldr	r3, [pc, #184]	; (8005cb8 <HAL_RTC_Init+0x120>)
 8005c00:	400b      	ands	r3, r1
 8005c02:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6899      	ldr	r1, [r3, #8]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	431a      	orrs	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	68d2      	ldr	r2, [r2, #12]
 8005c2a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6919      	ldr	r1, [r3, #16]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	041a      	lsls	r2, r3, #16
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68da      	ldr	r2, [r3, #12]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c4e:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10e      	bne.n	8005c7c <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 faaa 	bl	80061b8 <HAL_RTC_WaitForSynchro>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d008      	beq.n	8005c7c <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	22ff      	movs	r2, #255	; 0xff
 8005c70:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2204      	movs	r2, #4
 8005c76:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e018      	b.n	8005cae <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0208 	bic.w	r2, r2, #8
 8005c8a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	699a      	ldr	r2, [r3, #24]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	22ff      	movs	r2, #255	; 0xff
 8005ca4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005cac:	2300      	movs	r3, #0
  }
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	ff8fffbf 	.word	0xff8fffbf

08005cbc <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005cbc:	b590      	push	{r4, r7, lr}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	7f1b      	ldrb	r3, [r3, #28]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d101      	bne.n	8005cd8 <HAL_RTC_SetTime+0x1c>
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e0a8      	b.n	8005e2a <HAL_RTC_SetTime+0x16e>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d126      	bne.n	8005d38 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d102      	bne.n	8005cfe <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 faac 	bl	8006260 <RTC_ByteToBcd2>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	785b      	ldrb	r3, [r3, #1]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 faa5 	bl	8006260 <RTC_ByteToBcd2>
 8005d16:	4603      	mov	r3, r0
 8005d18:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005d1a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	789b      	ldrb	r3, [r3, #2]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 fa9d 	bl	8006260 <RTC_ByteToBcd2>
 8005d26:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005d28:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	7b1b      	ldrb	r3, [r3, #12]
 8005d30:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	e018      	b.n	8005d6a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d102      	bne.n	8005d4c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	785b      	ldrb	r3, [r3, #1]
 8005d56:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005d58:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005d5e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	7b1b      	ldrb	r3, [r3, #12]
 8005d64:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005d66:	4313      	orrs	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	22ca      	movs	r2, #202	; 0xca
 8005d70:	625a      	str	r2, [r3, #36]	; 0x24
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2253      	movs	r2, #83	; 0x53
 8005d78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 fa44 	bl	8006208 <RTC_EnterInitMode>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00b      	beq.n	8005d9e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	22ff      	movs	r2, #255	; 0xff
 8005d8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2204      	movs	r2, #4
 8005d92:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e045      	b.n	8005e2a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	6979      	ldr	r1, [r7, #20]
 8005da4:	4b23      	ldr	r3, [pc, #140]	; (8005e34 <HAL_RTC_SetTime+0x178>)
 8005da6:	400b      	ands	r3, r1
 8005da8:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005db8:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6899      	ldr	r1, [r3, #8]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	691a      	ldr	r2, [r3, #16]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005de0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f003 0320 	and.w	r3, r3, #32
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d111      	bne.n	8005e14 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 f9e1 	bl	80061b8 <HAL_RTC_WaitForSynchro>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00b      	beq.n	8005e14 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	22ff      	movs	r2, #255	; 0xff
 8005e02:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2204      	movs	r2, #4
 8005e08:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e00a      	b.n	8005e2a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	22ff      	movs	r2, #255	; 0xff
 8005e1a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005e28:	2300      	movs	r3, #0
  }
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	371c      	adds	r7, #28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd90      	pop	{r4, r7, pc}
 8005e32:	bf00      	nop
 8005e34:	007f7f7f 	.word	0x007f7f7f

08005e38 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e38:	b590      	push	{r4, r7, lr}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8005e44:	2300      	movs	r3, #0
 8005e46:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	7f1b      	ldrb	r3, [r3, #28]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d101      	bne.n	8005e54 <HAL_RTC_SetDate+0x1c>
 8005e50:	2302      	movs	r3, #2
 8005e52:	e092      	b.n	8005f7a <HAL_RTC_SetDate+0x142>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2201      	movs	r2, #1
 8005e58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10e      	bne.n	8005e84 <HAL_RTC_SetDate+0x4c>
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	785b      	ldrb	r3, [r3, #1]
 8005e6a:	f003 0310 	and.w	r3, r3, #16
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d008      	beq.n	8005e84 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	785b      	ldrb	r3, [r3, #1]
 8005e76:	f023 0310 	bic.w	r3, r3, #16
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	330a      	adds	r3, #10
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d11c      	bne.n	8005ec4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	78db      	ldrb	r3, [r3, #3]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 f9e6 	bl	8006260 <RTC_ByteToBcd2>
 8005e94:	4603      	mov	r3, r0
 8005e96:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	785b      	ldrb	r3, [r3, #1]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 f9df 	bl	8006260 <RTC_ByteToBcd2>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005ea6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	789b      	ldrb	r3, [r3, #2]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 f9d7 	bl	8006260 <RTC_ByteToBcd2>
 8005eb2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005eb4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	e00e      	b.n	8005ee2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	78db      	ldrb	r3, [r3, #3]
 8005ec8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	785b      	ldrb	r3, [r3, #1]
 8005ece:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005ed0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8005ed6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	22ca      	movs	r2, #202	; 0xca
 8005ee8:	625a      	str	r2, [r3, #36]	; 0x24
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2253      	movs	r2, #83	; 0x53
 8005ef0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 f988 	bl	8006208 <RTC_EnterInitMode>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00b      	beq.n	8005f16 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	22ff      	movs	r2, #255	; 0xff
 8005f04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2204      	movs	r2, #4
 8005f0a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e031      	b.n	8005f7a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	6979      	ldr	r1, [r7, #20]
 8005f1c:	4b19      	ldr	r3, [pc, #100]	; (8005f84 <HAL_RTC_SetDate+0x14c>)
 8005f1e:	400b      	ands	r3, r1
 8005f20:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f30:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f003 0320 	and.w	r3, r3, #32
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d111      	bne.n	8005f64 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f000 f939 	bl	80061b8 <HAL_RTC_WaitForSynchro>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00b      	beq.n	8005f64 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	22ff      	movs	r2, #255	; 0xff
 8005f52:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2204      	movs	r2, #4
 8005f58:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e00a      	b.n	8005f7a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	22ff      	movs	r2, #255	; 0xff
 8005f6a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005f78:	2300      	movs	r3, #0
  }
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd90      	pop	{r4, r7, pc}
 8005f82:	bf00      	nop
 8005f84:	00ffff3f 	.word	0x00ffff3f

08005f88 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005f88:	b590      	push	{r4, r7, lr}
 8005f8a:	b089      	sub	sp, #36	; 0x24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8005f94:	2300      	movs	r3, #0
 8005f96:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	61fb      	str	r3, [r7, #28]
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	7f1b      	ldrb	r3, [r3, #28]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d101      	bne.n	8005fac <HAL_RTC_SetAlarm+0x24>
 8005fa8:	2302      	movs	r3, #2
 8005faa:	e101      	b.n	80061b0 <HAL_RTC_SetAlarm+0x228>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d137      	bne.n	800602e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d102      	bne.n	8005fd2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 f942 	bl	8006260 <RTC_ByteToBcd2>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	785b      	ldrb	r3, [r3, #1]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 f93b 	bl	8006260 <RTC_ByteToBcd2>
 8005fea:	4603      	mov	r3, r0
 8005fec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005fee:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	789b      	ldrb	r3, [r3, #2]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 f933 	bl	8006260 <RTC_ByteToBcd2>
 8005ffa:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8005ffc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	7b1b      	ldrb	r3, [r3, #12]
 8006004:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006006:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006010:	4618      	mov	r0, r3
 8006012:	f000 f925 	bl	8006260 <RTC_ByteToBcd2>
 8006016:	4603      	mov	r3, r0
 8006018:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800601a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8006022:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006028:	4313      	orrs	r3, r2
 800602a:	61fb      	str	r3, [r7, #28]
 800602c:	e023      	b.n	8006076 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006038:	2b00      	cmp	r3, #0
 800603a:	d102      	bne.n	8006042 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2200      	movs	r2, #0
 8006040:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	785b      	ldrb	r3, [r3, #1]
 800604c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800604e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8006054:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	7b1b      	ldrb	r3, [r3, #12]
 800605a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800605c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006064:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006066:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800606c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006072:	4313      	orrs	r3, r2
 8006074:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	4313      	orrs	r3, r2
 8006080:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	22ca      	movs	r2, #202	; 0xca
 8006088:	625a      	str	r2, [r3, #36]	; 0x24
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2253      	movs	r2, #83	; 0x53
 8006090:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800609a:	d13f      	bne.n	800611c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689a      	ldr	r2, [r3, #8]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060aa:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060ba:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060bc:	f7fc fbde 	bl	800287c <HAL_GetTick>
 80060c0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80060c2:	e013      	b.n	80060ec <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80060c4:	f7fc fbda 	bl	800287c <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060d2:	d90b      	bls.n	80060ec <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	22ff      	movs	r2, #255	; 0xff
 80060da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2203      	movs	r2, #3
 80060e0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e061      	b.n	80061b0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d0e4      	beq.n	80060c4 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	69fa      	ldr	r2, [r7, #28]
 8006100:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006118:	609a      	str	r2, [r3, #8]
 800611a:	e03e      	b.n	800619a <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689a      	ldr	r2, [r3, #8]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800612a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689a      	ldr	r2, [r3, #8]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800613a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800613c:	f7fc fb9e 	bl	800287c <HAL_GetTick>
 8006140:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8006142:	e013      	b.n	800616c <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006144:	f7fc fb9a 	bl	800287c <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006152:	d90b      	bls.n	800616c <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	22ff      	movs	r2, #255	; 0xff
 800615a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2203      	movs	r2, #3
 8006160:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e021      	b.n	80061b0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d0e4      	beq.n	8006144 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	69fa      	ldr	r2, [r7, #28]
 8006180:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006198:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	22ff      	movs	r2, #255	; 0xff
 80061a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2201      	movs	r2, #1
 80061a6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3724      	adds	r7, #36	; 0x24
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd90      	pop	{r4, r7, pc}

080061b8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80061c0:	2300      	movs	r3, #0
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061d2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061d4:	f7fc fb52 	bl	800287c <HAL_GetTick>
 80061d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80061da:	e009      	b.n	80061f0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80061dc:	f7fc fb4e 	bl	800287c <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061ea:	d901      	bls.n	80061f0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e007      	b.n	8006200 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	f003 0320 	and.w	r3, r3, #32
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d0ee      	beq.n	80061dc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006210:	2300      	movs	r3, #0
 8006212:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621e:	2b00      	cmp	r3, #0
 8006220:	d119      	bne.n	8006256 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f04f 32ff 	mov.w	r2, #4294967295
 800622a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800622c:	f7fc fb26 	bl	800287c <HAL_GetTick>
 8006230:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006232:	e009      	b.n	8006248 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006234:	f7fc fb22 	bl	800287c <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006242:	d901      	bls.n	8006248 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e007      	b.n	8006258 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006252:	2b00      	cmp	r3, #0
 8006254:	d0ee      	beq.n	8006234 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	4603      	mov	r3, r0
 8006268:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800626a:	2300      	movs	r3, #0
 800626c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800626e:	e005      	b.n	800627c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	3301      	adds	r3, #1
 8006274:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8006276:	79fb      	ldrb	r3, [r7, #7]
 8006278:	3b0a      	subs	r3, #10
 800627a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800627c:	79fb      	ldrb	r3, [r7, #7]
 800627e:	2b09      	cmp	r3, #9
 8006280:	d8f6      	bhi.n	8006270 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	b2db      	uxtb	r3, r3
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	b2da      	uxtb	r2, r3
 800628a:	79fb      	ldrb	r3, [r7, #7]
 800628c:	4313      	orrs	r3, r2
 800628e:	b2db      	uxtb	r3, r3
}
 8006290:	4618      	mov	r0, r3
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800629c:	b480      	push	{r7}
 800629e:	b087      	sub	sp, #28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80062a8:	2300      	movs	r3, #0
 80062aa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	7f1b      	ldrb	r3, [r3, #28]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d101      	bne.n	80062b8 <HAL_RTCEx_SetTimeStamp+0x1c>
 80062b4:	2302      	movs	r3, #2
 80062b6:	e03e      	b.n	8006336 <HAL_RTCEx_SetTimeStamp+0x9a>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2201      	movs	r2, #1
 80062bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2202      	movs	r2, #2
 80062c2:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689a      	ldr	r2, [r3, #8]
 80062ca:	4b1e      	ldr	r3, [pc, #120]	; (8006344 <HAL_RTCEx_SetTimeStamp+0xa8>)
 80062cc:	4013      	ands	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	22ca      	movs	r2, #202	; 0xca
 80062de:	625a      	str	r2, [r3, #36]	; 0x24
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2253      	movs	r2, #83	; 0x53
 80062e6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 0206 	bic.w	r2, r2, #6
 80062f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	430a      	orrs	r2, r1
 8006306:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689a      	ldr	r2, [r3, #8]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800631e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	22ff      	movs	r2, #255	; 0xff
 8006326:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2201      	movs	r2, #1
 800632c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	371c      	adds	r7, #28
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	fffff7f7 	.word	0xfffff7f7

08006348 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b088      	sub	sp, #32
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8006350:	2300      	movs	r3, #0
 8006352:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8006354:	2300      	movs	r3, #0
 8006356:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8006358:	2300      	movs	r3, #0
 800635a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e156      	b.n	8006614 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d106      	bne.n	8006380 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7fc f90c 	bl	8002598 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2202      	movs	r2, #2
 8006384:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f95b 	bl	8006644 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	2b02      	cmp	r3, #2
 8006394:	d00c      	beq.n	80063b0 <HAL_SAI_Init+0x68>
 8006396:	2b02      	cmp	r3, #2
 8006398:	d80d      	bhi.n	80063b6 <HAL_SAI_Init+0x6e>
 800639a:	2b00      	cmp	r3, #0
 800639c:	d002      	beq.n	80063a4 <HAL_SAI_Init+0x5c>
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d003      	beq.n	80063aa <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80063a2:	e008      	b.n	80063b6 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80063a4:	2300      	movs	r3, #0
 80063a6:	61fb      	str	r3, [r7, #28]
      break;
 80063a8:	e006      	b.n	80063b8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80063aa:	2310      	movs	r3, #16
 80063ac:	61fb      	str	r3, [r7, #28]
      break;
 80063ae:	e003      	b.n	80063b8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80063b0:	2320      	movs	r3, #32
 80063b2:	61fb      	str	r3, [r7, #28]
      break;
 80063b4:	e000      	b.n	80063b8 <HAL_SAI_Init+0x70>
      break;
 80063b6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	2b03      	cmp	r3, #3
 80063be:	d81e      	bhi.n	80063fe <HAL_SAI_Init+0xb6>
 80063c0:	a201      	add	r2, pc, #4	; (adr r2, 80063c8 <HAL_SAI_Init+0x80>)
 80063c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c6:	bf00      	nop
 80063c8:	080063d9 	.word	0x080063d9
 80063cc:	080063df 	.word	0x080063df
 80063d0:	080063e7 	.word	0x080063e7
 80063d4:	080063ef 	.word	0x080063ef
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 80063d8:	2300      	movs	r3, #0
 80063da:	617b      	str	r3, [r7, #20]
    }
    break;
 80063dc:	e010      	b.n	8006400 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80063de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063e2:	617b      	str	r3, [r7, #20]
    }
    break;
 80063e4:	e00c      	b.n	8006400 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80063e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063ea:	617b      	str	r3, [r7, #20]
    }
    break;
 80063ec:	e008      	b.n	8006400 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80063ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063f2:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	f043 0301 	orr.w	r3, r3, #1
 80063fa:	61fb      	str	r3, [r7, #28]
    }
    break;
 80063fc:	e000      	b.n	8006400 <HAL_SAI_Init+0xb8>
    default:
      break;
 80063fe:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a85      	ldr	r2, [pc, #532]	; (800661c <HAL_SAI_Init+0x2d4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d004      	beq.n	8006414 <HAL_SAI_Init+0xcc>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a84      	ldr	r2, [pc, #528]	; (8006620 <HAL_SAI_Init+0x2d8>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d103      	bne.n	800641c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8006414:	4a83      	ldr	r2, [pc, #524]	; (8006624 <HAL_SAI_Init+0x2dc>)
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	e002      	b.n	8006422 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800641c:	4a82      	ldr	r2, [pc, #520]	; (8006628 <HAL_SAI_Init+0x2e0>)
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d04c      	beq.n	80064c4 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800642a:	2300      	movs	r3, #0
 800642c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a7a      	ldr	r2, [pc, #488]	; (800661c <HAL_SAI_Init+0x2d4>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d004      	beq.n	8006442 <HAL_SAI_Init+0xfa>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a78      	ldr	r2, [pc, #480]	; (8006620 <HAL_SAI_Init+0x2d8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d104      	bne.n	800644c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006442:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006446:	f7ff fa63 	bl	8005910 <HAL_RCCEx_GetPeriphCLKFreq>
 800644a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a76      	ldr	r2, [pc, #472]	; (800662c <HAL_SAI_Init+0x2e4>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d004      	beq.n	8006460 <HAL_SAI_Init+0x118>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a75      	ldr	r2, [pc, #468]	; (8006630 <HAL_SAI_Init+0x2e8>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d104      	bne.n	800646a <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006460:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006464:	f7ff fa54 	bl	8005910 <HAL_RCCEx_GetPeriphCLKFreq>
 8006468:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	4613      	mov	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	461a      	mov	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	025b      	lsls	r3, r3, #9
 800647c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006480:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	4a6b      	ldr	r2, [pc, #428]	; (8006634 <HAL_SAI_Init+0x2ec>)
 8006486:	fba2 2303 	umull	r2, r3, r2, r3
 800648a:	08da      	lsrs	r2, r3, #3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8006490:	68f9      	ldr	r1, [r7, #12]
 8006492:	4b68      	ldr	r3, [pc, #416]	; (8006634 <HAL_SAI_Init+0x2ec>)
 8006494:	fba3 2301 	umull	r2, r3, r3, r1
 8006498:	08da      	lsrs	r2, r3, #3
 800649a:	4613      	mov	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	1aca      	subs	r2, r1, r3
 80064a4:	2a08      	cmp	r2, #8
 80064a6:	d904      	bls.n	80064b2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	1c5a      	adds	r2, r3, #1
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b6:	2b04      	cmp	r3, #4
 80064b8:	d104      	bne.n	80064c4 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	085a      	lsrs	r2, r3, #1
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d003      	beq.n	80064d4 <HAL_SAI_Init+0x18c>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d109      	bne.n	80064e8 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d101      	bne.n	80064e0 <HAL_SAI_Init+0x198>
 80064dc:	2300      	movs	r3, #0
 80064de:	e001      	b.n	80064e4 <HAL_SAI_Init+0x19c>
 80064e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064e4:	61bb      	str	r3, [r7, #24]
 80064e6:	e008      	b.n	80064fa <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d102      	bne.n	80064f6 <HAL_SAI_Init+0x1ae>
 80064f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064f4:	e000      	b.n	80064f8 <HAL_SAI_Init+0x1b0>
 80064f6:	2300      	movs	r3, #0
 80064f8:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6819      	ldr	r1, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	4b4c      	ldr	r3, [pc, #304]	; (8006638 <HAL_SAI_Init+0x2f0>)
 8006506:	400b      	ands	r3, r1
 8006508:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6819      	ldr	r1, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006518:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800651e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006524:	431a      	orrs	r2, r3
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8006532:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800653e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	051b      	lsls	r3, r3, #20
 8006546:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6859      	ldr	r1, [r3, #4]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	4b38      	ldr	r3, [pc, #224]	; (800663c <HAL_SAI_Init+0x2f4>)
 800655c:	400b      	ands	r3, r1
 800655e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6859      	ldr	r1, [r3, #4]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699a      	ldr	r2, [r3, #24]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656e:	431a      	orrs	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	431a      	orrs	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6899      	ldr	r1, [r3, #8]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	4b2d      	ldr	r3, [pc, #180]	; (8006640 <HAL_SAI_Init+0x2f8>)
 800658a:	400b      	ands	r3, r1
 800658c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6899      	ldr	r1, [r3, #8]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006598:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800659e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80065a4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80065aa:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b0:	3b01      	subs	r3, #1
 80065b2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80065b4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68d9      	ldr	r1, [r3, #12]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	f24f 0320 	movw	r3, #61472	; 0xf020
 80065cc:	400b      	ands	r3, r1
 80065ce:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68d9      	ldr	r1, [r3, #12]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065de:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065e4:	041b      	lsls	r3, r3, #16
 80065e6:	431a      	orrs	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ec:	3b01      	subs	r3, #1
 80065ee:	021b      	lsls	r3, r3, #8
 80065f0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3720      	adds	r7, #32
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	40015804 	.word	0x40015804
 8006620:	40015824 	.word	0x40015824
 8006624:	40015800 	.word	0x40015800
 8006628:	40015c00 	.word	0x40015c00
 800662c:	40015c04 	.word	0x40015c04
 8006630:	40015c24 	.word	0x40015c24
 8006634:	cccccccd 	.word	0xcccccccd
 8006638:	ff05c010 	.word	0xff05c010
 800663c:	ffff1ff0 	.word	0xffff1ff0
 8006640:	fff88000 	.word	0xfff88000

08006644 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800664c:	4b17      	ldr	r3, [pc, #92]	; (80066ac <SAI_Disable+0x68>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a17      	ldr	r2, [pc, #92]	; (80066b0 <SAI_Disable+0x6c>)
 8006652:	fba2 2303 	umull	r2, r3, r2, r3
 8006656:	0b1b      	lsrs	r3, r3, #12
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800666e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	1e5a      	subs	r2, r3, #1
 8006674:	60fa      	str	r2, [r7, #12]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10a      	bne.n	8006690 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006680:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	72fb      	strb	r3, [r7, #11]
      break;
 800668e:	e006      	b.n	800669e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1e8      	bne.n	8006670 <SAI_Disable+0x2c>

  return status;
 800669e:	7afb      	ldrb	r3, [r7, #11]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	20000000 	.word	0x20000000
 80066b0:	95cbec1b 	.word	0x95cbec1b

080066b4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e025      	b.n	8006714 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d106      	bne.n	80066e2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f7fb ff51 	bl	8002584 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2202      	movs	r2, #2
 80066e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	3304      	adds	r3, #4
 80066f2:	4619      	mov	r1, r3
 80066f4:	4610      	mov	r0, r2
 80066f6:	f002 f8bb 	bl	8008870 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6818      	ldr	r0, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	461a      	mov	r2, r3
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	f002 f90f 	bl	8008928 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e04c      	b.n	80067c8 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d106      	bne.n	8006748 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7fb fbea 	bl	8001f1c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0203 	bic.w	r2, r2, #3
 800675e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4b19      	ldr	r3, [pc, #100]	; (80067d0 <HAL_SPDIFRX_Init+0xb4>)
 800676c:	4013      	ands	r3, r2
 800676e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8006778:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800677e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8006784:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800678a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8006790:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8006796:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800679c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 80067a2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 80067a8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	fff88407 	.word	0xfff88407

080067d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e09d      	b.n	8006922 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d108      	bne.n	8006800 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067f6:	d009      	beq.n	800680c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	61da      	str	r2, [r3, #28]
 80067fe:	e005      	b.n	800680c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d106      	bne.n	800682c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7fb fbdc 	bl	8001fe4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006842:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800684c:	d902      	bls.n	8006854 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800684e:	2300      	movs	r3, #0
 8006850:	60fb      	str	r3, [r7, #12]
 8006852:	e002      	b.n	800685a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006858:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006862:	d007      	beq.n	8006874 <HAL_SPI_Init+0xa0>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800686c:	d002      	beq.n	8006874 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006884:	431a      	orrs	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	431a      	orrs	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	431a      	orrs	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068a2:	431a      	orrs	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068ac:	431a      	orrs	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b6:	ea42 0103 	orr.w	r1, r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	0c1b      	lsrs	r3, r3, #16
 80068d0:	f003 0204 	and.w	r2, r3, #4
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	f003 0310 	and.w	r3, r3, #16
 80068dc:	431a      	orrs	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e2:	f003 0308 	and.w	r3, r3, #8
 80068e6:	431a      	orrs	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80068f0:	ea42 0103 	orr.w	r1, r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	430a      	orrs	r2, r1
 8006900:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69da      	ldr	r2, [r3, #28]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006910:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b082      	sub	sp, #8
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e049      	b.n	80069d0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d106      	bne.n	8006956 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7fb fba9 	bl	80020a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2202      	movs	r2, #2
 800695a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	3304      	adds	r3, #4
 8006966:	4619      	mov	r1, r3
 8006968:	4610      	mov	r0, r2
 800696a:	f000 fe4d 	bl	8007608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d001      	beq.n	80069f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e054      	b.n	8006a9a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68da      	ldr	r2, [r3, #12]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f042 0201 	orr.w	r2, r2, #1
 8006a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a26      	ldr	r2, [pc, #152]	; (8006aa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d022      	beq.n	8006a58 <HAL_TIM_Base_Start_IT+0x80>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a1a:	d01d      	beq.n	8006a58 <HAL_TIM_Base_Start_IT+0x80>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a22      	ldr	r2, [pc, #136]	; (8006aac <HAL_TIM_Base_Start_IT+0xd4>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d018      	beq.n	8006a58 <HAL_TIM_Base_Start_IT+0x80>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a21      	ldr	r2, [pc, #132]	; (8006ab0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d013      	beq.n	8006a58 <HAL_TIM_Base_Start_IT+0x80>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a1f      	ldr	r2, [pc, #124]	; (8006ab4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d00e      	beq.n	8006a58 <HAL_TIM_Base_Start_IT+0x80>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a1e      	ldr	r2, [pc, #120]	; (8006ab8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d009      	beq.n	8006a58 <HAL_TIM_Base_Start_IT+0x80>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a1c      	ldr	r2, [pc, #112]	; (8006abc <HAL_TIM_Base_Start_IT+0xe4>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d004      	beq.n	8006a58 <HAL_TIM_Base_Start_IT+0x80>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a1b      	ldr	r2, [pc, #108]	; (8006ac0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d115      	bne.n	8006a84 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689a      	ldr	r2, [r3, #8]
 8006a5e:	4b19      	ldr	r3, [pc, #100]	; (8006ac4 <HAL_TIM_Base_Start_IT+0xec>)
 8006a60:	4013      	ands	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2b06      	cmp	r3, #6
 8006a68:	d015      	beq.n	8006a96 <HAL_TIM_Base_Start_IT+0xbe>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a70:	d011      	beq.n	8006a96 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f042 0201 	orr.w	r2, r2, #1
 8006a80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a82:	e008      	b.n	8006a96 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0201 	orr.w	r2, r2, #1
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	e000      	b.n	8006a98 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	40010000 	.word	0x40010000
 8006aac:	40000400 	.word	0x40000400
 8006ab0:	40000800 	.word	0x40000800
 8006ab4:	40000c00 	.word	0x40000c00
 8006ab8:	40010400 	.word	0x40010400
 8006abc:	40014000 	.word	0x40014000
 8006ac0:	40001800 	.word	0x40001800
 8006ac4:	00010007 	.word	0x00010007

08006ac8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e049      	b.n	8006b6e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d106      	bne.n	8006af4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f841 	bl	8006b76 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2202      	movs	r2, #2
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3304      	adds	r3, #4
 8006b04:	4619      	mov	r1, r3
 8006b06:	4610      	mov	r0, r2
 8006b08:	f000 fd7e 	bl	8007608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b083      	sub	sp, #12
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006b7e:	bf00      	nop
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
	...

08006b8c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d109      	bne.n	8006bb4 <HAL_TIM_OC_Start_IT+0x28>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	bf14      	ite	ne
 8006bac:	2301      	movne	r3, #1
 8006bae:	2300      	moveq	r3, #0
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	e03c      	b.n	8006c2e <HAL_TIM_OC_Start_IT+0xa2>
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d109      	bne.n	8006bce <HAL_TIM_OC_Start_IT+0x42>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	bf14      	ite	ne
 8006bc6:	2301      	movne	r3, #1
 8006bc8:	2300      	moveq	r3, #0
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	e02f      	b.n	8006c2e <HAL_TIM_OC_Start_IT+0xa2>
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	2b08      	cmp	r3, #8
 8006bd2:	d109      	bne.n	8006be8 <HAL_TIM_OC_Start_IT+0x5c>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	bf14      	ite	ne
 8006be0:	2301      	movne	r3, #1
 8006be2:	2300      	moveq	r3, #0
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	e022      	b.n	8006c2e <HAL_TIM_OC_Start_IT+0xa2>
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	2b0c      	cmp	r3, #12
 8006bec:	d109      	bne.n	8006c02 <HAL_TIM_OC_Start_IT+0x76>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	bf14      	ite	ne
 8006bfa:	2301      	movne	r3, #1
 8006bfc:	2300      	moveq	r3, #0
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	e015      	b.n	8006c2e <HAL_TIM_OC_Start_IT+0xa2>
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	2b10      	cmp	r3, #16
 8006c06:	d109      	bne.n	8006c1c <HAL_TIM_OC_Start_IT+0x90>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	bf14      	ite	ne
 8006c14:	2301      	movne	r3, #1
 8006c16:	2300      	moveq	r3, #0
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	e008      	b.n	8006c2e <HAL_TIM_OC_Start_IT+0xa2>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	bf14      	ite	ne
 8006c28:	2301      	movne	r3, #1
 8006c2a:	2300      	moveq	r3, #0
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e0dd      	b.n	8006df2 <HAL_TIM_OC_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d104      	bne.n	8006c46 <HAL_TIM_OC_Start_IT+0xba>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c44:	e023      	b.n	8006c8e <HAL_TIM_OC_Start_IT+0x102>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	d104      	bne.n	8006c56 <HAL_TIM_OC_Start_IT+0xca>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c54:	e01b      	b.n	8006c8e <HAL_TIM_OC_Start_IT+0x102>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d104      	bne.n	8006c66 <HAL_TIM_OC_Start_IT+0xda>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c64:	e013      	b.n	8006c8e <HAL_TIM_OC_Start_IT+0x102>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b0c      	cmp	r3, #12
 8006c6a:	d104      	bne.n	8006c76 <HAL_TIM_OC_Start_IT+0xea>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c74:	e00b      	b.n	8006c8e <HAL_TIM_OC_Start_IT+0x102>
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b10      	cmp	r3, #16
 8006c7a:	d104      	bne.n	8006c86 <HAL_TIM_OC_Start_IT+0xfa>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c84:	e003      	b.n	8006c8e <HAL_TIM_OC_Start_IT+0x102>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2202      	movs	r2, #2
 8006c8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b0c      	cmp	r3, #12
 8006c92:	d841      	bhi.n	8006d18 <HAL_TIM_OC_Start_IT+0x18c>
 8006c94:	a201      	add	r2, pc, #4	; (adr r2, 8006c9c <HAL_TIM_OC_Start_IT+0x110>)
 8006c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9a:	bf00      	nop
 8006c9c:	08006cd1 	.word	0x08006cd1
 8006ca0:	08006d19 	.word	0x08006d19
 8006ca4:	08006d19 	.word	0x08006d19
 8006ca8:	08006d19 	.word	0x08006d19
 8006cac:	08006ce3 	.word	0x08006ce3
 8006cb0:	08006d19 	.word	0x08006d19
 8006cb4:	08006d19 	.word	0x08006d19
 8006cb8:	08006d19 	.word	0x08006d19
 8006cbc:	08006cf5 	.word	0x08006cf5
 8006cc0:	08006d19 	.word	0x08006d19
 8006cc4:	08006d19 	.word	0x08006d19
 8006cc8:	08006d19 	.word	0x08006d19
 8006ccc:	08006d07 	.word	0x08006d07
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68da      	ldr	r2, [r3, #12]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0202 	orr.w	r2, r2, #2
 8006cde:	60da      	str	r2, [r3, #12]
      break;
 8006ce0:	e01d      	b.n	8006d1e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68da      	ldr	r2, [r3, #12]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f042 0204 	orr.w	r2, r2, #4
 8006cf0:	60da      	str	r2, [r3, #12]
      break;
 8006cf2:	e014      	b.n	8006d1e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f042 0208 	orr.w	r2, r2, #8
 8006d02:	60da      	str	r2, [r3, #12]
      break;
 8006d04:	e00b      	b.n	8006d1e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68da      	ldr	r2, [r3, #12]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f042 0210 	orr.w	r2, r2, #16
 8006d14:	60da      	str	r2, [r3, #12]
      break;
 8006d16:	e002      	b.n	8006d1e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d165      	bne.n	8006df0 <HAL_TIM_OC_Start_IT+0x264>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f001 f803 	bl	8007d38 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a31      	ldr	r2, [pc, #196]	; (8006dfc <HAL_TIM_OC_Start_IT+0x270>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d004      	beq.n	8006d46 <HAL_TIM_OC_Start_IT+0x1ba>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a2f      	ldr	r2, [pc, #188]	; (8006e00 <HAL_TIM_OC_Start_IT+0x274>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d101      	bne.n	8006d4a <HAL_TIM_OC_Start_IT+0x1be>
 8006d46:	2301      	movs	r3, #1
 8006d48:	e000      	b.n	8006d4c <HAL_TIM_OC_Start_IT+0x1c0>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d007      	beq.n	8006d60 <HAL_TIM_OC_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d5e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a25      	ldr	r2, [pc, #148]	; (8006dfc <HAL_TIM_OC_Start_IT+0x270>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d022      	beq.n	8006db0 <HAL_TIM_OC_Start_IT+0x224>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d72:	d01d      	beq.n	8006db0 <HAL_TIM_OC_Start_IT+0x224>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a22      	ldr	r2, [pc, #136]	; (8006e04 <HAL_TIM_OC_Start_IT+0x278>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d018      	beq.n	8006db0 <HAL_TIM_OC_Start_IT+0x224>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a21      	ldr	r2, [pc, #132]	; (8006e08 <HAL_TIM_OC_Start_IT+0x27c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d013      	beq.n	8006db0 <HAL_TIM_OC_Start_IT+0x224>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a1f      	ldr	r2, [pc, #124]	; (8006e0c <HAL_TIM_OC_Start_IT+0x280>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d00e      	beq.n	8006db0 <HAL_TIM_OC_Start_IT+0x224>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a1a      	ldr	r2, [pc, #104]	; (8006e00 <HAL_TIM_OC_Start_IT+0x274>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d009      	beq.n	8006db0 <HAL_TIM_OC_Start_IT+0x224>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a1b      	ldr	r2, [pc, #108]	; (8006e10 <HAL_TIM_OC_Start_IT+0x284>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d004      	beq.n	8006db0 <HAL_TIM_OC_Start_IT+0x224>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a1a      	ldr	r2, [pc, #104]	; (8006e14 <HAL_TIM_OC_Start_IT+0x288>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d115      	bne.n	8006ddc <HAL_TIM_OC_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689a      	ldr	r2, [r3, #8]
 8006db6:	4b18      	ldr	r3, [pc, #96]	; (8006e18 <HAL_TIM_OC_Start_IT+0x28c>)
 8006db8:	4013      	ands	r3, r2
 8006dba:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2b06      	cmp	r3, #6
 8006dc0:	d015      	beq.n	8006dee <HAL_TIM_OC_Start_IT+0x262>
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc8:	d011      	beq.n	8006dee <HAL_TIM_OC_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f042 0201 	orr.w	r2, r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dda:	e008      	b.n	8006dee <HAL_TIM_OC_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0201 	orr.w	r2, r2, #1
 8006dea:	601a      	str	r2, [r3, #0]
 8006dec:	e000      	b.n	8006df0 <HAL_TIM_OC_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dee:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	40010000 	.word	0x40010000
 8006e00:	40010400 	.word	0x40010400
 8006e04:	40000400 	.word	0x40000400
 8006e08:	40000800 	.word	0x40000800
 8006e0c:	40000c00 	.word	0x40000c00
 8006e10:	40014000 	.word	0x40014000
 8006e14:	40001800 	.word	0x40001800
 8006e18:	00010007 	.word	0x00010007

08006e1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e049      	b.n	8006ec2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d106      	bne.n	8006e48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7fb f99e 	bl	8002184 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3304      	adds	r3, #4
 8006e58:	4619      	mov	r1, r3
 8006e5a:	4610      	mov	r0, r2
 8006e5c:	f000 fbd4 	bl	8007608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b082      	sub	sp, #8
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d122      	bne.n	8006f26 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d11b      	bne.n	8006f26 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f06f 0202 	mvn.w	r2, #2
 8006ef6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	f003 0303 	and.w	r3, r3, #3
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d003      	beq.n	8006f14 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fb5d 	bl	80075cc <HAL_TIM_IC_CaptureCallback>
 8006f12:	e005      	b.n	8006f20 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fb4f 	bl	80075b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fb60 	bl	80075e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	f003 0304 	and.w	r3, r3, #4
 8006f30:	2b04      	cmp	r3, #4
 8006f32:	d122      	bne.n	8006f7a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	f003 0304 	and.w	r3, r3, #4
 8006f3e:	2b04      	cmp	r3, #4
 8006f40:	d11b      	bne.n	8006f7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f06f 0204 	mvn.w	r2, #4
 8006f4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fb33 	bl	80075cc <HAL_TIM_IC_CaptureCallback>
 8006f66:	e005      	b.n	8006f74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fb25 	bl	80075b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fb36 	bl	80075e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	f003 0308 	and.w	r3, r3, #8
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d122      	bne.n	8006fce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f003 0308 	and.w	r3, r3, #8
 8006f92:	2b08      	cmp	r3, #8
 8006f94:	d11b      	bne.n	8006fce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f06f 0208 	mvn.w	r2, #8
 8006f9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2204      	movs	r2, #4
 8006fa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	69db      	ldr	r3, [r3, #28]
 8006fac:	f003 0303 	and.w	r3, r3, #3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fb09 	bl	80075cc <HAL_TIM_IC_CaptureCallback>
 8006fba:	e005      	b.n	8006fc8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 fafb 	bl	80075b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fb0c 	bl	80075e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	f003 0310 	and.w	r3, r3, #16
 8006fd8:	2b10      	cmp	r3, #16
 8006fda:	d122      	bne.n	8007022 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	f003 0310 	and.w	r3, r3, #16
 8006fe6:	2b10      	cmp	r3, #16
 8006fe8:	d11b      	bne.n	8007022 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f06f 0210 	mvn.w	r2, #16
 8006ff2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2208      	movs	r2, #8
 8006ff8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fadf 	bl	80075cc <HAL_TIM_IC_CaptureCallback>
 800700e:	e005      	b.n	800701c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fad1 	bl	80075b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fae2 	bl	80075e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b01      	cmp	r3, #1
 800702e:	d10e      	bne.n	800704e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b01      	cmp	r3, #1
 800703c:	d107      	bne.n	800704e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f06f 0201 	mvn.w	r2, #1
 8007046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f7fa fc6f 	bl	800192c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007058:	2b80      	cmp	r3, #128	; 0x80
 800705a:	d10e      	bne.n	800707a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007066:	2b80      	cmp	r3, #128	; 0x80
 8007068:	d107      	bne.n	800707a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 ff9b 	bl	8007fb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007088:	d10e      	bne.n	80070a8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007094:	2b80      	cmp	r3, #128	; 0x80
 8007096:	d107      	bne.n	80070a8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80070a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 ff8e 	bl	8007fc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b2:	2b40      	cmp	r3, #64	; 0x40
 80070b4:	d10e      	bne.n	80070d4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c0:	2b40      	cmp	r3, #64	; 0x40
 80070c2:	d107      	bne.n	80070d4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fa90 	bl	80075f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	2b20      	cmp	r3, #32
 80070e0:	d10e      	bne.n	8007100 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f003 0320 	and.w	r3, r3, #32
 80070ec:	2b20      	cmp	r3, #32
 80070ee:	d107      	bne.n	8007100 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f06f 0220 	mvn.w	r2, #32
 80070f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 ff4e 	bl	8007f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007100:	bf00      	nop
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007114:	2300      	movs	r3, #0
 8007116:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800711e:	2b01      	cmp	r3, #1
 8007120:	d101      	bne.n	8007126 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007122:	2302      	movs	r3, #2
 8007124:	e066      	b.n	80071f4 <HAL_TIM_OC_ConfigChannel+0xec>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b14      	cmp	r3, #20
 8007132:	d857      	bhi.n	80071e4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007134:	a201      	add	r2, pc, #4	; (adr r2, 800713c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713a:	bf00      	nop
 800713c:	08007191 	.word	0x08007191
 8007140:	080071e5 	.word	0x080071e5
 8007144:	080071e5 	.word	0x080071e5
 8007148:	080071e5 	.word	0x080071e5
 800714c:	0800719f 	.word	0x0800719f
 8007150:	080071e5 	.word	0x080071e5
 8007154:	080071e5 	.word	0x080071e5
 8007158:	080071e5 	.word	0x080071e5
 800715c:	080071ad 	.word	0x080071ad
 8007160:	080071e5 	.word	0x080071e5
 8007164:	080071e5 	.word	0x080071e5
 8007168:	080071e5 	.word	0x080071e5
 800716c:	080071bb 	.word	0x080071bb
 8007170:	080071e5 	.word	0x080071e5
 8007174:	080071e5 	.word	0x080071e5
 8007178:	080071e5 	.word	0x080071e5
 800717c:	080071c9 	.word	0x080071c9
 8007180:	080071e5 	.word	0x080071e5
 8007184:	080071e5 	.word	0x080071e5
 8007188:	080071e5 	.word	0x080071e5
 800718c:	080071d7 	.word	0x080071d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68b9      	ldr	r1, [r7, #8]
 8007196:	4618      	mov	r0, r3
 8007198:	f000 fad6 	bl	8007748 <TIM_OC1_SetConfig>
      break;
 800719c:	e025      	b.n	80071ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68b9      	ldr	r1, [r7, #8]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 fb41 	bl	800782c <TIM_OC2_SetConfig>
      break;
 80071aa:	e01e      	b.n	80071ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68b9      	ldr	r1, [r7, #8]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f000 fbb2 	bl	800791c <TIM_OC3_SetConfig>
      break;
 80071b8:	e017      	b.n	80071ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68b9      	ldr	r1, [r7, #8]
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 fc21 	bl	8007a08 <TIM_OC4_SetConfig>
      break;
 80071c6:	e010      	b.n	80071ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68b9      	ldr	r1, [r7, #8]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 fc72 	bl	8007ab8 <TIM_OC5_SetConfig>
      break;
 80071d4:	e009      	b.n	80071ea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68b9      	ldr	r1, [r7, #8]
 80071dc:	4618      	mov	r0, r3
 80071de:	f000 fcbd 	bl	8007b5c <TIM_OC6_SetConfig>
      break;
 80071e2:	e002      	b.n	80071ea <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	75fb      	strb	r3, [r7, #23]
      break;
 80071e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3718      	adds	r7, #24
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007208:	2300      	movs	r3, #0
 800720a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007212:	2b01      	cmp	r3, #1
 8007214:	d101      	bne.n	800721a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007216:	2302      	movs	r3, #2
 8007218:	e0ff      	b.n	800741a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b14      	cmp	r3, #20
 8007226:	f200 80f0 	bhi.w	800740a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800722a:	a201      	add	r2, pc, #4	; (adr r2, 8007230 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800722c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007230:	08007285 	.word	0x08007285
 8007234:	0800740b 	.word	0x0800740b
 8007238:	0800740b 	.word	0x0800740b
 800723c:	0800740b 	.word	0x0800740b
 8007240:	080072c5 	.word	0x080072c5
 8007244:	0800740b 	.word	0x0800740b
 8007248:	0800740b 	.word	0x0800740b
 800724c:	0800740b 	.word	0x0800740b
 8007250:	08007307 	.word	0x08007307
 8007254:	0800740b 	.word	0x0800740b
 8007258:	0800740b 	.word	0x0800740b
 800725c:	0800740b 	.word	0x0800740b
 8007260:	08007347 	.word	0x08007347
 8007264:	0800740b 	.word	0x0800740b
 8007268:	0800740b 	.word	0x0800740b
 800726c:	0800740b 	.word	0x0800740b
 8007270:	08007389 	.word	0x08007389
 8007274:	0800740b 	.word	0x0800740b
 8007278:	0800740b 	.word	0x0800740b
 800727c:	0800740b 	.word	0x0800740b
 8007280:	080073c9 	.word	0x080073c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68b9      	ldr	r1, [r7, #8]
 800728a:	4618      	mov	r0, r3
 800728c:	f000 fa5c 	bl	8007748 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	699a      	ldr	r2, [r3, #24]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0208 	orr.w	r2, r2, #8
 800729e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	699a      	ldr	r2, [r3, #24]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 0204 	bic.w	r2, r2, #4
 80072ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6999      	ldr	r1, [r3, #24]
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	691a      	ldr	r2, [r3, #16]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	619a      	str	r2, [r3, #24]
      break;
 80072c2:	e0a5      	b.n	8007410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68b9      	ldr	r1, [r7, #8]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 faae 	bl	800782c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699a      	ldr	r2, [r3, #24]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	699a      	ldr	r2, [r3, #24]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6999      	ldr	r1, [r3, #24]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	021a      	lsls	r2, r3, #8
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	430a      	orrs	r2, r1
 8007302:	619a      	str	r2, [r3, #24]
      break;
 8007304:	e084      	b.n	8007410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68b9      	ldr	r1, [r7, #8]
 800730c:	4618      	mov	r0, r3
 800730e:	f000 fb05 	bl	800791c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	69da      	ldr	r2, [r3, #28]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f042 0208 	orr.w	r2, r2, #8
 8007320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	69da      	ldr	r2, [r3, #28]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 0204 	bic.w	r2, r2, #4
 8007330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	69d9      	ldr	r1, [r3, #28]
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	691a      	ldr	r2, [r3, #16]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	430a      	orrs	r2, r1
 8007342:	61da      	str	r2, [r3, #28]
      break;
 8007344:	e064      	b.n	8007410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68b9      	ldr	r1, [r7, #8]
 800734c:	4618      	mov	r0, r3
 800734e:	f000 fb5b 	bl	8007a08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	69da      	ldr	r2, [r3, #28]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	69da      	ldr	r2, [r3, #28]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	69d9      	ldr	r1, [r3, #28]
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	021a      	lsls	r2, r3, #8
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	61da      	str	r2, [r3, #28]
      break;
 8007386:	e043      	b.n	8007410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68b9      	ldr	r1, [r7, #8]
 800738e:	4618      	mov	r0, r3
 8007390:	f000 fb92 	bl	8007ab8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f042 0208 	orr.w	r2, r2, #8
 80073a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f022 0204 	bic.w	r2, r2, #4
 80073b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	691a      	ldr	r2, [r3, #16]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	430a      	orrs	r2, r1
 80073c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80073c6:	e023      	b.n	8007410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68b9      	ldr	r1, [r7, #8]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 fbc4 	bl	8007b5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	021a      	lsls	r2, r3, #8
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	430a      	orrs	r2, r1
 8007406:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007408:	e002      	b.n	8007410 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	75fb      	strb	r3, [r7, #23]
      break;
 800740e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007418:	7dfb      	ldrb	r3, [r7, #23]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3718      	adds	r7, #24
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop

08007424 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007438:	2b01      	cmp	r3, #1
 800743a:	d101      	bne.n	8007440 <HAL_TIM_ConfigClockSource+0x1c>
 800743c:	2302      	movs	r3, #2
 800743e:	e0b4      	b.n	80075aa <HAL_TIM_ConfigClockSource+0x186>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	4b56      	ldr	r3, [pc, #344]	; (80075b4 <HAL_TIM_ConfigClockSource+0x190>)
 800745c:	4013      	ands	r3, r2
 800745e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007466:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007478:	d03e      	beq.n	80074f8 <HAL_TIM_ConfigClockSource+0xd4>
 800747a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800747e:	f200 8087 	bhi.w	8007590 <HAL_TIM_ConfigClockSource+0x16c>
 8007482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007486:	f000 8086 	beq.w	8007596 <HAL_TIM_ConfigClockSource+0x172>
 800748a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800748e:	d87f      	bhi.n	8007590 <HAL_TIM_ConfigClockSource+0x16c>
 8007490:	2b70      	cmp	r3, #112	; 0x70
 8007492:	d01a      	beq.n	80074ca <HAL_TIM_ConfigClockSource+0xa6>
 8007494:	2b70      	cmp	r3, #112	; 0x70
 8007496:	d87b      	bhi.n	8007590 <HAL_TIM_ConfigClockSource+0x16c>
 8007498:	2b60      	cmp	r3, #96	; 0x60
 800749a:	d050      	beq.n	800753e <HAL_TIM_ConfigClockSource+0x11a>
 800749c:	2b60      	cmp	r3, #96	; 0x60
 800749e:	d877      	bhi.n	8007590 <HAL_TIM_ConfigClockSource+0x16c>
 80074a0:	2b50      	cmp	r3, #80	; 0x50
 80074a2:	d03c      	beq.n	800751e <HAL_TIM_ConfigClockSource+0xfa>
 80074a4:	2b50      	cmp	r3, #80	; 0x50
 80074a6:	d873      	bhi.n	8007590 <HAL_TIM_ConfigClockSource+0x16c>
 80074a8:	2b40      	cmp	r3, #64	; 0x40
 80074aa:	d058      	beq.n	800755e <HAL_TIM_ConfigClockSource+0x13a>
 80074ac:	2b40      	cmp	r3, #64	; 0x40
 80074ae:	d86f      	bhi.n	8007590 <HAL_TIM_ConfigClockSource+0x16c>
 80074b0:	2b30      	cmp	r3, #48	; 0x30
 80074b2:	d064      	beq.n	800757e <HAL_TIM_ConfigClockSource+0x15a>
 80074b4:	2b30      	cmp	r3, #48	; 0x30
 80074b6:	d86b      	bhi.n	8007590 <HAL_TIM_ConfigClockSource+0x16c>
 80074b8:	2b20      	cmp	r3, #32
 80074ba:	d060      	beq.n	800757e <HAL_TIM_ConfigClockSource+0x15a>
 80074bc:	2b20      	cmp	r3, #32
 80074be:	d867      	bhi.n	8007590 <HAL_TIM_ConfigClockSource+0x16c>
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d05c      	beq.n	800757e <HAL_TIM_ConfigClockSource+0x15a>
 80074c4:	2b10      	cmp	r3, #16
 80074c6:	d05a      	beq.n	800757e <HAL_TIM_ConfigClockSource+0x15a>
 80074c8:	e062      	b.n	8007590 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6818      	ldr	r0, [r3, #0]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	6899      	ldr	r1, [r3, #8]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	685a      	ldr	r2, [r3, #4]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	f000 fc0d 	bl	8007cf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80074ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	609a      	str	r2, [r3, #8]
      break;
 80074f6:	e04f      	b.n	8007598 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6818      	ldr	r0, [r3, #0]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	6899      	ldr	r1, [r3, #8]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	f000 fbf6 	bl	8007cf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689a      	ldr	r2, [r3, #8]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800751a:	609a      	str	r2, [r3, #8]
      break;
 800751c:	e03c      	b.n	8007598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6818      	ldr	r0, [r3, #0]
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	6859      	ldr	r1, [r3, #4]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	461a      	mov	r2, r3
 800752c:	f000 fb6a 	bl	8007c04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2150      	movs	r1, #80	; 0x50
 8007536:	4618      	mov	r0, r3
 8007538:	f000 fbc3 	bl	8007cc2 <TIM_ITRx_SetConfig>
      break;
 800753c:	e02c      	b.n	8007598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6818      	ldr	r0, [r3, #0]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	6859      	ldr	r1, [r3, #4]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	461a      	mov	r2, r3
 800754c:	f000 fb89 	bl	8007c62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2160      	movs	r1, #96	; 0x60
 8007556:	4618      	mov	r0, r3
 8007558:	f000 fbb3 	bl	8007cc2 <TIM_ITRx_SetConfig>
      break;
 800755c:	e01c      	b.n	8007598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6818      	ldr	r0, [r3, #0]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	6859      	ldr	r1, [r3, #4]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	461a      	mov	r2, r3
 800756c:	f000 fb4a 	bl	8007c04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2140      	movs	r1, #64	; 0x40
 8007576:	4618      	mov	r0, r3
 8007578:	f000 fba3 	bl	8007cc2 <TIM_ITRx_SetConfig>
      break;
 800757c:	e00c      	b.n	8007598 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4619      	mov	r1, r3
 8007588:	4610      	mov	r0, r2
 800758a:	f000 fb9a 	bl	8007cc2 <TIM_ITRx_SetConfig>
      break;
 800758e:	e003      	b.n	8007598 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	73fb      	strb	r3, [r7, #15]
      break;
 8007594:	e000      	b.n	8007598 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007596:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	fffeff88 	.word	0xfffeff88

080075b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a40      	ldr	r2, [pc, #256]	; (800771c <TIM_Base_SetConfig+0x114>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d013      	beq.n	8007648 <TIM_Base_SetConfig+0x40>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007626:	d00f      	beq.n	8007648 <TIM_Base_SetConfig+0x40>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a3d      	ldr	r2, [pc, #244]	; (8007720 <TIM_Base_SetConfig+0x118>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d00b      	beq.n	8007648 <TIM_Base_SetConfig+0x40>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a3c      	ldr	r2, [pc, #240]	; (8007724 <TIM_Base_SetConfig+0x11c>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d007      	beq.n	8007648 <TIM_Base_SetConfig+0x40>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a3b      	ldr	r2, [pc, #236]	; (8007728 <TIM_Base_SetConfig+0x120>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d003      	beq.n	8007648 <TIM_Base_SetConfig+0x40>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a3a      	ldr	r2, [pc, #232]	; (800772c <TIM_Base_SetConfig+0x124>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d108      	bne.n	800765a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800764e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4313      	orrs	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a2f      	ldr	r2, [pc, #188]	; (800771c <TIM_Base_SetConfig+0x114>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d02b      	beq.n	80076ba <TIM_Base_SetConfig+0xb2>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007668:	d027      	beq.n	80076ba <TIM_Base_SetConfig+0xb2>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a2c      	ldr	r2, [pc, #176]	; (8007720 <TIM_Base_SetConfig+0x118>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d023      	beq.n	80076ba <TIM_Base_SetConfig+0xb2>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a2b      	ldr	r2, [pc, #172]	; (8007724 <TIM_Base_SetConfig+0x11c>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d01f      	beq.n	80076ba <TIM_Base_SetConfig+0xb2>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a2a      	ldr	r2, [pc, #168]	; (8007728 <TIM_Base_SetConfig+0x120>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d01b      	beq.n	80076ba <TIM_Base_SetConfig+0xb2>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a29      	ldr	r2, [pc, #164]	; (800772c <TIM_Base_SetConfig+0x124>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d017      	beq.n	80076ba <TIM_Base_SetConfig+0xb2>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a28      	ldr	r2, [pc, #160]	; (8007730 <TIM_Base_SetConfig+0x128>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d013      	beq.n	80076ba <TIM_Base_SetConfig+0xb2>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a27      	ldr	r2, [pc, #156]	; (8007734 <TIM_Base_SetConfig+0x12c>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d00f      	beq.n	80076ba <TIM_Base_SetConfig+0xb2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a26      	ldr	r2, [pc, #152]	; (8007738 <TIM_Base_SetConfig+0x130>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d00b      	beq.n	80076ba <TIM_Base_SetConfig+0xb2>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a25      	ldr	r2, [pc, #148]	; (800773c <TIM_Base_SetConfig+0x134>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d007      	beq.n	80076ba <TIM_Base_SetConfig+0xb2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a24      	ldr	r2, [pc, #144]	; (8007740 <TIM_Base_SetConfig+0x138>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d003      	beq.n	80076ba <TIM_Base_SetConfig+0xb2>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a23      	ldr	r2, [pc, #140]	; (8007744 <TIM_Base_SetConfig+0x13c>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d108      	bne.n	80076cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	689a      	ldr	r2, [r3, #8]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a0a      	ldr	r2, [pc, #40]	; (800771c <TIM_Base_SetConfig+0x114>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d003      	beq.n	8007700 <TIM_Base_SetConfig+0xf8>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a0c      	ldr	r2, [pc, #48]	; (800772c <TIM_Base_SetConfig+0x124>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d103      	bne.n	8007708 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	691a      	ldr	r2, [r3, #16]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	615a      	str	r2, [r3, #20]
}
 800770e:	bf00      	nop
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	40010000 	.word	0x40010000
 8007720:	40000400 	.word	0x40000400
 8007724:	40000800 	.word	0x40000800
 8007728:	40000c00 	.word	0x40000c00
 800772c:	40010400 	.word	0x40010400
 8007730:	40014000 	.word	0x40014000
 8007734:	40014400 	.word	0x40014400
 8007738:	40014800 	.word	0x40014800
 800773c:	40001800 	.word	0x40001800
 8007740:	40001c00 	.word	0x40001c00
 8007744:	40002000 	.word	0x40002000

08007748 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007748:	b480      	push	{r7}
 800774a:	b087      	sub	sp, #28
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	f023 0201 	bic.w	r2, r3, #1
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	4b2b      	ldr	r3, [pc, #172]	; (8007820 <TIM_OC1_SetConfig+0xd8>)
 8007774:	4013      	ands	r3, r2
 8007776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f023 0303 	bic.w	r3, r3, #3
 800777e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	4313      	orrs	r3, r2
 8007788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	f023 0302 	bic.w	r3, r3, #2
 8007790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	4313      	orrs	r3, r2
 800779a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a21      	ldr	r2, [pc, #132]	; (8007824 <TIM_OC1_SetConfig+0xdc>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d003      	beq.n	80077ac <TIM_OC1_SetConfig+0x64>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a20      	ldr	r2, [pc, #128]	; (8007828 <TIM_OC1_SetConfig+0xe0>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d10c      	bne.n	80077c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f023 0308 	bic.w	r3, r3, #8
 80077b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f023 0304 	bic.w	r3, r3, #4
 80077c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a16      	ldr	r2, [pc, #88]	; (8007824 <TIM_OC1_SetConfig+0xdc>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d003      	beq.n	80077d6 <TIM_OC1_SetConfig+0x8e>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a15      	ldr	r2, [pc, #84]	; (8007828 <TIM_OC1_SetConfig+0xe0>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d111      	bne.n	80077fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	685a      	ldr	r2, [r3, #4]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	621a      	str	r2, [r3, #32]
}
 8007814:	bf00      	nop
 8007816:	371c      	adds	r7, #28
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	fffeff8f 	.word	0xfffeff8f
 8007824:	40010000 	.word	0x40010000
 8007828:	40010400 	.word	0x40010400

0800782c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	f023 0210 	bic.w	r2, r3, #16
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	4b2e      	ldr	r3, [pc, #184]	; (8007910 <TIM_OC2_SetConfig+0xe4>)
 8007858:	4013      	ands	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	021b      	lsls	r3, r3, #8
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	4313      	orrs	r3, r2
 800786e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	f023 0320 	bic.w	r3, r3, #32
 8007876:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	011b      	lsls	r3, r3, #4
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	4313      	orrs	r3, r2
 8007882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a23      	ldr	r2, [pc, #140]	; (8007914 <TIM_OC2_SetConfig+0xe8>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d003      	beq.n	8007894 <TIM_OC2_SetConfig+0x68>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a22      	ldr	r2, [pc, #136]	; (8007918 <TIM_OC2_SetConfig+0xec>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d10d      	bne.n	80078b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800789a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	011b      	lsls	r3, r3, #4
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a18      	ldr	r2, [pc, #96]	; (8007914 <TIM_OC2_SetConfig+0xe8>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d003      	beq.n	80078c0 <TIM_OC2_SetConfig+0x94>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a17      	ldr	r2, [pc, #92]	; (8007918 <TIM_OC2_SetConfig+0xec>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d113      	bne.n	80078e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	4313      	orrs	r3, r2
 80078da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	621a      	str	r2, [r3, #32]
}
 8007902:	bf00      	nop
 8007904:	371c      	adds	r7, #28
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	feff8fff 	.word	0xfeff8fff
 8007914:	40010000 	.word	0x40010000
 8007918:	40010400 	.word	0x40010400

0800791c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800791c:	b480      	push	{r7}
 800791e:	b087      	sub	sp, #28
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	4b2d      	ldr	r3, [pc, #180]	; (80079fc <TIM_OC3_SetConfig+0xe0>)
 8007948:	4013      	ands	r3, r2
 800794a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f023 0303 	bic.w	r3, r3, #3
 8007952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	4313      	orrs	r3, r2
 800795c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	021b      	lsls	r3, r3, #8
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	4313      	orrs	r3, r2
 8007970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a22      	ldr	r2, [pc, #136]	; (8007a00 <TIM_OC3_SetConfig+0xe4>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d003      	beq.n	8007982 <TIM_OC3_SetConfig+0x66>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a21      	ldr	r2, [pc, #132]	; (8007a04 <TIM_OC3_SetConfig+0xe8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d10d      	bne.n	800799e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007988:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	021b      	lsls	r3, r3, #8
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	4313      	orrs	r3, r2
 8007994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800799c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a17      	ldr	r2, [pc, #92]	; (8007a00 <TIM_OC3_SetConfig+0xe4>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d003      	beq.n	80079ae <TIM_OC3_SetConfig+0x92>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a16      	ldr	r2, [pc, #88]	; (8007a04 <TIM_OC3_SetConfig+0xe8>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d113      	bne.n	80079d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	011b      	lsls	r3, r3, #4
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	011b      	lsls	r3, r3, #4
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	685a      	ldr	r2, [r3, #4]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	621a      	str	r2, [r3, #32]
}
 80079f0:	bf00      	nop
 80079f2:	371c      	adds	r7, #28
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	fffeff8f 	.word	0xfffeff8f
 8007a00:	40010000 	.word	0x40010000
 8007a04:	40010400 	.word	0x40010400

08007a08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b087      	sub	sp, #28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	69db      	ldr	r3, [r3, #28]
 8007a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	4b1e      	ldr	r3, [pc, #120]	; (8007aac <TIM_OC4_SetConfig+0xa4>)
 8007a34:	4013      	ands	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	021b      	lsls	r3, r3, #8
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	031b      	lsls	r3, r3, #12
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a13      	ldr	r2, [pc, #76]	; (8007ab0 <TIM_OC4_SetConfig+0xa8>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d003      	beq.n	8007a70 <TIM_OC4_SetConfig+0x68>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a12      	ldr	r2, [pc, #72]	; (8007ab4 <TIM_OC4_SetConfig+0xac>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d109      	bne.n	8007a84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	019b      	lsls	r3, r3, #6
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	621a      	str	r2, [r3, #32]
}
 8007a9e:	bf00      	nop
 8007aa0:	371c      	adds	r7, #28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	feff8fff 	.word	0xfeff8fff
 8007ab0:	40010000 	.word	0x40010000
 8007ab4:	40010400 	.word	0x40010400

08007ab8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	4b1b      	ldr	r3, [pc, #108]	; (8007b50 <TIM_OC5_SetConfig+0x98>)
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007af8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	041b      	lsls	r3, r3, #16
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a12      	ldr	r2, [pc, #72]	; (8007b54 <TIM_OC5_SetConfig+0x9c>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d003      	beq.n	8007b16 <TIM_OC5_SetConfig+0x5e>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a11      	ldr	r2, [pc, #68]	; (8007b58 <TIM_OC5_SetConfig+0xa0>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d109      	bne.n	8007b2a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	021b      	lsls	r3, r3, #8
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	685a      	ldr	r2, [r3, #4]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	621a      	str	r2, [r3, #32]
}
 8007b44:	bf00      	nop
 8007b46:	371c      	adds	r7, #28
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr
 8007b50:	fffeff8f 	.word	0xfffeff8f
 8007b54:	40010000 	.word	0x40010000
 8007b58:	40010400 	.word	0x40010400

08007b5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b087      	sub	sp, #28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a1b      	ldr	r3, [r3, #32]
 8007b76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	4b1c      	ldr	r3, [pc, #112]	; (8007bf8 <TIM_OC6_SetConfig+0x9c>)
 8007b88:	4013      	ands	r3, r2
 8007b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	021b      	lsls	r3, r3, #8
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	051b      	lsls	r3, r3, #20
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a13      	ldr	r2, [pc, #76]	; (8007bfc <TIM_OC6_SetConfig+0xa0>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d003      	beq.n	8007bbc <TIM_OC6_SetConfig+0x60>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a12      	ldr	r2, [pc, #72]	; (8007c00 <TIM_OC6_SetConfig+0xa4>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d109      	bne.n	8007bd0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	029b      	lsls	r3, r3, #10
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	621a      	str	r2, [r3, #32]
}
 8007bea:	bf00      	nop
 8007bec:	371c      	adds	r7, #28
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	feff8fff 	.word	0xfeff8fff
 8007bfc:	40010000 	.word	0x40010000
 8007c00:	40010400 	.word	0x40010400

08007c04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b087      	sub	sp, #28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6a1b      	ldr	r3, [r3, #32]
 8007c14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	f023 0201 	bic.w	r2, r3, #1
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	011b      	lsls	r3, r3, #4
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	f023 030a 	bic.w	r3, r3, #10
 8007c40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c42:	697a      	ldr	r2, [r7, #20]
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	621a      	str	r2, [r3, #32]
}
 8007c56:	bf00      	nop
 8007c58:	371c      	adds	r7, #28
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b087      	sub	sp, #28
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	60f8      	str	r0, [r7, #12]
 8007c6a:	60b9      	str	r1, [r7, #8]
 8007c6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	f023 0210 	bic.w	r2, r3, #16
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6a1b      	ldr	r3, [r3, #32]
 8007c84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	031b      	lsls	r3, r3, #12
 8007c92:	697a      	ldr	r2, [r7, #20]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	011b      	lsls	r3, r3, #4
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	693a      	ldr	r2, [r7, #16]
 8007cb4:	621a      	str	r2, [r3, #32]
}
 8007cb6:	bf00      	nop
 8007cb8:	371c      	adds	r7, #28
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b085      	sub	sp, #20
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	f043 0307 	orr.w	r3, r3, #7
 8007ce4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	609a      	str	r2, [r3, #8]
}
 8007cec:	bf00      	nop
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
 8007d04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	021a      	lsls	r2, r3, #8
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	697a      	ldr	r2, [r7, #20]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	609a      	str	r2, [r3, #8]
}
 8007d2c:	bf00      	nop
 8007d2e:	371c      	adds	r7, #28
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b087      	sub	sp, #28
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	f003 031f 	and.w	r3, r3, #31
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6a1a      	ldr	r2, [r3, #32]
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	43db      	mvns	r3, r3
 8007d5a:	401a      	ands	r2, r3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6a1a      	ldr	r2, [r3, #32]
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	f003 031f 	and.w	r3, r3, #31
 8007d6a:	6879      	ldr	r1, [r7, #4]
 8007d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d70:	431a      	orrs	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	621a      	str	r2, [r3, #32]
}
 8007d76:	bf00      	nop
 8007d78:	371c      	adds	r7, #28
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
	...

08007d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d101      	bne.n	8007d9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d98:	2302      	movs	r3, #2
 8007d9a:	e06d      	b.n	8007e78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2202      	movs	r2, #2
 8007da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a30      	ldr	r2, [pc, #192]	; (8007e84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d004      	beq.n	8007dd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a2f      	ldr	r2, [pc, #188]	; (8007e88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d108      	bne.n	8007de2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007dd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a20      	ldr	r2, [pc, #128]	; (8007e84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d022      	beq.n	8007e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e0e:	d01d      	beq.n	8007e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a1d      	ldr	r2, [pc, #116]	; (8007e8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d018      	beq.n	8007e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a1c      	ldr	r2, [pc, #112]	; (8007e90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d013      	beq.n	8007e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a1a      	ldr	r2, [pc, #104]	; (8007e94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d00e      	beq.n	8007e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a15      	ldr	r2, [pc, #84]	; (8007e88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d009      	beq.n	8007e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a16      	ldr	r2, [pc, #88]	; (8007e98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d004      	beq.n	8007e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a15      	ldr	r2, [pc, #84]	; (8007e9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d10c      	bne.n	8007e66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr
 8007e84:	40010000 	.word	0x40010000
 8007e88:	40010400 	.word	0x40010400
 8007e8c:	40000400 	.word	0x40000400
 8007e90:	40000800 	.word	0x40000800
 8007e94:	40000c00 	.word	0x40000c00
 8007e98:	40014000 	.word	0x40014000
 8007e9c:	40001800 	.word	0x40001800

08007ea0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d101      	bne.n	8007ebc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007eb8:	2302      	movs	r3, #2
 8007eba:	e065      	b.n	8007f88 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	695b      	ldr	r3, [r3, #20]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f22:	4313      	orrs	r3, r2
 8007f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	041b      	lsls	r3, r3, #16
 8007f32:	4313      	orrs	r3, r2
 8007f34:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a16      	ldr	r2, [pc, #88]	; (8007f94 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d004      	beq.n	8007f4a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a14      	ldr	r2, [pc, #80]	; (8007f98 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d115      	bne.n	8007f76 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f54:	051b      	lsls	r3, r3, #20
 8007f56:	4313      	orrs	r3, r2
 8007f58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	69db      	ldr	r3, [r3, #28]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	6a1b      	ldr	r3, [r3, #32]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr
 8007f94:	40010000 	.word	0x40010000
 8007f98:	40010400 	.word	0x40010400

08007f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fb8:	bf00      	nop
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d101      	bne.n	8007fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e040      	b.n	800806c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d106      	bne.n	8008000 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f7fa f9b0 	bl	8002360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2224      	movs	r2, #36	; 0x24
 8008004:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f022 0201 	bic.w	r2, r2, #1
 8008014:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f82c 	bl	8008074 <UART_SetConfig>
 800801c:	4603      	mov	r3, r0
 800801e:	2b01      	cmp	r3, #1
 8008020:	d101      	bne.n	8008026 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e022      	b.n	800806c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802a:	2b00      	cmp	r3, #0
 800802c:	d002      	beq.n	8008034 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fa84 	bl	800853c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	689a      	ldr	r2, [r3, #8]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008052:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f042 0201 	orr.w	r2, r2, #1
 8008062:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fb0b 	bl	8008680 <UART_CheckIdleState>
 800806a:	4603      	mov	r3, r0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b088      	sub	sp, #32
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800807c:	2300      	movs	r3, #0
 800807e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	689a      	ldr	r2, [r3, #8]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	431a      	orrs	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	431a      	orrs	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	69db      	ldr	r3, [r3, #28]
 8008094:	4313      	orrs	r3, r2
 8008096:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	4ba6      	ldr	r3, [pc, #664]	; (8008338 <UART_SetConfig+0x2c4>)
 80080a0:	4013      	ands	r3, r2
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	6812      	ldr	r2, [r2, #0]
 80080a6:	6979      	ldr	r1, [r7, #20]
 80080a8:	430b      	orrs	r3, r1
 80080aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68da      	ldr	r2, [r3, #12]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	430a      	orrs	r2, r1
 80080c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	430a      	orrs	r2, r1
 80080e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a94      	ldr	r2, [pc, #592]	; (800833c <UART_SetConfig+0x2c8>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d120      	bne.n	8008132 <UART_SetConfig+0xbe>
 80080f0:	4b93      	ldr	r3, [pc, #588]	; (8008340 <UART_SetConfig+0x2cc>)
 80080f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080f6:	f003 0303 	and.w	r3, r3, #3
 80080fa:	2b03      	cmp	r3, #3
 80080fc:	d816      	bhi.n	800812c <UART_SetConfig+0xb8>
 80080fe:	a201      	add	r2, pc, #4	; (adr r2, 8008104 <UART_SetConfig+0x90>)
 8008100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008104:	08008115 	.word	0x08008115
 8008108:	08008121 	.word	0x08008121
 800810c:	0800811b 	.word	0x0800811b
 8008110:	08008127 	.word	0x08008127
 8008114:	2301      	movs	r3, #1
 8008116:	77fb      	strb	r3, [r7, #31]
 8008118:	e150      	b.n	80083bc <UART_SetConfig+0x348>
 800811a:	2302      	movs	r3, #2
 800811c:	77fb      	strb	r3, [r7, #31]
 800811e:	e14d      	b.n	80083bc <UART_SetConfig+0x348>
 8008120:	2304      	movs	r3, #4
 8008122:	77fb      	strb	r3, [r7, #31]
 8008124:	e14a      	b.n	80083bc <UART_SetConfig+0x348>
 8008126:	2308      	movs	r3, #8
 8008128:	77fb      	strb	r3, [r7, #31]
 800812a:	e147      	b.n	80083bc <UART_SetConfig+0x348>
 800812c:	2310      	movs	r3, #16
 800812e:	77fb      	strb	r3, [r7, #31]
 8008130:	e144      	b.n	80083bc <UART_SetConfig+0x348>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a83      	ldr	r2, [pc, #524]	; (8008344 <UART_SetConfig+0x2d0>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d132      	bne.n	80081a2 <UART_SetConfig+0x12e>
 800813c:	4b80      	ldr	r3, [pc, #512]	; (8008340 <UART_SetConfig+0x2cc>)
 800813e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008142:	f003 030c 	and.w	r3, r3, #12
 8008146:	2b0c      	cmp	r3, #12
 8008148:	d828      	bhi.n	800819c <UART_SetConfig+0x128>
 800814a:	a201      	add	r2, pc, #4	; (adr r2, 8008150 <UART_SetConfig+0xdc>)
 800814c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008150:	08008185 	.word	0x08008185
 8008154:	0800819d 	.word	0x0800819d
 8008158:	0800819d 	.word	0x0800819d
 800815c:	0800819d 	.word	0x0800819d
 8008160:	08008191 	.word	0x08008191
 8008164:	0800819d 	.word	0x0800819d
 8008168:	0800819d 	.word	0x0800819d
 800816c:	0800819d 	.word	0x0800819d
 8008170:	0800818b 	.word	0x0800818b
 8008174:	0800819d 	.word	0x0800819d
 8008178:	0800819d 	.word	0x0800819d
 800817c:	0800819d 	.word	0x0800819d
 8008180:	08008197 	.word	0x08008197
 8008184:	2300      	movs	r3, #0
 8008186:	77fb      	strb	r3, [r7, #31]
 8008188:	e118      	b.n	80083bc <UART_SetConfig+0x348>
 800818a:	2302      	movs	r3, #2
 800818c:	77fb      	strb	r3, [r7, #31]
 800818e:	e115      	b.n	80083bc <UART_SetConfig+0x348>
 8008190:	2304      	movs	r3, #4
 8008192:	77fb      	strb	r3, [r7, #31]
 8008194:	e112      	b.n	80083bc <UART_SetConfig+0x348>
 8008196:	2308      	movs	r3, #8
 8008198:	77fb      	strb	r3, [r7, #31]
 800819a:	e10f      	b.n	80083bc <UART_SetConfig+0x348>
 800819c:	2310      	movs	r3, #16
 800819e:	77fb      	strb	r3, [r7, #31]
 80081a0:	e10c      	b.n	80083bc <UART_SetConfig+0x348>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a68      	ldr	r2, [pc, #416]	; (8008348 <UART_SetConfig+0x2d4>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d120      	bne.n	80081ee <UART_SetConfig+0x17a>
 80081ac:	4b64      	ldr	r3, [pc, #400]	; (8008340 <UART_SetConfig+0x2cc>)
 80081ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80081b6:	2b30      	cmp	r3, #48	; 0x30
 80081b8:	d013      	beq.n	80081e2 <UART_SetConfig+0x16e>
 80081ba:	2b30      	cmp	r3, #48	; 0x30
 80081bc:	d814      	bhi.n	80081e8 <UART_SetConfig+0x174>
 80081be:	2b20      	cmp	r3, #32
 80081c0:	d009      	beq.n	80081d6 <UART_SetConfig+0x162>
 80081c2:	2b20      	cmp	r3, #32
 80081c4:	d810      	bhi.n	80081e8 <UART_SetConfig+0x174>
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d002      	beq.n	80081d0 <UART_SetConfig+0x15c>
 80081ca:	2b10      	cmp	r3, #16
 80081cc:	d006      	beq.n	80081dc <UART_SetConfig+0x168>
 80081ce:	e00b      	b.n	80081e8 <UART_SetConfig+0x174>
 80081d0:	2300      	movs	r3, #0
 80081d2:	77fb      	strb	r3, [r7, #31]
 80081d4:	e0f2      	b.n	80083bc <UART_SetConfig+0x348>
 80081d6:	2302      	movs	r3, #2
 80081d8:	77fb      	strb	r3, [r7, #31]
 80081da:	e0ef      	b.n	80083bc <UART_SetConfig+0x348>
 80081dc:	2304      	movs	r3, #4
 80081de:	77fb      	strb	r3, [r7, #31]
 80081e0:	e0ec      	b.n	80083bc <UART_SetConfig+0x348>
 80081e2:	2308      	movs	r3, #8
 80081e4:	77fb      	strb	r3, [r7, #31]
 80081e6:	e0e9      	b.n	80083bc <UART_SetConfig+0x348>
 80081e8:	2310      	movs	r3, #16
 80081ea:	77fb      	strb	r3, [r7, #31]
 80081ec:	e0e6      	b.n	80083bc <UART_SetConfig+0x348>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a56      	ldr	r2, [pc, #344]	; (800834c <UART_SetConfig+0x2d8>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d120      	bne.n	800823a <UART_SetConfig+0x1c6>
 80081f8:	4b51      	ldr	r3, [pc, #324]	; (8008340 <UART_SetConfig+0x2cc>)
 80081fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008202:	2bc0      	cmp	r3, #192	; 0xc0
 8008204:	d013      	beq.n	800822e <UART_SetConfig+0x1ba>
 8008206:	2bc0      	cmp	r3, #192	; 0xc0
 8008208:	d814      	bhi.n	8008234 <UART_SetConfig+0x1c0>
 800820a:	2b80      	cmp	r3, #128	; 0x80
 800820c:	d009      	beq.n	8008222 <UART_SetConfig+0x1ae>
 800820e:	2b80      	cmp	r3, #128	; 0x80
 8008210:	d810      	bhi.n	8008234 <UART_SetConfig+0x1c0>
 8008212:	2b00      	cmp	r3, #0
 8008214:	d002      	beq.n	800821c <UART_SetConfig+0x1a8>
 8008216:	2b40      	cmp	r3, #64	; 0x40
 8008218:	d006      	beq.n	8008228 <UART_SetConfig+0x1b4>
 800821a:	e00b      	b.n	8008234 <UART_SetConfig+0x1c0>
 800821c:	2300      	movs	r3, #0
 800821e:	77fb      	strb	r3, [r7, #31]
 8008220:	e0cc      	b.n	80083bc <UART_SetConfig+0x348>
 8008222:	2302      	movs	r3, #2
 8008224:	77fb      	strb	r3, [r7, #31]
 8008226:	e0c9      	b.n	80083bc <UART_SetConfig+0x348>
 8008228:	2304      	movs	r3, #4
 800822a:	77fb      	strb	r3, [r7, #31]
 800822c:	e0c6      	b.n	80083bc <UART_SetConfig+0x348>
 800822e:	2308      	movs	r3, #8
 8008230:	77fb      	strb	r3, [r7, #31]
 8008232:	e0c3      	b.n	80083bc <UART_SetConfig+0x348>
 8008234:	2310      	movs	r3, #16
 8008236:	77fb      	strb	r3, [r7, #31]
 8008238:	e0c0      	b.n	80083bc <UART_SetConfig+0x348>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a44      	ldr	r2, [pc, #272]	; (8008350 <UART_SetConfig+0x2dc>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d125      	bne.n	8008290 <UART_SetConfig+0x21c>
 8008244:	4b3e      	ldr	r3, [pc, #248]	; (8008340 <UART_SetConfig+0x2cc>)
 8008246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800824a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800824e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008252:	d017      	beq.n	8008284 <UART_SetConfig+0x210>
 8008254:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008258:	d817      	bhi.n	800828a <UART_SetConfig+0x216>
 800825a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800825e:	d00b      	beq.n	8008278 <UART_SetConfig+0x204>
 8008260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008264:	d811      	bhi.n	800828a <UART_SetConfig+0x216>
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <UART_SetConfig+0x1fe>
 800826a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800826e:	d006      	beq.n	800827e <UART_SetConfig+0x20a>
 8008270:	e00b      	b.n	800828a <UART_SetConfig+0x216>
 8008272:	2300      	movs	r3, #0
 8008274:	77fb      	strb	r3, [r7, #31]
 8008276:	e0a1      	b.n	80083bc <UART_SetConfig+0x348>
 8008278:	2302      	movs	r3, #2
 800827a:	77fb      	strb	r3, [r7, #31]
 800827c:	e09e      	b.n	80083bc <UART_SetConfig+0x348>
 800827e:	2304      	movs	r3, #4
 8008280:	77fb      	strb	r3, [r7, #31]
 8008282:	e09b      	b.n	80083bc <UART_SetConfig+0x348>
 8008284:	2308      	movs	r3, #8
 8008286:	77fb      	strb	r3, [r7, #31]
 8008288:	e098      	b.n	80083bc <UART_SetConfig+0x348>
 800828a:	2310      	movs	r3, #16
 800828c:	77fb      	strb	r3, [r7, #31]
 800828e:	e095      	b.n	80083bc <UART_SetConfig+0x348>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a2f      	ldr	r2, [pc, #188]	; (8008354 <UART_SetConfig+0x2e0>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d125      	bne.n	80082e6 <UART_SetConfig+0x272>
 800829a:	4b29      	ldr	r3, [pc, #164]	; (8008340 <UART_SetConfig+0x2cc>)
 800829c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80082a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082a8:	d017      	beq.n	80082da <UART_SetConfig+0x266>
 80082aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082ae:	d817      	bhi.n	80082e0 <UART_SetConfig+0x26c>
 80082b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082b4:	d00b      	beq.n	80082ce <UART_SetConfig+0x25a>
 80082b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082ba:	d811      	bhi.n	80082e0 <UART_SetConfig+0x26c>
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d003      	beq.n	80082c8 <UART_SetConfig+0x254>
 80082c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082c4:	d006      	beq.n	80082d4 <UART_SetConfig+0x260>
 80082c6:	e00b      	b.n	80082e0 <UART_SetConfig+0x26c>
 80082c8:	2301      	movs	r3, #1
 80082ca:	77fb      	strb	r3, [r7, #31]
 80082cc:	e076      	b.n	80083bc <UART_SetConfig+0x348>
 80082ce:	2302      	movs	r3, #2
 80082d0:	77fb      	strb	r3, [r7, #31]
 80082d2:	e073      	b.n	80083bc <UART_SetConfig+0x348>
 80082d4:	2304      	movs	r3, #4
 80082d6:	77fb      	strb	r3, [r7, #31]
 80082d8:	e070      	b.n	80083bc <UART_SetConfig+0x348>
 80082da:	2308      	movs	r3, #8
 80082dc:	77fb      	strb	r3, [r7, #31]
 80082de:	e06d      	b.n	80083bc <UART_SetConfig+0x348>
 80082e0:	2310      	movs	r3, #16
 80082e2:	77fb      	strb	r3, [r7, #31]
 80082e4:	e06a      	b.n	80083bc <UART_SetConfig+0x348>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a1b      	ldr	r2, [pc, #108]	; (8008358 <UART_SetConfig+0x2e4>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d138      	bne.n	8008362 <UART_SetConfig+0x2ee>
 80082f0:	4b13      	ldr	r3, [pc, #76]	; (8008340 <UART_SetConfig+0x2cc>)
 80082f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082f6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80082fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082fe:	d017      	beq.n	8008330 <UART_SetConfig+0x2bc>
 8008300:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008304:	d82a      	bhi.n	800835c <UART_SetConfig+0x2e8>
 8008306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800830a:	d00b      	beq.n	8008324 <UART_SetConfig+0x2b0>
 800830c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008310:	d824      	bhi.n	800835c <UART_SetConfig+0x2e8>
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <UART_SetConfig+0x2aa>
 8008316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800831a:	d006      	beq.n	800832a <UART_SetConfig+0x2b6>
 800831c:	e01e      	b.n	800835c <UART_SetConfig+0x2e8>
 800831e:	2300      	movs	r3, #0
 8008320:	77fb      	strb	r3, [r7, #31]
 8008322:	e04b      	b.n	80083bc <UART_SetConfig+0x348>
 8008324:	2302      	movs	r3, #2
 8008326:	77fb      	strb	r3, [r7, #31]
 8008328:	e048      	b.n	80083bc <UART_SetConfig+0x348>
 800832a:	2304      	movs	r3, #4
 800832c:	77fb      	strb	r3, [r7, #31]
 800832e:	e045      	b.n	80083bc <UART_SetConfig+0x348>
 8008330:	2308      	movs	r3, #8
 8008332:	77fb      	strb	r3, [r7, #31]
 8008334:	e042      	b.n	80083bc <UART_SetConfig+0x348>
 8008336:	bf00      	nop
 8008338:	efff69f3 	.word	0xefff69f3
 800833c:	40011000 	.word	0x40011000
 8008340:	40023800 	.word	0x40023800
 8008344:	40004400 	.word	0x40004400
 8008348:	40004800 	.word	0x40004800
 800834c:	40004c00 	.word	0x40004c00
 8008350:	40005000 	.word	0x40005000
 8008354:	40011400 	.word	0x40011400
 8008358:	40007800 	.word	0x40007800
 800835c:	2310      	movs	r3, #16
 800835e:	77fb      	strb	r3, [r7, #31]
 8008360:	e02c      	b.n	80083bc <UART_SetConfig+0x348>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a72      	ldr	r2, [pc, #456]	; (8008530 <UART_SetConfig+0x4bc>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d125      	bne.n	80083b8 <UART_SetConfig+0x344>
 800836c:	4b71      	ldr	r3, [pc, #452]	; (8008534 <UART_SetConfig+0x4c0>)
 800836e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008372:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008376:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800837a:	d017      	beq.n	80083ac <UART_SetConfig+0x338>
 800837c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008380:	d817      	bhi.n	80083b2 <UART_SetConfig+0x33e>
 8008382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008386:	d00b      	beq.n	80083a0 <UART_SetConfig+0x32c>
 8008388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800838c:	d811      	bhi.n	80083b2 <UART_SetConfig+0x33e>
 800838e:	2b00      	cmp	r3, #0
 8008390:	d003      	beq.n	800839a <UART_SetConfig+0x326>
 8008392:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008396:	d006      	beq.n	80083a6 <UART_SetConfig+0x332>
 8008398:	e00b      	b.n	80083b2 <UART_SetConfig+0x33e>
 800839a:	2300      	movs	r3, #0
 800839c:	77fb      	strb	r3, [r7, #31]
 800839e:	e00d      	b.n	80083bc <UART_SetConfig+0x348>
 80083a0:	2302      	movs	r3, #2
 80083a2:	77fb      	strb	r3, [r7, #31]
 80083a4:	e00a      	b.n	80083bc <UART_SetConfig+0x348>
 80083a6:	2304      	movs	r3, #4
 80083a8:	77fb      	strb	r3, [r7, #31]
 80083aa:	e007      	b.n	80083bc <UART_SetConfig+0x348>
 80083ac:	2308      	movs	r3, #8
 80083ae:	77fb      	strb	r3, [r7, #31]
 80083b0:	e004      	b.n	80083bc <UART_SetConfig+0x348>
 80083b2:	2310      	movs	r3, #16
 80083b4:	77fb      	strb	r3, [r7, #31]
 80083b6:	e001      	b.n	80083bc <UART_SetConfig+0x348>
 80083b8:	2310      	movs	r3, #16
 80083ba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	69db      	ldr	r3, [r3, #28]
 80083c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083c4:	d15b      	bne.n	800847e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80083c6:	7ffb      	ldrb	r3, [r7, #31]
 80083c8:	2b08      	cmp	r3, #8
 80083ca:	d828      	bhi.n	800841e <UART_SetConfig+0x3aa>
 80083cc:	a201      	add	r2, pc, #4	; (adr r2, 80083d4 <UART_SetConfig+0x360>)
 80083ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d2:	bf00      	nop
 80083d4:	080083f9 	.word	0x080083f9
 80083d8:	08008401 	.word	0x08008401
 80083dc:	08008409 	.word	0x08008409
 80083e0:	0800841f 	.word	0x0800841f
 80083e4:	0800840f 	.word	0x0800840f
 80083e8:	0800841f 	.word	0x0800841f
 80083ec:	0800841f 	.word	0x0800841f
 80083f0:	0800841f 	.word	0x0800841f
 80083f4:	08008417 	.word	0x08008417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083f8:	f7fc fe40 	bl	800507c <HAL_RCC_GetPCLK1Freq>
 80083fc:	61b8      	str	r0, [r7, #24]
        break;
 80083fe:	e013      	b.n	8008428 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008400:	f7fc fe50 	bl	80050a4 <HAL_RCC_GetPCLK2Freq>
 8008404:	61b8      	str	r0, [r7, #24]
        break;
 8008406:	e00f      	b.n	8008428 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008408:	4b4b      	ldr	r3, [pc, #300]	; (8008538 <UART_SetConfig+0x4c4>)
 800840a:	61bb      	str	r3, [r7, #24]
        break;
 800840c:	e00c      	b.n	8008428 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800840e:	f7fc fd63 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
 8008412:	61b8      	str	r0, [r7, #24]
        break;
 8008414:	e008      	b.n	8008428 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800841a:	61bb      	str	r3, [r7, #24]
        break;
 800841c:	e004      	b.n	8008428 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800841e:	2300      	movs	r3, #0
 8008420:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	77bb      	strb	r3, [r7, #30]
        break;
 8008426:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d074      	beq.n	8008518 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	005a      	lsls	r2, r3, #1
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	085b      	lsrs	r3, r3, #1
 8008438:	441a      	add	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008442:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	2b0f      	cmp	r3, #15
 8008448:	d916      	bls.n	8008478 <UART_SetConfig+0x404>
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008450:	d212      	bcs.n	8008478 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	b29b      	uxth	r3, r3
 8008456:	f023 030f 	bic.w	r3, r3, #15
 800845a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	085b      	lsrs	r3, r3, #1
 8008460:	b29b      	uxth	r3, r3
 8008462:	f003 0307 	and.w	r3, r3, #7
 8008466:	b29a      	uxth	r2, r3
 8008468:	89fb      	ldrh	r3, [r7, #14]
 800846a:	4313      	orrs	r3, r2
 800846c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	89fa      	ldrh	r2, [r7, #14]
 8008474:	60da      	str	r2, [r3, #12]
 8008476:	e04f      	b.n	8008518 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	77bb      	strb	r3, [r7, #30]
 800847c:	e04c      	b.n	8008518 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800847e:	7ffb      	ldrb	r3, [r7, #31]
 8008480:	2b08      	cmp	r3, #8
 8008482:	d828      	bhi.n	80084d6 <UART_SetConfig+0x462>
 8008484:	a201      	add	r2, pc, #4	; (adr r2, 800848c <UART_SetConfig+0x418>)
 8008486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848a:	bf00      	nop
 800848c:	080084b1 	.word	0x080084b1
 8008490:	080084b9 	.word	0x080084b9
 8008494:	080084c1 	.word	0x080084c1
 8008498:	080084d7 	.word	0x080084d7
 800849c:	080084c7 	.word	0x080084c7
 80084a0:	080084d7 	.word	0x080084d7
 80084a4:	080084d7 	.word	0x080084d7
 80084a8:	080084d7 	.word	0x080084d7
 80084ac:	080084cf 	.word	0x080084cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084b0:	f7fc fde4 	bl	800507c <HAL_RCC_GetPCLK1Freq>
 80084b4:	61b8      	str	r0, [r7, #24]
        break;
 80084b6:	e013      	b.n	80084e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084b8:	f7fc fdf4 	bl	80050a4 <HAL_RCC_GetPCLK2Freq>
 80084bc:	61b8      	str	r0, [r7, #24]
        break;
 80084be:	e00f      	b.n	80084e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084c0:	4b1d      	ldr	r3, [pc, #116]	; (8008538 <UART_SetConfig+0x4c4>)
 80084c2:	61bb      	str	r3, [r7, #24]
        break;
 80084c4:	e00c      	b.n	80084e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084c6:	f7fc fd07 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
 80084ca:	61b8      	str	r0, [r7, #24]
        break;
 80084cc:	e008      	b.n	80084e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084d2:	61bb      	str	r3, [r7, #24]
        break;
 80084d4:	e004      	b.n	80084e0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80084d6:	2300      	movs	r3, #0
 80084d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	77bb      	strb	r3, [r7, #30]
        break;
 80084de:	bf00      	nop
    }

    if (pclk != 0U)
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d018      	beq.n	8008518 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	085a      	lsrs	r2, r3, #1
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	441a      	add	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	2b0f      	cmp	r3, #15
 80084fe:	d909      	bls.n	8008514 <UART_SetConfig+0x4a0>
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008506:	d205      	bcs.n	8008514 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	b29a      	uxth	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	60da      	str	r2, [r3, #12]
 8008512:	e001      	b.n	8008518 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008524:	7fbb      	ldrb	r3, [r7, #30]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3720      	adds	r7, #32
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	40007c00 	.word	0x40007c00
 8008534:	40023800 	.word	0x40023800
 8008538:	00f42400 	.word	0x00f42400

0800853c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008548:	f003 0301 	and.w	r3, r3, #1
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00a      	beq.n	8008566 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	430a      	orrs	r2, r1
 8008564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856a:	f003 0302 	and.w	r3, r3, #2
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00a      	beq.n	8008588 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	430a      	orrs	r2, r1
 8008586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858c:	f003 0304 	and.w	r3, r3, #4
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00a      	beq.n	80085aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	430a      	orrs	r2, r1
 80085a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ae:	f003 0308 	and.w	r3, r3, #8
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00a      	beq.n	80085cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	430a      	orrs	r2, r1
 80085ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d0:	f003 0310 	and.w	r3, r3, #16
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00a      	beq.n	80085ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	430a      	orrs	r2, r1
 80085ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f2:	f003 0320 	and.w	r3, r3, #32
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00a      	beq.n	8008610 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	430a      	orrs	r2, r1
 800860e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008618:	2b00      	cmp	r3, #0
 800861a:	d01a      	beq.n	8008652 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	430a      	orrs	r2, r1
 8008630:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800863a:	d10a      	bne.n	8008652 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	430a      	orrs	r2, r1
 8008650:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00a      	beq.n	8008674 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	430a      	orrs	r2, r1
 8008672:	605a      	str	r2, [r3, #4]
  }
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af02      	add	r7, sp, #8
 8008686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008690:	f7fa f8f4 	bl	800287c <HAL_GetTick>
 8008694:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 0308 	and.w	r3, r3, #8
 80086a0:	2b08      	cmp	r3, #8
 80086a2:	d10e      	bne.n	80086c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f817 	bl	80086e6 <UART_WaitOnFlagUntilTimeout>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086be:	2303      	movs	r3, #3
 80086c0:	e00d      	b.n	80086de <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2220      	movs	r2, #32
 80086c6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2220      	movs	r2, #32
 80086cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b09c      	sub	sp, #112	; 0x70
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	60f8      	str	r0, [r7, #12]
 80086ee:	60b9      	str	r1, [r7, #8]
 80086f0:	603b      	str	r3, [r7, #0]
 80086f2:	4613      	mov	r3, r2
 80086f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086f6:	e0a5      	b.n	8008844 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086fe:	f000 80a1 	beq.w	8008844 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008702:	f7fa f8bb 	bl	800287c <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800870e:	429a      	cmp	r2, r3
 8008710:	d302      	bcc.n	8008718 <UART_WaitOnFlagUntilTimeout+0x32>
 8008712:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008714:	2b00      	cmp	r3, #0
 8008716:	d13e      	bne.n	8008796 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008720:	e853 3f00 	ldrex	r3, [r3]
 8008724:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008728:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800872c:	667b      	str	r3, [r7, #100]	; 0x64
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	461a      	mov	r2, r3
 8008734:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008736:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008738:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800873c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800873e:	e841 2300 	strex	r3, r2, [r1]
 8008742:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008746:	2b00      	cmp	r3, #0
 8008748:	d1e6      	bne.n	8008718 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	3308      	adds	r3, #8
 8008750:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008754:	e853 3f00 	ldrex	r3, [r3]
 8008758:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800875a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875c:	f023 0301 	bic.w	r3, r3, #1
 8008760:	663b      	str	r3, [r7, #96]	; 0x60
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	3308      	adds	r3, #8
 8008768:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800876a:	64ba      	str	r2, [r7, #72]	; 0x48
 800876c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008770:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008772:	e841 2300 	strex	r3, r2, [r1]
 8008776:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1e5      	bne.n	800874a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2220      	movs	r2, #32
 8008782:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2220      	movs	r2, #32
 8008788:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008792:	2303      	movs	r3, #3
 8008794:	e067      	b.n	8008866 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 0304 	and.w	r3, r3, #4
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d04f      	beq.n	8008844 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	69db      	ldr	r3, [r3, #28]
 80087aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087b2:	d147      	bne.n	8008844 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c6:	e853 3f00 	ldrex	r3, [r3]
 80087ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80087d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	461a      	mov	r2, r3
 80087da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087dc:	637b      	str	r3, [r7, #52]	; 0x34
 80087de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80087e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087e4:	e841 2300 	strex	r3, r2, [r1]
 80087e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80087ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1e6      	bne.n	80087be <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	3308      	adds	r3, #8
 80087f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	e853 3f00 	ldrex	r3, [r3]
 80087fe:	613b      	str	r3, [r7, #16]
   return(result);
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	f023 0301 	bic.w	r3, r3, #1
 8008806:	66bb      	str	r3, [r7, #104]	; 0x68
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	3308      	adds	r3, #8
 800880e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008810:	623a      	str	r2, [r7, #32]
 8008812:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008814:	69f9      	ldr	r1, [r7, #28]
 8008816:	6a3a      	ldr	r2, [r7, #32]
 8008818:	e841 2300 	strex	r3, r2, [r1]
 800881c:	61bb      	str	r3, [r7, #24]
   return(result);
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1e5      	bne.n	80087f0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2220      	movs	r2, #32
 8008828:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2220      	movs	r2, #32
 800882e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2220      	movs	r2, #32
 8008834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	e010      	b.n	8008866 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	69da      	ldr	r2, [r3, #28]
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	4013      	ands	r3, r2
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	429a      	cmp	r2, r3
 8008852:	bf0c      	ite	eq
 8008854:	2301      	moveq	r3, #1
 8008856:	2300      	movne	r3, #0
 8008858:	b2db      	uxtb	r3, r3
 800885a:	461a      	mov	r2, r3
 800885c:	79fb      	ldrb	r3, [r7, #7]
 800885e:	429a      	cmp	r2, r3
 8008860:	f43f af4a 	beq.w	80086f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3770      	adds	r7, #112	; 0x70
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
	...

08008870 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d121      	bne.n	80088c6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	4b27      	ldr	r3, [pc, #156]	; (8008924 <FMC_SDRAM_Init+0xb4>)
 8008888:	4013      	ands	r3, r2
 800888a:	683a      	ldr	r2, [r7, #0]
 800888c:	6851      	ldr	r1, [r2, #4]
 800888e:	683a      	ldr	r2, [r7, #0]
 8008890:	6892      	ldr	r2, [r2, #8]
 8008892:	4311      	orrs	r1, r2
 8008894:	683a      	ldr	r2, [r7, #0]
 8008896:	68d2      	ldr	r2, [r2, #12]
 8008898:	4311      	orrs	r1, r2
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	6912      	ldr	r2, [r2, #16]
 800889e:	4311      	orrs	r1, r2
 80088a0:	683a      	ldr	r2, [r7, #0]
 80088a2:	6952      	ldr	r2, [r2, #20]
 80088a4:	4311      	orrs	r1, r2
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	6992      	ldr	r2, [r2, #24]
 80088aa:	4311      	orrs	r1, r2
 80088ac:	683a      	ldr	r2, [r7, #0]
 80088ae:	69d2      	ldr	r2, [r2, #28]
 80088b0:	4311      	orrs	r1, r2
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	6a12      	ldr	r2, [r2, #32]
 80088b6:	4311      	orrs	r1, r2
 80088b8:	683a      	ldr	r2, [r7, #0]
 80088ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80088bc:	430a      	orrs	r2, r1
 80088be:	431a      	orrs	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	e026      	b.n	8008914 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	69d9      	ldr	r1, [r3, #28]
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	4319      	orrs	r1, r3
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088dc:	430b      	orrs	r3, r1
 80088de:	431a      	orrs	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	4b0e      	ldr	r3, [pc, #56]	; (8008924 <FMC_SDRAM_Init+0xb4>)
 80088ea:	4013      	ands	r3, r2
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	6851      	ldr	r1, [r2, #4]
 80088f0:	683a      	ldr	r2, [r7, #0]
 80088f2:	6892      	ldr	r2, [r2, #8]
 80088f4:	4311      	orrs	r1, r2
 80088f6:	683a      	ldr	r2, [r7, #0]
 80088f8:	68d2      	ldr	r2, [r2, #12]
 80088fa:	4311      	orrs	r1, r2
 80088fc:	683a      	ldr	r2, [r7, #0]
 80088fe:	6912      	ldr	r2, [r2, #16]
 8008900:	4311      	orrs	r1, r2
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	6952      	ldr	r2, [r2, #20]
 8008906:	4311      	orrs	r1, r2
 8008908:	683a      	ldr	r2, [r7, #0]
 800890a:	6992      	ldr	r2, [r2, #24]
 800890c:	430a      	orrs	r2, r1
 800890e:	431a      	orrs	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	ffff8000 	.word	0xffff8000

08008928 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d128      	bne.n	800898c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	1e59      	subs	r1, r3, #1
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	3b01      	subs	r3, #1
 800894e:	011b      	lsls	r3, r3, #4
 8008950:	4319      	orrs	r1, r3
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	3b01      	subs	r3, #1
 8008958:	021b      	lsls	r3, r3, #8
 800895a:	4319      	orrs	r1, r3
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	3b01      	subs	r3, #1
 8008962:	031b      	lsls	r3, r3, #12
 8008964:	4319      	orrs	r1, r3
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	3b01      	subs	r3, #1
 800896c:	041b      	lsls	r3, r3, #16
 800896e:	4319      	orrs	r1, r3
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	695b      	ldr	r3, [r3, #20]
 8008974:	3b01      	subs	r3, #1
 8008976:	051b      	lsls	r3, r3, #20
 8008978:	4319      	orrs	r1, r3
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	3b01      	subs	r3, #1
 8008980:	061b      	lsls	r3, r3, #24
 8008982:	430b      	orrs	r3, r1
 8008984:	431a      	orrs	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	609a      	str	r2, [r3, #8]
 800898a:	e02d      	b.n	80089e8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	689a      	ldr	r2, [r3, #8]
 8008990:	4b19      	ldr	r3, [pc, #100]	; (80089f8 <FMC_SDRAM_Timing_Init+0xd0>)
 8008992:	4013      	ands	r3, r2
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	68d2      	ldr	r2, [r2, #12]
 8008998:	3a01      	subs	r2, #1
 800899a:	0311      	lsls	r1, r2, #12
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	6952      	ldr	r2, [r2, #20]
 80089a0:	3a01      	subs	r2, #1
 80089a2:	0512      	lsls	r2, r2, #20
 80089a4:	430a      	orrs	r2, r1
 80089a6:	431a      	orrs	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	1e59      	subs	r1, r3, #1
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	3b01      	subs	r3, #1
 80089c0:	011b      	lsls	r3, r3, #4
 80089c2:	4319      	orrs	r1, r3
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	3b01      	subs	r3, #1
 80089ca:	021b      	lsls	r3, r3, #8
 80089cc:	4319      	orrs	r1, r3
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	3b01      	subs	r3, #1
 80089d4:	041b      	lsls	r3, r3, #16
 80089d6:	4319      	orrs	r1, r3
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	3b01      	subs	r3, #1
 80089de:	061b      	lsls	r3, r3, #24
 80089e0:	430b      	orrs	r3, r1
 80089e2:	431a      	orrs	r2, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	ff0f0fff 	.word	0xff0f0fff

080089fc <__libc_init_array>:
 80089fc:	b570      	push	{r4, r5, r6, lr}
 80089fe:	4d0d      	ldr	r5, [pc, #52]	; (8008a34 <__libc_init_array+0x38>)
 8008a00:	4c0d      	ldr	r4, [pc, #52]	; (8008a38 <__libc_init_array+0x3c>)
 8008a02:	1b64      	subs	r4, r4, r5
 8008a04:	10a4      	asrs	r4, r4, #2
 8008a06:	2600      	movs	r6, #0
 8008a08:	42a6      	cmp	r6, r4
 8008a0a:	d109      	bne.n	8008a20 <__libc_init_array+0x24>
 8008a0c:	4d0b      	ldr	r5, [pc, #44]	; (8008a3c <__libc_init_array+0x40>)
 8008a0e:	4c0c      	ldr	r4, [pc, #48]	; (8008a40 <__libc_init_array+0x44>)
 8008a10:	f000 f820 	bl	8008a54 <_init>
 8008a14:	1b64      	subs	r4, r4, r5
 8008a16:	10a4      	asrs	r4, r4, #2
 8008a18:	2600      	movs	r6, #0
 8008a1a:	42a6      	cmp	r6, r4
 8008a1c:	d105      	bne.n	8008a2a <__libc_init_array+0x2e>
 8008a1e:	bd70      	pop	{r4, r5, r6, pc}
 8008a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a24:	4798      	blx	r3
 8008a26:	3601      	adds	r6, #1
 8008a28:	e7ee      	b.n	8008a08 <__libc_init_array+0xc>
 8008a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a2e:	4798      	blx	r3
 8008a30:	3601      	adds	r6, #1
 8008a32:	e7f2      	b.n	8008a1a <__libc_init_array+0x1e>
 8008a34:	08008a8c 	.word	0x08008a8c
 8008a38:	08008a8c 	.word	0x08008a8c
 8008a3c:	08008a8c 	.word	0x08008a8c
 8008a40:	08008a90 	.word	0x08008a90

08008a44 <memset>:
 8008a44:	4402      	add	r2, r0
 8008a46:	4603      	mov	r3, r0
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d100      	bne.n	8008a4e <memset+0xa>
 8008a4c:	4770      	bx	lr
 8008a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a52:	e7f9      	b.n	8008a48 <memset+0x4>

08008a54 <_init>:
 8008a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a56:	bf00      	nop
 8008a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a5a:	bc08      	pop	{r3}
 8008a5c:	469e      	mov	lr, r3
 8008a5e:	4770      	bx	lr

08008a60 <_fini>:
 8008a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a62:	bf00      	nop
 8008a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a66:	bc08      	pop	{r3}
 8008a68:	469e      	mov	lr, r3
 8008a6a:	4770      	bx	lr
