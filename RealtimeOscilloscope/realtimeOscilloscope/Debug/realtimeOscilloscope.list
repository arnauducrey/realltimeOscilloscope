
realtimeOscilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008420  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080085e8  080085e8  000185e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008600  08008600  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008600  08008600  00018600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008608  08008608  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008608  08008608  00018608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800860c  0800860c  0001860c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006bc  2000000c  0800861c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  200006c8  0800861c  000206c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000253ee  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042d5  00000000  00000000  0004542a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f10  00000000  00000000  00049700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d50  00000000  00000000  0004b610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d9c1  00000000  00000000  0004d360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002725b  00000000  00000000  0007ad21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b2e4  00000000  00000000  000a1f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ad260  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008564  00000000  00000000  001ad2b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080085d0 	.word	0x080085d0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080085d0 	.word	0x080085d0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <HAL_ADC_ConvCpltCallback>:
#include "stm32f7xx_hal.h"

extern "C" void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc){
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	volatile uint32_t value = HAL_ADC_GetValue(hadc);
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f002 fbf1 	bl	8002cfc <HAL_ADC_GetValue>
 800051a:	4603      	mov	r3, r0
 800051c:	60fb      	str	r3, [r7, #12]
}
 800051e:	bf00      	nop
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f002 f969 	bl	8002802 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000530:	f000 f832 	bl	8000598 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000534:	f000 f8a2 	bl	800067c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f000 ff4e 	bl	80013d8 <MX_GPIO_Init>
  MX_ADC3_Init();
 800053c:	f000 f8c8 	bl	80006d0 <MX_ADC3_Init>
  MX_CRC_Init();
 8000540:	f000 f918 	bl	8000774 <MX_CRC_Init>
  MX_DCMI_Init();
 8000544:	f000 f938 	bl	80007b8 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000548:	f000 f96a 	bl	8000820 <MX_DMA2D_Init>
  MX_FMC_Init();
 800054c:	f000 fef4 	bl	8001338 <MX_FMC_Init>
  MX_I2C3_Init();
 8000550:	f000 f998 	bl	8000884 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000554:	f000 f9d6 	bl	8000904 <MX_LTDC_Init>
  MX_RTC_Init();
 8000558:	f000 fa56 	bl	8000a08 <MX_RTC_Init>
  MX_SAI2_Init();
 800055c:	f000 fafa 	bl	8000b54 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 8000560:	f000 fba0 	bl	8000ca4 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000564:	f000 fbce 	bl	8000d04 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000568:	f000 fc0a 	bl	8000d80 <MX_TIM1_Init>
  MX_TIM2_Init();
 800056c:	f000 fcb4 	bl	8000ed8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000570:	f000 fd28 	bl	8000fc4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000574:	f000 fd9e 	bl	80010b4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000578:	f000 fe14 	bl	80011a4 <MX_TIM8_Init>
  MX_TIM12_Init();
 800057c:	f000 fe66 	bl	800124c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000580:	f000 feaa 	bl	80012d8 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_IT(&hadc3);
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <main+0x6c>)
 8000586:	f002 f9d1 	bl	800292c <HAL_ADC_Start_IT>
	  HAL_Delay(2000);
 800058a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800058e:	f002 f965 	bl	800285c <HAL_Delay>
	  HAL_ADC_Start_IT(&hadc3);
 8000592:	e7f7      	b.n	8000584 <main+0x5c>
 8000594:	20000028 	.word	0x20000028

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	; 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f008 f80a 	bl	80085c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005bc:	f004 f8a4 	bl	8004708 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <SystemClock_Config+0xdc>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	4a2b      	ldr	r2, [pc, #172]	; (8000674 <SystemClock_Config+0xdc>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b29      	ldr	r3, [pc, #164]	; (8000674 <SystemClock_Config+0xdc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	4b27      	ldr	r3, [pc, #156]	; (8000678 <SystemClock_Config+0xe0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a26      	ldr	r2, [pc, #152]	; (8000678 <SystemClock_Config+0xe0>)
 80005de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b24      	ldr	r3, [pc, #144]	; (8000678 <SystemClock_Config+0xe0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80005f0:	2309      	movs	r3, #9
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005fa:	2301      	movs	r3, #1
 80005fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000608:	2319      	movs	r3, #25
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 800060c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000610:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000616:	2309      	movs	r3, #9
 8000618:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	4618      	mov	r0, r3
 8000620:	f004 f8d2 	bl	80047c8 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800062a:	f001 f975 	bl	8001918 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800062e:	f004 f87b 	bl	8004728 <HAL_PWREx_EnableOverDrive>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000638:	f001 f96e 	bl	8001918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000648:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2106      	movs	r1, #6
 800065a:	4618      	mov	r0, r3
 800065c:	f004 fb58 	bl	8004d10 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000666:	f001 f957 	bl	8001918 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3750      	adds	r7, #80	; 0x50
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b0a2      	sub	sp, #136	; 0x88
 8000680:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2284      	movs	r2, #132	; 0x84
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f007 ff99 	bl	80085c0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2;
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <PeriphCommonClock_Config+0x50>)
 8000690:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000692:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000696:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000698:	2305      	movs	r3, #5
 800069a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80006a0:	2303      	movs	r3, #3
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80006a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006ac:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80006ae:	2300      	movs	r3, #0
 80006b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	4618      	mov	r0, r3
 80006b6:	f004 fd43 	bl	8005140 <HAL_RCCEx_PeriphCLKConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 80006c0:	f001 f92a 	bl	8001918 <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3788      	adds	r7, #136	; 0x88
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	00100008 	.word	0x00100008

080006d0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80006e2:	4b21      	ldr	r3, [pc, #132]	; (8000768 <MX_ADC3_Init+0x98>)
 80006e4:	4a21      	ldr	r2, [pc, #132]	; (800076c <MX_ADC3_Init+0x9c>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_ADC3_Init+0x98>)
 80006ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006ee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006f0:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <MX_ADC3_Init+0x98>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_ADC3_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_ADC3_Init+0x98>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_ADC3_Init+0x98>)
 8000704:	2200      	movs	r2, #0
 8000706:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_ADC3_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_ADC3_Init+0x98>)
 8000712:	4a17      	ldr	r2, [pc, #92]	; (8000770 <MX_ADC3_Init+0xa0>)
 8000714:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_ADC3_Init+0x98>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_ADC3_Init+0x98>)
 800071e:	2201      	movs	r2, #1
 8000720:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_ADC3_Init+0x98>)
 8000724:	2200      	movs	r2, #0
 8000726:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_ADC3_Init+0x98>)
 800072c:	2201      	movs	r2, #1
 800072e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000730:	480d      	ldr	r0, [pc, #52]	; (8000768 <MX_ADC3_Init+0x98>)
 8000732:	f002 f8b7 	bl	80028a4 <HAL_ADC_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800073c:	f001 f8ec 	bl	8001918 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000740:	2300      	movs	r3, #0
 8000742:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000744:	2301      	movs	r3, #1
 8000746:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800074c:	463b      	mov	r3, r7
 800074e:	4619      	mov	r1, r3
 8000750:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_ADC3_Init+0x98>)
 8000752:	f002 faf5 	bl	8002d40 <HAL_ADC_ConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800075c:	f001 f8dc 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000028 	.word	0x20000028
 800076c:	40012200 	.word	0x40012200
 8000770:	0f000001 	.word	0x0f000001

08000774 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000778:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <MX_CRC_Init+0x3c>)
 800077a:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <MX_CRC_Init+0x40>)
 800077c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_CRC_Init+0x3c>)
 8000780:	2200      	movs	r2, #0
 8000782:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <MX_CRC_Init+0x3c>)
 8000786:	2200      	movs	r2, #0
 8000788:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_CRC_Init+0x3c>)
 800078c:	2200      	movs	r2, #0
 800078e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <MX_CRC_Init+0x3c>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_CRC_Init+0x3c>)
 8000798:	2201      	movs	r2, #1
 800079a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_CRC_Init+0x3c>)
 800079e:	f002 fe0b 	bl	80033b8 <HAL_CRC_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007a8:	f001 f8b6 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000070 	.word	0x20000070
 80007b4:	40023000 	.word	0x40023000

080007b8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_DCMI_Init+0x60>)
 80007be:	4a17      	ldr	r2, [pc, #92]	; (800081c <MX_DCMI_Init+0x64>)
 80007c0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_DCMI_Init+0x60>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_DCMI_Init+0x60>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_DCMI_Init+0x60>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_DCMI_Init+0x60>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_DCMI_Init+0x60>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80007e0:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_DCMI_Init+0x60>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_DCMI_Init+0x60>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_DCMI_Init+0x60>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_DCMI_Init+0x60>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_DCMI_Init+0x60>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_DCMI_Init+0x60>)
 8000800:	2200      	movs	r2, #0
 8000802:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_DCMI_Init+0x60>)
 8000806:	f002 fec1 	bl	800358c <HAL_DCMI_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000810:	f001 f882 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000094 	.word	0x20000094
 800081c:	50050000 	.word	0x50050000

08000820 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_DMA2D_Init+0x5c>)
 8000826:	4a16      	ldr	r2, [pc, #88]	; (8000880 <MX_DMA2D_Init+0x60>)
 8000828:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_DMA2D_Init+0x5c>)
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_DMA2D_Init+0x5c>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_DMA2D_Init+0x5c>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_DMA2D_Init+0x5c>)
 800083e:	2200      	movs	r2, #0
 8000840:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_DMA2D_Init+0x5c>)
 8000844:	2200      	movs	r2, #0
 8000846:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_DMA2D_Init+0x5c>)
 800084a:	2200      	movs	r2, #0
 800084c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_DMA2D_Init+0x5c>)
 8000850:	2200      	movs	r2, #0
 8000852:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000854:	4809      	ldr	r0, [pc, #36]	; (800087c <MX_DMA2D_Init+0x5c>)
 8000856:	f002 ff13 	bl	8003680 <HAL_DMA2D_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000860:	f001 f85a 	bl	8001918 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000864:	2101      	movs	r1, #1
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_DMA2D_Init+0x5c>)
 8000868:	f003 f864 	bl	8003934 <HAL_DMA2D_ConfigLayer>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000872:	f001 f851 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000e4 	.word	0x200000e4
 8000880:	4002b000 	.word	0x4002b000

08000884 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_I2C3_Init+0x74>)
 800088a:	4a1c      	ldr	r2, [pc, #112]	; (80008fc <MX_I2C3_Init+0x78>)
 800088c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_I2C3_Init+0x74>)
 8000890:	4a1b      	ldr	r2, [pc, #108]	; (8000900 <MX_I2C3_Init+0x7c>)
 8000892:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_I2C3_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_I2C3_Init+0x74>)
 800089c:	2201      	movs	r2, #1
 800089e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_I2C3_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_I2C3_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_I2C3_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_I2C3_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_I2C3_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008be:	480e      	ldr	r0, [pc, #56]	; (80008f8 <MX_I2C3_Init+0x74>)
 80008c0:	f003 fa90 	bl	8003de4 <HAL_I2C_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80008ca:	f001 f825 	bl	8001918 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ce:	2100      	movs	r1, #0
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <MX_I2C3_Init+0x74>)
 80008d2:	f003 fb17 	bl	8003f04 <HAL_I2CEx_ConfigAnalogFilter>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80008dc:	f001 f81c 	bl	8001918 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008e0:	2100      	movs	r1, #0
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_I2C3_Init+0x74>)
 80008e4:	f003 fb59 	bl	8003f9a <HAL_I2CEx_ConfigDigitalFilter>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80008ee:	f001 f813 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000124 	.word	0x20000124
 80008fc:	40005c00 	.word	0x40005c00
 8000900:	00c0eaff 	.word	0x00c0eaff

08000904 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08e      	sub	sp, #56	; 0x38
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2234      	movs	r2, #52	; 0x34
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f007 fe55 	bl	80085c0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000916:	4b3a      	ldr	r3, [pc, #232]	; (8000a00 <MX_LTDC_Init+0xfc>)
 8000918:	4a3a      	ldr	r2, [pc, #232]	; (8000a04 <MX_LTDC_Init+0x100>)
 800091a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800091c:	4b38      	ldr	r3, [pc, #224]	; (8000a00 <MX_LTDC_Init+0xfc>)
 800091e:	2200      	movs	r2, #0
 8000920:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000922:	4b37      	ldr	r3, [pc, #220]	; (8000a00 <MX_LTDC_Init+0xfc>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000928:	4b35      	ldr	r3, [pc, #212]	; (8000a00 <MX_LTDC_Init+0xfc>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800092e:	4b34      	ldr	r3, [pc, #208]	; (8000a00 <MX_LTDC_Init+0xfc>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000934:	4b32      	ldr	r3, [pc, #200]	; (8000a00 <MX_LTDC_Init+0xfc>)
 8000936:	2228      	movs	r2, #40	; 0x28
 8000938:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800093a:	4b31      	ldr	r3, [pc, #196]	; (8000a00 <MX_LTDC_Init+0xfc>)
 800093c:	2209      	movs	r2, #9
 800093e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000940:	4b2f      	ldr	r3, [pc, #188]	; (8000a00 <MX_LTDC_Init+0xfc>)
 8000942:	2235      	movs	r2, #53	; 0x35
 8000944:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000946:	4b2e      	ldr	r3, [pc, #184]	; (8000a00 <MX_LTDC_Init+0xfc>)
 8000948:	220b      	movs	r2, #11
 800094a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800094c:	4b2c      	ldr	r3, [pc, #176]	; (8000a00 <MX_LTDC_Init+0xfc>)
 800094e:	f240 2215 	movw	r2, #533	; 0x215
 8000952:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000954:	4b2a      	ldr	r3, [pc, #168]	; (8000a00 <MX_LTDC_Init+0xfc>)
 8000956:	f240 121b 	movw	r2, #283	; 0x11b
 800095a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800095c:	4b28      	ldr	r3, [pc, #160]	; (8000a00 <MX_LTDC_Init+0xfc>)
 800095e:	f240 2235 	movw	r2, #565	; 0x235
 8000962:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000964:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <MX_LTDC_Init+0xfc>)
 8000966:	f240 121d 	movw	r2, #285	; 0x11d
 800096a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800096c:	4b24      	ldr	r3, [pc, #144]	; (8000a00 <MX_LTDC_Init+0xfc>)
 800096e:	2200      	movs	r2, #0
 8000970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000974:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <MX_LTDC_Init+0xfc>)
 8000976:	2200      	movs	r2, #0
 8000978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800097c:	4b20      	ldr	r3, [pc, #128]	; (8000a00 <MX_LTDC_Init+0xfc>)
 800097e:	2200      	movs	r2, #0
 8000980:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000984:	481e      	ldr	r0, [pc, #120]	; (8000a00 <MX_LTDC_Init+0xfc>)
 8000986:	f003 fb55 	bl	8004034 <HAL_LTDC_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000990:	f000 ffc2 	bl	8001918 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000998:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800099c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80009a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80009a6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80009a8:	2302      	movs	r3, #2
 80009aa:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80009ac:	23ff      	movs	r3, #255	; 0xff
 80009ae:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80009b4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009b8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80009ba:	2307      	movs	r3, #7
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80009be:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80009c4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80009ca:	f44f 7388 	mov.w	r3, #272	; 0x110
 80009ce:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2200      	movs	r2, #0
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_LTDC_Init+0xfc>)
 80009ea:	f003 fcb5 	bl	8004358 <HAL_LTDC_ConfigLayer>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80009f4:	f000 ff90 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	3738      	adds	r7, #56	; 0x38
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000170 	.word	0x20000170
 8000a04:	40016800 	.word	0x40016800

08000a08 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b092      	sub	sp, #72	; 0x48
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]
 8000a1e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000a24:	463b      	mov	r3, r7
 8000a26:	222c      	movs	r2, #44	; 0x2c
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f007 fdc8 	bl	80085c0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a30:	4b46      	ldr	r3, [pc, #280]	; (8000b4c <MX_RTC_Init+0x144>)
 8000a32:	4a47      	ldr	r2, [pc, #284]	; (8000b50 <MX_RTC_Init+0x148>)
 8000a34:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a36:	4b45      	ldr	r3, [pc, #276]	; (8000b4c <MX_RTC_Init+0x144>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a3c:	4b43      	ldr	r3, [pc, #268]	; (8000b4c <MX_RTC_Init+0x144>)
 8000a3e:	227f      	movs	r2, #127	; 0x7f
 8000a40:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a42:	4b42      	ldr	r3, [pc, #264]	; (8000b4c <MX_RTC_Init+0x144>)
 8000a44:	22ff      	movs	r2, #255	; 0xff
 8000a46:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a48:	4b40      	ldr	r3, [pc, #256]	; (8000b4c <MX_RTC_Init+0x144>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a4e:	4b3f      	ldr	r3, [pc, #252]	; (8000b4c <MX_RTC_Init+0x144>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a54:	4b3d      	ldr	r3, [pc, #244]	; (8000b4c <MX_RTC_Init+0x144>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a5a:	483c      	ldr	r0, [pc, #240]	; (8000b4c <MX_RTC_Init+0x144>)
 8000a5c:	f005 f8a4 	bl	8005ba8 <HAL_RTC_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000a66:	f000 ff57 	bl	8001918 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a80:	2300      	movs	r3, #0
 8000a82:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	482f      	ldr	r0, [pc, #188]	; (8000b4c <MX_RTC_Init+0x144>)
 8000a8e:	f005 f91d 	bl	8005ccc <HAL_RTC_SetTime>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000a98:	f000 ff3e 	bl	8001918 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4619      	mov	r1, r3
 8000abc:	4823      	ldr	r0, [pc, #140]	; (8000b4c <MX_RTC_Init+0x144>)
 8000abe:	f005 f9c3 	bl	8005e48 <HAL_RTC_SetDate>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000ac8:	f000 ff26 	bl	8001918 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000af0:	2301      	movs	r3, #1
 8000af2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000afc:	463b      	mov	r3, r7
 8000afe:	2201      	movs	r2, #1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4812      	ldr	r0, [pc, #72]	; (8000b4c <MX_RTC_Init+0x144>)
 8000b04:	f005 fa48 	bl	8005f98 <HAL_RTC_SetAlarm>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000b0e:	f000 ff03 	bl	8001918 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480b      	ldr	r0, [pc, #44]	; (8000b4c <MX_RTC_Init+0x144>)
 8000b20:	f005 fa3a 	bl	8005f98 <HAL_RTC_SetAlarm>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000b2a:	f000 fef5 	bl	8001918 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000b2e:	2202      	movs	r2, #2
 8000b30:	2100      	movs	r1, #0
 8000b32:	4806      	ldr	r0, [pc, #24]	; (8000b4c <MX_RTC_Init+0x144>)
 8000b34:	f005 fbba 	bl	80062ac <HAL_RTCEx_SetTimeStamp>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000b3e:	f000 feeb 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	3748      	adds	r7, #72	; 0x48
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000218 	.word	0x20000218
 8000b50:	40002800 	.word	0x40002800

08000b54 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000b58:	4b4d      	ldr	r3, [pc, #308]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000b5a:	4a4e      	ldr	r2, [pc, #312]	; (8000c94 <MX_SAI2_Init+0x140>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b5e:	4b4c      	ldr	r3, [pc, #304]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000b64:	4b4a      	ldr	r3, [pc, #296]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000b6a:	4b49      	ldr	r3, [pc, #292]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000b6c:	2240      	movs	r2, #64	; 0x40
 8000b6e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000b70:	4b47      	ldr	r3, [pc, #284]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000b76:	4b46      	ldr	r3, [pc, #280]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b7c:	4b44      	ldr	r3, [pc, #272]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b82:	4b43      	ldr	r3, [pc, #268]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b88:	4b41      	ldr	r3, [pc, #260]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b8e:	4b40      	ldr	r3, [pc, #256]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000b94:	4b3e      	ldr	r3, [pc, #248]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000b96:	4a40      	ldr	r2, [pc, #256]	; (8000c98 <MX_SAI2_Init+0x144>)
 8000b98:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b9a:	4b3d      	ldr	r3, [pc, #244]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ba0:	4b3b      	ldr	r3, [pc, #236]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ba6:	4b3a      	ldr	r3, [pc, #232]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000bac:	4b38      	ldr	r3, [pc, #224]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000bb2:	4b37      	ldr	r3, [pc, #220]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000bb4:	2208      	movs	r2, #8
 8000bb6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000bb8:	4b35      	ldr	r3, [pc, #212]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000bbe:	4b34      	ldr	r3, [pc, #208]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000bc4:	4b32      	ldr	r3, [pc, #200]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000bca:	4b31      	ldr	r3, [pc, #196]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000bd0:	4b2f      	ldr	r3, [pc, #188]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000bd6:	4b2e      	ldr	r3, [pc, #184]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000bdc:	4b2c      	ldr	r3, [pc, #176]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000be2:	4b2b      	ldr	r3, [pc, #172]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000be8:	4829      	ldr	r0, [pc, #164]	; (8000c90 <MX_SAI2_Init+0x13c>)
 8000bea:	f005 fbb5 	bl	8006358 <HAL_SAI_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000bf4:	f000 fe90 	bl	8001918 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000bf8:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <MX_SAI2_Init+0x148>)
 8000bfa:	4a29      	ldr	r2, [pc, #164]	; (8000ca0 <MX_SAI2_Init+0x14c>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000bfe:	4b27      	ldr	r3, [pc, #156]	; (8000c9c <MX_SAI2_Init+0x148>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000c04:	4b25      	ldr	r3, [pc, #148]	; (8000c9c <MX_SAI2_Init+0x148>)
 8000c06:	2203      	movs	r2, #3
 8000c08:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000c0a:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <MX_SAI2_Init+0x148>)
 8000c0c:	2240      	movs	r2, #64	; 0x40
 8000c0e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000c10:	4b22      	ldr	r3, [pc, #136]	; (8000c9c <MX_SAI2_Init+0x148>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000c16:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <MX_SAI2_Init+0x148>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <MX_SAI2_Init+0x148>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c22:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <MX_SAI2_Init+0x148>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c28:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <MX_SAI2_Init+0x148>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c2e:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <MX_SAI2_Init+0x148>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <MX_SAI2_Init+0x148>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <MX_SAI2_Init+0x148>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <MX_SAI2_Init+0x148>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <MX_SAI2_Init+0x148>)
 8000c48:	2208      	movs	r2, #8
 8000c4a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <MX_SAI2_Init+0x148>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000c52:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <MX_SAI2_Init+0x148>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000c58:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <MX_SAI2_Init+0x148>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_SAI2_Init+0x148>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000c64:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <MX_SAI2_Init+0x148>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_SAI2_Init+0x148>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <MX_SAI2_Init+0x148>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_SAI2_Init+0x148>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000c7c:	4807      	ldr	r0, [pc, #28]	; (8000c9c <MX_SAI2_Init+0x148>)
 8000c7e:	f005 fb6b 	bl	8006358 <HAL_SAI_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000c88:	f000 fe46 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000238 	.word	0x20000238
 8000c94:	40015c04 	.word	0x40015c04
 8000c98:	0002ee00 	.word	0x0002ee00
 8000c9c:	200002bc 	.word	0x200002bc
 8000ca0:	40015c24 	.word	0x40015c24

08000ca4 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <MX_SPDIFRX_Init+0x5c>)
 8000caa:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000cae:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <MX_SPDIFRX_Init+0x5c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000cb6:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <MX_SPDIFRX_Init+0x5c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000cbc:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <MX_SPDIFRX_Init+0x5c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_SPDIFRX_Init+0x5c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000cc8:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <MX_SPDIFRX_Init+0x5c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_SPDIFRX_Init+0x5c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <MX_SPDIFRX_Init+0x5c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_SPDIFRX_Init+0x5c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <MX_SPDIFRX_Init+0x5c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_SPDIFRX_Init+0x5c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <MX_SPDIFRX_Init+0x5c>)
 8000cee:	f005 fd1d 	bl	800672c <HAL_SPDIFRX_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000cf8:	f000 fe0e 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000340 	.word	0x20000340

08000d04 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d08:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <MX_SPI2_Init+0x74>)
 8000d0a:	4a1c      	ldr	r2, [pc, #112]	; (8000d7c <MX_SPI2_Init+0x78>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_SPI2_Init+0x74>)
 8000d10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d14:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <MX_SPI2_Init+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_SPI2_Init+0x74>)
 8000d1e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d22:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_SPI2_Init+0x74>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <MX_SPI2_Init+0x74>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_SPI2_Init+0x74>)
 8000d32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d36:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_SPI2_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_SPI2_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_SPI2_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <MX_SPI2_Init+0x74>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_SPI2_Init+0x74>)
 8000d52:	2207      	movs	r2, #7
 8000d54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <MX_SPI2_Init+0x74>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_SPI2_Init+0x74>)
 8000d5e:	2208      	movs	r2, #8
 8000d60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_SPI2_Init+0x74>)
 8000d64:	f005 fd3e 	bl	80067e4 <HAL_SPI_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000d6e:	f000 fdd3 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2000038c 	.word	0x2000038c
 8000d7c:	40003800 	.word	0x40003800

08000d80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b09a      	sub	sp, #104	; 0x68
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d94:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
 8000db0:	615a      	str	r2, [r3, #20]
 8000db2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	222c      	movs	r2, #44	; 0x2c
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f007 fc00 	bl	80085c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dc0:	4b43      	ldr	r3, [pc, #268]	; (8000ed0 <MX_TIM1_Init+0x150>)
 8000dc2:	4a44      	ldr	r2, [pc, #272]	; (8000ed4 <MX_TIM1_Init+0x154>)
 8000dc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dc6:	4b42      	ldr	r3, [pc, #264]	; (8000ed0 <MX_TIM1_Init+0x150>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dcc:	4b40      	ldr	r3, [pc, #256]	; (8000ed0 <MX_TIM1_Init+0x150>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000dd2:	4b3f      	ldr	r3, [pc, #252]	; (8000ed0 <MX_TIM1_Init+0x150>)
 8000dd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dda:	4b3d      	ldr	r3, [pc, #244]	; (8000ed0 <MX_TIM1_Init+0x150>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000de0:	4b3b      	ldr	r3, [pc, #236]	; (8000ed0 <MX_TIM1_Init+0x150>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de6:	4b3a      	ldr	r3, [pc, #232]	; (8000ed0 <MX_TIM1_Init+0x150>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dec:	4838      	ldr	r0, [pc, #224]	; (8000ed0 <MX_TIM1_Init+0x150>)
 8000dee:	f005 fda4 	bl	800693a <HAL_TIM_Base_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000df8:	f000 fd8e 	bl	8001918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e00:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e06:	4619      	mov	r1, r3
 8000e08:	4831      	ldr	r0, [pc, #196]	; (8000ed0 <MX_TIM1_Init+0x150>)
 8000e0a:	f006 f8ef 	bl	8006fec <HAL_TIM_ConfigClockSource>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e14:	f000 fd80 	bl	8001918 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e18:	482d      	ldr	r0, [pc, #180]	; (8000ed0 <MX_TIM1_Init+0x150>)
 8000e1a:	f005 fe5d 	bl	8006ad8 <HAL_TIM_PWM_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000e24:	f000 fd78 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4825      	ldr	r0, [pc, #148]	; (8000ed0 <MX_TIM1_Init+0x150>)
 8000e3c:	f006 fd60 	bl	8007900 <HAL_TIMEx_MasterConfigSynchronization>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000e46:	f000 fd67 	bl	8001918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e4a:	2360      	movs	r3, #96	; 0x60
 8000e4c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e52:	2300      	movs	r3, #0
 8000e54:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e56:	2300      	movs	r3, #0
 8000e58:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e62:	2300      	movs	r3, #0
 8000e64:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4818      	ldr	r0, [pc, #96]	; (8000ed0 <MX_TIM1_Init+0x150>)
 8000e70:	f005 ffa8 	bl	8006dc4 <HAL_TIM_PWM_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000e7a:	f000 fd4d 	bl	8001918 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e96:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ea0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4807      	ldr	r0, [pc, #28]	; (8000ed0 <MX_TIM1_Init+0x150>)
 8000eb4:	f006 fdb2 	bl	8007a1c <HAL_TIMEx_ConfigBreakDeadTime>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000ebe:	f000 fd2b 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ec2:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <MX_TIM1_Init+0x150>)
 8000ec4:	f001 f962 	bl	800218c <HAL_TIM_MspPostInit>

}
 8000ec8:	bf00      	nop
 8000eca:	3768      	adds	r7, #104	; 0x68
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	200003f0 	.word	0x200003f0
 8000ed4:	40010000 	.word	0x40010000

08000ed8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08e      	sub	sp, #56	; 0x38
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ede:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef8:	463b      	mov	r3, r7
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]
 8000f06:	615a      	str	r2, [r3, #20]
 8000f08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f0a:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <MX_TIM2_Init+0xe8>)
 8000f0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f12:	4b2b      	ldr	r3, [pc, #172]	; (8000fc0 <MX_TIM2_Init+0xe8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f18:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <MX_TIM2_Init+0xe8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f1e:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <MX_TIM2_Init+0xe8>)
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f26:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <MX_TIM2_Init+0xe8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2c:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <MX_TIM2_Init+0xe8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f32:	4823      	ldr	r0, [pc, #140]	; (8000fc0 <MX_TIM2_Init+0xe8>)
 8000f34:	f005 fd01 	bl	800693a <HAL_TIM_Base_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000f3e:	f000 fceb 	bl	8001918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	481c      	ldr	r0, [pc, #112]	; (8000fc0 <MX_TIM2_Init+0xe8>)
 8000f50:	f006 f84c 	bl	8006fec <HAL_TIM_ConfigClockSource>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000f5a:	f000 fcdd 	bl	8001918 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f5e:	4818      	ldr	r0, [pc, #96]	; (8000fc0 <MX_TIM2_Init+0xe8>)
 8000f60:	f005 fdba 	bl	8006ad8 <HAL_TIM_PWM_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000f6a:	f000 fcd5 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4810      	ldr	r0, [pc, #64]	; (8000fc0 <MX_TIM2_Init+0xe8>)
 8000f7e:	f006 fcbf 	bl	8007900 <HAL_TIMEx_MasterConfigSynchronization>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f88:	f000 fcc6 	bl	8001918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f8c:	2360      	movs	r3, #96	; 0x60
 8000f8e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4807      	ldr	r0, [pc, #28]	; (8000fc0 <MX_TIM2_Init+0xe8>)
 8000fa4:	f005 ff0e 	bl	8006dc4 <HAL_TIM_PWM_ConfigChannel>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000fae:	f000 fcb3 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fb2:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <MX_TIM2_Init+0xe8>)
 8000fb4:	f001 f8ea 	bl	800218c <HAL_TIM_MspPostInit>

}
 8000fb8:	bf00      	nop
 8000fba:	3738      	adds	r7, #56	; 0x38
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000043c 	.word	0x2000043c

08000fc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08e      	sub	sp, #56	; 0x38
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]
 8000ff2:	615a      	str	r2, [r3, #20]
 8000ff4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ff6:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <MX_TIM3_Init+0xe8>)
 8000ff8:	4a2d      	ldr	r2, [pc, #180]	; (80010b0 <MX_TIM3_Init+0xec>)
 8000ffa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ffc:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <MX_TIM3_Init+0xe8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001002:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <MX_TIM3_Init+0xe8>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001008:	4b28      	ldr	r3, [pc, #160]	; (80010ac <MX_TIM3_Init+0xe8>)
 800100a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800100e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001010:	4b26      	ldr	r3, [pc, #152]	; (80010ac <MX_TIM3_Init+0xe8>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001016:	4b25      	ldr	r3, [pc, #148]	; (80010ac <MX_TIM3_Init+0xe8>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800101c:	4823      	ldr	r0, [pc, #140]	; (80010ac <MX_TIM3_Init+0xe8>)
 800101e:	f005 fc8c 	bl	800693a <HAL_TIM_Base_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001028:	f000 fc76 	bl	8001918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800102c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001032:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001036:	4619      	mov	r1, r3
 8001038:	481c      	ldr	r0, [pc, #112]	; (80010ac <MX_TIM3_Init+0xe8>)
 800103a:	f005 ffd7 	bl	8006fec <HAL_TIM_ConfigClockSource>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001044:	f000 fc68 	bl	8001918 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001048:	4818      	ldr	r0, [pc, #96]	; (80010ac <MX_TIM3_Init+0xe8>)
 800104a:	f005 fd45 	bl	8006ad8 <HAL_TIM_PWM_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001054:	f000 fc60 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001060:	f107 031c 	add.w	r3, r7, #28
 8001064:	4619      	mov	r1, r3
 8001066:	4811      	ldr	r0, [pc, #68]	; (80010ac <MX_TIM3_Init+0xe8>)
 8001068:	f006 fc4a 	bl	8007900 <HAL_TIMEx_MasterConfigSynchronization>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001072:	f000 fc51 	bl	8001918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001076:	2360      	movs	r3, #96	; 0x60
 8001078:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	2200      	movs	r2, #0
 800108a:	4619      	mov	r1, r3
 800108c:	4807      	ldr	r0, [pc, #28]	; (80010ac <MX_TIM3_Init+0xe8>)
 800108e:	f005 fe99 	bl	8006dc4 <HAL_TIM_PWM_ConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001098:	f000 fc3e 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800109c:	4803      	ldr	r0, [pc, #12]	; (80010ac <MX_TIM3_Init+0xe8>)
 800109e:	f001 f875 	bl	800218c <HAL_TIM_MspPostInit>

}
 80010a2:	bf00      	nop
 80010a4:	3738      	adds	r7, #56	; 0x38
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000488 	.word	0x20000488
 80010b0:	40000400 	.word	0x40000400

080010b4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08e      	sub	sp, #56	; 0x38
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010d4:	463b      	mov	r3, r7
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]
 80010e2:	615a      	str	r2, [r3, #20]
 80010e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010e6:	4b2d      	ldr	r3, [pc, #180]	; (800119c <MX_TIM5_Init+0xe8>)
 80010e8:	4a2d      	ldr	r2, [pc, #180]	; (80011a0 <MX_TIM5_Init+0xec>)
 80010ea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80010ec:	4b2b      	ldr	r3, [pc, #172]	; (800119c <MX_TIM5_Init+0xe8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f2:	4b2a      	ldr	r3, [pc, #168]	; (800119c <MX_TIM5_Init+0xe8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80010f8:	4b28      	ldr	r3, [pc, #160]	; (800119c <MX_TIM5_Init+0xe8>)
 80010fa:	f04f 32ff 	mov.w	r2, #4294967295
 80010fe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001100:	4b26      	ldr	r3, [pc, #152]	; (800119c <MX_TIM5_Init+0xe8>)
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001106:	4b25      	ldr	r3, [pc, #148]	; (800119c <MX_TIM5_Init+0xe8>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800110c:	4823      	ldr	r0, [pc, #140]	; (800119c <MX_TIM5_Init+0xe8>)
 800110e:	f005 fc14 	bl	800693a <HAL_TIM_Base_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001118:	f000 fbfe 	bl	8001918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800111c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001120:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001122:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001126:	4619      	mov	r1, r3
 8001128:	481c      	ldr	r0, [pc, #112]	; (800119c <MX_TIM5_Init+0xe8>)
 800112a:	f005 ff5f 	bl	8006fec <HAL_TIM_ConfigClockSource>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001134:	f000 fbf0 	bl	8001918 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001138:	4818      	ldr	r0, [pc, #96]	; (800119c <MX_TIM5_Init+0xe8>)
 800113a:	f005 fccd 	bl	8006ad8 <HAL_TIM_PWM_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001144:	f000 fbe8 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114c:	2300      	movs	r3, #0
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	4811      	ldr	r0, [pc, #68]	; (800119c <MX_TIM5_Init+0xe8>)
 8001158:	f006 fbd2 	bl	8007900 <HAL_TIMEx_MasterConfigSynchronization>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001162:	f000 fbd9 	bl	8001918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001166:	2360      	movs	r3, #96	; 0x60
 8001168:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001176:	463b      	mov	r3, r7
 8001178:	220c      	movs	r2, #12
 800117a:	4619      	mov	r1, r3
 800117c:	4807      	ldr	r0, [pc, #28]	; (800119c <MX_TIM5_Init+0xe8>)
 800117e:	f005 fe21 	bl	8006dc4 <HAL_TIM_PWM_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001188:	f000 fbc6 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800118c:	4803      	ldr	r0, [pc, #12]	; (800119c <MX_TIM5_Init+0xe8>)
 800118e:	f000 fffd 	bl	800218c <HAL_TIM_MspPostInit>

}
 8001192:	bf00      	nop
 8001194:	3738      	adds	r7, #56	; 0x38
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200004d4 	.word	0x200004d4
 80011a0:	40000c00 	.word	0x40000c00

080011a4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011aa:	f107 0310 	add.w	r3, r7, #16
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80011c2:	4b20      	ldr	r3, [pc, #128]	; (8001244 <MX_TIM8_Init+0xa0>)
 80011c4:	4a20      	ldr	r2, [pc, #128]	; (8001248 <MX_TIM8_Init+0xa4>)
 80011c6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80011c8:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <MX_TIM8_Init+0xa0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <MX_TIM8_Init+0xa0>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <MX_TIM8_Init+0xa0>)
 80011d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011da:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <MX_TIM8_Init+0xa0>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <MX_TIM8_Init+0xa0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <MX_TIM8_Init+0xa0>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80011ee:	4815      	ldr	r0, [pc, #84]	; (8001244 <MX_TIM8_Init+0xa0>)
 80011f0:	f005 fba3 	bl	800693a <HAL_TIM_Base_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80011fa:	f000 fb8d 	bl	8001918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001202:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	4619      	mov	r1, r3
 800120a:	480e      	ldr	r0, [pc, #56]	; (8001244 <MX_TIM8_Init+0xa0>)
 800120c:	f005 feee 	bl	8006fec <HAL_TIM_ConfigClockSource>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001216:	f000 fb7f 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	4619      	mov	r1, r3
 800122a:	4806      	ldr	r0, [pc, #24]	; (8001244 <MX_TIM8_Init+0xa0>)
 800122c:	f006 fb68 	bl	8007900 <HAL_TIMEx_MasterConfigSynchronization>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001236:	f000 fb6f 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	3720      	adds	r7, #32
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000520 	.word	0x20000520
 8001248:	40010400 	.word	0x40010400

0800124c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
 8001260:	615a      	str	r2, [r3, #20]
 8001262:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <MX_TIM12_Init+0x84>)
 8001266:	4a1b      	ldr	r2, [pc, #108]	; (80012d4 <MX_TIM12_Init+0x88>)
 8001268:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <MX_TIM12_Init+0x84>)
 800126c:	2200      	movs	r2, #0
 800126e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001270:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <MX_TIM12_Init+0x84>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001276:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <MX_TIM12_Init+0x84>)
 8001278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800127c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <MX_TIM12_Init+0x84>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <MX_TIM12_Init+0x84>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800128a:	4811      	ldr	r0, [pc, #68]	; (80012d0 <MX_TIM12_Init+0x84>)
 800128c:	f005 fc24 	bl	8006ad8 <HAL_TIM_PWM_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001296:	f000 fb3f 	bl	8001918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800129a:	2360      	movs	r3, #96	; 0x60
 800129c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2200      	movs	r2, #0
 80012ae:	4619      	mov	r1, r3
 80012b0:	4807      	ldr	r0, [pc, #28]	; (80012d0 <MX_TIM12_Init+0x84>)
 80012b2:	f005 fd87 	bl	8006dc4 <HAL_TIM_PWM_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80012bc:	f000 fb2c 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <MX_TIM12_Init+0x84>)
 80012c2:	f000 ff63 	bl	800218c <HAL_TIM_MspPostInit>

}
 80012c6:	bf00      	nop
 80012c8:	3720      	adds	r7, #32
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000056c 	.word	0x2000056c
 80012d4:	40001800 	.word	0x40001800

080012d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012dc:	4b14      	ldr	r3, [pc, #80]	; (8001330 <MX_USART1_UART_Init+0x58>)
 80012de:	4a15      	ldr	r2, [pc, #84]	; (8001334 <MX_USART1_UART_Init+0x5c>)
 80012e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <MX_USART1_UART_Init+0x58>)
 80012e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_USART1_UART_Init+0x58>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_USART1_UART_Init+0x58>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_USART1_UART_Init+0x58>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_USART1_UART_Init+0x58>)
 80012fe:	220c      	movs	r2, #12
 8001300:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <MX_USART1_UART_Init+0x58>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_USART1_UART_Init+0x58>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <MX_USART1_UART_Init+0x58>)
 8001310:	2200      	movs	r2, #0
 8001312:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_USART1_UART_Init+0x58>)
 8001316:	2200      	movs	r2, #0
 8001318:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_USART1_UART_Init+0x58>)
 800131c:	f006 fc1a 	bl	8007b54 <HAL_UART_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001326:	f000 faf7 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200005b8 	.word	0x200005b8
 8001334:	40011000 	.word	0x40011000

08001338 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
 800134c:	615a      	str	r2, [r3, #20]
 800134e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001350:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <MX_FMC_Init+0x98>)
 8001352:	4a20      	ldr	r2, [pc, #128]	; (80013d4 <MX_FMC_Init+0x9c>)
 8001354:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001356:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <MX_FMC_Init+0x98>)
 8001358:	2200      	movs	r2, #0
 800135a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <MX_FMC_Init+0x98>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_FMC_Init+0x98>)
 8001364:	2204      	movs	r2, #4
 8001366:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <MX_FMC_Init+0x98>)
 800136a:	2210      	movs	r2, #16
 800136c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_FMC_Init+0x98>)
 8001370:	2240      	movs	r2, #64	; 0x40
 8001372:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_FMC_Init+0x98>)
 8001376:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800137a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <MX_FMC_Init+0x98>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <MX_FMC_Init+0x98>)
 8001384:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001388:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_FMC_Init+0x98>)
 800138c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001390:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_FMC_Init+0x98>)
 8001394:	2200      	movs	r2, #0
 8001396:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001398:	2302      	movs	r3, #2
 800139a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800139c:	2307      	movs	r3, #7
 800139e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80013a0:	2304      	movs	r3, #4
 80013a2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80013a4:	2307      	movs	r3, #7
 80013a6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80013a8:	2303      	movs	r3, #3
 80013aa:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80013ac:	2302      	movs	r3, #2
 80013ae:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80013b0:	2302      	movs	r3, #2
 80013b2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_FMC_Init+0x98>)
 80013ba:	f005 f983 	bl	80066c4 <HAL_SDRAM_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80013c4:	f000 faa8 	bl	8001918 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80013c8:	bf00      	nop
 80013ca:	3720      	adds	r7, #32
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000063c 	.word	0x2000063c
 80013d4:	a0000140 	.word	0xa0000140

080013d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b090      	sub	sp, #64	; 0x40
 80013dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ee:	4baf      	ldr	r3, [pc, #700]	; (80016ac <MX_GPIO_Init+0x2d4>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4aae      	ldr	r2, [pc, #696]	; (80016ac <MX_GPIO_Init+0x2d4>)
 80013f4:	f043 0310 	orr.w	r3, r3, #16
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4bac      	ldr	r3, [pc, #688]	; (80016ac <MX_GPIO_Init+0x2d4>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0310 	and.w	r3, r3, #16
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
 8001404:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001406:	4ba9      	ldr	r3, [pc, #676]	; (80016ac <MX_GPIO_Init+0x2d4>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4aa8      	ldr	r2, [pc, #672]	; (80016ac <MX_GPIO_Init+0x2d4>)
 800140c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4ba6      	ldr	r3, [pc, #664]	; (80016ac <MX_GPIO_Init+0x2d4>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	4ba3      	ldr	r3, [pc, #652]	; (80016ac <MX_GPIO_Init+0x2d4>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4aa2      	ldr	r2, [pc, #648]	; (80016ac <MX_GPIO_Init+0x2d4>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4ba0      	ldr	r3, [pc, #640]	; (80016ac <MX_GPIO_Init+0x2d4>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	623b      	str	r3, [r7, #32]
 8001434:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001436:	4b9d      	ldr	r3, [pc, #628]	; (80016ac <MX_GPIO_Init+0x2d4>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a9c      	ldr	r2, [pc, #624]	; (80016ac <MX_GPIO_Init+0x2d4>)
 800143c:	f043 0308 	orr.w	r3, r3, #8
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b9a      	ldr	r3, [pc, #616]	; (80016ac <MX_GPIO_Init+0x2d4>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	61fb      	str	r3, [r7, #28]
 800144c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	4b97      	ldr	r3, [pc, #604]	; (80016ac <MX_GPIO_Init+0x2d4>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a96      	ldr	r2, [pc, #600]	; (80016ac <MX_GPIO_Init+0x2d4>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b94      	ldr	r3, [pc, #592]	; (80016ac <MX_GPIO_Init+0x2d4>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	61bb      	str	r3, [r7, #24]
 8001464:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	4b91      	ldr	r3, [pc, #580]	; (80016ac <MX_GPIO_Init+0x2d4>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a90      	ldr	r2, [pc, #576]	; (80016ac <MX_GPIO_Init+0x2d4>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b8e      	ldr	r3, [pc, #568]	; (80016ac <MX_GPIO_Init+0x2d4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800147e:	4b8b      	ldr	r3, [pc, #556]	; (80016ac <MX_GPIO_Init+0x2d4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a8a      	ldr	r2, [pc, #552]	; (80016ac <MX_GPIO_Init+0x2d4>)
 8001484:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b88      	ldr	r3, [pc, #544]	; (80016ac <MX_GPIO_Init+0x2d4>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001496:	4b85      	ldr	r3, [pc, #532]	; (80016ac <MX_GPIO_Init+0x2d4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a84      	ldr	r2, [pc, #528]	; (80016ac <MX_GPIO_Init+0x2d4>)
 800149c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b82      	ldr	r3, [pc, #520]	; (80016ac <MX_GPIO_Init+0x2d4>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80014ae:	4b7f      	ldr	r3, [pc, #508]	; (80016ac <MX_GPIO_Init+0x2d4>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a7e      	ldr	r2, [pc, #504]	; (80016ac <MX_GPIO_Init+0x2d4>)
 80014b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b7c      	ldr	r3, [pc, #496]	; (80016ac <MX_GPIO_Init+0x2d4>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014c6:	4b79      	ldr	r3, [pc, #484]	; (80016ac <MX_GPIO_Init+0x2d4>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a78      	ldr	r2, [pc, #480]	; (80016ac <MX_GPIO_Init+0x2d4>)
 80014cc:	f043 0320 	orr.w	r3, r3, #32
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b76      	ldr	r3, [pc, #472]	; (80016ac <MX_GPIO_Init+0x2d4>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0320 	and.w	r3, r3, #32
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014de:	4b73      	ldr	r3, [pc, #460]	; (80016ac <MX_GPIO_Init+0x2d4>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a72      	ldr	r2, [pc, #456]	; (80016ac <MX_GPIO_Init+0x2d4>)
 80014e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b70      	ldr	r3, [pc, #448]	; (80016ac <MX_GPIO_Init+0x2d4>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80014f6:	2201      	movs	r2, #1
 80014f8:	2120      	movs	r1, #32
 80014fa:	486d      	ldr	r0, [pc, #436]	; (80016b0 <MX_GPIO_Init+0x2d8>)
 80014fc:	f002 fc58 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	210c      	movs	r1, #12
 8001504:	486b      	ldr	r0, [pc, #428]	; (80016b4 <MX_GPIO_Init+0x2dc>)
 8001506:	f002 fc53 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800150a:	2201      	movs	r2, #1
 800150c:	2108      	movs	r1, #8
 800150e:	486a      	ldr	r0, [pc, #424]	; (80016b8 <MX_GPIO_Init+0x2e0>)
 8001510:	f002 fc4e 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001514:	2201      	movs	r2, #1
 8001516:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800151a:	4866      	ldr	r0, [pc, #408]	; (80016b4 <MX_GPIO_Init+0x2dc>)
 800151c:	f002 fc48 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001526:	4865      	ldr	r0, [pc, #404]	; (80016bc <MX_GPIO_Init+0x2e4>)
 8001528:	f002 fc42 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	21c8      	movs	r1, #200	; 0xc8
 8001530:	4863      	ldr	r0, [pc, #396]	; (80016c0 <MX_GPIO_Init+0x2e8>)
 8001532:	f002 fc3d 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001536:	2308      	movs	r3, #8
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800153a:	2300      	movs	r3, #0
 800153c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001542:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001546:	4619      	mov	r1, r3
 8001548:	485e      	ldr	r0, [pc, #376]	; (80016c4 <MX_GPIO_Init+0x2ec>)
 800154a:	f002 fa85 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800154e:	2304      	movs	r3, #4
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800155e:	2309      	movs	r3, #9
 8001560:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001566:	4619      	mov	r1, r3
 8001568:	4856      	ldr	r0, [pc, #344]	; (80016c4 <MX_GPIO_Init+0x2ec>)
 800156a:	f002 fa75 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800156e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001580:	230b      	movs	r3, #11
 8001582:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001584:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001588:	4619      	mov	r1, r3
 800158a:	484d      	ldr	r0, [pc, #308]	; (80016c0 <MX_GPIO_Init+0x2e8>)
 800158c:	f002 fa64 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001590:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001596:	2312      	movs	r3, #18
 8001598:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800159a:	2301      	movs	r3, #1
 800159c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015a2:	2304      	movs	r3, #4
 80015a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015aa:	4619      	mov	r1, r3
 80015ac:	4846      	ldr	r0, [pc, #280]	; (80016c8 <MX_GPIO_Init+0x2f0>)
 80015ae:	f002 fa53 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80015b2:	f643 4323 	movw	r3, #15395	; 0x3c23
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80015c4:	230a      	movs	r3, #10
 80015c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015cc:	4619      	mov	r1, r3
 80015ce:	483e      	ldr	r0, [pc, #248]	; (80016c8 <MX_GPIO_Init+0x2f0>)
 80015d0:	f002 fa42 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80015d4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e2:	2303      	movs	r3, #3
 80015e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015e6:	230c      	movs	r3, #12
 80015e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ee:	4619      	mov	r1, r3
 80015f0:	4836      	ldr	r0, [pc, #216]	; (80016cc <MX_GPIO_Init+0x2f4>)
 80015f2:	f002 fa31 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80015f6:	2340      	movs	r3, #64	; 0x40
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001606:	230a      	movs	r3, #10
 8001608:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800160e:	4619      	mov	r1, r3
 8001610:	482d      	ldr	r0, [pc, #180]	; (80016c8 <MX_GPIO_Init+0x2f0>)
 8001612:	f002 fa21 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161c:	2300      	movs	r3, #0
 800161e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001628:	4619      	mov	r1, r3
 800162a:	4829      	ldr	r0, [pc, #164]	; (80016d0 <MX_GPIO_Init+0x2f8>)
 800162c:	f002 fa14 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001630:	2340      	movs	r3, #64	; 0x40
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001634:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001638:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001642:	4619      	mov	r1, r3
 8001644:	481a      	ldr	r0, [pc, #104]	; (80016b0 <MX_GPIO_Init+0x2d8>)
 8001646:	f002 fa07 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800164a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001658:	2303      	movs	r3, #3
 800165a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800165c:	230a      	movs	r3, #10
 800165e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001660:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001664:	4619      	mov	r1, r3
 8001666:	481b      	ldr	r0, [pc, #108]	; (80016d4 <MX_GPIO_Init+0x2fc>)
 8001668:	f002 f9f6 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800166c:	2320      	movs	r3, #32
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001670:	2301      	movs	r3, #1
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001680:	4619      	mov	r1, r3
 8001682:	480b      	ldr	r0, [pc, #44]	; (80016b0 <MX_GPIO_Init+0x2d8>)
 8001684:	f002 f9e8 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001688:	f241 030c 	movw	r3, #4108	; 0x100c
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168e:	2301      	movs	r3, #1
 8001690:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800169a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800169e:	4619      	mov	r1, r3
 80016a0:	4804      	ldr	r0, [pc, #16]	; (80016b4 <MX_GPIO_Init+0x2dc>)
 80016a2:	f002 f9d9 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80016a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016aa:	e015      	b.n	80016d8 <MX_GPIO_Init+0x300>
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020c00 	.word	0x40020c00
 80016b4:	40022000 	.word	0x40022000
 80016b8:	40022800 	.word	0x40022800
 80016bc:	40021c00 	.word	0x40021c00
 80016c0:	40021800 	.word	0x40021800
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40020400 	.word	0x40020400
 80016cc:	40020800 	.word	0x40020800
 80016d0:	40022400 	.word	0x40022400
 80016d4:	40020000 	.word	0x40020000
 80016d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016da:	2300      	movs	r3, #0
 80016dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80016e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e6:	4619      	mov	r1, r3
 80016e8:	487a      	ldr	r0, [pc, #488]	; (80018d4 <MX_GPIO_Init+0x4fc>)
 80016ea:	f002 f9b5 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80016ee:	2308      	movs	r3, #8
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f2:	2301      	movs	r3, #1
 80016f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80016fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001702:	4619      	mov	r1, r3
 8001704:	4874      	ldr	r0, [pc, #464]	; (80018d8 <MX_GPIO_Init+0x500>)
 8001706:	f002 f9a7 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800170a:	2310      	movs	r3, #16
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170e:	2300      	movs	r3, #0
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001716:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800171a:	4619      	mov	r1, r3
 800171c:	486f      	ldr	r0, [pc, #444]	; (80018dc <MX_GPIO_Init+0x504>)
 800171e:	f002 f99b 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001722:	2304      	movs	r3, #4
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001732:	230c      	movs	r3, #12
 8001734:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800173a:	4619      	mov	r1, r3
 800173c:	4867      	ldr	r0, [pc, #412]	; (80018dc <MX_GPIO_Init+0x504>)
 800173e:	f002 f98b 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001742:	f248 0304 	movw	r3, #32772	; 0x8004
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001748:	2300      	movs	r3, #0
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001754:	4619      	mov	r1, r3
 8001756:	4862      	ldr	r0, [pc, #392]	; (80018e0 <MX_GPIO_Init+0x508>)
 8001758:	f002 f97e 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800175c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001762:	2301      	movs	r3, #1
 8001764:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800176e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001772:	4619      	mov	r1, r3
 8001774:	485a      	ldr	r0, [pc, #360]	; (80018e0 <MX_GPIO_Init+0x508>)
 8001776:	f002 f96f 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800177a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001780:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800178a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800178e:	4619      	mov	r1, r3
 8001790:	4854      	ldr	r0, [pc, #336]	; (80018e4 <MX_GPIO_Init+0x50c>)
 8001792:	f002 f961 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001796:	23c0      	movs	r3, #192	; 0xc0
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80017a6:	2308      	movs	r3, #8
 80017a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ae:	4619      	mov	r1, r3
 80017b0:	4848      	ldr	r0, [pc, #288]	; (80018d4 <MX_GPIO_Init+0x4fc>)
 80017b2:	f002 f951 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80017b6:	2310      	movs	r3, #16
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c2:	2303      	movs	r3, #3
 80017c4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017c6:	230a      	movs	r3, #10
 80017c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ce:	4619      	mov	r1, r3
 80017d0:	4843      	ldr	r0, [pc, #268]	; (80018e0 <MX_GPIO_Init+0x508>)
 80017d2:	f002 f941 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80017d6:	23c8      	movs	r3, #200	; 0xc8
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017da:	2301      	movs	r3, #1
 80017dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ea:	4619      	mov	r1, r3
 80017ec:	483e      	ldr	r0, [pc, #248]	; (80018e8 <MX_GPIO_Init+0x510>)
 80017ee:	f002 f933 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80017f2:	2305      	movs	r3, #5
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fe:	2303      	movs	r3, #3
 8001800:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001802:	230a      	movs	r3, #10
 8001804:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001806:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800180a:	4619      	mov	r1, r3
 800180c:	4831      	ldr	r0, [pc, #196]	; (80018d4 <MX_GPIO_Init+0x4fc>)
 800180e:	f002 f923 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001812:	2332      	movs	r3, #50	; 0x32
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001822:	230b      	movs	r3, #11
 8001824:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182a:	4619      	mov	r1, r3
 800182c:	4829      	ldr	r0, [pc, #164]	; (80018d4 <MX_GPIO_Init+0x4fc>)
 800182e:	f002 f913 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001832:	2304      	movs	r3, #4
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001842:	2309      	movs	r3, #9
 8001844:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800184a:	4619      	mov	r1, r3
 800184c:	4827      	ldr	r0, [pc, #156]	; (80018ec <MX_GPIO_Init+0x514>)
 800184e:	f002 f903 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001852:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001860:	2303      	movs	r3, #3
 8001862:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001864:	2309      	movs	r3, #9
 8001866:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001868:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800186c:	4619      	mov	r1, r3
 800186e:	481b      	ldr	r0, [pc, #108]	; (80018dc <MX_GPIO_Init+0x504>)
 8001870:	f002 f8f2 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001874:	2304      	movs	r3, #4
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001878:	2300      	movs	r3, #0
 800187a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001880:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001884:	4619      	mov	r1, r3
 8001886:	4818      	ldr	r0, [pc, #96]	; (80018e8 <MX_GPIO_Init+0x510>)
 8001888:	f002 f8e6 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800188c:	2386      	movs	r3, #134	; 0x86
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001898:	2303      	movs	r3, #3
 800189a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800189c:	230b      	movs	r3, #11
 800189e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a4:	4619      	mov	r1, r3
 80018a6:	4812      	ldr	r0, [pc, #72]	; (80018f0 <MX_GPIO_Init+0x518>)
 80018a8:	f002 f8d6 	bl	8003a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80018ac:	2328      	movs	r3, #40	; 0x28
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b8:	2303      	movs	r3, #3
 80018ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80018bc:	230a      	movs	r3, #10
 80018be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c4:	4619      	mov	r1, r3
 80018c6:	480a      	ldr	r0, [pc, #40]	; (80018f0 <MX_GPIO_Init+0x518>)
 80018c8:	f002 f8c6 	bl	8003a58 <HAL_GPIO_Init>

}
 80018cc:	bf00      	nop
 80018ce:	3740      	adds	r7, #64	; 0x40
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40020800 	.word	0x40020800
 80018d8:	40022800 	.word	0x40022800
 80018dc:	40020c00 	.word	0x40020c00
 80018e0:	40021c00 	.word	0x40021c00
 80018e4:	40022000 	.word	0x40022000
 80018e8:	40021800 	.word	0x40021800
 80018ec:	40020400 	.word	0x40020400
 80018f0:	40020000 	.word	0x40020000

080018f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a04      	ldr	r2, [pc, #16]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d101      	bne.n	800190a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001906:	f000 ff89 	bl	800281c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40001000 	.word	0x40001000

08001918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800191c:	b672      	cpsid	i
}
 800191e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001920:	e7fe      	b.n	8001920 <Error_Handler+0x8>
	...

08001924 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800192a:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <HAL_MspInit+0x44>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <HAL_MspInit+0x44>)
 8001930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001934:	6413      	str	r3, [r2, #64]	; 0x40
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <HAL_MspInit+0x44>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_MspInit+0x44>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	4a08      	ldr	r2, [pc, #32]	; (8001968 <HAL_MspInit+0x44>)
 8001948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800194c:	6453      	str	r3, [r2, #68]	; 0x44
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_MspInit+0x44>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800

0800196c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a25      	ldr	r2, [pc, #148]	; (8001a20 <HAL_ADC_MspInit+0xb4>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d144      	bne.n	8001a18 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800198e:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <HAL_ADC_MspInit+0xb8>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	4a24      	ldr	r2, [pc, #144]	; (8001a24 <HAL_ADC_MspInit+0xb8>)
 8001994:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001998:	6453      	str	r3, [r2, #68]	; 0x44
 800199a:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <HAL_ADC_MspInit+0xb8>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019a6:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <HAL_ADC_MspInit+0xb8>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a1e      	ldr	r2, [pc, #120]	; (8001a24 <HAL_ADC_MspInit+0xb8>)
 80019ac:	f043 0320 	orr.w	r3, r3, #32
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <HAL_ADC_MspInit+0xb8>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0320 	and.w	r3, r3, #32
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_ADC_MspInit+0xb8>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a18      	ldr	r2, [pc, #96]	; (8001a24 <HAL_ADC_MspInit+0xb8>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <HAL_ADC_MspInit+0xb8>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80019d6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80019da:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019dc:	2303      	movs	r3, #3
 80019de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	480f      	ldr	r0, [pc, #60]	; (8001a28 <HAL_ADC_MspInit+0xbc>)
 80019ec:	f002 f834 	bl	8003a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80019f0:	2301      	movs	r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f4:	2303      	movs	r3, #3
 80019f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	4619      	mov	r1, r3
 8001a02:	480a      	ldr	r0, [pc, #40]	; (8001a2c <HAL_ADC_MspInit+0xc0>)
 8001a04:	f002 f828 	bl	8003a58 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2012      	movs	r0, #18
 8001a0e:	f001 fca9 	bl	8003364 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001a12:	2012      	movs	r0, #18
 8001a14:	f001 fcc2 	bl	800339c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a18:	bf00      	nop
 8001a1a:	3728      	adds	r7, #40	; 0x28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40012200 	.word	0x40012200
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40021400 	.word	0x40021400
 8001a2c:	40020000 	.word	0x40020000

08001a30 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <HAL_CRC_MspInit+0x38>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d10b      	bne.n	8001a5a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <HAL_CRC_MspInit+0x3c>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a09      	ldr	r2, [pc, #36]	; (8001a6c <HAL_CRC_MspInit+0x3c>)
 8001a48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <HAL_CRC_MspInit+0x3c>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40023000 	.word	0x40023000
 8001a6c:	40023800 	.word	0x40023800

08001a70 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08e      	sub	sp, #56	; 0x38
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a50      	ldr	r2, [pc, #320]	; (8001bd0 <HAL_DCMI_MspInit+0x160>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	f040 809a 	bne.w	8001bc8 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001a94:	4b4f      	ldr	r3, [pc, #316]	; (8001bd4 <HAL_DCMI_MspInit+0x164>)
 8001a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a98:	4a4e      	ldr	r2, [pc, #312]	; (8001bd4 <HAL_DCMI_MspInit+0x164>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6353      	str	r3, [r2, #52]	; 0x34
 8001aa0:	4b4c      	ldr	r3, [pc, #304]	; (8001bd4 <HAL_DCMI_MspInit+0x164>)
 8001aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	623b      	str	r3, [r7, #32]
 8001aaa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aac:	4b49      	ldr	r3, [pc, #292]	; (8001bd4 <HAL_DCMI_MspInit+0x164>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	4a48      	ldr	r2, [pc, #288]	; (8001bd4 <HAL_DCMI_MspInit+0x164>)
 8001ab2:	f043 0310 	orr.w	r3, r3, #16
 8001ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab8:	4b46      	ldr	r3, [pc, #280]	; (8001bd4 <HAL_DCMI_MspInit+0x164>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	f003 0310 	and.w	r3, r3, #16
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac4:	4b43      	ldr	r3, [pc, #268]	; (8001bd4 <HAL_DCMI_MspInit+0x164>)
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac8:	4a42      	ldr	r2, [pc, #264]	; (8001bd4 <HAL_DCMI_MspInit+0x164>)
 8001aca:	f043 0308 	orr.w	r3, r3, #8
 8001ace:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad0:	4b40      	ldr	r3, [pc, #256]	; (8001bd4 <HAL_DCMI_MspInit+0x164>)
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	61bb      	str	r3, [r7, #24]
 8001ada:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001adc:	4b3d      	ldr	r3, [pc, #244]	; (8001bd4 <HAL_DCMI_MspInit+0x164>)
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	4a3c      	ldr	r2, [pc, #240]	; (8001bd4 <HAL_DCMI_MspInit+0x164>)
 8001ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae8:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <HAL_DCMI_MspInit+0x164>)
 8001aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001af4:	4b37      	ldr	r3, [pc, #220]	; (8001bd4 <HAL_DCMI_MspInit+0x164>)
 8001af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af8:	4a36      	ldr	r2, [pc, #216]	; (8001bd4 <HAL_DCMI_MspInit+0x164>)
 8001afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001afe:	6313      	str	r3, [r2, #48]	; 0x30
 8001b00:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <HAL_DCMI_MspInit+0x164>)
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0c:	4b31      	ldr	r3, [pc, #196]	; (8001bd4 <HAL_DCMI_MspInit+0x164>)
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	4a30      	ldr	r2, [pc, #192]	; (8001bd4 <HAL_DCMI_MspInit+0x164>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6313      	str	r3, [r2, #48]	; 0x30
 8001b18:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <HAL_DCMI_MspInit+0x164>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001b24:	2360      	movs	r3, #96	; 0x60
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	2300      	movs	r3, #0
 8001b32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b34:	230d      	movs	r3, #13
 8001b36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4826      	ldr	r0, [pc, #152]	; (8001bd8 <HAL_DCMI_MspInit+0x168>)
 8001b40:	f001 ff8a 	bl	8003a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001b44:	2308      	movs	r3, #8
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	2300      	movs	r3, #0
 8001b52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b54:	230d      	movs	r3, #13
 8001b56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	481f      	ldr	r0, [pc, #124]	; (8001bdc <HAL_DCMI_MspInit+0x16c>)
 8001b60:	f001 ff7a 	bl	8003a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001b64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b76:	230d      	movs	r3, #13
 8001b78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4817      	ldr	r0, [pc, #92]	; (8001be0 <HAL_DCMI_MspInit+0x170>)
 8001b82:	f001 ff69 	bl	8003a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001b86:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b98:	230d      	movs	r3, #13
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4810      	ldr	r0, [pc, #64]	; (8001be4 <HAL_DCMI_MspInit+0x174>)
 8001ba4:	f001 ff58 	bl	8003a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001ba8:	2350      	movs	r3, #80	; 0x50
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001bb8:	230d      	movs	r3, #13
 8001bba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4809      	ldr	r0, [pc, #36]	; (8001be8 <HAL_DCMI_MspInit+0x178>)
 8001bc4:	f001 ff48 	bl	8003a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001bc8:	bf00      	nop
 8001bca:	3738      	adds	r7, #56	; 0x38
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	50050000 	.word	0x50050000
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40020c00 	.word	0x40020c00
 8001be0:	40021800 	.word	0x40021800
 8001be4:	40021c00 	.word	0x40021c00
 8001be8:	40020000 	.word	0x40020000

08001bec <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	; (8001c30 <HAL_DMA2D_MspInit+0x44>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d113      	bne.n	8001c26 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_DMA2D_MspInit+0x48>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <HAL_DMA2D_MspInit+0x48>)
 8001c04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_DMA2D_MspInit+0x48>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	205a      	movs	r0, #90	; 0x5a
 8001c1c:	f001 fba2 	bl	8003364 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001c20:	205a      	movs	r0, #90	; 0x5a
 8001c22:	f001 fbbb 	bl	800339c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	4002b000 	.word	0x4002b000
 8001c34:	40023800 	.word	0x40023800

08001c38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b0aa      	sub	sp, #168	; 0xa8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	2284      	movs	r2, #132	; 0x84
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f006 fcb1 	bl	80085c0 <memset>
  if(hi2c->Instance==I2C3)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a22      	ldr	r2, [pc, #136]	; (8001cec <HAL_I2C_MspInit+0xb4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d13c      	bne.n	8001ce2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001c68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c6c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c72:	f107 0310 	add.w	r3, r7, #16
 8001c76:	4618      	mov	r0, r3
 8001c78:	f003 fa62 	bl	8005140 <HAL_RCCEx_PeriphCLKConfig>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001c82:	f7ff fe49 	bl	8001918 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c86:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <HAL_I2C_MspInit+0xb8>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a19      	ldr	r2, [pc, #100]	; (8001cf0 <HAL_I2C_MspInit+0xb8>)
 8001c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <HAL_I2C_MspInit+0xb8>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001c9e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ca2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ca6:	2312      	movs	r3, #18
 8001ca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cac:	2301      	movs	r3, #1
 8001cae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cb8:	2304      	movs	r3, #4
 8001cba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cbe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	480b      	ldr	r0, [pc, #44]	; (8001cf4 <HAL_I2C_MspInit+0xbc>)
 8001cc6:	f001 fec7 	bl	8003a58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_I2C_MspInit+0xb8>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a08      	ldr	r2, [pc, #32]	; (8001cf0 <HAL_I2C_MspInit+0xb8>)
 8001cd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_I2C_MspInit+0xb8>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ce2:	bf00      	nop
 8001ce4:	37a8      	adds	r7, #168	; 0xa8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40005c00 	.word	0x40005c00
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40021c00 	.word	0x40021c00

08001cf8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08e      	sub	sp, #56	; 0x38
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a55      	ldr	r2, [pc, #340]	; (8001e6c <HAL_LTDC_MspInit+0x174>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	f040 80a3 	bne.w	8001e62 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001d1c:	4b54      	ldr	r3, [pc, #336]	; (8001e70 <HAL_LTDC_MspInit+0x178>)
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d20:	4a53      	ldr	r2, [pc, #332]	; (8001e70 <HAL_LTDC_MspInit+0x178>)
 8001d22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d26:	6453      	str	r3, [r2, #68]	; 0x44
 8001d28:	4b51      	ldr	r3, [pc, #324]	; (8001e70 <HAL_LTDC_MspInit+0x178>)
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d30:	623b      	str	r3, [r7, #32]
 8001d32:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d34:	4b4e      	ldr	r3, [pc, #312]	; (8001e70 <HAL_LTDC_MspInit+0x178>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	4a4d      	ldr	r2, [pc, #308]	; (8001e70 <HAL_LTDC_MspInit+0x178>)
 8001d3a:	f043 0310 	orr.w	r3, r3, #16
 8001d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d40:	4b4b      	ldr	r3, [pc, #300]	; (8001e70 <HAL_LTDC_MspInit+0x178>)
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	f003 0310 	and.w	r3, r3, #16
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001d4c:	4b48      	ldr	r3, [pc, #288]	; (8001e70 <HAL_LTDC_MspInit+0x178>)
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	4a47      	ldr	r2, [pc, #284]	; (8001e70 <HAL_LTDC_MspInit+0x178>)
 8001d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d56:	6313      	str	r3, [r2, #48]	; 0x30
 8001d58:	4b45      	ldr	r3, [pc, #276]	; (8001e70 <HAL_LTDC_MspInit+0x178>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d60:	61bb      	str	r3, [r7, #24]
 8001d62:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001d64:	4b42      	ldr	r3, [pc, #264]	; (8001e70 <HAL_LTDC_MspInit+0x178>)
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	4a41      	ldr	r2, [pc, #260]	; (8001e70 <HAL_LTDC_MspInit+0x178>)
 8001d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d70:	4b3f      	ldr	r3, [pc, #252]	; (8001e70 <HAL_LTDC_MspInit+0x178>)
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d7c:	4b3c      	ldr	r3, [pc, #240]	; (8001e70 <HAL_LTDC_MspInit+0x178>)
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	4a3b      	ldr	r2, [pc, #236]	; (8001e70 <HAL_LTDC_MspInit+0x178>)
 8001d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d86:	6313      	str	r3, [r2, #48]	; 0x30
 8001d88:	4b39      	ldr	r3, [pc, #228]	; (8001e70 <HAL_LTDC_MspInit+0x178>)
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d94:	4b36      	ldr	r3, [pc, #216]	; (8001e70 <HAL_LTDC_MspInit+0x178>)
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	4a35      	ldr	r2, [pc, #212]	; (8001e70 <HAL_LTDC_MspInit+0x178>)
 8001d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001da0:	4b33      	ldr	r3, [pc, #204]	; (8001e70 <HAL_LTDC_MspInit+0x178>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001dac:	2310      	movs	r3, #16
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db8:	2300      	movs	r3, #0
 8001dba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dbc:	230e      	movs	r3, #14
 8001dbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	482b      	ldr	r0, [pc, #172]	; (8001e74 <HAL_LTDC_MspInit+0x17c>)
 8001dc8:	f001 fe46 	bl	8003a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001dcc:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dde:	230e      	movs	r3, #14
 8001de0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de6:	4619      	mov	r1, r3
 8001de8:	4823      	ldr	r0, [pc, #140]	; (8001e78 <HAL_LTDC_MspInit+0x180>)
 8001dea:	f001 fe35 	bl	8003a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001dee:	23f7      	movs	r3, #247	; 0xf7
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dfe:	230e      	movs	r3, #14
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e06:	4619      	mov	r1, r3
 8001e08:	481c      	ldr	r0, [pc, #112]	; (8001e7c <HAL_LTDC_MspInit+0x184>)
 8001e0a:	f001 fe25 	bl	8003a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e20:	2309      	movs	r3, #9
 8001e22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4815      	ldr	r0, [pc, #84]	; (8001e80 <HAL_LTDC_MspInit+0x188>)
 8001e2c:	f001 fe14 	bl	8003a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001e30:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e42:	230e      	movs	r3, #14
 8001e44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	480d      	ldr	r0, [pc, #52]	; (8001e84 <HAL_LTDC_MspInit+0x18c>)
 8001e4e:	f001 fe03 	bl	8003a58 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	2058      	movs	r0, #88	; 0x58
 8001e58:	f001 fa84 	bl	8003364 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001e5c:	2058      	movs	r0, #88	; 0x58
 8001e5e:	f001 fa9d 	bl	800339c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001e62:	bf00      	nop
 8001e64:	3738      	adds	r7, #56	; 0x38
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40016800 	.word	0x40016800
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40022400 	.word	0x40022400
 8001e7c:	40022800 	.word	0x40022800
 8001e80:	40021800 	.word	0x40021800
 8001e84:	40022000 	.word	0x40022000

08001e88 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b0a4      	sub	sp, #144	; 0x90
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e90:	f107 030c 	add.w	r3, r7, #12
 8001e94:	2284      	movs	r2, #132	; 0x84
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f006 fb91 	bl	80085c0 <memset>
  if(hrtc->Instance==RTC)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <HAL_RTC_MspInit+0x54>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d114      	bne.n	8001ed2 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ea8:	2320      	movs	r3, #32
 8001eaa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eb2:	f107 030c 	add.w	r3, r7, #12
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f003 f942 	bl	8005140 <HAL_RCCEx_PeriphCLKConfig>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001ec2:	f7ff fd29 	bl	8001918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_RTC_MspInit+0x58>)
 8001ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eca:	4a05      	ldr	r2, [pc, #20]	; (8001ee0 <HAL_RTC_MspInit+0x58>)
 8001ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ed2:	bf00      	nop
 8001ed4:	3790      	adds	r7, #144	; 0x90
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40002800 	.word	0x40002800
 8001ee0:	40023800 	.word	0x40023800

08001ee4 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b0aa      	sub	sp, #168	; 0xa8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001efc:	f107 0310 	add.w	r3, r7, #16
 8001f00:	2284      	movs	r2, #132	; 0x84
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f006 fb5b 	bl	80085c0 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8001f12:	d143      	bne.n	8001f9c <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8001f14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f18:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001f1a:	2364      	movs	r3, #100	; 0x64
 8001f1c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001f22:	2302      	movs	r3, #2
 8001f24:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001f26:	2302      	movs	r3, #2
 8001f28:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f2e:	f107 0310 	add.w	r3, r7, #16
 8001f32:	4618      	mov	r0, r3
 8001f34:	f003 f904 	bl	8005140 <HAL_RCCEx_PeriphCLKConfig>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8001f3e:	f7ff fceb 	bl	8001918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8001f42:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	4a17      	ldr	r2, [pc, #92]	; (8001fa4 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4e:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f5a:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a11      	ldr	r2, [pc, #68]	; (8001fa4 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f60:	f043 0308 	orr.w	r3, r3, #8
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f84:	2300      	movs	r3, #0
 8001f86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001f8a:	2308      	movs	r3, #8
 8001f8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001f90:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f94:	4619      	mov	r1, r3
 8001f96:	4804      	ldr	r0, [pc, #16]	; (8001fa8 <HAL_SPDIFRX_MspInit+0xc4>)
 8001f98:	f001 fd5e 	bl	8003a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8001f9c:	bf00      	nop
 8001f9e:	37a8      	adds	r7, #168	; 0xa8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40020c00 	.word	0x40020c00

08001fac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	; 0x28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a25      	ldr	r2, [pc, #148]	; (8002060 <HAL_SPI_MspInit+0xb4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d144      	bne.n	8002058 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fce:	4b25      	ldr	r3, [pc, #148]	; (8002064 <HAL_SPI_MspInit+0xb8>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	4a24      	ldr	r2, [pc, #144]	; (8002064 <HAL_SPI_MspInit+0xb8>)
 8001fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fda:	4b22      	ldr	r3, [pc, #136]	; (8002064 <HAL_SPI_MspInit+0xb8>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001fe6:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <HAL_SPI_MspInit+0xb8>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a1e      	ldr	r2, [pc, #120]	; (8002064 <HAL_SPI_MspInit+0xb8>)
 8001fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <HAL_SPI_MspInit+0xb8>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffe:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_SPI_MspInit+0xb8>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a18      	ldr	r2, [pc, #96]	; (8002064 <HAL_SPI_MspInit+0xb8>)
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <HAL_SPI_MspInit+0xb8>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002016:	2302      	movs	r3, #2
 8002018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201a:	2302      	movs	r3, #2
 800201c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002026:	2305      	movs	r3, #5
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	4619      	mov	r1, r3
 8002030:	480d      	ldr	r0, [pc, #52]	; (8002068 <HAL_SPI_MspInit+0xbc>)
 8002032:	f001 fd11 	bl	8003a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002036:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800203a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002044:	2300      	movs	r3, #0
 8002046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002048:	2305      	movs	r3, #5
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	4619      	mov	r1, r3
 8002052:	4806      	ldr	r0, [pc, #24]	; (800206c <HAL_SPI_MspInit+0xc0>)
 8002054:	f001 fd00 	bl	8003a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002058:	bf00      	nop
 800205a:	3728      	adds	r7, #40	; 0x28
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40003800 	.word	0x40003800
 8002064:	40023800 	.word	0x40023800
 8002068:	40022000 	.word	0x40022000
 800206c:	40020400 	.word	0x40020400

08002070 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a2e      	ldr	r2, [pc, #184]	; (8002138 <HAL_TIM_Base_MspInit+0xc8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d10c      	bne.n	800209c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002082:	4b2e      	ldr	r3, [pc, #184]	; (800213c <HAL_TIM_Base_MspInit+0xcc>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	4a2d      	ldr	r2, [pc, #180]	; (800213c <HAL_TIM_Base_MspInit+0xcc>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6453      	str	r3, [r2, #68]	; 0x44
 800208e:	4b2b      	ldr	r3, [pc, #172]	; (800213c <HAL_TIM_Base_MspInit+0xcc>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	61fb      	str	r3, [r7, #28]
 8002098:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800209a:	e046      	b.n	800212a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a4:	d10c      	bne.n	80020c0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020a6:	4b25      	ldr	r3, [pc, #148]	; (800213c <HAL_TIM_Base_MspInit+0xcc>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	4a24      	ldr	r2, [pc, #144]	; (800213c <HAL_TIM_Base_MspInit+0xcc>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6413      	str	r3, [r2, #64]	; 0x40
 80020b2:	4b22      	ldr	r3, [pc, #136]	; (800213c <HAL_TIM_Base_MspInit+0xcc>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	61bb      	str	r3, [r7, #24]
 80020bc:	69bb      	ldr	r3, [r7, #24]
}
 80020be:	e034      	b.n	800212a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a1e      	ldr	r2, [pc, #120]	; (8002140 <HAL_TIM_Base_MspInit+0xd0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d10c      	bne.n	80020e4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020ca:	4b1c      	ldr	r3, [pc, #112]	; (800213c <HAL_TIM_Base_MspInit+0xcc>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	4a1b      	ldr	r2, [pc, #108]	; (800213c <HAL_TIM_Base_MspInit+0xcc>)
 80020d0:	f043 0302 	orr.w	r3, r3, #2
 80020d4:	6413      	str	r3, [r2, #64]	; 0x40
 80020d6:	4b19      	ldr	r3, [pc, #100]	; (800213c <HAL_TIM_Base_MspInit+0xcc>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	697b      	ldr	r3, [r7, #20]
}
 80020e2:	e022      	b.n	800212a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a16      	ldr	r2, [pc, #88]	; (8002144 <HAL_TIM_Base_MspInit+0xd4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d10c      	bne.n	8002108 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020ee:	4b13      	ldr	r3, [pc, #76]	; (800213c <HAL_TIM_Base_MspInit+0xcc>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	4a12      	ldr	r2, [pc, #72]	; (800213c <HAL_TIM_Base_MspInit+0xcc>)
 80020f4:	f043 0308 	orr.w	r3, r3, #8
 80020f8:	6413      	str	r3, [r2, #64]	; 0x40
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <HAL_TIM_Base_MspInit+0xcc>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]
}
 8002106:	e010      	b.n	800212a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0e      	ldr	r2, [pc, #56]	; (8002148 <HAL_TIM_Base_MspInit+0xd8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d10b      	bne.n	800212a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_TIM_Base_MspInit+0xcc>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	4a09      	ldr	r2, [pc, #36]	; (800213c <HAL_TIM_Base_MspInit+0xcc>)
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	6453      	str	r3, [r2, #68]	; 0x44
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <HAL_TIM_Base_MspInit+0xcc>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
}
 800212a:	bf00      	nop
 800212c:	3724      	adds	r7, #36	; 0x24
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40010000 	.word	0x40010000
 800213c:	40023800 	.word	0x40023800
 8002140:	40000400 	.word	0x40000400
 8002144:	40000c00 	.word	0x40000c00
 8002148:	40010400 	.word	0x40010400

0800214c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <HAL_TIM_PWM_MspInit+0x38>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d10b      	bne.n	8002176 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <HAL_TIM_PWM_MspInit+0x3c>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	4a09      	ldr	r2, [pc, #36]	; (8002188 <HAL_TIM_PWM_MspInit+0x3c>)
 8002164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002168:	6413      	str	r3, [r2, #64]	; 0x40
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <HAL_TIM_PWM_MspInit+0x3c>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40001800 	.word	0x40001800
 8002188:	40023800 	.word	0x40023800

0800218c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08c      	sub	sp, #48	; 0x30
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 031c 	add.w	r3, r7, #28
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a56      	ldr	r2, [pc, #344]	; (8002304 <HAL_TIM_MspPostInit+0x178>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d11d      	bne.n	80021ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	4b56      	ldr	r3, [pc, #344]	; (8002308 <HAL_TIM_MspPostInit+0x17c>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a55      	ldr	r2, [pc, #340]	; (8002308 <HAL_TIM_MspPostInit+0x17c>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b53      	ldr	r3, [pc, #332]	; (8002308 <HAL_TIM_MspPostInit+0x17c>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	61bb      	str	r3, [r7, #24]
 80021c4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80021c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d4:	2300      	movs	r3, #0
 80021d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021d8:	2301      	movs	r3, #1
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	4619      	mov	r1, r3
 80021e2:	484a      	ldr	r0, [pc, #296]	; (800230c <HAL_TIM_MspPostInit+0x180>)
 80021e4:	f001 fc38 	bl	8003a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80021e8:	e087      	b.n	80022fa <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f2:	d11d      	bne.n	8002230 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f4:	4b44      	ldr	r3, [pc, #272]	; (8002308 <HAL_TIM_MspPostInit+0x17c>)
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	4a43      	ldr	r2, [pc, #268]	; (8002308 <HAL_TIM_MspPostInit+0x17c>)
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002200:	4b41      	ldr	r3, [pc, #260]	; (8002308 <HAL_TIM_MspPostInit+0x17c>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800220c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002212:	2302      	movs	r3, #2
 8002214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221a:	2300      	movs	r3, #0
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800221e:	2301      	movs	r3, #1
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002222:	f107 031c 	add.w	r3, r7, #28
 8002226:	4619      	mov	r1, r3
 8002228:	4838      	ldr	r0, [pc, #224]	; (800230c <HAL_TIM_MspPostInit+0x180>)
 800222a:	f001 fc15 	bl	8003a58 <HAL_GPIO_Init>
}
 800222e:	e064      	b.n	80022fa <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a36      	ldr	r2, [pc, #216]	; (8002310 <HAL_TIM_MspPostInit+0x184>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d11c      	bne.n	8002274 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800223a:	4b33      	ldr	r3, [pc, #204]	; (8002308 <HAL_TIM_MspPostInit+0x17c>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a32      	ldr	r2, [pc, #200]	; (8002308 <HAL_TIM_MspPostInit+0x17c>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b30      	ldr	r3, [pc, #192]	; (8002308 <HAL_TIM_MspPostInit+0x17c>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002252:	2310      	movs	r3, #16
 8002254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	2300      	movs	r3, #0
 8002260:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002262:	2302      	movs	r3, #2
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002266:	f107 031c 	add.w	r3, r7, #28
 800226a:	4619      	mov	r1, r3
 800226c:	4829      	ldr	r0, [pc, #164]	; (8002314 <HAL_TIM_MspPostInit+0x188>)
 800226e:	f001 fbf3 	bl	8003a58 <HAL_GPIO_Init>
}
 8002272:	e042      	b.n	80022fa <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a27      	ldr	r2, [pc, #156]	; (8002318 <HAL_TIM_MspPostInit+0x18c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d11c      	bne.n	80022b8 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800227e:	4b22      	ldr	r3, [pc, #136]	; (8002308 <HAL_TIM_MspPostInit+0x17c>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a21      	ldr	r2, [pc, #132]	; (8002308 <HAL_TIM_MspPostInit+0x17c>)
 8002284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <HAL_TIM_MspPostInit+0x17c>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002296:	2301      	movs	r3, #1
 8002298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	2300      	movs	r3, #0
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80022a6:	2302      	movs	r3, #2
 80022a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80022aa:	f107 031c 	add.w	r3, r7, #28
 80022ae:	4619      	mov	r1, r3
 80022b0:	481a      	ldr	r0, [pc, #104]	; (800231c <HAL_TIM_MspPostInit+0x190>)
 80022b2:	f001 fbd1 	bl	8003a58 <HAL_GPIO_Init>
}
 80022b6:	e020      	b.n	80022fa <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a18      	ldr	r2, [pc, #96]	; (8002320 <HAL_TIM_MspPostInit+0x194>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d11b      	bne.n	80022fa <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_TIM_MspPostInit+0x17c>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a10      	ldr	r2, [pc, #64]	; (8002308 <HAL_TIM_MspPostInit+0x17c>)
 80022c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <HAL_TIM_MspPostInit+0x17c>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80022da:	2340      	movs	r3, #64	; 0x40
 80022dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022de:	2302      	movs	r3, #2
 80022e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e6:	2300      	movs	r3, #0
 80022e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80022ea:	2309      	movs	r3, #9
 80022ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80022ee:	f107 031c 	add.w	r3, r7, #28
 80022f2:	4619      	mov	r1, r3
 80022f4:	480b      	ldr	r0, [pc, #44]	; (8002324 <HAL_TIM_MspPostInit+0x198>)
 80022f6:	f001 fbaf 	bl	8003a58 <HAL_GPIO_Init>
}
 80022fa:	bf00      	nop
 80022fc:	3730      	adds	r7, #48	; 0x30
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40010000 	.word	0x40010000
 8002308:	40023800 	.word	0x40023800
 800230c:	40020000 	.word	0x40020000
 8002310:	40000400 	.word	0x40000400
 8002314:	40020400 	.word	0x40020400
 8002318:	40000c00 	.word	0x40000c00
 800231c:	40022000 	.word	0x40022000
 8002320:	40001800 	.word	0x40001800
 8002324:	40021c00 	.word	0x40021c00

08002328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b0ac      	sub	sp, #176	; 0xb0
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002340:	f107 0318 	add.w	r3, r7, #24
 8002344:	2284      	movs	r2, #132	; 0x84
 8002346:	2100      	movs	r1, #0
 8002348:	4618      	mov	r0, r3
 800234a:	f006 f939 	bl	80085c0 <memset>
  if(huart->Instance==USART1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a32      	ldr	r2, [pc, #200]	; (800241c <HAL_UART_MspInit+0xf4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d15c      	bne.n	8002412 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002358:	2340      	movs	r3, #64	; 0x40
 800235a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800235c:	2300      	movs	r3, #0
 800235e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002360:	f107 0318 	add.w	r3, r7, #24
 8002364:	4618      	mov	r0, r3
 8002366:	f002 feeb 	bl	8005140 <HAL_RCCEx_PeriphCLKConfig>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002370:	f7ff fad2 	bl	8001918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002374:	4b2a      	ldr	r3, [pc, #168]	; (8002420 <HAL_UART_MspInit+0xf8>)
 8002376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002378:	4a29      	ldr	r2, [pc, #164]	; (8002420 <HAL_UART_MspInit+0xf8>)
 800237a:	f043 0310 	orr.w	r3, r3, #16
 800237e:	6453      	str	r3, [r2, #68]	; 0x44
 8002380:	4b27      	ldr	r3, [pc, #156]	; (8002420 <HAL_UART_MspInit+0xf8>)
 8002382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238c:	4b24      	ldr	r3, [pc, #144]	; (8002420 <HAL_UART_MspInit+0xf8>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	4a23      	ldr	r2, [pc, #140]	; (8002420 <HAL_UART_MspInit+0xf8>)
 8002392:	f043 0302 	orr.w	r3, r3, #2
 8002396:	6313      	str	r3, [r2, #48]	; 0x30
 8002398:	4b21      	ldr	r3, [pc, #132]	; (8002420 <HAL_UART_MspInit+0xf8>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a4:	4b1e      	ldr	r3, [pc, #120]	; (8002420 <HAL_UART_MspInit+0xf8>)
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	4a1d      	ldr	r2, [pc, #116]	; (8002420 <HAL_UART_MspInit+0xf8>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6313      	str	r3, [r2, #48]	; 0x30
 80023b0:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <HAL_UART_MspInit+0xf8>)
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c2:	2302      	movs	r3, #2
 80023c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023d4:	2307      	movs	r3, #7
 80023d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80023da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023de:	4619      	mov	r1, r3
 80023e0:	4810      	ldr	r0, [pc, #64]	; (8002424 <HAL_UART_MspInit+0xfc>)
 80023e2:	f001 fb39 	bl	8003a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80023e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ee:	2302      	movs	r3, #2
 80023f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002400:	2307      	movs	r3, #7
 8002402:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002406:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800240a:	4619      	mov	r1, r3
 800240c:	4806      	ldr	r0, [pc, #24]	; (8002428 <HAL_UART_MspInit+0x100>)
 800240e:	f001 fb23 	bl	8003a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002412:	bf00      	nop
 8002414:	37b0      	adds	r7, #176	; 0xb0
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40011000 	.word	0x40011000
 8002420:	40023800 	.word	0x40023800
 8002424:	40020400 	.word	0x40020400
 8002428:	40020000 	.word	0x40020000

0800242c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002440:	4b3a      	ldr	r3, [pc, #232]	; (800252c <HAL_FMC_MspInit+0x100>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d16d      	bne.n	8002524 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002448:	4b38      	ldr	r3, [pc, #224]	; (800252c <HAL_FMC_MspInit+0x100>)
 800244a:	2201      	movs	r2, #1
 800244c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800244e:	4b38      	ldr	r3, [pc, #224]	; (8002530 <HAL_FMC_MspInit+0x104>)
 8002450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002452:	4a37      	ldr	r2, [pc, #220]	; (8002530 <HAL_FMC_MspInit+0x104>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6393      	str	r3, [r2, #56]	; 0x38
 800245a:	4b35      	ldr	r3, [pc, #212]	; (8002530 <HAL_FMC_MspInit+0x104>)
 800245c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002466:	f64f 7383 	movw	r3, #65411	; 0xff83
 800246a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246c:	2302      	movs	r3, #2
 800246e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002474:	2303      	movs	r3, #3
 8002476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002478:	230c      	movs	r3, #12
 800247a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800247c:	1d3b      	adds	r3, r7, #4
 800247e:	4619      	mov	r1, r3
 8002480:	482c      	ldr	r0, [pc, #176]	; (8002534 <HAL_FMC_MspInit+0x108>)
 8002482:	f001 fae9 	bl	8003a58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002486:	f248 1333 	movw	r3, #33075	; 0x8133
 800248a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248c:	2302      	movs	r3, #2
 800248e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002494:	2303      	movs	r3, #3
 8002496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002498:	230c      	movs	r3, #12
 800249a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	4619      	mov	r1, r3
 80024a0:	4825      	ldr	r0, [pc, #148]	; (8002538 <HAL_FMC_MspInit+0x10c>)
 80024a2:	f001 fad9 	bl	8003a58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80024a6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80024aa:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ac:	2302      	movs	r3, #2
 80024ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b4:	2303      	movs	r3, #3
 80024b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024b8:	230c      	movs	r3, #12
 80024ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	4619      	mov	r1, r3
 80024c0:	481e      	ldr	r0, [pc, #120]	; (800253c <HAL_FMC_MspInit+0x110>)
 80024c2:	f001 fac9 	bl	8003a58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80024c6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80024ca:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024cc:	2302      	movs	r3, #2
 80024ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d4:	2303      	movs	r3, #3
 80024d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024d8:	230c      	movs	r3, #12
 80024da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	4619      	mov	r1, r3
 80024e0:	4817      	ldr	r0, [pc, #92]	; (8002540 <HAL_FMC_MspInit+0x114>)
 80024e2:	f001 fab9 	bl	8003a58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80024e6:	2328      	movs	r3, #40	; 0x28
 80024e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f2:	2303      	movs	r3, #3
 80024f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024f6:	230c      	movs	r3, #12
 80024f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	4619      	mov	r1, r3
 80024fe:	4811      	ldr	r0, [pc, #68]	; (8002544 <HAL_FMC_MspInit+0x118>)
 8002500:	f001 faaa 	bl	8003a58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002504:	2308      	movs	r3, #8
 8002506:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002508:	2302      	movs	r3, #2
 800250a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002510:	2303      	movs	r3, #3
 8002512:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002514:	230c      	movs	r3, #12
 8002516:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002518:	1d3b      	adds	r3, r7, #4
 800251a:	4619      	mov	r1, r3
 800251c:	480a      	ldr	r0, [pc, #40]	; (8002548 <HAL_FMC_MspInit+0x11c>)
 800251e:	f001 fa9b 	bl	8003a58 <HAL_GPIO_Init>
 8002522:	e000      	b.n	8002526 <HAL_FMC_MspInit+0xfa>
    return;
 8002524:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000670 	.word	0x20000670
 8002530:	40023800 	.word	0x40023800
 8002534:	40021000 	.word	0x40021000
 8002538:	40021800 	.word	0x40021800
 800253c:	40020c00 	.word	0x40020c00
 8002540:	40021400 	.word	0x40021400
 8002544:	40021c00 	.word	0x40021c00
 8002548:	40020800 	.word	0x40020800

0800254c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002554:	f7ff ff6a 	bl	800242c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002558:	bf00      	nop
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08a      	sub	sp, #40	; 0x28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a2b      	ldr	r2, [pc, #172]	; (800261c <HAL_SAI_MspInit+0xbc>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d124      	bne.n	80025bc <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002572:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <HAL_SAI_MspInit+0xc0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10b      	bne.n	8002592 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800257a:	4b2a      	ldr	r3, [pc, #168]	; (8002624 <HAL_SAI_MspInit+0xc4>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	4a29      	ldr	r2, [pc, #164]	; (8002624 <HAL_SAI_MspInit+0xc4>)
 8002580:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002584:	6453      	str	r3, [r2, #68]	; 0x44
 8002586:	4b27      	ldr	r3, [pc, #156]	; (8002624 <HAL_SAI_MspInit+0xc4>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002592:	4b23      	ldr	r3, [pc, #140]	; (8002620 <HAL_SAI_MspInit+0xc0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	3301      	adds	r3, #1
 8002598:	4a21      	ldr	r2, [pc, #132]	; (8002620 <HAL_SAI_MspInit+0xc0>)
 800259a:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800259c:	23f0      	movs	r3, #240	; 0xf0
 800259e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a0:	2302      	movs	r3, #2
 80025a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a8:	2300      	movs	r3, #0
 80025aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80025ac:	230a      	movs	r3, #10
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	4619      	mov	r1, r3
 80025b6:	481c      	ldr	r0, [pc, #112]	; (8002628 <HAL_SAI_MspInit+0xc8>)
 80025b8:	f001 fa4e 	bl	8003a58 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a1a      	ldr	r2, [pc, #104]	; (800262c <HAL_SAI_MspInit+0xcc>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d125      	bne.n	8002612 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80025c6:	4b16      	ldr	r3, [pc, #88]	; (8002620 <HAL_SAI_MspInit+0xc0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10b      	bne.n	80025e6 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80025ce:	4b15      	ldr	r3, [pc, #84]	; (8002624 <HAL_SAI_MspInit+0xc4>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	4a14      	ldr	r2, [pc, #80]	; (8002624 <HAL_SAI_MspInit+0xc4>)
 80025d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025d8:	6453      	str	r3, [r2, #68]	; 0x44
 80025da:	4b12      	ldr	r3, [pc, #72]	; (8002624 <HAL_SAI_MspInit+0xc4>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <HAL_SAI_MspInit+0xc0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	3301      	adds	r3, #1
 80025ec:	4a0c      	ldr	r2, [pc, #48]	; (8002620 <HAL_SAI_MspInit+0xc0>)
 80025ee:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80025f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f6:	2302      	movs	r3, #2
 80025f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fe:	2300      	movs	r3, #0
 8002600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002602:	230a      	movs	r3, #10
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002606:	f107 0314 	add.w	r3, r7, #20
 800260a:	4619      	mov	r1, r3
 800260c:	4808      	ldr	r0, [pc, #32]	; (8002630 <HAL_SAI_MspInit+0xd0>)
 800260e:	f001 fa23 	bl	8003a58 <HAL_GPIO_Init>

    }
}
 8002612:	bf00      	nop
 8002614:	3728      	adds	r7, #40	; 0x28
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40015c04 	.word	0x40015c04
 8002620:	20000674 	.word	0x20000674
 8002624:	40023800 	.word	0x40023800
 8002628:	40022000 	.word	0x40022000
 800262c:	40015c24 	.word	0x40015c24
 8002630:	40021800 	.word	0x40021800

08002634 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08c      	sub	sp, #48	; 0x30
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002640:	2300      	movs	r3, #0
 8002642:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002644:	2200      	movs	r2, #0
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	2036      	movs	r0, #54	; 0x36
 800264a:	f000 fe8b 	bl	8003364 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800264e:	2036      	movs	r0, #54	; 0x36
 8002650:	f000 fea4 	bl	800339c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002654:	4b1f      	ldr	r3, [pc, #124]	; (80026d4 <HAL_InitTick+0xa0>)
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	4a1e      	ldr	r2, [pc, #120]	; (80026d4 <HAL_InitTick+0xa0>)
 800265a:	f043 0310 	orr.w	r3, r3, #16
 800265e:	6413      	str	r3, [r2, #64]	; 0x40
 8002660:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <HAL_InitTick+0xa0>)
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800266c:	f107 0210 	add.w	r2, r7, #16
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f002 fd30 	bl	80050dc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800267c:	f002 fd06 	bl	800508c <HAL_RCC_GetPCLK1Freq>
 8002680:	4603      	mov	r3, r0
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002688:	4a13      	ldr	r2, [pc, #76]	; (80026d8 <HAL_InitTick+0xa4>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	0c9b      	lsrs	r3, r3, #18
 8002690:	3b01      	subs	r3, #1
 8002692:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <HAL_InitTick+0xa8>)
 8002696:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <HAL_InitTick+0xac>)
 8002698:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <HAL_InitTick+0xa8>)
 800269c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80026a2:	4a0e      	ldr	r2, [pc, #56]	; (80026dc <HAL_InitTick+0xa8>)
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <HAL_InitTick+0xa8>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ae:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_InitTick+0xa8>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80026b4:	4809      	ldr	r0, [pc, #36]	; (80026dc <HAL_InitTick+0xa8>)
 80026b6:	f004 f940 	bl	800693a <HAL_TIM_Base_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d104      	bne.n	80026ca <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80026c0:	4806      	ldr	r0, [pc, #24]	; (80026dc <HAL_InitTick+0xa8>)
 80026c2:	f004 f991 	bl	80069e8 <HAL_TIM_Base_Start_IT>
 80026c6:	4603      	mov	r3, r0
 80026c8:	e000      	b.n	80026cc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3730      	adds	r7, #48	; 0x30
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40023800 	.word	0x40023800
 80026d8:	431bde83 	.word	0x431bde83
 80026dc:	20000678 	.word	0x20000678
 80026e0:	40001000 	.word	0x40001000

080026e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026e8:	e7fe      	b.n	80026e8 <NMI_Handler+0x4>

080026ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ea:	b480      	push	{r7}
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ee:	e7fe      	b.n	80026ee <HardFault_Handler+0x4>

080026f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026f4:	e7fe      	b.n	80026f4 <MemManage_Handler+0x4>

080026f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026f6:	b480      	push	{r7}
 80026f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026fa:	e7fe      	b.n	80026fa <BusFault_Handler+0x4>

080026fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002700:	e7fe      	b.n	8002700 <UsageFault_Handler+0x4>

08002702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800271e:	b480      	push	{r7}
 8002720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002740:	4802      	ldr	r0, [pc, #8]	; (800274c <ADC_IRQHandler+0x10>)
 8002742:	f000 f9cb 	bl	8002adc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000028 	.word	0x20000028

08002750 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002754:	4802      	ldr	r0, [pc, #8]	; (8002760 <TIM6_DAC_IRQHandler+0x10>)
 8002756:	f004 fa16 	bl	8006b86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000678 	.word	0x20000678

08002764 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002768:	4802      	ldr	r0, [pc, #8]	; (8002774 <LTDC_IRQHandler+0x10>)
 800276a:	f001 fd33 	bl	80041d4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000170 	.word	0x20000170

08002778 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800277c:	4802      	ldr	r0, [pc, #8]	; (8002788 <DMA2D_IRQHandler+0x10>)
 800277e:	f000 ffc9 	bl	8003714 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	200000e4 	.word	0x200000e4

0800278c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <SystemInit+0x20>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002796:	4a05      	ldr	r2, [pc, #20]	; (80027ac <SystemInit+0x20>)
 8002798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800279c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027b4:	480d      	ldr	r0, [pc, #52]	; (80027ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027b6:	490e      	ldr	r1, [pc, #56]	; (80027f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027b8:	4a0e      	ldr	r2, [pc, #56]	; (80027f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027bc:	e002      	b.n	80027c4 <LoopCopyDataInit>

080027be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027c2:	3304      	adds	r3, #4

080027c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c8:	d3f9      	bcc.n	80027be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ca:	4a0b      	ldr	r2, [pc, #44]	; (80027f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027cc:	4c0b      	ldr	r4, [pc, #44]	; (80027fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80027ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d0:	e001      	b.n	80027d6 <LoopFillZerobss>

080027d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d4:	3204      	adds	r2, #4

080027d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d8:	d3fb      	bcc.n	80027d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027da:	f7ff ffd7 	bl	800278c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027de:	f005 fecb 	bl	8008578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027e2:	f7fd fea1 	bl	8000528 <main>
  bx  lr    
 80027e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027e8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80027ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80027f4:	08008610 	.word	0x08008610
  ldr r2, =_sbss
 80027f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80027fc:	200006c8 	.word	0x200006c8

08002800 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002800:	e7fe      	b.n	8002800 <CAN1_RX0_IRQHandler>

08002802 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002806:	2003      	movs	r0, #3
 8002808:	f000 fda1 	bl	800334e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800280c:	200f      	movs	r0, #15
 800280e:	f7ff ff11 	bl	8002634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002812:	f7ff f887 	bl	8001924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_IncTick+0x20>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_IncTick+0x24>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4413      	add	r3, r2
 800282c:	4a04      	ldr	r2, [pc, #16]	; (8002840 <HAL_IncTick+0x24>)
 800282e:	6013      	str	r3, [r2, #0]
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000008 	.word	0x20000008
 8002840:	200006c4 	.word	0x200006c4

08002844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return uwTick;
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <HAL_GetTick+0x14>)
 800284a:	681b      	ldr	r3, [r3, #0]
}
 800284c:	4618      	mov	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	200006c4 	.word	0x200006c4

0800285c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002864:	f7ff ffee 	bl	8002844 <HAL_GetTick>
 8002868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002874:	d005      	beq.n	8002882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <HAL_Delay+0x44>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002882:	bf00      	nop
 8002884:	f7ff ffde 	bl	8002844 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	429a      	cmp	r2, r3
 8002892:	d8f7      	bhi.n	8002884 <HAL_Delay+0x28>
  {
  }
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000008 	.word	0x20000008

080028a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e031      	b.n	800291e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff f852 	bl	800196c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f003 0310 	and.w	r3, r3, #16
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d116      	bne.n	8002910 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028e6:	4b10      	ldr	r3, [pc, #64]	; (8002928 <HAL_ADC_Init+0x84>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	f043 0202 	orr.w	r2, r3, #2
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fb7a 	bl	8002fec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f023 0303 	bic.w	r3, r3, #3
 8002906:	f043 0201 	orr.w	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	641a      	str	r2, [r3, #64]	; 0x40
 800290e:	e001      	b.n	8002914 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800291c:	7bfb      	ldrb	r3, [r7, #15]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	ffffeefd 	.word	0xffffeefd

0800292c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002934:	2300      	movs	r3, #0
 8002936:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_ADC_Start_IT+0x1a>
 8002942:	2302      	movs	r3, #2
 8002944:	e0b5      	b.n	8002ab2 <HAL_ADC_Start_IT+0x186>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b01      	cmp	r3, #1
 800295a:	d018      	beq.n	800298e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800296c:	4b54      	ldr	r3, [pc, #336]	; (8002ac0 <HAL_ADC_Start_IT+0x194>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a54      	ldr	r2, [pc, #336]	; (8002ac4 <HAL_ADC_Start_IT+0x198>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	0c9a      	lsrs	r2, r3, #18
 8002978:	4613      	mov	r3, r2
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4413      	add	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002980:	e002      	b.n	8002988 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	3b01      	subs	r3, #1
 8002986:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f9      	bne.n	8002982 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b01      	cmp	r3, #1
 800299a:	d17d      	bne.n	8002a98 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a0:	4b49      	ldr	r3, [pc, #292]	; (8002ac8 <HAL_ADC_Start_IT+0x19c>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d6:	d106      	bne.n	80029e6 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029dc:	f023 0206 	bic.w	r2, r3, #6
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	645a      	str	r2, [r3, #68]	; 0x44
 80029e4:	e002      	b.n	80029ec <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80029fc:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6859      	ldr	r1, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4b30      	ldr	r3, [pc, #192]	; (8002acc <HAL_ADC_Start_IT+0x1a0>)
 8002a0a:	430b      	orrs	r3, r1
 8002a0c:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002a0e:	4b30      	ldr	r3, [pc, #192]	; (8002ad0 <HAL_ADC_Start_IT+0x1a4>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10f      	bne.n	8002a3a <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d143      	bne.n	8002ab0 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	e03a      	b.n	8002ab0 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a25      	ldr	r2, [pc, #148]	; (8002ad4 <HAL_ADC_Start_IT+0x1a8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d10e      	bne.n	8002a62 <HAL_ADC_Start_IT+0x136>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d107      	bne.n	8002a62 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a60:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002a62:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <HAL_ADC_Start_IT+0x1a4>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d120      	bne.n	8002ab0 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <HAL_ADC_Start_IT+0x1ac>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d11b      	bne.n	8002ab0 <HAL_ADC_Start_IT+0x184>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d114      	bne.n	8002ab0 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a94:	609a      	str	r2, [r3, #8]
 8002a96:	e00b      	b.n	8002ab0 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	f043 0210 	orr.w	r2, r3, #16
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa8:	f043 0201 	orr.w	r2, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	20000000 	.word	0x20000000
 8002ac4:	431bde83 	.word	0x431bde83
 8002ac8:	fffff8fe 	.word	0xfffff8fe
 8002acc:	04000020 	.word	0x04000020
 8002ad0:	40012300 	.word	0x40012300
 8002ad4:	40012000 	.word	0x40012000
 8002ad8:	40012200 	.word	0x40012200

08002adc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d049      	beq.n	8002ba6 <HAL_ADC_IRQHandler+0xca>
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d046      	beq.n	8002ba6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d105      	bne.n	8002b30 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d12b      	bne.n	8002b96 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d127      	bne.n	8002b96 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d006      	beq.n	8002b62 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d119      	bne.n	8002b96 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0220 	bic.w	r2, r2, #32
 8002b70:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d105      	bne.n	8002b96 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f043 0201 	orr.w	r2, r3, #1
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7fd fcb8 	bl	800050c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0212 	mvn.w	r2, #18
 8002ba4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d057      	beq.n	8002c6c <HAL_ADC_IRQHandler+0x190>
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d054      	beq.n	8002c6c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d105      	bne.n	8002bda <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d139      	bne.n	8002c5c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d006      	beq.n	8002c04 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d12b      	bne.n	8002c5c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d124      	bne.n	8002c5c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d11d      	bne.n	8002c5c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d119      	bne.n	8002c5c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c36:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d105      	bne.n	8002c5c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	f043 0201 	orr.w	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fabf 	bl	80031e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f06f 020c 	mvn.w	r2, #12
 8002c6a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d017      	beq.n	8002cb2 <HAL_ADC_IRQHandler+0x1d6>
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d014      	beq.n	8002cb2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d10d      	bne.n	8002cb2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f837 	bl	8002d16 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0201 	mvn.w	r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cc0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d015      	beq.n	8002cf4 <HAL_ADC_IRQHandler+0x218>
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d012      	beq.n	8002cf4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	f043 0202 	orr.w	r2, r3, #2
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f06f 0220 	mvn.w	r2, #32
 8002ce2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f820 	bl	8002d2a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f06f 0220 	mvn.w	r2, #32
 8002cf2:	601a      	str	r2, [r3, #0]
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
	...

08002d40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x1c>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e136      	b.n	8002fca <HAL_ADC_ConfigChannel+0x28a>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b09      	cmp	r3, #9
 8002d6a:	d93a      	bls.n	8002de2 <HAL_ADC_ConfigChannel+0xa2>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d74:	d035      	beq.n	8002de2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68d9      	ldr	r1, [r3, #12]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	461a      	mov	r2, r3
 8002d84:	4613      	mov	r3, r2
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	4413      	add	r3, r2
 8002d8a:	3b1e      	subs	r3, #30
 8002d8c:	2207      	movs	r2, #7
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43da      	mvns	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	400a      	ands	r2, r1
 8002d9a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a8d      	ldr	r2, [pc, #564]	; (8002fd8 <HAL_ADC_ConfigChannel+0x298>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d10a      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68d9      	ldr	r1, [r3, #12]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	061a      	lsls	r2, r3, #24
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dba:	e035      	b.n	8002e28 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68d9      	ldr	r1, [r3, #12]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	4618      	mov	r0, r3
 8002dce:	4603      	mov	r3, r0
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	4403      	add	r3, r0
 8002dd4:	3b1e      	subs	r3, #30
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002de0:	e022      	b.n	8002e28 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6919      	ldr	r1, [r3, #16]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	4613      	mov	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	4413      	add	r3, r2
 8002df6:	2207      	movs	r2, #7
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43da      	mvns	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	400a      	ands	r2, r1
 8002e04:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6919      	ldr	r1, [r3, #16]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	4618      	mov	r0, r3
 8002e18:	4603      	mov	r3, r0
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4403      	add	r3, r0
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b06      	cmp	r3, #6
 8002e2e:	d824      	bhi.n	8002e7a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	3b05      	subs	r3, #5
 8002e42:	221f      	movs	r2, #31
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43da      	mvns	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	400a      	ands	r2, r1
 8002e50:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	4618      	mov	r0, r3
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	3b05      	subs	r3, #5
 8002e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	635a      	str	r2, [r3, #52]	; 0x34
 8002e78:	e04c      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b0c      	cmp	r3, #12
 8002e80:	d824      	bhi.n	8002ecc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	3b23      	subs	r3, #35	; 0x23
 8002e94:	221f      	movs	r2, #31
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43da      	mvns	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	400a      	ands	r2, r1
 8002ea2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	3b23      	subs	r3, #35	; 0x23
 8002ebe:	fa00 f203 	lsl.w	r2, r0, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	631a      	str	r2, [r3, #48]	; 0x30
 8002eca:	e023      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	3b41      	subs	r3, #65	; 0x41
 8002ede:	221f      	movs	r2, #31
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43da      	mvns	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	400a      	ands	r2, r1
 8002eec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	4618      	mov	r0, r3
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	3b41      	subs	r3, #65	; 0x41
 8002f08:	fa00 f203 	lsl.w	r2, r0, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a30      	ldr	r2, [pc, #192]	; (8002fdc <HAL_ADC_ConfigChannel+0x29c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d10a      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x1f4>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f26:	d105      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002f28:	4b2d      	ldr	r3, [pc, #180]	; (8002fe0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4a2c      	ldr	r2, [pc, #176]	; (8002fe0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f2e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002f32:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a28      	ldr	r2, [pc, #160]	; (8002fdc <HAL_ADC_ConfigChannel+0x29c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d10f      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x21e>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b12      	cmp	r3, #18
 8002f44:	d10b      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002f46:	4b26      	ldr	r3, [pc, #152]	; (8002fe0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	4a25      	ldr	r2, [pc, #148]	; (8002fe0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f4c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f50:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002f52:	4b23      	ldr	r3, [pc, #140]	; (8002fe0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	4a22      	ldr	r2, [pc, #136]	; (8002fe0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f5c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a1e      	ldr	r2, [pc, #120]	; (8002fdc <HAL_ADC_ConfigChannel+0x29c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d12b      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x280>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a1a      	ldr	r2, [pc, #104]	; (8002fd8 <HAL_ADC_ConfigChannel+0x298>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d003      	beq.n	8002f7a <HAL_ADC_ConfigChannel+0x23a>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b11      	cmp	r3, #17
 8002f78:	d122      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002f7a:	4b19      	ldr	r3, [pc, #100]	; (8002fe0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4a18      	ldr	r2, [pc, #96]	; (8002fe0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f80:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002f84:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002f86:	4b16      	ldr	r3, [pc, #88]	; (8002fe0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4a15      	ldr	r2, [pc, #84]	; (8002fe0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f90:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a10      	ldr	r2, [pc, #64]	; (8002fd8 <HAL_ADC_ConfigChannel+0x298>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d111      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <HAL_ADC_ConfigChannel+0x2a4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a11      	ldr	r2, [pc, #68]	; (8002fe8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	0c9a      	lsrs	r2, r3, #18
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002fb2:	e002      	b.n	8002fba <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1f9      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	10000012 	.word	0x10000012
 8002fdc:	40012000 	.word	0x40012000
 8002fe0:	40012300 	.word	0x40012300
 8002fe4:	20000000 	.word	0x20000000
 8002fe8:	431bde83 	.word	0x431bde83

08002fec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002ff4:	4b78      	ldr	r3, [pc, #480]	; (80031d8 <ADC_Init+0x1ec>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	4a77      	ldr	r2, [pc, #476]	; (80031d8 <ADC_Init+0x1ec>)
 8002ffa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002ffe:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003000:	4b75      	ldr	r3, [pc, #468]	; (80031d8 <ADC_Init+0x1ec>)
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	4973      	ldr	r1, [pc, #460]	; (80031d8 <ADC_Init+0x1ec>)
 800300a:	4313      	orrs	r3, r2
 800300c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800301c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6859      	ldr	r1, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	021a      	lsls	r2, r3, #8
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003040:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003062:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6899      	ldr	r1, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	4a58      	ldr	r2, [pc, #352]	; (80031dc <ADC_Init+0x1f0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d022      	beq.n	80030c6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800308e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6899      	ldr	r1, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6899      	ldr	r1, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	e00f      	b.n	80030e6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0202 	bic.w	r2, r2, #2
 80030f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6899      	ldr	r1, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	005a      	lsls	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d01b      	beq.n	800314c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003122:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003132:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6859      	ldr	r1, [r3, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	3b01      	subs	r3, #1
 8003140:	035a      	lsls	r2, r3, #13
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	e007      	b.n	800315c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800315a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800316a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	3b01      	subs	r3, #1
 8003178:	051a      	lsls	r2, r3, #20
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003190:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6899      	ldr	r1, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800319e:	025a      	lsls	r2, r3, #9
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6899      	ldr	r1, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	029a      	lsls	r2, r3, #10
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	609a      	str	r2, [r3, #8]
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	40012300 	.word	0x40012300
 80031dc:	0f000001 	.word	0x0f000001

080031e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <__NVIC_SetPriorityGrouping+0x40>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003210:	4013      	ands	r3, r2
 8003212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800321c:	4b06      	ldr	r3, [pc, #24]	; (8003238 <__NVIC_SetPriorityGrouping+0x44>)
 800321e:	4313      	orrs	r3, r2
 8003220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003222:	4a04      	ldr	r2, [pc, #16]	; (8003234 <__NVIC_SetPriorityGrouping+0x40>)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	60d3      	str	r3, [r2, #12]
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	e000ed00 	.word	0xe000ed00
 8003238:	05fa0000 	.word	0x05fa0000

0800323c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003240:	4b04      	ldr	r3, [pc, #16]	; (8003254 <__NVIC_GetPriorityGrouping+0x18>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	0a1b      	lsrs	r3, r3, #8
 8003246:	f003 0307 	and.w	r3, r3, #7
}
 800324a:	4618      	mov	r0, r3
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003266:	2b00      	cmp	r3, #0
 8003268:	db0b      	blt.n	8003282 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	f003 021f 	and.w	r2, r3, #31
 8003270:	4907      	ldr	r1, [pc, #28]	; (8003290 <__NVIC_EnableIRQ+0x38>)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	2001      	movs	r0, #1
 800327a:	fa00 f202 	lsl.w	r2, r0, r2
 800327e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	e000e100 	.word	0xe000e100

08003294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	6039      	str	r1, [r7, #0]
 800329e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	db0a      	blt.n	80032be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	490c      	ldr	r1, [pc, #48]	; (80032e0 <__NVIC_SetPriority+0x4c>)
 80032ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b2:	0112      	lsls	r2, r2, #4
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	440b      	add	r3, r1
 80032b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032bc:	e00a      	b.n	80032d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	4908      	ldr	r1, [pc, #32]	; (80032e4 <__NVIC_SetPriority+0x50>)
 80032c4:	79fb      	ldrb	r3, [r7, #7]
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	3b04      	subs	r3, #4
 80032cc:	0112      	lsls	r2, r2, #4
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	440b      	add	r3, r1
 80032d2:	761a      	strb	r2, [r3, #24]
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	e000e100 	.word	0xe000e100
 80032e4:	e000ed00 	.word	0xe000ed00

080032e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b089      	sub	sp, #36	; 0x24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f1c3 0307 	rsb	r3, r3, #7
 8003302:	2b04      	cmp	r3, #4
 8003304:	bf28      	it	cs
 8003306:	2304      	movcs	r3, #4
 8003308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3304      	adds	r3, #4
 800330e:	2b06      	cmp	r3, #6
 8003310:	d902      	bls.n	8003318 <NVIC_EncodePriority+0x30>
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	3b03      	subs	r3, #3
 8003316:	e000      	b.n	800331a <NVIC_EncodePriority+0x32>
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800331c:	f04f 32ff 	mov.w	r2, #4294967295
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43da      	mvns	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	401a      	ands	r2, r3
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003330:	f04f 31ff 	mov.w	r1, #4294967295
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	fa01 f303 	lsl.w	r3, r1, r3
 800333a:	43d9      	mvns	r1, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003340:	4313      	orrs	r3, r2
         );
}
 8003342:	4618      	mov	r0, r3
 8003344:	3724      	adds	r7, #36	; 0x24
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7ff ff4c 	bl	80031f4 <__NVIC_SetPriorityGrouping>
}
 800335c:	bf00      	nop
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003376:	f7ff ff61 	bl	800323c <__NVIC_GetPriorityGrouping>
 800337a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	68b9      	ldr	r1, [r7, #8]
 8003380:	6978      	ldr	r0, [r7, #20]
 8003382:	f7ff ffb1 	bl	80032e8 <NVIC_EncodePriority>
 8003386:	4602      	mov	r2, r0
 8003388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800338c:	4611      	mov	r1, r2
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff ff80 	bl	8003294 <__NVIC_SetPriority>
}
 8003394:	bf00      	nop
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff ff54 	bl	8003258 <__NVIC_EnableIRQ>
}
 80033b0:	bf00      	nop
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e054      	b.n	8003474 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	7f5b      	ldrb	r3, [r3, #29]
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d105      	bne.n	80033e0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fe fb28 	bl	8001a30 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	791b      	ldrb	r3, [r3, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10c      	bne.n	8003408 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a22      	ldr	r2, [pc, #136]	; (800347c <HAL_CRC_Init+0xc4>)
 80033f4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0218 	bic.w	r2, r2, #24
 8003404:	609a      	str	r2, [r3, #8]
 8003406:	e00c      	b.n	8003422 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6899      	ldr	r1, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	461a      	mov	r2, r3
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f834 	bl	8003480 <HAL_CRCEx_Polynomial_Set>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e028      	b.n	8003474 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	795b      	ldrb	r3, [r3, #5]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d105      	bne.n	8003436 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f04f 32ff 	mov.w	r2, #4294967295
 8003432:	611a      	str	r2, [r3, #16]
 8003434:	e004      	b.n	8003440 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6912      	ldr	r2, [r2, #16]
 800343e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695a      	ldr	r2, [r3, #20]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699a      	ldr	r2, [r3, #24]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	04c11db7 	.word	0x04c11db7

08003480 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003490:	231f      	movs	r3, #31
 8003492:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003494:	bf00      	nop
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1e5a      	subs	r2, r3, #1
 800349a:	613a      	str	r2, [r7, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d009      	beq.n	80034b4 <HAL_CRCEx_Polynomial_Set+0x34>
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f003 031f 	and.w	r3, r3, #31
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b18      	cmp	r3, #24
 80034b8:	d846      	bhi.n	8003548 <HAL_CRCEx_Polynomial_Set+0xc8>
 80034ba:	a201      	add	r2, pc, #4	; (adr r2, 80034c0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80034bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c0:	0800354f 	.word	0x0800354f
 80034c4:	08003549 	.word	0x08003549
 80034c8:	08003549 	.word	0x08003549
 80034cc:	08003549 	.word	0x08003549
 80034d0:	08003549 	.word	0x08003549
 80034d4:	08003549 	.word	0x08003549
 80034d8:	08003549 	.word	0x08003549
 80034dc:	08003549 	.word	0x08003549
 80034e0:	0800353d 	.word	0x0800353d
 80034e4:	08003549 	.word	0x08003549
 80034e8:	08003549 	.word	0x08003549
 80034ec:	08003549 	.word	0x08003549
 80034f0:	08003549 	.word	0x08003549
 80034f4:	08003549 	.word	0x08003549
 80034f8:	08003549 	.word	0x08003549
 80034fc:	08003549 	.word	0x08003549
 8003500:	08003531 	.word	0x08003531
 8003504:	08003549 	.word	0x08003549
 8003508:	08003549 	.word	0x08003549
 800350c:	08003549 	.word	0x08003549
 8003510:	08003549 	.word	0x08003549
 8003514:	08003549 	.word	0x08003549
 8003518:	08003549 	.word	0x08003549
 800351c:	08003549 	.word	0x08003549
 8003520:	08003525 	.word	0x08003525
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	2b06      	cmp	r3, #6
 8003528:	d913      	bls.n	8003552 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800352e:	e010      	b.n	8003552 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	2b07      	cmp	r3, #7
 8003534:	d90f      	bls.n	8003556 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800353a:	e00c      	b.n	8003556 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	2b0f      	cmp	r3, #15
 8003540:	d90b      	bls.n	800355a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003546:	e008      	b.n	800355a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	75fb      	strb	r3, [r7, #23]
      break;
 800354c:	e006      	b.n	800355c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800354e:	bf00      	nop
 8003550:	e004      	b.n	800355c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003552:	bf00      	nop
 8003554:	e002      	b.n	800355c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003556:	bf00      	nop
 8003558:	e000      	b.n	800355c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800355a:	bf00      	nop
  }
  if (status == HAL_OK)
 800355c:	7dfb      	ldrb	r3, [r7, #23]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10d      	bne.n	800357e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f023 0118 	bic.w	r1, r3, #24
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	430a      	orrs	r2, r1
 800357c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800357e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003580:	4618      	mov	r0, r3
 8003582:	371c      	adds	r7, #28
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e069      	b.n	8003672 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d102      	bne.n	80035b0 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fe fa60 	bl	8001a70 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6819      	ldr	r1, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	4b2a      	ldr	r3, [pc, #168]	; (800367c <HAL_DCMI_Init+0xf0>)
 80035d2:	400b      	ands	r3, r1
 80035d4:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6819      	ldr	r1, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80035ea:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80035f6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003602:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800360e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800361a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b10      	cmp	r3, #16
 800362a:	d112      	bne.n	8003652 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	7f1b      	ldrb	r3, [r3, #28]
 8003630:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	7f5b      	ldrb	r3, [r3, #29]
 8003636:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003638:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	7f9b      	ldrb	r3, [r3, #30]
 800363e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003640:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	7fdb      	ldrb	r3, [r3, #31]
 8003648:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800364e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003650:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 021e 	orr.w	r2, r2, #30
 8003660:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	ffe0f007 	.word	0xffe0f007

08003680 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e039      	b.n	8003706 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fe faa0 	bl	8001bec <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d0:	f023 0107 	bic.w	r1, r3, #7
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036e6:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <HAL_DMA2D_Init+0x90>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	68d1      	ldr	r1, [r2, #12]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6812      	ldr	r2, [r2, #0]
 80036f2:	430b      	orrs	r3, r1
 80036f4:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	ffffc000 	.word	0xffffc000

08003714 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d026      	beq.n	8003784 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d021      	beq.n	8003784 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800374e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003754:	f043 0201 	orr.w	r2, r3, #1
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2201      	movs	r2, #1
 8003762:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2204      	movs	r2, #4
 8003768:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b00      	cmp	r3, #0
 800378c:	d026      	beq.n	80037dc <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d021      	beq.n	80037dc <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037a6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2220      	movs	r2, #32
 80037ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b4:	f043 0202 	orr.w	r2, r3, #2
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2204      	movs	r2, #4
 80037c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d026      	beq.n	8003834 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d021      	beq.n	8003834 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037fe:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2208      	movs	r2, #8
 8003806:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380c:	f043 0204 	orr.w	r2, r3, #4
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2204      	movs	r2, #4
 8003818:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b00      	cmp	r3, #0
 800383c:	d013      	beq.n	8003866 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00e      	beq.n	8003866 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003856:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2204      	movs	r2, #4
 800385e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f853 	bl	800390c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d024      	beq.n	80038ba <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003876:	2b00      	cmp	r3, #0
 8003878:	d01f      	beq.n	80038ba <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003888:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2202      	movs	r2, #2
 8003890:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f003 0310 	and.w	r3, r3, #16
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d01f      	beq.n	8003904 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d01a      	beq.n	8003904 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038dc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2210      	movs	r2, #16
 80038e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f80e 	bl	8003920 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003904:	bf00      	nop
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_DMA2D_ConfigLayer+0x20>
 8003950:	2302      	movs	r3, #2
 8003952:	e079      	b.n	8003a48 <HAL_DMA2D_ConfigLayer+0x114>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	3318      	adds	r3, #24
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	4413      	add	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	041b      	lsls	r3, r3, #16
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800397e:	4b35      	ldr	r3, [pc, #212]	; (8003a54 <HAL_DMA2D_ConfigLayer+0x120>)
 8003980:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b0a      	cmp	r3, #10
 8003988:	d003      	beq.n	8003992 <HAL_DMA2D_ConfigLayer+0x5e>
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b09      	cmp	r3, #9
 8003990:	d107      	bne.n	80039a2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	e005      	b.n	80039ae <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	061b      	lsls	r3, r3, #24
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d120      	bne.n	80039f6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	43db      	mvns	r3, r3
 80039be:	ea02 0103 	and.w	r1, r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b0a      	cmp	r3, #10
 80039dc:	d003      	beq.n	80039e6 <HAL_DMA2D_ConfigLayer+0xb2>
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b09      	cmp	r3, #9
 80039e4:	d127      	bne.n	8003a36 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80039f2:	629a      	str	r2, [r3, #40]	; 0x28
 80039f4:	e01f      	b.n	8003a36 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	43db      	mvns	r3, r3
 8003a00:	ea02 0103 	and.w	r1, r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	6812      	ldr	r2, [r2, #0]
 8003a16:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b0a      	cmp	r3, #10
 8003a1e:	d003      	beq.n	8003a28 <HAL_DMA2D_ConfigLayer+0xf4>
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b09      	cmp	r3, #9
 8003a26:	d106      	bne.n	8003a36 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003a34:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	371c      	adds	r7, #28
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	ff03000f 	.word	0xff03000f

08003a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b089      	sub	sp, #36	; 0x24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a72:	2300      	movs	r3, #0
 8003a74:	61fb      	str	r3, [r7, #28]
 8003a76:	e175      	b.n	8003d64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003a78:	2201      	movs	r2, #1
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	f040 8164 	bne.w	8003d5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d005      	beq.n	8003aae <HAL_GPIO_Init+0x56>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d130      	bne.n	8003b10 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	2203      	movs	r2, #3
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43db      	mvns	r3, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4013      	ands	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	091b      	lsrs	r3, r3, #4
 8003afa:	f003 0201 	and.w	r2, r3, #1
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	d017      	beq.n	8003b4c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	2203      	movs	r2, #3
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4013      	ands	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 0303 	and.w	r3, r3, #3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d123      	bne.n	8003ba0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	08da      	lsrs	r2, r3, #3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3208      	adds	r2, #8
 8003b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	220f      	movs	r2, #15
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	08da      	lsrs	r2, r3, #3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3208      	adds	r2, #8
 8003b9a:	69b9      	ldr	r1, [r7, #24]
 8003b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	2203      	movs	r2, #3
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0203 	and.w	r2, r3, #3
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80be 	beq.w	8003d5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003be2:	4b66      	ldr	r3, [pc, #408]	; (8003d7c <HAL_GPIO_Init+0x324>)
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	4a65      	ldr	r2, [pc, #404]	; (8003d7c <HAL_GPIO_Init+0x324>)
 8003be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bec:	6453      	str	r3, [r2, #68]	; 0x44
 8003bee:	4b63      	ldr	r3, [pc, #396]	; (8003d7c <HAL_GPIO_Init+0x324>)
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003bfa:	4a61      	ldr	r2, [pc, #388]	; (8003d80 <HAL_GPIO_Init+0x328>)
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	089b      	lsrs	r3, r3, #2
 8003c00:	3302      	adds	r3, #2
 8003c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	220f      	movs	r2, #15
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	43db      	mvns	r3, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a58      	ldr	r2, [pc, #352]	; (8003d84 <HAL_GPIO_Init+0x32c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d037      	beq.n	8003c96 <HAL_GPIO_Init+0x23e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a57      	ldr	r2, [pc, #348]	; (8003d88 <HAL_GPIO_Init+0x330>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d031      	beq.n	8003c92 <HAL_GPIO_Init+0x23a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a56      	ldr	r2, [pc, #344]	; (8003d8c <HAL_GPIO_Init+0x334>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d02b      	beq.n	8003c8e <HAL_GPIO_Init+0x236>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a55      	ldr	r2, [pc, #340]	; (8003d90 <HAL_GPIO_Init+0x338>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d025      	beq.n	8003c8a <HAL_GPIO_Init+0x232>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a54      	ldr	r2, [pc, #336]	; (8003d94 <HAL_GPIO_Init+0x33c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d01f      	beq.n	8003c86 <HAL_GPIO_Init+0x22e>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a53      	ldr	r2, [pc, #332]	; (8003d98 <HAL_GPIO_Init+0x340>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d019      	beq.n	8003c82 <HAL_GPIO_Init+0x22a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a52      	ldr	r2, [pc, #328]	; (8003d9c <HAL_GPIO_Init+0x344>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d013      	beq.n	8003c7e <HAL_GPIO_Init+0x226>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a51      	ldr	r2, [pc, #324]	; (8003da0 <HAL_GPIO_Init+0x348>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00d      	beq.n	8003c7a <HAL_GPIO_Init+0x222>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a50      	ldr	r2, [pc, #320]	; (8003da4 <HAL_GPIO_Init+0x34c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d007      	beq.n	8003c76 <HAL_GPIO_Init+0x21e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a4f      	ldr	r2, [pc, #316]	; (8003da8 <HAL_GPIO_Init+0x350>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d101      	bne.n	8003c72 <HAL_GPIO_Init+0x21a>
 8003c6e:	2309      	movs	r3, #9
 8003c70:	e012      	b.n	8003c98 <HAL_GPIO_Init+0x240>
 8003c72:	230a      	movs	r3, #10
 8003c74:	e010      	b.n	8003c98 <HAL_GPIO_Init+0x240>
 8003c76:	2308      	movs	r3, #8
 8003c78:	e00e      	b.n	8003c98 <HAL_GPIO_Init+0x240>
 8003c7a:	2307      	movs	r3, #7
 8003c7c:	e00c      	b.n	8003c98 <HAL_GPIO_Init+0x240>
 8003c7e:	2306      	movs	r3, #6
 8003c80:	e00a      	b.n	8003c98 <HAL_GPIO_Init+0x240>
 8003c82:	2305      	movs	r3, #5
 8003c84:	e008      	b.n	8003c98 <HAL_GPIO_Init+0x240>
 8003c86:	2304      	movs	r3, #4
 8003c88:	e006      	b.n	8003c98 <HAL_GPIO_Init+0x240>
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e004      	b.n	8003c98 <HAL_GPIO_Init+0x240>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e002      	b.n	8003c98 <HAL_GPIO_Init+0x240>
 8003c92:	2301      	movs	r3, #1
 8003c94:	e000      	b.n	8003c98 <HAL_GPIO_Init+0x240>
 8003c96:	2300      	movs	r3, #0
 8003c98:	69fa      	ldr	r2, [r7, #28]
 8003c9a:	f002 0203 	and.w	r2, r2, #3
 8003c9e:	0092      	lsls	r2, r2, #2
 8003ca0:	4093      	lsls	r3, r2
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ca8:	4935      	ldr	r1, [pc, #212]	; (8003d80 <HAL_GPIO_Init+0x328>)
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	089b      	lsrs	r3, r3, #2
 8003cae:	3302      	adds	r3, #2
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cb6:	4b3d      	ldr	r3, [pc, #244]	; (8003dac <HAL_GPIO_Init+0x354>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cda:	4a34      	ldr	r2, [pc, #208]	; (8003dac <HAL_GPIO_Init+0x354>)
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ce0:	4b32      	ldr	r3, [pc, #200]	; (8003dac <HAL_GPIO_Init+0x354>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4013      	ands	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d04:	4a29      	ldr	r2, [pc, #164]	; (8003dac <HAL_GPIO_Init+0x354>)
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d0a:	4b28      	ldr	r3, [pc, #160]	; (8003dac <HAL_GPIO_Init+0x354>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	43db      	mvns	r3, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4013      	ands	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d2e:	4a1f      	ldr	r2, [pc, #124]	; (8003dac <HAL_GPIO_Init+0x354>)
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d34:	4b1d      	ldr	r3, [pc, #116]	; (8003dac <HAL_GPIO_Init+0x354>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4013      	ands	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d58:	4a14      	ldr	r2, [pc, #80]	; (8003dac <HAL_GPIO_Init+0x354>)
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	3301      	adds	r3, #1
 8003d62:	61fb      	str	r3, [r7, #28]
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	2b0f      	cmp	r3, #15
 8003d68:	f67f ae86 	bls.w	8003a78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	3724      	adds	r7, #36	; 0x24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	40013800 	.word	0x40013800
 8003d84:	40020000 	.word	0x40020000
 8003d88:	40020400 	.word	0x40020400
 8003d8c:	40020800 	.word	0x40020800
 8003d90:	40020c00 	.word	0x40020c00
 8003d94:	40021000 	.word	0x40021000
 8003d98:	40021400 	.word	0x40021400
 8003d9c:	40021800 	.word	0x40021800
 8003da0:	40021c00 	.word	0x40021c00
 8003da4:	40022000 	.word	0x40022000
 8003da8:	40022400 	.word	0x40022400
 8003dac:	40013c00 	.word	0x40013c00

08003db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	807b      	strh	r3, [r7, #2]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dc0:	787b      	ldrb	r3, [r7, #1]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dc6:	887a      	ldrh	r2, [r7, #2]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003dcc:	e003      	b.n	8003dd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003dce:	887b      	ldrh	r3, [r7, #2]
 8003dd0:	041a      	lsls	r2, r3, #16
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	619a      	str	r2, [r3, #24]
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
	...

08003de4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e07f      	b.n	8003ef6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d106      	bne.n	8003e10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7fd ff14 	bl	8001c38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2224      	movs	r2, #36	; 0x24
 8003e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0201 	bic.w	r2, r2, #1
 8003e26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d107      	bne.n	8003e5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e5a:	609a      	str	r2, [r3, #8]
 8003e5c:	e006      	b.n	8003e6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d104      	bne.n	8003e7e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6859      	ldr	r1, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	4b1d      	ldr	r3, [pc, #116]	; (8003f00 <HAL_I2C_Init+0x11c>)
 8003e8a:	430b      	orrs	r3, r1
 8003e8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69d9      	ldr	r1, [r3, #28]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a1a      	ldr	r2, [r3, #32]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	02008000 	.word	0x02008000

08003f04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	d138      	bne.n	8003f8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e032      	b.n	8003f8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2224      	movs	r2, #36	; 0x24
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0201 	bic.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6819      	ldr	r1, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0201 	orr.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	e000      	b.n	8003f8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f8c:	2302      	movs	r3, #2
  }
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b085      	sub	sp, #20
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	d139      	bne.n	8004024 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e033      	b.n	8004026 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2224      	movs	r2, #36	; 0x24
 8003fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0201 	bic.w	r2, r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003fec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	021b      	lsls	r3, r3, #8
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0201 	orr.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	e000      	b.n	8004026 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004024:	2302      	movs	r3, #2
  }
}
 8004026:	4618      	mov	r0, r3
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
	...

08004034 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e0bf      	b.n	80041c6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fd fe4c 	bl	8001cf8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699a      	ldr	r2, [r3, #24]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004076:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6999      	ldr	r1, [r3, #24]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800408c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6899      	ldr	r1, [r3, #8]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	4b4a      	ldr	r3, [pc, #296]	; (80041d0 <HAL_LTDC_Init+0x19c>)
 80040a8:	400b      	ands	r3, r1
 80040aa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	041b      	lsls	r3, r3, #16
 80040b2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6899      	ldr	r1, [r3, #8]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68d9      	ldr	r1, [r3, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	4b3e      	ldr	r3, [pc, #248]	; (80041d0 <HAL_LTDC_Init+0x19c>)
 80040d6:	400b      	ands	r3, r1
 80040d8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	041b      	lsls	r3, r3, #16
 80040e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68d9      	ldr	r1, [r3, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1a      	ldr	r2, [r3, #32]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6919      	ldr	r1, [r3, #16]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	4b33      	ldr	r3, [pc, #204]	; (80041d0 <HAL_LTDC_Init+0x19c>)
 8004104:	400b      	ands	r3, r1
 8004106:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	041b      	lsls	r3, r3, #16
 800410e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6919      	ldr	r1, [r3, #16]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6959      	ldr	r1, [r3, #20]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4b27      	ldr	r3, [pc, #156]	; (80041d0 <HAL_LTDC_Init+0x19c>)
 8004132:	400b      	ands	r3, r1
 8004134:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413a:	041b      	lsls	r3, r3, #16
 800413c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6959      	ldr	r1, [r3, #20]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800415a:	021b      	lsls	r3, r3, #8
 800415c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004164:	041b      	lsls	r3, r3, #16
 8004166:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004176:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0206 	orr.w	r2, r2, #6
 80041a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0201 	orr.w	r2, r2, #1
 80041b2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	f000f800 	.word	0xf000f800

080041d4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ea:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d023      	beq.n	800423e <HAL_LTDC_IRQHandler+0x6a>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01e      	beq.n	800423e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0204 	bic.w	r2, r2, #4
 800420e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2204      	movs	r2, #4
 8004216:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800421e:	f043 0201 	orr.w	r2, r3, #1
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2204      	movs	r2, #4
 800422c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f86f 	bl	800431c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d023      	beq.n	8004290 <HAL_LTDC_IRQHandler+0xbc>
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d01e      	beq.n	8004290 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0202 	bic.w	r2, r2, #2
 8004260:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2202      	movs	r2, #2
 8004268:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004270:	f043 0202 	orr.w	r2, r3, #2
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2204      	movs	r2, #4
 800427e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f846 	bl	800431c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d01b      	beq.n	80042d2 <HAL_LTDC_IRQHandler+0xfe>
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d016      	beq.n	80042d2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0201 	bic.w	r2, r2, #1
 80042b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2201      	movs	r2, #1
 80042ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f82f 	bl	8004330 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f003 0308 	and.w	r3, r3, #8
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01b      	beq.n	8004314 <HAL_LTDC_IRQHandler+0x140>
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d016      	beq.n	8004314 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0208 	bic.w	r2, r2, #8
 80042f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2208      	movs	r2, #8
 80042fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f818 	bl	8004344 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004314:	bf00      	nop
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004358:	b5b0      	push	{r4, r5, r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <HAL_LTDC_ConfigLayer+0x1a>
 800436e:	2302      	movs	r3, #2
 8004370:	e02c      	b.n	80043cc <HAL_LTDC_ConfigLayer+0x74>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2202      	movs	r2, #2
 800437e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2134      	movs	r1, #52	; 0x34
 8004388:	fb01 f303 	mul.w	r3, r1, r3
 800438c:	4413      	add	r3, r2
 800438e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	4614      	mov	r4, r2
 8004396:	461d      	mov	r5, r3
 8004398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800439a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800439c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800439e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043a4:	682b      	ldr	r3, [r5, #0]
 80043a6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	68b9      	ldr	r1, [r7, #8]
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 f811 	bl	80043d4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2201      	movs	r2, #1
 80043b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bdb0      	pop	{r4, r5, r7, pc}

080043d4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b089      	sub	sp, #36	; 0x24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	0c1b      	lsrs	r3, r3, #16
 80043ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f0:	4413      	add	r3, r2
 80043f2:	041b      	lsls	r3, r3, #16
 80043f4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	01db      	lsls	r3, r3, #7
 8004400:	4413      	add	r3, r2
 8004402:	3384      	adds	r3, #132	; 0x84
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	6812      	ldr	r2, [r2, #0]
 800440a:	4611      	mov	r1, r2
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	01d2      	lsls	r2, r2, #7
 8004410:	440a      	add	r2, r1
 8004412:	3284      	adds	r2, #132	; 0x84
 8004414:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004418:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	0c1b      	lsrs	r3, r3, #16
 8004426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800442a:	4413      	add	r3, r2
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4619      	mov	r1, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	01db      	lsls	r3, r3, #7
 8004438:	440b      	add	r3, r1
 800443a:	3384      	adds	r3, #132	; 0x84
 800443c:	4619      	mov	r1, r3
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	4313      	orrs	r3, r2
 8004442:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004452:	4413      	add	r3, r2
 8004454:	041b      	lsls	r3, r3, #16
 8004456:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	01db      	lsls	r3, r3, #7
 8004462:	4413      	add	r3, r2
 8004464:	3384      	adds	r3, #132	; 0x84
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	4611      	mov	r1, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	01d2      	lsls	r2, r2, #7
 8004472:	440a      	add	r2, r1
 8004474:	3284      	adds	r2, #132	; 0x84
 8004476:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800447a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800448a:	4413      	add	r3, r2
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4619      	mov	r1, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	01db      	lsls	r3, r3, #7
 8004498:	440b      	add	r3, r1
 800449a:	3384      	adds	r3, #132	; 0x84
 800449c:	4619      	mov	r1, r3
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	01db      	lsls	r3, r3, #7
 80044ae:	4413      	add	r3, r2
 80044b0:	3384      	adds	r3, #132	; 0x84
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	6812      	ldr	r2, [r2, #0]
 80044b8:	4611      	mov	r1, r2
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	01d2      	lsls	r2, r2, #7
 80044be:	440a      	add	r2, r1
 80044c0:	3284      	adds	r2, #132	; 0x84
 80044c2:	f023 0307 	bic.w	r3, r3, #7
 80044c6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	01db      	lsls	r3, r3, #7
 80044d2:	4413      	add	r3, r2
 80044d4:	3384      	adds	r3, #132	; 0x84
 80044d6:	461a      	mov	r2, r3
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80044e4:	021b      	lsls	r3, r3, #8
 80044e6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80044ee:	041b      	lsls	r3, r3, #16
 80044f0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	061b      	lsls	r3, r3, #24
 80044f8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	01db      	lsls	r3, r3, #7
 8004504:	4413      	add	r3, r2
 8004506:	3384      	adds	r3, #132	; 0x84
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	01db      	lsls	r3, r3, #7
 8004514:	4413      	add	r3, r2
 8004516:	3384      	adds	r3, #132	; 0x84
 8004518:	461a      	mov	r2, r3
 800451a:	2300      	movs	r3, #0
 800451c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004524:	461a      	mov	r2, r3
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	431a      	orrs	r2, r3
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	431a      	orrs	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4619      	mov	r1, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	01db      	lsls	r3, r3, #7
 8004538:	440b      	add	r3, r1
 800453a:	3384      	adds	r3, #132	; 0x84
 800453c:	4619      	mov	r1, r3
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	461a      	mov	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	01db      	lsls	r3, r3, #7
 800454e:	4413      	add	r3, r2
 8004550:	3384      	adds	r3, #132	; 0x84
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	6812      	ldr	r2, [r2, #0]
 8004558:	4611      	mov	r1, r2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	01d2      	lsls	r2, r2, #7
 800455e:	440a      	add	r2, r1
 8004560:	3284      	adds	r2, #132	; 0x84
 8004562:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004566:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	461a      	mov	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	01db      	lsls	r3, r3, #7
 8004572:	4413      	add	r3, r2
 8004574:	3384      	adds	r3, #132	; 0x84
 8004576:	461a      	mov	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	01db      	lsls	r3, r3, #7
 8004588:	4413      	add	r3, r2
 800458a:	3384      	adds	r3, #132	; 0x84
 800458c:	69da      	ldr	r2, [r3, #28]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4619      	mov	r1, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	01db      	lsls	r3, r3, #7
 8004598:	440b      	add	r3, r1
 800459a:	3384      	adds	r3, #132	; 0x84
 800459c:	4619      	mov	r1, r3
 800459e:	4b58      	ldr	r3, [pc, #352]	; (8004700 <LTDC_SetConfig+0x32c>)
 80045a0:	4013      	ands	r3, r2
 80045a2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	69da      	ldr	r2, [r3, #28]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	68f9      	ldr	r1, [r7, #12]
 80045ae:	6809      	ldr	r1, [r1, #0]
 80045b0:	4608      	mov	r0, r1
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	01c9      	lsls	r1, r1, #7
 80045b6:	4401      	add	r1, r0
 80045b8:	3184      	adds	r1, #132	; 0x84
 80045ba:	4313      	orrs	r3, r2
 80045bc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	01db      	lsls	r3, r3, #7
 80045c8:	4413      	add	r3, r2
 80045ca:	3384      	adds	r3, #132	; 0x84
 80045cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	01db      	lsls	r3, r3, #7
 80045d8:	4413      	add	r3, r2
 80045da:	3384      	adds	r3, #132	; 0x84
 80045dc:	461a      	mov	r2, r3
 80045de:	2300      	movs	r3, #0
 80045e0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	01db      	lsls	r3, r3, #7
 80045ec:	4413      	add	r3, r2
 80045ee:	3384      	adds	r3, #132	; 0x84
 80045f0:	461a      	mov	r2, r3
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d102      	bne.n	8004606 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004600:	2304      	movs	r3, #4
 8004602:	61fb      	str	r3, [r7, #28]
 8004604:	e01b      	b.n	800463e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d102      	bne.n	8004614 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800460e:	2303      	movs	r3, #3
 8004610:	61fb      	str	r3, [r7, #28]
 8004612:	e014      	b.n	800463e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	2b04      	cmp	r3, #4
 800461a:	d00b      	beq.n	8004634 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004620:	2b02      	cmp	r3, #2
 8004622:	d007      	beq.n	8004634 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004628:	2b03      	cmp	r3, #3
 800462a:	d003      	beq.n	8004634 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004630:	2b07      	cmp	r3, #7
 8004632:	d102      	bne.n	800463a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004634:	2302      	movs	r3, #2
 8004636:	61fb      	str	r3, [r7, #28]
 8004638:	e001      	b.n	800463e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800463a:	2301      	movs	r3, #1
 800463c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	01db      	lsls	r3, r3, #7
 8004648:	4413      	add	r3, r2
 800464a:	3384      	adds	r3, #132	; 0x84
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	6812      	ldr	r2, [r2, #0]
 8004652:	4611      	mov	r1, r2
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	01d2      	lsls	r2, r2, #7
 8004658:	440a      	add	r2, r1
 800465a:	3284      	adds	r2, #132	; 0x84
 800465c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004660:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004666:	69fa      	ldr	r2, [r7, #28]
 8004668:	fb02 f303 	mul.w	r3, r2, r3
 800466c:	041a      	lsls	r2, r3, #16
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	6859      	ldr	r1, [r3, #4]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	1acb      	subs	r3, r1, r3
 8004678:	69f9      	ldr	r1, [r7, #28]
 800467a:	fb01 f303 	mul.w	r3, r1, r3
 800467e:	3303      	adds	r3, #3
 8004680:	68f9      	ldr	r1, [r7, #12]
 8004682:	6809      	ldr	r1, [r1, #0]
 8004684:	4608      	mov	r0, r1
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	01c9      	lsls	r1, r1, #7
 800468a:	4401      	add	r1, r0
 800468c:	3184      	adds	r1, #132	; 0x84
 800468e:	4313      	orrs	r3, r2
 8004690:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	461a      	mov	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	01db      	lsls	r3, r3, #7
 800469c:	4413      	add	r3, r2
 800469e:	3384      	adds	r3, #132	; 0x84
 80046a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4619      	mov	r1, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	01db      	lsls	r3, r3, #7
 80046ac:	440b      	add	r3, r1
 80046ae:	3384      	adds	r3, #132	; 0x84
 80046b0:	4619      	mov	r1, r3
 80046b2:	4b14      	ldr	r3, [pc, #80]	; (8004704 <LTDC_SetConfig+0x330>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	461a      	mov	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	01db      	lsls	r3, r3, #7
 80046c2:	4413      	add	r3, r2
 80046c4:	3384      	adds	r3, #132	; 0x84
 80046c6:	461a      	mov	r2, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	01db      	lsls	r3, r3, #7
 80046d8:	4413      	add	r3, r2
 80046da:	3384      	adds	r3, #132	; 0x84
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	4611      	mov	r1, r2
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	01d2      	lsls	r2, r2, #7
 80046e8:	440a      	add	r2, r1
 80046ea:	3284      	adds	r2, #132	; 0x84
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	6013      	str	r3, [r2, #0]
}
 80046f2:	bf00      	nop
 80046f4:	3724      	adds	r7, #36	; 0x24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	fffff8f8 	.word	0xfffff8f8
 8004704:	fffff800 	.word	0xfffff800

08004708 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800470c:	4b05      	ldr	r3, [pc, #20]	; (8004724 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a04      	ldr	r2, [pc, #16]	; (8004724 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004716:	6013      	str	r3, [r2, #0]
}
 8004718:	bf00      	nop
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40007000 	.word	0x40007000

08004728 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800472e:	2300      	movs	r3, #0
 8004730:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004732:	4b23      	ldr	r3, [pc, #140]	; (80047c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	4a22      	ldr	r2, [pc, #136]	; (80047c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473c:	6413      	str	r3, [r2, #64]	; 0x40
 800473e:	4b20      	ldr	r3, [pc, #128]	; (80047c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004746:	603b      	str	r3, [r7, #0]
 8004748:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800474a:	4b1e      	ldr	r3, [pc, #120]	; (80047c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a1d      	ldr	r2, [pc, #116]	; (80047c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004754:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004756:	f7fe f875 	bl	8002844 <HAL_GetTick>
 800475a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800475c:	e009      	b.n	8004772 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800475e:	f7fe f871 	bl	8002844 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800476c:	d901      	bls.n	8004772 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e022      	b.n	80047b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004772:	4b14      	ldr	r3, [pc, #80]	; (80047c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800477a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477e:	d1ee      	bne.n	800475e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004780:	4b10      	ldr	r3, [pc, #64]	; (80047c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a0f      	ldr	r2, [pc, #60]	; (80047c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800478a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800478c:	f7fe f85a 	bl	8002844 <HAL_GetTick>
 8004790:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004792:	e009      	b.n	80047a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004794:	f7fe f856 	bl	8002844 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047a2:	d901      	bls.n	80047a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e007      	b.n	80047b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80047a8:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047b4:	d1ee      	bne.n	8004794 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40023800 	.word	0x40023800
 80047c4:	40007000 	.word	0x40007000

080047c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80047d0:	2300      	movs	r3, #0
 80047d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e291      	b.n	8004d02 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 8087 	beq.w	80048fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047ec:	4b96      	ldr	r3, [pc, #600]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 030c 	and.w	r3, r3, #12
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d00c      	beq.n	8004812 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047f8:	4b93      	ldr	r3, [pc, #588]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 030c 	and.w	r3, r3, #12
 8004800:	2b08      	cmp	r3, #8
 8004802:	d112      	bne.n	800482a <HAL_RCC_OscConfig+0x62>
 8004804:	4b90      	ldr	r3, [pc, #576]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800480c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004810:	d10b      	bne.n	800482a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004812:	4b8d      	ldr	r3, [pc, #564]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d06c      	beq.n	80048f8 <HAL_RCC_OscConfig+0x130>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d168      	bne.n	80048f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e26b      	b.n	8004d02 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004832:	d106      	bne.n	8004842 <HAL_RCC_OscConfig+0x7a>
 8004834:	4b84      	ldr	r3, [pc, #528]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a83      	ldr	r2, [pc, #524]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 800483a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	e02e      	b.n	80048a0 <HAL_RCC_OscConfig+0xd8>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10c      	bne.n	8004864 <HAL_RCC_OscConfig+0x9c>
 800484a:	4b7f      	ldr	r3, [pc, #508]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a7e      	ldr	r2, [pc, #504]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 8004850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	4b7c      	ldr	r3, [pc, #496]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a7b      	ldr	r2, [pc, #492]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 800485c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	e01d      	b.n	80048a0 <HAL_RCC_OscConfig+0xd8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800486c:	d10c      	bne.n	8004888 <HAL_RCC_OscConfig+0xc0>
 800486e:	4b76      	ldr	r3, [pc, #472]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a75      	ldr	r2, [pc, #468]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 8004874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	4b73      	ldr	r3, [pc, #460]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a72      	ldr	r2, [pc, #456]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 8004880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	e00b      	b.n	80048a0 <HAL_RCC_OscConfig+0xd8>
 8004888:	4b6f      	ldr	r3, [pc, #444]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a6e      	ldr	r2, [pc, #440]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 800488e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004892:	6013      	str	r3, [r2, #0]
 8004894:	4b6c      	ldr	r3, [pc, #432]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a6b      	ldr	r2, [pc, #428]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 800489a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800489e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d013      	beq.n	80048d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a8:	f7fd ffcc 	bl	8002844 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048b0:	f7fd ffc8 	bl	8002844 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b64      	cmp	r3, #100	; 0x64
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e21f      	b.n	8004d02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c2:	4b61      	ldr	r3, [pc, #388]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0f0      	beq.n	80048b0 <HAL_RCC_OscConfig+0xe8>
 80048ce:	e014      	b.n	80048fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d0:	f7fd ffb8 	bl	8002844 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048d8:	f7fd ffb4 	bl	8002844 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b64      	cmp	r3, #100	; 0x64
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e20b      	b.n	8004d02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ea:	4b57      	ldr	r3, [pc, #348]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0x110>
 80048f6:	e000      	b.n	80048fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d069      	beq.n	80049da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004906:	4b50      	ldr	r3, [pc, #320]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 030c 	and.w	r3, r3, #12
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004912:	4b4d      	ldr	r3, [pc, #308]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 030c 	and.w	r3, r3, #12
 800491a:	2b08      	cmp	r3, #8
 800491c:	d11c      	bne.n	8004958 <HAL_RCC_OscConfig+0x190>
 800491e:	4b4a      	ldr	r3, [pc, #296]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d116      	bne.n	8004958 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800492a:	4b47      	ldr	r3, [pc, #284]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d005      	beq.n	8004942 <HAL_RCC_OscConfig+0x17a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d001      	beq.n	8004942 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e1df      	b.n	8004d02 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004942:	4b41      	ldr	r3, [pc, #260]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	493d      	ldr	r1, [pc, #244]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 8004952:	4313      	orrs	r3, r2
 8004954:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004956:	e040      	b.n	80049da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d023      	beq.n	80049a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004960:	4b39      	ldr	r3, [pc, #228]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a38      	ldr	r2, [pc, #224]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 8004966:	f043 0301 	orr.w	r3, r3, #1
 800496a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496c:	f7fd ff6a 	bl	8002844 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004974:	f7fd ff66 	bl	8002844 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e1bd      	b.n	8004d02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004986:	4b30      	ldr	r3, [pc, #192]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0f0      	beq.n	8004974 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004992:	4b2d      	ldr	r3, [pc, #180]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	4929      	ldr	r1, [pc, #164]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	600b      	str	r3, [r1, #0]
 80049a6:	e018      	b.n	80049da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049a8:	4b27      	ldr	r3, [pc, #156]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a26      	ldr	r2, [pc, #152]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b4:	f7fd ff46 	bl	8002844 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049bc:	f7fd ff42 	bl	8002844 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e199      	b.n	8004d02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ce:	4b1e      	ldr	r3, [pc, #120]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d038      	beq.n	8004a58 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d019      	beq.n	8004a22 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ee:	4b16      	ldr	r3, [pc, #88]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 80049f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f2:	4a15      	ldr	r2, [pc, #84]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fa:	f7fd ff23 	bl	8002844 <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a02:	f7fd ff1f 	bl	8002844 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e176      	b.n	8004d02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a14:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 8004a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0f0      	beq.n	8004a02 <HAL_RCC_OscConfig+0x23a>
 8004a20:	e01a      	b.n	8004a58 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a22:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 8004a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a26:	4a08      	ldr	r2, [pc, #32]	; (8004a48 <HAL_RCC_OscConfig+0x280>)
 8004a28:	f023 0301 	bic.w	r3, r3, #1
 8004a2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a2e:	f7fd ff09 	bl	8002844 <HAL_GetTick>
 8004a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a34:	e00a      	b.n	8004a4c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a36:	f7fd ff05 	bl	8002844 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d903      	bls.n	8004a4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e15c      	b.n	8004d02 <HAL_RCC_OscConfig+0x53a>
 8004a48:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a4c:	4b91      	ldr	r3, [pc, #580]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1ee      	bne.n	8004a36 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 80a4 	beq.w	8004bae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a66:	4b8b      	ldr	r3, [pc, #556]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10d      	bne.n	8004a8e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a72:	4b88      	ldr	r3, [pc, #544]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	4a87      	ldr	r2, [pc, #540]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a7e:	4b85      	ldr	r3, [pc, #532]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a86:	60bb      	str	r3, [r7, #8]
 8004a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a8e:	4b82      	ldr	r3, [pc, #520]	; (8004c98 <HAL_RCC_OscConfig+0x4d0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d118      	bne.n	8004acc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004a9a:	4b7f      	ldr	r3, [pc, #508]	; (8004c98 <HAL_RCC_OscConfig+0x4d0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a7e      	ldr	r2, [pc, #504]	; (8004c98 <HAL_RCC_OscConfig+0x4d0>)
 8004aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aa6:	f7fd fecd 	bl	8002844 <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aac:	e008      	b.n	8004ac0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aae:	f7fd fec9 	bl	8002844 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b64      	cmp	r3, #100	; 0x64
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e120      	b.n	8004d02 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ac0:	4b75      	ldr	r3, [pc, #468]	; (8004c98 <HAL_RCC_OscConfig+0x4d0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0f0      	beq.n	8004aae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d106      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x31a>
 8004ad4:	4b6f      	ldr	r3, [pc, #444]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad8:	4a6e      	ldr	r2, [pc, #440]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004ada:	f043 0301 	orr.w	r3, r3, #1
 8004ade:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae0:	e02d      	b.n	8004b3e <HAL_RCC_OscConfig+0x376>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10c      	bne.n	8004b04 <HAL_RCC_OscConfig+0x33c>
 8004aea:	4b6a      	ldr	r3, [pc, #424]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aee:	4a69      	ldr	r2, [pc, #420]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004af0:	f023 0301 	bic.w	r3, r3, #1
 8004af4:	6713      	str	r3, [r2, #112]	; 0x70
 8004af6:	4b67      	ldr	r3, [pc, #412]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afa:	4a66      	ldr	r2, [pc, #408]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004afc:	f023 0304 	bic.w	r3, r3, #4
 8004b00:	6713      	str	r3, [r2, #112]	; 0x70
 8004b02:	e01c      	b.n	8004b3e <HAL_RCC_OscConfig+0x376>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	2b05      	cmp	r3, #5
 8004b0a:	d10c      	bne.n	8004b26 <HAL_RCC_OscConfig+0x35e>
 8004b0c:	4b61      	ldr	r3, [pc, #388]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b10:	4a60      	ldr	r2, [pc, #384]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004b12:	f043 0304 	orr.w	r3, r3, #4
 8004b16:	6713      	str	r3, [r2, #112]	; 0x70
 8004b18:	4b5e      	ldr	r3, [pc, #376]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1c:	4a5d      	ldr	r2, [pc, #372]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004b1e:	f043 0301 	orr.w	r3, r3, #1
 8004b22:	6713      	str	r3, [r2, #112]	; 0x70
 8004b24:	e00b      	b.n	8004b3e <HAL_RCC_OscConfig+0x376>
 8004b26:	4b5b      	ldr	r3, [pc, #364]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2a:	4a5a      	ldr	r2, [pc, #360]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004b2c:	f023 0301 	bic.w	r3, r3, #1
 8004b30:	6713      	str	r3, [r2, #112]	; 0x70
 8004b32:	4b58      	ldr	r3, [pc, #352]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b36:	4a57      	ldr	r2, [pc, #348]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004b38:	f023 0304 	bic.w	r3, r3, #4
 8004b3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d015      	beq.n	8004b72 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b46:	f7fd fe7d 	bl	8002844 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b4c:	e00a      	b.n	8004b64 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b4e:	f7fd fe79 	bl	8002844 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e0ce      	b.n	8004d02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b64:	4b4b      	ldr	r3, [pc, #300]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0ee      	beq.n	8004b4e <HAL_RCC_OscConfig+0x386>
 8004b70:	e014      	b.n	8004b9c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b72:	f7fd fe67 	bl	8002844 <HAL_GetTick>
 8004b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b78:	e00a      	b.n	8004b90 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b7a:	f7fd fe63 	bl	8002844 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e0b8      	b.n	8004d02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b90:	4b40      	ldr	r3, [pc, #256]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1ee      	bne.n	8004b7a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b9c:	7dfb      	ldrb	r3, [r7, #23]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d105      	bne.n	8004bae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ba2:	4b3c      	ldr	r3, [pc, #240]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	4a3b      	ldr	r2, [pc, #236]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 80a4 	beq.w	8004d00 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bb8:	4b36      	ldr	r3, [pc, #216]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 030c 	and.w	r3, r3, #12
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d06b      	beq.n	8004c9c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d149      	bne.n	8004c60 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bcc:	4b31      	ldr	r3, [pc, #196]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a30      	ldr	r2, [pc, #192]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004bd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd8:	f7fd fe34 	bl	8002844 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be0:	f7fd fe30 	bl	8002844 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e087      	b.n	8004d02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf2:	4b28      	ldr	r3, [pc, #160]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f0      	bne.n	8004be0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69da      	ldr	r2, [r3, #28]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	019b      	lsls	r3, r3, #6
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c14:	085b      	lsrs	r3, r3, #1
 8004c16:	3b01      	subs	r3, #1
 8004c18:	041b      	lsls	r3, r3, #16
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	061b      	lsls	r3, r3, #24
 8004c22:	4313      	orrs	r3, r2
 8004c24:	4a1b      	ldr	r2, [pc, #108]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004c26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c2a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c2c:	4b19      	ldr	r3, [pc, #100]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a18      	ldr	r2, [pc, #96]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c38:	f7fd fe04 	bl	8002844 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c40:	f7fd fe00 	bl	8002844 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e057      	b.n	8004d02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c52:	4b10      	ldr	r3, [pc, #64]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0f0      	beq.n	8004c40 <HAL_RCC_OscConfig+0x478>
 8004c5e:	e04f      	b.n	8004d00 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c60:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a0b      	ldr	r2, [pc, #44]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004c66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6c:	f7fd fdea 	bl	8002844 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c74:	f7fd fde6 	bl	8002844 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e03d      	b.n	8004d02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c86:	4b03      	ldr	r3, [pc, #12]	; (8004c94 <HAL_RCC_OscConfig+0x4cc>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f0      	bne.n	8004c74 <HAL_RCC_OscConfig+0x4ac>
 8004c92:	e035      	b.n	8004d00 <HAL_RCC_OscConfig+0x538>
 8004c94:	40023800 	.word	0x40023800
 8004c98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004c9c:	4b1b      	ldr	r3, [pc, #108]	; (8004d0c <HAL_RCC_OscConfig+0x544>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d028      	beq.n	8004cfc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d121      	bne.n	8004cfc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d11a      	bne.n	8004cfc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ccc:	4013      	ands	r3, r2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cd2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d111      	bne.n	8004cfc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce2:	085b      	lsrs	r3, r3, #1
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d107      	bne.n	8004cfc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d001      	beq.n	8004d00 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e000      	b.n	8004d02 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40023800 	.word	0x40023800

08004d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e0d0      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d28:	4b6a      	ldr	r3, [pc, #424]	; (8004ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 030f 	and.w	r3, r3, #15
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d910      	bls.n	8004d58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d36:	4b67      	ldr	r3, [pc, #412]	; (8004ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f023 020f 	bic.w	r2, r3, #15
 8004d3e:	4965      	ldr	r1, [pc, #404]	; (8004ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d46:	4b63      	ldr	r3, [pc, #396]	; (8004ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d001      	beq.n	8004d58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e0b8      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d020      	beq.n	8004da6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d005      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d70:	4b59      	ldr	r3, [pc, #356]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	4a58      	ldr	r2, [pc, #352]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0308 	and.w	r3, r3, #8
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d88:	4b53      	ldr	r3, [pc, #332]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	4a52      	ldr	r2, [pc, #328]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d94:	4b50      	ldr	r3, [pc, #320]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	494d      	ldr	r1, [pc, #308]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d040      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d107      	bne.n	8004dca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dba:	4b47      	ldr	r3, [pc, #284]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d115      	bne.n	8004df2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e07f      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d107      	bne.n	8004de2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dd2:	4b41      	ldr	r3, [pc, #260]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d109      	bne.n	8004df2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e073      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de2:	4b3d      	ldr	r3, [pc, #244]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e06b      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004df2:	4b39      	ldr	r3, [pc, #228]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f023 0203 	bic.w	r2, r3, #3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	4936      	ldr	r1, [pc, #216]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e04:	f7fd fd1e 	bl	8002844 <HAL_GetTick>
 8004e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0a:	e00a      	b.n	8004e22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e0c:	f7fd fd1a 	bl	8002844 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e053      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e22:	4b2d      	ldr	r3, [pc, #180]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 020c 	and.w	r2, r3, #12
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d1eb      	bne.n	8004e0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e34:	4b27      	ldr	r3, [pc, #156]	; (8004ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 030f 	and.w	r3, r3, #15
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d210      	bcs.n	8004e64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e42:	4b24      	ldr	r3, [pc, #144]	; (8004ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f023 020f 	bic.w	r2, r3, #15
 8004e4a:	4922      	ldr	r1, [pc, #136]	; (8004ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e52:	4b20      	ldr	r3, [pc, #128]	; (8004ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d001      	beq.n	8004e64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e032      	b.n	8004eca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d008      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e70:	4b19      	ldr	r3, [pc, #100]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	4916      	ldr	r1, [pc, #88]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d009      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e8e:	4b12      	ldr	r3, [pc, #72]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	490e      	ldr	r1, [pc, #56]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ea2:	f000 f821 	bl	8004ee8 <HAL_RCC_GetSysClockFreq>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	4b0b      	ldr	r3, [pc, #44]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	091b      	lsrs	r3, r3, #4
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	490a      	ldr	r1, [pc, #40]	; (8004edc <HAL_RCC_ClockConfig+0x1cc>)
 8004eb4:	5ccb      	ldrb	r3, [r1, r3]
 8004eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eba:	4a09      	ldr	r2, [pc, #36]	; (8004ee0 <HAL_RCC_ClockConfig+0x1d0>)
 8004ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ebe:	4b09      	ldr	r3, [pc, #36]	; (8004ee4 <HAL_RCC_ClockConfig+0x1d4>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fd fbb6 	bl	8002634 <HAL_InitTick>

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40023c00 	.word	0x40023c00
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	080085e8 	.word	0x080085e8
 8004ee0:	20000000 	.word	0x20000000
 8004ee4:	20000004 	.word	0x20000004

08004ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eec:	b090      	sub	sp, #64	; 0x40
 8004eee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ef8:	2300      	movs	r3, #0
 8004efa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004efc:	2300      	movs	r3, #0
 8004efe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f00:	4b59      	ldr	r3, [pc, #356]	; (8005068 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 030c 	and.w	r3, r3, #12
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d00d      	beq.n	8004f28 <HAL_RCC_GetSysClockFreq+0x40>
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	f200 80a1 	bhi.w	8005054 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <HAL_RCC_GetSysClockFreq+0x34>
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d003      	beq.n	8004f22 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f1a:	e09b      	b.n	8005054 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f1c:	4b53      	ldr	r3, [pc, #332]	; (800506c <HAL_RCC_GetSysClockFreq+0x184>)
 8004f1e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f20:	e09b      	b.n	800505a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f22:	4b53      	ldr	r3, [pc, #332]	; (8005070 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f26:	e098      	b.n	800505a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f28:	4b4f      	ldr	r3, [pc, #316]	; (8005068 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f30:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004f32:	4b4d      	ldr	r3, [pc, #308]	; (8005068 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d028      	beq.n	8004f90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f3e:	4b4a      	ldr	r3, [pc, #296]	; (8005068 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	099b      	lsrs	r3, r3, #6
 8004f44:	2200      	movs	r2, #0
 8004f46:	623b      	str	r3, [r7, #32]
 8004f48:	627a      	str	r2, [r7, #36]	; 0x24
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f50:	2100      	movs	r1, #0
 8004f52:	4b47      	ldr	r3, [pc, #284]	; (8005070 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f54:	fb03 f201 	mul.w	r2, r3, r1
 8004f58:	2300      	movs	r3, #0
 8004f5a:	fb00 f303 	mul.w	r3, r0, r3
 8004f5e:	4413      	add	r3, r2
 8004f60:	4a43      	ldr	r2, [pc, #268]	; (8005070 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f62:	fba0 1202 	umull	r1, r2, r0, r2
 8004f66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f68:	460a      	mov	r2, r1
 8004f6a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f6e:	4413      	add	r3, r2
 8004f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f74:	2200      	movs	r2, #0
 8004f76:	61bb      	str	r3, [r7, #24]
 8004f78:	61fa      	str	r2, [r7, #28]
 8004f7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004f82:	f7fb f941 	bl	8000208 <__aeabi_uldivmod>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f8e:	e053      	b.n	8005038 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f90:	4b35      	ldr	r3, [pc, #212]	; (8005068 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	099b      	lsrs	r3, r3, #6
 8004f96:	2200      	movs	r2, #0
 8004f98:	613b      	str	r3, [r7, #16]
 8004f9a:	617a      	str	r2, [r7, #20]
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004fa2:	f04f 0b00 	mov.w	fp, #0
 8004fa6:	4652      	mov	r2, sl
 8004fa8:	465b      	mov	r3, fp
 8004faa:	f04f 0000 	mov.w	r0, #0
 8004fae:	f04f 0100 	mov.w	r1, #0
 8004fb2:	0159      	lsls	r1, r3, #5
 8004fb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fb8:	0150      	lsls	r0, r2, #5
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	ebb2 080a 	subs.w	r8, r2, sl
 8004fc2:	eb63 090b 	sbc.w	r9, r3, fp
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004fd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004fd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004fda:	ebb2 0408 	subs.w	r4, r2, r8
 8004fde:	eb63 0509 	sbc.w	r5, r3, r9
 8004fe2:	f04f 0200 	mov.w	r2, #0
 8004fe6:	f04f 0300 	mov.w	r3, #0
 8004fea:	00eb      	lsls	r3, r5, #3
 8004fec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ff0:	00e2      	lsls	r2, r4, #3
 8004ff2:	4614      	mov	r4, r2
 8004ff4:	461d      	mov	r5, r3
 8004ff6:	eb14 030a 	adds.w	r3, r4, sl
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	eb45 030b 	adc.w	r3, r5, fp
 8005000:	607b      	str	r3, [r7, #4]
 8005002:	f04f 0200 	mov.w	r2, #0
 8005006:	f04f 0300 	mov.w	r3, #0
 800500a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800500e:	4629      	mov	r1, r5
 8005010:	028b      	lsls	r3, r1, #10
 8005012:	4621      	mov	r1, r4
 8005014:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005018:	4621      	mov	r1, r4
 800501a:	028a      	lsls	r2, r1, #10
 800501c:	4610      	mov	r0, r2
 800501e:	4619      	mov	r1, r3
 8005020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005022:	2200      	movs	r2, #0
 8005024:	60bb      	str	r3, [r7, #8]
 8005026:	60fa      	str	r2, [r7, #12]
 8005028:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800502c:	f7fb f8ec 	bl	8000208 <__aeabi_uldivmod>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4613      	mov	r3, r2
 8005036:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005038:	4b0b      	ldr	r3, [pc, #44]	; (8005068 <HAL_RCC_GetSysClockFreq+0x180>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	0c1b      	lsrs	r3, r3, #16
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	3301      	adds	r3, #1
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8005048:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005050:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005052:	e002      	b.n	800505a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005054:	4b05      	ldr	r3, [pc, #20]	; (800506c <HAL_RCC_GetSysClockFreq+0x184>)
 8005056:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005058:	bf00      	nop
    }
  }
  return sysclockfreq;
 800505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800505c:	4618      	mov	r0, r3
 800505e:	3740      	adds	r7, #64	; 0x40
 8005060:	46bd      	mov	sp, r7
 8005062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005066:	bf00      	nop
 8005068:	40023800 	.word	0x40023800
 800506c:	00f42400 	.word	0x00f42400
 8005070:	017d7840 	.word	0x017d7840

08005074 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005078:	4b03      	ldr	r3, [pc, #12]	; (8005088 <HAL_RCC_GetHCLKFreq+0x14>)
 800507a:	681b      	ldr	r3, [r3, #0]
}
 800507c:	4618      	mov	r0, r3
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	20000000 	.word	0x20000000

0800508c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005090:	f7ff fff0 	bl	8005074 <HAL_RCC_GetHCLKFreq>
 8005094:	4602      	mov	r2, r0
 8005096:	4b05      	ldr	r3, [pc, #20]	; (80050ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	0a9b      	lsrs	r3, r3, #10
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	4903      	ldr	r1, [pc, #12]	; (80050b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050a2:	5ccb      	ldrb	r3, [r1, r3]
 80050a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40023800 	.word	0x40023800
 80050b0:	080085f8 	.word	0x080085f8

080050b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050b8:	f7ff ffdc 	bl	8005074 <HAL_RCC_GetHCLKFreq>
 80050bc:	4602      	mov	r2, r0
 80050be:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	0b5b      	lsrs	r3, r3, #13
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	4903      	ldr	r1, [pc, #12]	; (80050d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ca:	5ccb      	ldrb	r3, [r1, r3]
 80050cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40023800 	.word	0x40023800
 80050d8:	080085f8 	.word	0x080085f8

080050dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	220f      	movs	r2, #15
 80050ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80050ec:	4b12      	ldr	r3, [pc, #72]	; (8005138 <HAL_RCC_GetClockConfig+0x5c>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f003 0203 	and.w	r2, r3, #3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80050f8:	4b0f      	ldr	r3, [pc, #60]	; (8005138 <HAL_RCC_GetClockConfig+0x5c>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005104:	4b0c      	ldr	r3, [pc, #48]	; (8005138 <HAL_RCC_GetClockConfig+0x5c>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005110:	4b09      	ldr	r3, [pc, #36]	; (8005138 <HAL_RCC_GetClockConfig+0x5c>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	08db      	lsrs	r3, r3, #3
 8005116:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800511e:	4b07      	ldr	r3, [pc, #28]	; (800513c <HAL_RCC_GetClockConfig+0x60>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 020f 	and.w	r2, r3, #15
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	601a      	str	r2, [r3, #0]
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40023800 	.word	0x40023800
 800513c:	40023c00 	.word	0x40023c00

08005140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005148:	2300      	movs	r3, #0
 800514a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800514c:	2300      	movs	r3, #0
 800514e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005150:	2300      	movs	r3, #0
 8005152:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005154:	2300      	movs	r3, #0
 8005156:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005158:	2300      	movs	r3, #0
 800515a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	d012      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005168:	4b69      	ldr	r3, [pc, #420]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	4a68      	ldr	r2, [pc, #416]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800516e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005172:	6093      	str	r3, [r2, #8]
 8005174:	4b66      	ldr	r3, [pc, #408]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517c:	4964      	ldr	r1, [pc, #400]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800517e:	4313      	orrs	r3, r2
 8005180:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800518a:	2301      	movs	r3, #1
 800518c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d017      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800519a:	4b5d      	ldr	r3, [pc, #372]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800519c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a8:	4959      	ldr	r1, [pc, #356]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051b8:	d101      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80051ba:	2301      	movs	r3, #1
 80051bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80051c6:	2301      	movs	r3, #1
 80051c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d017      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051d6:	4b4e      	ldr	r3, [pc, #312]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e4:	494a      	ldr	r1, [pc, #296]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051f4:	d101      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80051f6:	2301      	movs	r3, #1
 80051f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005202:	2301      	movs	r3, #1
 8005204:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005212:	2301      	movs	r3, #1
 8005214:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0320 	and.w	r3, r3, #32
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 808b 	beq.w	800533a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005224:	4b3a      	ldr	r3, [pc, #232]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005228:	4a39      	ldr	r2, [pc, #228]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800522a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800522e:	6413      	str	r3, [r2, #64]	; 0x40
 8005230:	4b37      	ldr	r3, [pc, #220]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005238:	60bb      	str	r3, [r7, #8]
 800523a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800523c:	4b35      	ldr	r3, [pc, #212]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a34      	ldr	r2, [pc, #208]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005246:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005248:	f7fd fafc 	bl	8002844 <HAL_GetTick>
 800524c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005250:	f7fd faf8 	bl	8002844 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b64      	cmp	r3, #100	; 0x64
 800525c:	d901      	bls.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e357      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005262:	4b2c      	ldr	r3, [pc, #176]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0f0      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800526e:	4b28      	ldr	r3, [pc, #160]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005276:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d035      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	429a      	cmp	r2, r3
 800528a:	d02e      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800528c:	4b20      	ldr	r3, [pc, #128]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800528e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005294:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005296:	4b1e      	ldr	r3, [pc, #120]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529a:	4a1d      	ldr	r2, [pc, #116]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800529c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052a2:	4b1b      	ldr	r3, [pc, #108]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a6:	4a1a      	ldr	r2, [pc, #104]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80052ae:	4a18      	ldr	r2, [pc, #96]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052b4:	4b16      	ldr	r3, [pc, #88]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d114      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c0:	f7fd fac0 	bl	8002844 <HAL_GetTick>
 80052c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c6:	e00a      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052c8:	f7fd fabc 	bl	8002844 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d901      	bls.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e319      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052de:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0ee      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052f6:	d111      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80052f8:	4b05      	ldr	r3, [pc, #20]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005304:	4b04      	ldr	r3, [pc, #16]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005306:	400b      	ands	r3, r1
 8005308:	4901      	ldr	r1, [pc, #4]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800530a:	4313      	orrs	r3, r2
 800530c:	608b      	str	r3, [r1, #8]
 800530e:	e00b      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005310:	40023800 	.word	0x40023800
 8005314:	40007000 	.word	0x40007000
 8005318:	0ffffcff 	.word	0x0ffffcff
 800531c:	4baa      	ldr	r3, [pc, #680]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	4aa9      	ldr	r2, [pc, #676]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005322:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005326:	6093      	str	r3, [r2, #8]
 8005328:	4ba7      	ldr	r3, [pc, #668]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800532a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005334:	49a4      	ldr	r1, [pc, #656]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005336:	4313      	orrs	r3, r2
 8005338:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0310 	and.w	r3, r3, #16
 8005342:	2b00      	cmp	r3, #0
 8005344:	d010      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005346:	4ba0      	ldr	r3, [pc, #640]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800534c:	4a9e      	ldr	r2, [pc, #632]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800534e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005352:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005356:	4b9c      	ldr	r3, [pc, #624]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005358:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005360:	4999      	ldr	r1, [pc, #612]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005362:	4313      	orrs	r3, r2
 8005364:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00a      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005374:	4b94      	ldr	r3, [pc, #592]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800537a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005382:	4991      	ldr	r1, [pc, #580]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005396:	4b8c      	ldr	r3, [pc, #560]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053a4:	4988      	ldr	r1, [pc, #544]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00a      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053b8:	4b83      	ldr	r3, [pc, #524]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053c6:	4980      	ldr	r1, [pc, #512]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053da:	4b7b      	ldr	r3, [pc, #492]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e8:	4977      	ldr	r1, [pc, #476]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053fc:	4b72      	ldr	r3, [pc, #456]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005402:	f023 0203 	bic.w	r2, r3, #3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540a:	496f      	ldr	r1, [pc, #444]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800541e:	4b6a      	ldr	r3, [pc, #424]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005424:	f023 020c 	bic.w	r2, r3, #12
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800542c:	4966      	ldr	r1, [pc, #408]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005440:	4b61      	ldr	r3, [pc, #388]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005446:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800544e:	495e      	ldr	r1, [pc, #376]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005462:	4b59      	ldr	r3, [pc, #356]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005468:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005470:	4955      	ldr	r1, [pc, #340]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005484:	4b50      	ldr	r3, [pc, #320]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800548a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005492:	494d      	ldr	r1, [pc, #308]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80054a6:	4b48      	ldr	r3, [pc, #288]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b4:	4944      	ldr	r1, [pc, #272]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00a      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80054c8:	4b3f      	ldr	r3, [pc, #252]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d6:	493c      	ldr	r1, [pc, #240]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80054ea:	4b37      	ldr	r3, [pc, #220]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f8:	4933      	ldr	r1, [pc, #204]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00a      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800550c:	4b2e      	ldr	r3, [pc, #184]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800550e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005512:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800551a:	492b      	ldr	r1, [pc, #172]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800551c:	4313      	orrs	r3, r2
 800551e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d011      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800552e:	4b26      	ldr	r3, [pc, #152]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005534:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800553c:	4922      	ldr	r1, [pc, #136]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800553e:	4313      	orrs	r3, r2
 8005540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005548:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800554c:	d101      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800554e:	2301      	movs	r3, #1
 8005550:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800555e:	2301      	movs	r3, #1
 8005560:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800556e:	4b16      	ldr	r3, [pc, #88]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005574:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800557c:	4912      	ldr	r1, [pc, #72]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800557e:	4313      	orrs	r3, r2
 8005580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00b      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005590:	4b0d      	ldr	r3, [pc, #52]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005596:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055a0:	4909      	ldr	r1, [pc, #36]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d006      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 80d9 	beq.w	800576e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055bc:	4b02      	ldr	r3, [pc, #8]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a01      	ldr	r2, [pc, #4]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055c6:	e001      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80055c8:	40023800 	.word	0x40023800
 80055cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ce:	f7fd f939 	bl	8002844 <HAL_GetTick>
 80055d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055d4:	e008      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055d6:	f7fd f935 	bl	8002844 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b64      	cmp	r3, #100	; 0x64
 80055e2:	d901      	bls.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e194      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055e8:	4b6c      	ldr	r3, [pc, #432]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1f0      	bne.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d021      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005604:	2b00      	cmp	r3, #0
 8005606:	d11d      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005608:	4b64      	ldr	r3, [pc, #400]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800560a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800560e:	0c1b      	lsrs	r3, r3, #16
 8005610:	f003 0303 	and.w	r3, r3, #3
 8005614:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005616:	4b61      	ldr	r3, [pc, #388]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800561c:	0e1b      	lsrs	r3, r3, #24
 800561e:	f003 030f 	and.w	r3, r3, #15
 8005622:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	019a      	lsls	r2, r3, #6
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	041b      	lsls	r3, r3, #16
 800562e:	431a      	orrs	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	061b      	lsls	r3, r3, #24
 8005634:	431a      	orrs	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	071b      	lsls	r3, r3, #28
 800563c:	4957      	ldr	r1, [pc, #348]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800563e:	4313      	orrs	r3, r2
 8005640:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d004      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005658:	d00a      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005662:	2b00      	cmp	r3, #0
 8005664:	d02e      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800566e:	d129      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005670:	4b4a      	ldr	r3, [pc, #296]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005676:	0c1b      	lsrs	r3, r3, #16
 8005678:	f003 0303 	and.w	r3, r3, #3
 800567c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800567e:	4b47      	ldr	r3, [pc, #284]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005684:	0f1b      	lsrs	r3, r3, #28
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	019a      	lsls	r2, r3, #6
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	041b      	lsls	r3, r3, #16
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	061b      	lsls	r3, r3, #24
 800569e:	431a      	orrs	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	071b      	lsls	r3, r3, #28
 80056a4:	493d      	ldr	r1, [pc, #244]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056ac:	4b3b      	ldr	r3, [pc, #236]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056b2:	f023 021f 	bic.w	r2, r3, #31
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	3b01      	subs	r3, #1
 80056bc:	4937      	ldr	r1, [pc, #220]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01d      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056d0:	4b32      	ldr	r3, [pc, #200]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056d6:	0e1b      	lsrs	r3, r3, #24
 80056d8:	f003 030f 	and.w	r3, r3, #15
 80056dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056de:	4b2f      	ldr	r3, [pc, #188]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056e4:	0f1b      	lsrs	r3, r3, #28
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	019a      	lsls	r2, r3, #6
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	041b      	lsls	r3, r3, #16
 80056f8:	431a      	orrs	r2, r3
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	061b      	lsls	r3, r3, #24
 80056fe:	431a      	orrs	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	071b      	lsls	r3, r3, #28
 8005704:	4925      	ldr	r1, [pc, #148]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005706:	4313      	orrs	r3, r2
 8005708:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d011      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	019a      	lsls	r2, r3, #6
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	041b      	lsls	r3, r3, #16
 8005724:	431a      	orrs	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	061b      	lsls	r3, r3, #24
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	071b      	lsls	r3, r3, #28
 8005734:	4919      	ldr	r1, [pc, #100]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005736:	4313      	orrs	r3, r2
 8005738:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800573c:	4b17      	ldr	r3, [pc, #92]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a16      	ldr	r2, [pc, #88]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005742:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005746:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005748:	f7fd f87c 	bl	8002844 <HAL_GetTick>
 800574c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800574e:	e008      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005750:	f7fd f878 	bl	8002844 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b64      	cmp	r3, #100	; 0x64
 800575c:	d901      	bls.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e0d7      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005762:	4b0e      	ldr	r3, [pc, #56]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d0f0      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	2b01      	cmp	r3, #1
 8005772:	f040 80cd 	bne.w	8005910 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005776:	4b09      	ldr	r3, [pc, #36]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a08      	ldr	r2, [pc, #32]	; (800579c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800577c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005780:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005782:	f7fd f85f 	bl	8002844 <HAL_GetTick>
 8005786:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005788:	e00a      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800578a:	f7fd f85b 	bl	8002844 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	2b64      	cmp	r3, #100	; 0x64
 8005796:	d903      	bls.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e0ba      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800579c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057a0:	4b5e      	ldr	r3, [pc, #376]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057ac:	d0ed      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d009      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d02e      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d12a      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057d6:	4b51      	ldr	r3, [pc, #324]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057dc:	0c1b      	lsrs	r3, r3, #16
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057e4:	4b4d      	ldr	r3, [pc, #308]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ea:	0f1b      	lsrs	r3, r3, #28
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	019a      	lsls	r2, r3, #6
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	041b      	lsls	r3, r3, #16
 80057fc:	431a      	orrs	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	061b      	lsls	r3, r3, #24
 8005804:	431a      	orrs	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	071b      	lsls	r3, r3, #28
 800580a:	4944      	ldr	r1, [pc, #272]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800580c:	4313      	orrs	r3, r2
 800580e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005812:	4b42      	ldr	r3, [pc, #264]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005818:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005820:	3b01      	subs	r3, #1
 8005822:	021b      	lsls	r3, r3, #8
 8005824:	493d      	ldr	r1, [pc, #244]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d022      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800583c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005840:	d11d      	bne.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005842:	4b36      	ldr	r3, [pc, #216]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005848:	0e1b      	lsrs	r3, r3, #24
 800584a:	f003 030f 	and.w	r3, r3, #15
 800584e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005850:	4b32      	ldr	r3, [pc, #200]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005856:	0f1b      	lsrs	r3, r3, #28
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	019a      	lsls	r2, r3, #6
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	041b      	lsls	r3, r3, #16
 800586a:	431a      	orrs	r2, r3
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	061b      	lsls	r3, r3, #24
 8005870:	431a      	orrs	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	071b      	lsls	r3, r3, #28
 8005876:	4929      	ldr	r1, [pc, #164]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0308 	and.w	r3, r3, #8
 8005886:	2b00      	cmp	r3, #0
 8005888:	d028      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800588a:	4b24      	ldr	r3, [pc, #144]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800588c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005890:	0e1b      	lsrs	r3, r3, #24
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005898:	4b20      	ldr	r3, [pc, #128]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800589a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589e:	0c1b      	lsrs	r3, r3, #16
 80058a0:	f003 0303 	and.w	r3, r3, #3
 80058a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	019a      	lsls	r2, r3, #6
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	041b      	lsls	r3, r3, #16
 80058b0:	431a      	orrs	r2, r3
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	061b      	lsls	r3, r3, #24
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	071b      	lsls	r3, r3, #28
 80058be:	4917      	ldr	r1, [pc, #92]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80058c6:	4b15      	ldr	r3, [pc, #84]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	4911      	ldr	r1, [pc, #68]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058dc:	4b0f      	ldr	r3, [pc, #60]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a0e      	ldr	r2, [pc, #56]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058e8:	f7fc ffac 	bl	8002844 <HAL_GetTick>
 80058ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058ee:	e008      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058f0:	f7fc ffa8 	bl	8002844 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b64      	cmp	r3, #100	; 0x64
 80058fc:	d901      	bls.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e007      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005902:	4b06      	ldr	r3, [pc, #24]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800590a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800590e:	d1ef      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3720      	adds	r7, #32
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	40023800 	.word	0x40023800

08005920 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800592c:	2300      	movs	r3, #0
 800592e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8005930:	2300      	movs	r3, #0
 8005932:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8005934:	2300      	movs	r3, #0
 8005936:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800593e:	f040 808c 	bne.w	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005942:	4b95      	ldr	r3, [pc, #596]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005948:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005950:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005958:	d07c      	beq.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005960:	d87d      	bhi.n	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d004      	beq.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800596e:	d039      	beq.n	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005970:	e075      	b.n	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005972:	4b89      	ldr	r3, [pc, #548]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d108      	bne.n	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800597e:	4b86      	ldr	r3, [pc, #536]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005986:	4a85      	ldr	r2, [pc, #532]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005988:	fbb2 f3f3 	udiv	r3, r2, r3
 800598c:	613b      	str	r3, [r7, #16]
 800598e:	e007      	b.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005990:	4b81      	ldr	r3, [pc, #516]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005998:	4a81      	ldr	r2, [pc, #516]	; (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800599a:	fbb2 f3f3 	udiv	r3, r2, r3
 800599e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80059a0:	4b7d      	ldr	r3, [pc, #500]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a6:	0e1b      	lsrs	r3, r3, #24
 80059a8:	f003 030f 	and.w	r3, r3, #15
 80059ac:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80059ae:	4b7a      	ldr	r3, [pc, #488]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b4:	099b      	lsrs	r3, r3, #6
 80059b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	fb03 f202 	mul.w	r2, r3, r2
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80059c8:	4b73      	ldr	r3, [pc, #460]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059ce:	0a1b      	lsrs	r3, r3, #8
 80059d0:	f003 031f 	and.w	r3, r3, #31
 80059d4:	3301      	adds	r3, #1
 80059d6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e0:	617b      	str	r3, [r7, #20]
        break;
 80059e2:	e03d      	b.n	8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80059e4:	4b6c      	ldr	r3, [pc, #432]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d108      	bne.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80059f0:	4b69      	ldr	r3, [pc, #420]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059f8:	4a68      	ldr	r2, [pc, #416]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80059fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fe:	613b      	str	r3, [r7, #16]
 8005a00:	e007      	b.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005a02:	4b65      	ldr	r3, [pc, #404]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a0a:	4a65      	ldr	r2, [pc, #404]	; (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a10:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005a12:	4b61      	ldr	r3, [pc, #388]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a18:	0e1b      	lsrs	r3, r3, #24
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005a20:	4b5d      	ldr	r3, [pc, #372]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a26:	099b      	lsrs	r3, r3, #6
 8005a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	fb03 f202 	mul.w	r2, r3, r2
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a38:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005a3a:	4b57      	ldr	r3, [pc, #348]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a40:	f003 031f 	and.w	r3, r3, #31
 8005a44:	3301      	adds	r3, #1
 8005a46:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a50:	617b      	str	r3, [r7, #20]
        break;
 8005a52:	e005      	b.n	8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005a54:	4b53      	ldr	r3, [pc, #332]	; (8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005a56:	617b      	str	r3, [r7, #20]
        break;
 8005a58:	e002      	b.n	8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 8005a5a:	bf00      	nop
 8005a5c:	e000      	b.n	8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 8005a5e:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a66:	f040 808c 	bne.w	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005a6a:	4b4b      	ldr	r3, [pc, #300]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a70:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005a78:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a80:	d07c      	beq.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a88:	d87d      	bhi.n	8005b86 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d004      	beq.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a96:	d039      	beq.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005a98:	e075      	b.n	8005b86 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005a9a:	4b3f      	ldr	r3, [pc, #252]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d108      	bne.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005aa6:	4b3c      	ldr	r3, [pc, #240]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005aae:	4a3b      	ldr	r2, [pc, #236]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab4:	613b      	str	r3, [r7, #16]
 8005ab6:	e007      	b.n	8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005ab8:	4b37      	ldr	r3, [pc, #220]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ac0:	4a37      	ldr	r2, [pc, #220]	; (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005ac8:	4b33      	ldr	r3, [pc, #204]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ace:	0e1b      	lsrs	r3, r3, #24
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005ad6:	4b30      	ldr	r3, [pc, #192]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005adc:	099b      	lsrs	r3, r3, #6
 8005ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	fb03 f202 	mul.w	r2, r3, r2
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aee:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005af0:	4b29      	ldr	r3, [pc, #164]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005af6:	0a1b      	lsrs	r3, r3, #8
 8005af8:	f003 031f 	and.w	r3, r3, #31
 8005afc:	3301      	adds	r3, #1
 8005afe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b08:	617b      	str	r3, [r7, #20]
        break;
 8005b0a:	e03d      	b.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005b0c:	4b22      	ldr	r3, [pc, #136]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d108      	bne.n	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b18:	4b1f      	ldr	r3, [pc, #124]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b20:	4a1e      	ldr	r2, [pc, #120]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	e007      	b.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005b2a:	4b1b      	ldr	r3, [pc, #108]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b32:	4a1b      	ldr	r2, [pc, #108]	; (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b38:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005b3a:	4b17      	ldr	r3, [pc, #92]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b40:	0e1b      	lsrs	r3, r3, #24
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005b48:	4b13      	ldr	r3, [pc, #76]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b4e:	099b      	lsrs	r3, r3, #6
 8005b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	fb03 f202 	mul.w	r2, r3, r2
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b60:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005b62:	4b0d      	ldr	r3, [pc, #52]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b68:	f003 031f 	and.w	r3, r3, #31
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b78:	617b      	str	r3, [r7, #20]
        break;
 8005b7a:	e005      	b.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005b7c:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005b7e:	617b      	str	r3, [r7, #20]
        break;
 8005b80:	e002      	b.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 8005b82:	bf00      	nop
 8005b84:	e000      	b.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 8005b86:	bf00      	nop

  return frequency;
 8005b88:	697b      	ldr	r3, [r7, #20]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	371c      	adds	r7, #28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	40023800 	.word	0x40023800
 8005b9c:	00f42400 	.word	0x00f42400
 8005ba0:	017d7840 	.word	0x017d7840
 8005ba4:	00bb8000 	.word	0x00bb8000

08005ba8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e081      	b.n	8005cbe <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	7f5b      	ldrb	r3, [r3, #29]
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d105      	bne.n	8005bd0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7fc f95c 	bl	8001e88 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	22ca      	movs	r2, #202	; 0xca
 8005bdc:	625a      	str	r2, [r3, #36]	; 0x24
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2253      	movs	r2, #83	; 0x53
 8005be4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fb16 	bl	8006218 <RTC_EnterInitMode>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d008      	beq.n	8005c04 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	22ff      	movs	r2, #255	; 0xff
 8005bf8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2204      	movs	r2, #4
 8005bfe:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e05c      	b.n	8005cbe <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6899      	ldr	r1, [r3, #8]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	4b2e      	ldr	r3, [pc, #184]	; (8005cc8 <HAL_RTC_Init+0x120>)
 8005c10:	400b      	ands	r3, r1
 8005c12:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6899      	ldr	r1, [r3, #8]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	431a      	orrs	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	68d2      	ldr	r2, [r2, #12]
 8005c3a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6919      	ldr	r1, [r3, #16]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	041a      	lsls	r2, r3, #16
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c5e:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f003 0320 	and.w	r3, r3, #32
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10e      	bne.n	8005c8c <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 faaa 	bl	80061c8 <HAL_RTC_WaitForSynchro>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d008      	beq.n	8005c8c <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	22ff      	movs	r2, #255	; 0xff
 8005c80:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2204      	movs	r2, #4
 8005c86:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e018      	b.n	8005cbe <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0208 	bic.w	r2, r2, #8
 8005c9a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699a      	ldr	r2, [r3, #24]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	22ff      	movs	r2, #255	; 0xff
 8005cb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
  }
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	ff8fffbf 	.word	0xff8fffbf

08005ccc <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ccc:	b590      	push	{r4, r7, lr}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	7f1b      	ldrb	r3, [r3, #28]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <HAL_RTC_SetTime+0x1c>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e0a8      	b.n	8005e3a <HAL_RTC_SetTime+0x16e>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2201      	movs	r2, #1
 8005cec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d126      	bne.n	8005d48 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d102      	bne.n	8005d0e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 faac 	bl	8006270 <RTC_ByteToBcd2>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	785b      	ldrb	r3, [r3, #1]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 faa5 	bl	8006270 <RTC_ByteToBcd2>
 8005d26:	4603      	mov	r3, r0
 8005d28:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005d2a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	789b      	ldrb	r3, [r3, #2]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 fa9d 	bl	8006270 <RTC_ByteToBcd2>
 8005d36:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005d38:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	7b1b      	ldrb	r3, [r3, #12]
 8005d40:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]
 8005d46:	e018      	b.n	8005d7a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d102      	bne.n	8005d5c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	785b      	ldrb	r3, [r3, #1]
 8005d66:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005d68:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005d6e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	7b1b      	ldrb	r3, [r3, #12]
 8005d74:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005d76:	4313      	orrs	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	22ca      	movs	r2, #202	; 0xca
 8005d80:	625a      	str	r2, [r3, #36]	; 0x24
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2253      	movs	r2, #83	; 0x53
 8005d88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 fa44 	bl	8006218 <RTC_EnterInitMode>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00b      	beq.n	8005dae <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	22ff      	movs	r2, #255	; 0xff
 8005d9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2204      	movs	r2, #4
 8005da2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e045      	b.n	8005e3a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	6979      	ldr	r1, [r7, #20]
 8005db4:	4b23      	ldr	r3, [pc, #140]	; (8005e44 <HAL_RTC_SetTime+0x178>)
 8005db6:	400b      	ands	r3, r1
 8005db8:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005dc8:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6899      	ldr	r1, [r3, #8]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	691a      	ldr	r2, [r3, #16]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68da      	ldr	r2, [r3, #12]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005df0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f003 0320 	and.w	r3, r3, #32
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d111      	bne.n	8005e24 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 f9e1 	bl	80061c8 <HAL_RTC_WaitForSynchro>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00b      	beq.n	8005e24 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	22ff      	movs	r2, #255	; 0xff
 8005e12:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2204      	movs	r2, #4
 8005e18:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e00a      	b.n	8005e3a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	22ff      	movs	r2, #255	; 0xff
 8005e2a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005e38:	2300      	movs	r3, #0
  }
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	371c      	adds	r7, #28
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd90      	pop	{r4, r7, pc}
 8005e42:	bf00      	nop
 8005e44:	007f7f7f 	.word	0x007f7f7f

08005e48 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e48:	b590      	push	{r4, r7, lr}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8005e54:	2300      	movs	r3, #0
 8005e56:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	7f1b      	ldrb	r3, [r3, #28]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d101      	bne.n	8005e64 <HAL_RTC_SetDate+0x1c>
 8005e60:	2302      	movs	r3, #2
 8005e62:	e092      	b.n	8005f8a <HAL_RTC_SetDate+0x142>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2201      	movs	r2, #1
 8005e68:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10e      	bne.n	8005e94 <HAL_RTC_SetDate+0x4c>
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	785b      	ldrb	r3, [r3, #1]
 8005e7a:	f003 0310 	and.w	r3, r3, #16
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d008      	beq.n	8005e94 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	785b      	ldrb	r3, [r3, #1]
 8005e86:	f023 0310 	bic.w	r3, r3, #16
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	330a      	adds	r3, #10
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d11c      	bne.n	8005ed4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	78db      	ldrb	r3, [r3, #3]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 f9e6 	bl	8006270 <RTC_ByteToBcd2>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	785b      	ldrb	r3, [r3, #1]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 f9df 	bl	8006270 <RTC_ByteToBcd2>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005eb6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	789b      	ldrb	r3, [r3, #2]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 f9d7 	bl	8006270 <RTC_ByteToBcd2>
 8005ec2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005ec4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	e00e      	b.n	8005ef2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	78db      	ldrb	r3, [r3, #3]
 8005ed8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	785b      	ldrb	r3, [r3, #1]
 8005ede:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005ee0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8005ee6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	22ca      	movs	r2, #202	; 0xca
 8005ef8:	625a      	str	r2, [r3, #36]	; 0x24
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2253      	movs	r2, #83	; 0x53
 8005f00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f000 f988 	bl	8006218 <RTC_EnterInitMode>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00b      	beq.n	8005f26 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	22ff      	movs	r2, #255	; 0xff
 8005f14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2204      	movs	r2, #4
 8005f1a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e031      	b.n	8005f8a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	6979      	ldr	r1, [r7, #20]
 8005f2c:	4b19      	ldr	r3, [pc, #100]	; (8005f94 <HAL_RTC_SetDate+0x14c>)
 8005f2e:	400b      	ands	r3, r1
 8005f30:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f40:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f003 0320 	and.w	r3, r3, #32
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d111      	bne.n	8005f74 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 f939 	bl	80061c8 <HAL_RTC_WaitForSynchro>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00b      	beq.n	8005f74 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	22ff      	movs	r2, #255	; 0xff
 8005f62:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2204      	movs	r2, #4
 8005f68:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e00a      	b.n	8005f8a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	22ff      	movs	r2, #255	; 0xff
 8005f7a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005f88:	2300      	movs	r3, #0
  }
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	371c      	adds	r7, #28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd90      	pop	{r4, r7, pc}
 8005f92:	bf00      	nop
 8005f94:	00ffff3f 	.word	0x00ffff3f

08005f98 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005f98:	b590      	push	{r4, r7, lr}
 8005f9a:	b089      	sub	sp, #36	; 0x24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	61fb      	str	r3, [r7, #28]
 8005fac:	2300      	movs	r3, #0
 8005fae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	7f1b      	ldrb	r3, [r3, #28]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <HAL_RTC_SetAlarm+0x24>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e101      	b.n	80061c0 <HAL_RTC_SetAlarm+0x228>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d137      	bne.n	800603e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d102      	bne.n	8005fe2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 f942 	bl	8006270 <RTC_ByteToBcd2>
 8005fec:	4603      	mov	r3, r0
 8005fee:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	785b      	ldrb	r3, [r3, #1]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 f93b 	bl	8006270 <RTC_ByteToBcd2>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005ffe:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	789b      	ldrb	r3, [r3, #2]
 8006004:	4618      	mov	r0, r3
 8006006:	f000 f933 	bl	8006270 <RTC_ByteToBcd2>
 800600a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800600c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	7b1b      	ldrb	r3, [r3, #12]
 8006014:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006016:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006020:	4618      	mov	r0, r3
 8006022:	f000 f925 	bl	8006270 <RTC_ByteToBcd2>
 8006026:	4603      	mov	r3, r0
 8006028:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800602a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8006032:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006038:	4313      	orrs	r3, r2
 800603a:	61fb      	str	r3, [r7, #28]
 800603c:	e023      	b.n	8006086 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006048:	2b00      	cmp	r3, #0
 800604a:	d102      	bne.n	8006052 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2200      	movs	r2, #0
 8006050:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	785b      	ldrb	r3, [r3, #1]
 800605c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800605e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8006064:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	7b1b      	ldrb	r3, [r3, #12]
 800606a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800606c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006074:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006076:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800607c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006082:	4313      	orrs	r3, r2
 8006084:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	4313      	orrs	r3, r2
 8006090:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	22ca      	movs	r2, #202	; 0xca
 8006098:	625a      	str	r2, [r3, #36]	; 0x24
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2253      	movs	r2, #83	; 0x53
 80060a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060aa:	d13f      	bne.n	800612c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060ba:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060ca:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060cc:	f7fc fbba 	bl	8002844 <HAL_GetTick>
 80060d0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80060d2:	e013      	b.n	80060fc <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80060d4:	f7fc fbb6 	bl	8002844 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060e2:	d90b      	bls.n	80060fc <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	22ff      	movs	r2, #255	; 0xff
 80060ea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2203      	movs	r2, #3
 80060f0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e061      	b.n	80061c0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	2b00      	cmp	r3, #0
 8006108:	d0e4      	beq.n	80060d4 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	69fa      	ldr	r2, [r7, #28]
 8006110:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689a      	ldr	r2, [r3, #8]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006128:	609a      	str	r2, [r3, #8]
 800612a:	e03e      	b.n	80061aa <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689a      	ldr	r2, [r3, #8]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800613a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689a      	ldr	r2, [r3, #8]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800614a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800614c:	f7fc fb7a 	bl	8002844 <HAL_GetTick>
 8006150:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8006152:	e013      	b.n	800617c <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006154:	f7fc fb76 	bl	8002844 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006162:	d90b      	bls.n	800617c <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	22ff      	movs	r2, #255	; 0xff
 800616a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2203      	movs	r2, #3
 8006170:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e021      	b.n	80061c0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f003 0302 	and.w	r3, r3, #2
 8006186:	2b00      	cmp	r3, #0
 8006188:	d0e4      	beq.n	8006154 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69fa      	ldr	r2, [r7, #28]
 8006190:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061a8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	22ff      	movs	r2, #255	; 0xff
 80061b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2201      	movs	r2, #1
 80061b6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3724      	adds	r7, #36	; 0x24
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd90      	pop	{r4, r7, pc}

080061c8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80061d0:	2300      	movs	r3, #0
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061e4:	f7fc fb2e 	bl	8002844 <HAL_GetTick>
 80061e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80061ea:	e009      	b.n	8006200 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80061ec:	f7fc fb2a 	bl	8002844 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061fa:	d901      	bls.n	8006200 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e007      	b.n	8006210 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f003 0320 	and.w	r3, r3, #32
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0ee      	beq.n	80061ec <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006220:	2300      	movs	r3, #0
 8006222:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622e:	2b00      	cmp	r3, #0
 8006230:	d119      	bne.n	8006266 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f04f 32ff 	mov.w	r2, #4294967295
 800623a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800623c:	f7fc fb02 	bl	8002844 <HAL_GetTick>
 8006240:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006242:	e009      	b.n	8006258 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006244:	f7fc fafe 	bl	8002844 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006252:	d901      	bls.n	8006258 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e007      	b.n	8006268 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0ee      	beq.n	8006244 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	4603      	mov	r3, r0
 8006278:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800627e:	e005      	b.n	800628c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	3301      	adds	r3, #1
 8006284:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8006286:	79fb      	ldrb	r3, [r7, #7]
 8006288:	3b0a      	subs	r3, #10
 800628a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800628c:	79fb      	ldrb	r3, [r7, #7]
 800628e:	2b09      	cmp	r3, #9
 8006290:	d8f6      	bhi.n	8006280 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	b2db      	uxtb	r3, r3
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	b2da      	uxtb	r2, r3
 800629a:	79fb      	ldrb	r3, [r7, #7]
 800629c:	4313      	orrs	r3, r2
 800629e:	b2db      	uxtb	r3, r3
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80062b8:	2300      	movs	r3, #0
 80062ba:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	7f1b      	ldrb	r3, [r3, #28]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d101      	bne.n	80062c8 <HAL_RTCEx_SetTimeStamp+0x1c>
 80062c4:	2302      	movs	r3, #2
 80062c6:	e03e      	b.n	8006346 <HAL_RTCEx_SetTimeStamp+0x9a>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2201      	movs	r2, #1
 80062cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2202      	movs	r2, #2
 80062d2:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689a      	ldr	r2, [r3, #8]
 80062da:	4b1e      	ldr	r3, [pc, #120]	; (8006354 <HAL_RTCEx_SetTimeStamp+0xa8>)
 80062dc:	4013      	ands	r3, r2
 80062de:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	22ca      	movs	r2, #202	; 0xca
 80062ee:	625a      	str	r2, [r3, #36]	; 0x24
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2253      	movs	r2, #83	; 0x53
 80062f6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0206 	bic.w	r2, r2, #6
 8006306:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	430a      	orrs	r2, r1
 8006316:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689a      	ldr	r2, [r3, #8]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800632e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	22ff      	movs	r2, #255	; 0xff
 8006336:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2201      	movs	r2, #1
 800633c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	371c      	adds	r7, #28
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	fffff7f7 	.word	0xfffff7f7

08006358 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b088      	sub	sp, #32
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8006360:	2300      	movs	r3, #0
 8006362:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8006364:	2300      	movs	r3, #0
 8006366:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8006368:	2300      	movs	r3, #0
 800636a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e156      	b.n	8006624 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d106      	bne.n	8006390 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7fc f8e8 	bl	8002560 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2202      	movs	r2, #2
 8006394:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f95b 	bl	8006654 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d00c      	beq.n	80063c0 <HAL_SAI_Init+0x68>
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d80d      	bhi.n	80063c6 <HAL_SAI_Init+0x6e>
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <HAL_SAI_Init+0x5c>
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d003      	beq.n	80063ba <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80063b2:	e008      	b.n	80063c6 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	61fb      	str	r3, [r7, #28]
      break;
 80063b8:	e006      	b.n	80063c8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80063ba:	2310      	movs	r3, #16
 80063bc:	61fb      	str	r3, [r7, #28]
      break;
 80063be:	e003      	b.n	80063c8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80063c0:	2320      	movs	r3, #32
 80063c2:	61fb      	str	r3, [r7, #28]
      break;
 80063c4:	e000      	b.n	80063c8 <HAL_SAI_Init+0x70>
      break;
 80063c6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	2b03      	cmp	r3, #3
 80063ce:	d81e      	bhi.n	800640e <HAL_SAI_Init+0xb6>
 80063d0:	a201      	add	r2, pc, #4	; (adr r2, 80063d8 <HAL_SAI_Init+0x80>)
 80063d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d6:	bf00      	nop
 80063d8:	080063e9 	.word	0x080063e9
 80063dc:	080063ef 	.word	0x080063ef
 80063e0:	080063f7 	.word	0x080063f7
 80063e4:	080063ff 	.word	0x080063ff
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 80063e8:	2300      	movs	r3, #0
 80063ea:	617b      	str	r3, [r7, #20]
    }
    break;
 80063ec:	e010      	b.n	8006410 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80063ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063f2:	617b      	str	r3, [r7, #20]
    }
    break;
 80063f4:	e00c      	b.n	8006410 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80063f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063fa:	617b      	str	r3, [r7, #20]
    }
    break;
 80063fc:	e008      	b.n	8006410 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80063fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006402:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	f043 0301 	orr.w	r3, r3, #1
 800640a:	61fb      	str	r3, [r7, #28]
    }
    break;
 800640c:	e000      	b.n	8006410 <HAL_SAI_Init+0xb8>
    default:
      break;
 800640e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a85      	ldr	r2, [pc, #532]	; (800662c <HAL_SAI_Init+0x2d4>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d004      	beq.n	8006424 <HAL_SAI_Init+0xcc>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a84      	ldr	r2, [pc, #528]	; (8006630 <HAL_SAI_Init+0x2d8>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d103      	bne.n	800642c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8006424:	4a83      	ldr	r2, [pc, #524]	; (8006634 <HAL_SAI_Init+0x2dc>)
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	6013      	str	r3, [r2, #0]
 800642a:	e002      	b.n	8006432 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800642c:	4a82      	ldr	r2, [pc, #520]	; (8006638 <HAL_SAI_Init+0x2e0>)
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d04c      	beq.n	80064d4 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800643a:	2300      	movs	r3, #0
 800643c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a7a      	ldr	r2, [pc, #488]	; (800662c <HAL_SAI_Init+0x2d4>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d004      	beq.n	8006452 <HAL_SAI_Init+0xfa>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a78      	ldr	r2, [pc, #480]	; (8006630 <HAL_SAI_Init+0x2d8>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d104      	bne.n	800645c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006452:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006456:	f7ff fa63 	bl	8005920 <HAL_RCCEx_GetPeriphCLKFreq>
 800645a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a76      	ldr	r2, [pc, #472]	; (800663c <HAL_SAI_Init+0x2e4>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d004      	beq.n	8006470 <HAL_SAI_Init+0x118>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a75      	ldr	r2, [pc, #468]	; (8006640 <HAL_SAI_Init+0x2e8>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d104      	bne.n	800647a <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006470:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006474:	f7ff fa54 	bl	8005920 <HAL_RCCEx_GetPeriphCLKFreq>
 8006478:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	4613      	mov	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	461a      	mov	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	025b      	lsls	r3, r3, #9
 800648c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006490:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	4a6b      	ldr	r2, [pc, #428]	; (8006644 <HAL_SAI_Init+0x2ec>)
 8006496:	fba2 2303 	umull	r2, r3, r2, r3
 800649a:	08da      	lsrs	r2, r3, #3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80064a0:	68f9      	ldr	r1, [r7, #12]
 80064a2:	4b68      	ldr	r3, [pc, #416]	; (8006644 <HAL_SAI_Init+0x2ec>)
 80064a4:	fba3 2301 	umull	r2, r3, r3, r1
 80064a8:	08da      	lsrs	r2, r3, #3
 80064aa:	4613      	mov	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	1aca      	subs	r2, r1, r3
 80064b4:	2a08      	cmp	r2, #8
 80064b6:	d904      	bls.n	80064c2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	1c5a      	adds	r2, r3, #1
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	d104      	bne.n	80064d4 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	085a      	lsrs	r2, r3, #1
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d003      	beq.n	80064e4 <HAL_SAI_Init+0x18c>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d109      	bne.n	80064f8 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d101      	bne.n	80064f0 <HAL_SAI_Init+0x198>
 80064ec:	2300      	movs	r3, #0
 80064ee:	e001      	b.n	80064f4 <HAL_SAI_Init+0x19c>
 80064f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064f4:	61bb      	str	r3, [r7, #24]
 80064f6:	e008      	b.n	800650a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d102      	bne.n	8006506 <HAL_SAI_Init+0x1ae>
 8006500:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006504:	e000      	b.n	8006508 <HAL_SAI_Init+0x1b0>
 8006506:	2300      	movs	r3, #0
 8006508:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6819      	ldr	r1, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	4b4c      	ldr	r3, [pc, #304]	; (8006648 <HAL_SAI_Init+0x2f0>)
 8006516:	400b      	ands	r3, r1
 8006518:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6819      	ldr	r1, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006528:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800652e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006534:	431a      	orrs	r2, r3
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8006542:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800654e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	051b      	lsls	r3, r3, #20
 8006556:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	430a      	orrs	r2, r1
 800655e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6859      	ldr	r1, [r3, #4]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	4b38      	ldr	r3, [pc, #224]	; (800664c <HAL_SAI_Init+0x2f4>)
 800656c:	400b      	ands	r3, r1
 800656e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6859      	ldr	r1, [r3, #4]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	699a      	ldr	r2, [r3, #24]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657e:	431a      	orrs	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006584:	431a      	orrs	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6899      	ldr	r1, [r3, #8]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	4b2d      	ldr	r3, [pc, #180]	; (8006650 <HAL_SAI_Init+0x2f8>)
 800659a:	400b      	ands	r3, r1
 800659c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6899      	ldr	r1, [r3, #8]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80065ae:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80065b4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80065ba:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c0:	3b01      	subs	r3, #1
 80065c2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80065c4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68d9      	ldr	r1, [r3, #12]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	f24f 0320 	movw	r3, #61472	; 0xf020
 80065dc:	400b      	ands	r3, r1
 80065de:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68d9      	ldr	r1, [r3, #12]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ee:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f4:	041b      	lsls	r3, r3, #16
 80065f6:	431a      	orrs	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fc:	3b01      	subs	r3, #1
 80065fe:	021b      	lsls	r3, r3, #8
 8006600:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3720      	adds	r7, #32
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	40015804 	.word	0x40015804
 8006630:	40015824 	.word	0x40015824
 8006634:	40015800 	.word	0x40015800
 8006638:	40015c00 	.word	0x40015c00
 800663c:	40015c04 	.word	0x40015c04
 8006640:	40015c24 	.word	0x40015c24
 8006644:	cccccccd 	.word	0xcccccccd
 8006648:	ff05c010 	.word	0xff05c010
 800664c:	ffff1ff0 	.word	0xffff1ff0
 8006650:	fff88000 	.word	0xfff88000

08006654 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800665c:	4b17      	ldr	r3, [pc, #92]	; (80066bc <SAI_Disable+0x68>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a17      	ldr	r2, [pc, #92]	; (80066c0 <SAI_Disable+0x6c>)
 8006662:	fba2 2303 	umull	r2, r3, r2, r3
 8006666:	0b1b      	lsrs	r3, r3, #12
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800666c:	2300      	movs	r3, #0
 800666e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800667e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	1e5a      	subs	r2, r3, #1
 8006684:	60fa      	str	r2, [r7, #12]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10a      	bne.n	80066a0 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006690:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	72fb      	strb	r3, [r7, #11]
      break;
 800669e:	e006      	b.n	80066ae <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1e8      	bne.n	8006680 <SAI_Disable+0x2c>

  return status;
 80066ae:	7afb      	ldrb	r3, [r7, #11]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	20000000 	.word	0x20000000
 80066c0:	95cbec1b 	.word	0x95cbec1b

080066c4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e025      	b.n	8006724 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d106      	bne.n	80066f2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7fb ff2d 	bl	800254c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2202      	movs	r2, #2
 80066f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3304      	adds	r3, #4
 8006702:	4619      	mov	r1, r3
 8006704:	4610      	mov	r0, r2
 8006706:	f001 fe71 	bl	80083ec <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6818      	ldr	r0, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	461a      	mov	r2, r3
 8006714:	6839      	ldr	r1, [r7, #0]
 8006716:	f001 fec5 	bl	80084a4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e04c      	b.n	80067d8 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d106      	bne.n	8006758 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7fb fbc6 	bl	8001ee4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 0203 	bic.w	r2, r2, #3
 800676e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	4b19      	ldr	r3, [pc, #100]	; (80067e0 <HAL_SPDIFRX_Init+0xb4>)
 800677c:	4013      	ands	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8006788:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800678e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8006794:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800679a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 80067a0:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 80067a6:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 80067ac:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 80067b2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 80067b8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	4313      	orrs	r3, r2
 80067be:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	fff88407 	.word	0xfff88407

080067e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e09d      	b.n	8006932 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d108      	bne.n	8006810 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006806:	d009      	beq.n	800681c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	61da      	str	r2, [r3, #28]
 800680e:	e005      	b.n	800681c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d106      	bne.n	800683c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7fb fbb8 	bl	8001fac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006852:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800685c:	d902      	bls.n	8006864 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800685e:	2300      	movs	r3, #0
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	e002      	b.n	800686a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006868:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006872:	d007      	beq.n	8006884 <HAL_SPI_Init+0xa0>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800687c:	d002      	beq.n	8006884 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006894:	431a      	orrs	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	431a      	orrs	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	431a      	orrs	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068b2:	431a      	orrs	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	69db      	ldr	r3, [r3, #28]
 80068b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068bc:	431a      	orrs	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c6:	ea42 0103 	orr.w	r1, r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	0c1b      	lsrs	r3, r3, #16
 80068e0:	f003 0204 	and.w	r2, r3, #4
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e8:	f003 0310 	and.w	r3, r3, #16
 80068ec:	431a      	orrs	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f2:	f003 0308 	and.w	r3, r3, #8
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006900:	ea42 0103 	orr.w	r1, r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69da      	ldr	r2, [r3, #28]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006920:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b082      	sub	sp, #8
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e049      	b.n	80069e0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b00      	cmp	r3, #0
 8006956:	d106      	bne.n	8006966 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7fb fb85 	bl	8002070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2202      	movs	r2, #2
 800696a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	3304      	adds	r3, #4
 8006976:	4619      	mov	r1, r3
 8006978:	4610      	mov	r0, r2
 800697a:	f000 fc29 	bl	80071d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d001      	beq.n	8006a00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e054      	b.n	8006aaa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68da      	ldr	r2, [r3, #12]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0201 	orr.w	r2, r2, #1
 8006a16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a26      	ldr	r2, [pc, #152]	; (8006ab8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d022      	beq.n	8006a68 <HAL_TIM_Base_Start_IT+0x80>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a2a:	d01d      	beq.n	8006a68 <HAL_TIM_Base_Start_IT+0x80>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a22      	ldr	r2, [pc, #136]	; (8006abc <HAL_TIM_Base_Start_IT+0xd4>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d018      	beq.n	8006a68 <HAL_TIM_Base_Start_IT+0x80>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a21      	ldr	r2, [pc, #132]	; (8006ac0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d013      	beq.n	8006a68 <HAL_TIM_Base_Start_IT+0x80>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a1f      	ldr	r2, [pc, #124]	; (8006ac4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d00e      	beq.n	8006a68 <HAL_TIM_Base_Start_IT+0x80>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a1e      	ldr	r2, [pc, #120]	; (8006ac8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d009      	beq.n	8006a68 <HAL_TIM_Base_Start_IT+0x80>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a1c      	ldr	r2, [pc, #112]	; (8006acc <HAL_TIM_Base_Start_IT+0xe4>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d004      	beq.n	8006a68 <HAL_TIM_Base_Start_IT+0x80>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a1b      	ldr	r2, [pc, #108]	; (8006ad0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d115      	bne.n	8006a94 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689a      	ldr	r2, [r3, #8]
 8006a6e:	4b19      	ldr	r3, [pc, #100]	; (8006ad4 <HAL_TIM_Base_Start_IT+0xec>)
 8006a70:	4013      	ands	r3, r2
 8006a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2b06      	cmp	r3, #6
 8006a78:	d015      	beq.n	8006aa6 <HAL_TIM_Base_Start_IT+0xbe>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a80:	d011      	beq.n	8006aa6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f042 0201 	orr.w	r2, r2, #1
 8006a90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a92:	e008      	b.n	8006aa6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f042 0201 	orr.w	r2, r2, #1
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	e000      	b.n	8006aa8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aa6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	40010000 	.word	0x40010000
 8006abc:	40000400 	.word	0x40000400
 8006ac0:	40000800 	.word	0x40000800
 8006ac4:	40000c00 	.word	0x40000c00
 8006ac8:	40010400 	.word	0x40010400
 8006acc:	40014000 	.word	0x40014000
 8006ad0:	40001800 	.word	0x40001800
 8006ad4:	00010007 	.word	0x00010007

08006ad8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d101      	bne.n	8006aea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e049      	b.n	8006b7e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d106      	bne.n	8006b04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7fb fb24 	bl	800214c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2202      	movs	r2, #2
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	3304      	adds	r3, #4
 8006b14:	4619      	mov	r1, r3
 8006b16:	4610      	mov	r0, r2
 8006b18:	f000 fb5a 	bl	80071d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d122      	bne.n	8006be2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d11b      	bne.n	8006be2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f06f 0202 	mvn.w	r2, #2
 8006bb2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	f003 0303 	and.w	r3, r3, #3
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fae3 	bl	8007194 <HAL_TIM_IC_CaptureCallback>
 8006bce:	e005      	b.n	8006bdc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fad5 	bl	8007180 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fae6 	bl	80071a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	f003 0304 	and.w	r3, r3, #4
 8006bec:	2b04      	cmp	r3, #4
 8006bee:	d122      	bne.n	8006c36 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f003 0304 	and.w	r3, r3, #4
 8006bfa:	2b04      	cmp	r3, #4
 8006bfc:	d11b      	bne.n	8006c36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f06f 0204 	mvn.w	r2, #4
 8006c06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fab9 	bl	8007194 <HAL_TIM_IC_CaptureCallback>
 8006c22:	e005      	b.n	8006c30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 faab 	bl	8007180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fabc 	bl	80071a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	f003 0308 	and.w	r3, r3, #8
 8006c40:	2b08      	cmp	r3, #8
 8006c42:	d122      	bne.n	8006c8a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f003 0308 	and.w	r3, r3, #8
 8006c4e:	2b08      	cmp	r3, #8
 8006c50:	d11b      	bne.n	8006c8a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f06f 0208 	mvn.w	r2, #8
 8006c5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2204      	movs	r2, #4
 8006c60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	f003 0303 	and.w	r3, r3, #3
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 fa8f 	bl	8007194 <HAL_TIM_IC_CaptureCallback>
 8006c76:	e005      	b.n	8006c84 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fa81 	bl	8007180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fa92 	bl	80071a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	f003 0310 	and.w	r3, r3, #16
 8006c94:	2b10      	cmp	r3, #16
 8006c96:	d122      	bne.n	8006cde <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	f003 0310 	and.w	r3, r3, #16
 8006ca2:	2b10      	cmp	r3, #16
 8006ca4:	d11b      	bne.n	8006cde <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f06f 0210 	mvn.w	r2, #16
 8006cae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2208      	movs	r2, #8
 8006cb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69db      	ldr	r3, [r3, #28]
 8006cbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d003      	beq.n	8006ccc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fa65 	bl	8007194 <HAL_TIM_IC_CaptureCallback>
 8006cca:	e005      	b.n	8006cd8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 fa57 	bl	8007180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fa68 	bl	80071a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d10e      	bne.n	8006d0a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d107      	bne.n	8006d0a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f06f 0201 	mvn.w	r2, #1
 8006d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7fa fdf5 	bl	80018f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d14:	2b80      	cmp	r3, #128	; 0x80
 8006d16:	d10e      	bne.n	8006d36 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d22:	2b80      	cmp	r3, #128	; 0x80
 8006d24:	d107      	bne.n	8006d36 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fefb 	bl	8007b2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d44:	d10e      	bne.n	8006d64 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d50:	2b80      	cmp	r3, #128	; 0x80
 8006d52:	d107      	bne.n	8006d64 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 feee 	bl	8007b40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6e:	2b40      	cmp	r3, #64	; 0x40
 8006d70:	d10e      	bne.n	8006d90 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7c:	2b40      	cmp	r3, #64	; 0x40
 8006d7e:	d107      	bne.n	8006d90 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fa16 	bl	80071bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	f003 0320 	and.w	r3, r3, #32
 8006d9a:	2b20      	cmp	r3, #32
 8006d9c:	d10e      	bne.n	8006dbc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	f003 0320 	and.w	r3, r3, #32
 8006da8:	2b20      	cmp	r3, #32
 8006daa:	d107      	bne.n	8006dbc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f06f 0220 	mvn.w	r2, #32
 8006db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 feae 	bl	8007b18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dbc:	bf00      	nop
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d101      	bne.n	8006de2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006dde:	2302      	movs	r3, #2
 8006de0:	e0ff      	b.n	8006fe2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b14      	cmp	r3, #20
 8006dee:	f200 80f0 	bhi.w	8006fd2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006df2:	a201      	add	r2, pc, #4	; (adr r2, 8006df8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df8:	08006e4d 	.word	0x08006e4d
 8006dfc:	08006fd3 	.word	0x08006fd3
 8006e00:	08006fd3 	.word	0x08006fd3
 8006e04:	08006fd3 	.word	0x08006fd3
 8006e08:	08006e8d 	.word	0x08006e8d
 8006e0c:	08006fd3 	.word	0x08006fd3
 8006e10:	08006fd3 	.word	0x08006fd3
 8006e14:	08006fd3 	.word	0x08006fd3
 8006e18:	08006ecf 	.word	0x08006ecf
 8006e1c:	08006fd3 	.word	0x08006fd3
 8006e20:	08006fd3 	.word	0x08006fd3
 8006e24:	08006fd3 	.word	0x08006fd3
 8006e28:	08006f0f 	.word	0x08006f0f
 8006e2c:	08006fd3 	.word	0x08006fd3
 8006e30:	08006fd3 	.word	0x08006fd3
 8006e34:	08006fd3 	.word	0x08006fd3
 8006e38:	08006f51 	.word	0x08006f51
 8006e3c:	08006fd3 	.word	0x08006fd3
 8006e40:	08006fd3 	.word	0x08006fd3
 8006e44:	08006fd3 	.word	0x08006fd3
 8006e48:	08006f91 	.word	0x08006f91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68b9      	ldr	r1, [r7, #8]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 fa5c 	bl	8007310 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	699a      	ldr	r2, [r3, #24]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f042 0208 	orr.w	r2, r2, #8
 8006e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	699a      	ldr	r2, [r3, #24]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f022 0204 	bic.w	r2, r2, #4
 8006e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6999      	ldr	r1, [r3, #24]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	691a      	ldr	r2, [r3, #16]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	619a      	str	r2, [r3, #24]
      break;
 8006e8a:	e0a5      	b.n	8006fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68b9      	ldr	r1, [r7, #8]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 faae 	bl	80073f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	699a      	ldr	r2, [r3, #24]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	699a      	ldr	r2, [r3, #24]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6999      	ldr	r1, [r3, #24]
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	021a      	lsls	r2, r3, #8
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	619a      	str	r2, [r3, #24]
      break;
 8006ecc:	e084      	b.n	8006fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68b9      	ldr	r1, [r7, #8]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 fb05 	bl	80074e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	69da      	ldr	r2, [r3, #28]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f042 0208 	orr.w	r2, r2, #8
 8006ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	69da      	ldr	r2, [r3, #28]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f022 0204 	bic.w	r2, r2, #4
 8006ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	69d9      	ldr	r1, [r3, #28]
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	691a      	ldr	r2, [r3, #16]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	61da      	str	r2, [r3, #28]
      break;
 8006f0c:	e064      	b.n	8006fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68b9      	ldr	r1, [r7, #8]
 8006f14:	4618      	mov	r0, r3
 8006f16:	f000 fb5b 	bl	80075d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	69da      	ldr	r2, [r3, #28]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	69da      	ldr	r2, [r3, #28]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	69d9      	ldr	r1, [r3, #28]
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	021a      	lsls	r2, r3, #8
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	61da      	str	r2, [r3, #28]
      break;
 8006f4e:	e043      	b.n	8006fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68b9      	ldr	r1, [r7, #8]
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 fb92 	bl	8007680 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0208 	orr.w	r2, r2, #8
 8006f6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f022 0204 	bic.w	r2, r2, #4
 8006f7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	691a      	ldr	r2, [r3, #16]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006f8e:	e023      	b.n	8006fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68b9      	ldr	r1, [r7, #8]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 fbc4 	bl	8007724 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006faa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	021a      	lsls	r2, r3, #8
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006fd0:	e002      	b.n	8006fd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	75fb      	strb	r3, [r7, #23]
      break;
 8006fd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3718      	adds	r7, #24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop

08006fec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007000:	2b01      	cmp	r3, #1
 8007002:	d101      	bne.n	8007008 <HAL_TIM_ConfigClockSource+0x1c>
 8007004:	2302      	movs	r3, #2
 8007006:	e0b4      	b.n	8007172 <HAL_TIM_ConfigClockSource+0x186>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	4b56      	ldr	r3, [pc, #344]	; (800717c <HAL_TIM_ConfigClockSource+0x190>)
 8007024:	4013      	ands	r3, r2
 8007026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800702e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007040:	d03e      	beq.n	80070c0 <HAL_TIM_ConfigClockSource+0xd4>
 8007042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007046:	f200 8087 	bhi.w	8007158 <HAL_TIM_ConfigClockSource+0x16c>
 800704a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800704e:	f000 8086 	beq.w	800715e <HAL_TIM_ConfigClockSource+0x172>
 8007052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007056:	d87f      	bhi.n	8007158 <HAL_TIM_ConfigClockSource+0x16c>
 8007058:	2b70      	cmp	r3, #112	; 0x70
 800705a:	d01a      	beq.n	8007092 <HAL_TIM_ConfigClockSource+0xa6>
 800705c:	2b70      	cmp	r3, #112	; 0x70
 800705e:	d87b      	bhi.n	8007158 <HAL_TIM_ConfigClockSource+0x16c>
 8007060:	2b60      	cmp	r3, #96	; 0x60
 8007062:	d050      	beq.n	8007106 <HAL_TIM_ConfigClockSource+0x11a>
 8007064:	2b60      	cmp	r3, #96	; 0x60
 8007066:	d877      	bhi.n	8007158 <HAL_TIM_ConfigClockSource+0x16c>
 8007068:	2b50      	cmp	r3, #80	; 0x50
 800706a:	d03c      	beq.n	80070e6 <HAL_TIM_ConfigClockSource+0xfa>
 800706c:	2b50      	cmp	r3, #80	; 0x50
 800706e:	d873      	bhi.n	8007158 <HAL_TIM_ConfigClockSource+0x16c>
 8007070:	2b40      	cmp	r3, #64	; 0x40
 8007072:	d058      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0x13a>
 8007074:	2b40      	cmp	r3, #64	; 0x40
 8007076:	d86f      	bhi.n	8007158 <HAL_TIM_ConfigClockSource+0x16c>
 8007078:	2b30      	cmp	r3, #48	; 0x30
 800707a:	d064      	beq.n	8007146 <HAL_TIM_ConfigClockSource+0x15a>
 800707c:	2b30      	cmp	r3, #48	; 0x30
 800707e:	d86b      	bhi.n	8007158 <HAL_TIM_ConfigClockSource+0x16c>
 8007080:	2b20      	cmp	r3, #32
 8007082:	d060      	beq.n	8007146 <HAL_TIM_ConfigClockSource+0x15a>
 8007084:	2b20      	cmp	r3, #32
 8007086:	d867      	bhi.n	8007158 <HAL_TIM_ConfigClockSource+0x16c>
 8007088:	2b00      	cmp	r3, #0
 800708a:	d05c      	beq.n	8007146 <HAL_TIM_ConfigClockSource+0x15a>
 800708c:	2b10      	cmp	r3, #16
 800708e:	d05a      	beq.n	8007146 <HAL_TIM_ConfigClockSource+0x15a>
 8007090:	e062      	b.n	8007158 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6818      	ldr	r0, [r3, #0]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	6899      	ldr	r1, [r3, #8]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	f000 fc0d 	bl	80078c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80070b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	609a      	str	r2, [r3, #8]
      break;
 80070be:	e04f      	b.n	8007160 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6818      	ldr	r0, [r3, #0]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	6899      	ldr	r1, [r3, #8]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f000 fbf6 	bl	80078c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	689a      	ldr	r2, [r3, #8]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070e2:	609a      	str	r2, [r3, #8]
      break;
 80070e4:	e03c      	b.n	8007160 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6818      	ldr	r0, [r3, #0]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	6859      	ldr	r1, [r3, #4]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	461a      	mov	r2, r3
 80070f4:	f000 fb6a 	bl	80077cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2150      	movs	r1, #80	; 0x50
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 fbc3 	bl	800788a <TIM_ITRx_SetConfig>
      break;
 8007104:	e02c      	b.n	8007160 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6818      	ldr	r0, [r3, #0]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	6859      	ldr	r1, [r3, #4]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	461a      	mov	r2, r3
 8007114:	f000 fb89 	bl	800782a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2160      	movs	r1, #96	; 0x60
 800711e:	4618      	mov	r0, r3
 8007120:	f000 fbb3 	bl	800788a <TIM_ITRx_SetConfig>
      break;
 8007124:	e01c      	b.n	8007160 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6818      	ldr	r0, [r3, #0]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	6859      	ldr	r1, [r3, #4]
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	461a      	mov	r2, r3
 8007134:	f000 fb4a 	bl	80077cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2140      	movs	r1, #64	; 0x40
 800713e:	4618      	mov	r0, r3
 8007140:	f000 fba3 	bl	800788a <TIM_ITRx_SetConfig>
      break;
 8007144:	e00c      	b.n	8007160 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4619      	mov	r1, r3
 8007150:	4610      	mov	r0, r2
 8007152:	f000 fb9a 	bl	800788a <TIM_ITRx_SetConfig>
      break;
 8007156:	e003      	b.n	8007160 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	73fb      	strb	r3, [r7, #15]
      break;
 800715c:	e000      	b.n	8007160 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800715e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007170:	7bfb      	ldrb	r3, [r7, #15]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	fffeff88 	.word	0xfffeff88

08007180 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a40      	ldr	r2, [pc, #256]	; (80072e4 <TIM_Base_SetConfig+0x114>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d013      	beq.n	8007210 <TIM_Base_SetConfig+0x40>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ee:	d00f      	beq.n	8007210 <TIM_Base_SetConfig+0x40>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a3d      	ldr	r2, [pc, #244]	; (80072e8 <TIM_Base_SetConfig+0x118>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d00b      	beq.n	8007210 <TIM_Base_SetConfig+0x40>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a3c      	ldr	r2, [pc, #240]	; (80072ec <TIM_Base_SetConfig+0x11c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d007      	beq.n	8007210 <TIM_Base_SetConfig+0x40>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a3b      	ldr	r2, [pc, #236]	; (80072f0 <TIM_Base_SetConfig+0x120>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d003      	beq.n	8007210 <TIM_Base_SetConfig+0x40>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a3a      	ldr	r2, [pc, #232]	; (80072f4 <TIM_Base_SetConfig+0x124>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d108      	bne.n	8007222 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	4313      	orrs	r3, r2
 8007220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a2f      	ldr	r2, [pc, #188]	; (80072e4 <TIM_Base_SetConfig+0x114>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d02b      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007230:	d027      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a2c      	ldr	r2, [pc, #176]	; (80072e8 <TIM_Base_SetConfig+0x118>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d023      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a2b      	ldr	r2, [pc, #172]	; (80072ec <TIM_Base_SetConfig+0x11c>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d01f      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a2a      	ldr	r2, [pc, #168]	; (80072f0 <TIM_Base_SetConfig+0x120>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d01b      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a29      	ldr	r2, [pc, #164]	; (80072f4 <TIM_Base_SetConfig+0x124>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d017      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a28      	ldr	r2, [pc, #160]	; (80072f8 <TIM_Base_SetConfig+0x128>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d013      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a27      	ldr	r2, [pc, #156]	; (80072fc <TIM_Base_SetConfig+0x12c>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d00f      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a26      	ldr	r2, [pc, #152]	; (8007300 <TIM_Base_SetConfig+0x130>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d00b      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a25      	ldr	r2, [pc, #148]	; (8007304 <TIM_Base_SetConfig+0x134>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d007      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a24      	ldr	r2, [pc, #144]	; (8007308 <TIM_Base_SetConfig+0x138>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d003      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a23      	ldr	r2, [pc, #140]	; (800730c <TIM_Base_SetConfig+0x13c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d108      	bne.n	8007294 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	4313      	orrs	r3, r2
 8007292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	689a      	ldr	r2, [r3, #8]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a0a      	ldr	r2, [pc, #40]	; (80072e4 <TIM_Base_SetConfig+0x114>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d003      	beq.n	80072c8 <TIM_Base_SetConfig+0xf8>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a0c      	ldr	r2, [pc, #48]	; (80072f4 <TIM_Base_SetConfig+0x124>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d103      	bne.n	80072d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	691a      	ldr	r2, [r3, #16]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	615a      	str	r2, [r3, #20]
}
 80072d6:	bf00      	nop
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	40010000 	.word	0x40010000
 80072e8:	40000400 	.word	0x40000400
 80072ec:	40000800 	.word	0x40000800
 80072f0:	40000c00 	.word	0x40000c00
 80072f4:	40010400 	.word	0x40010400
 80072f8:	40014000 	.word	0x40014000
 80072fc:	40014400 	.word	0x40014400
 8007300:	40014800 	.word	0x40014800
 8007304:	40001800 	.word	0x40001800
 8007308:	40001c00 	.word	0x40001c00
 800730c:	40002000 	.word	0x40002000

08007310 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	f023 0201 	bic.w	r2, r3, #1
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	4b2b      	ldr	r3, [pc, #172]	; (80073e8 <TIM_OC1_SetConfig+0xd8>)
 800733c:	4013      	ands	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f023 0303 	bic.w	r3, r3, #3
 8007346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f023 0302 	bic.w	r3, r3, #2
 8007358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	4313      	orrs	r3, r2
 8007362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a21      	ldr	r2, [pc, #132]	; (80073ec <TIM_OC1_SetConfig+0xdc>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d003      	beq.n	8007374 <TIM_OC1_SetConfig+0x64>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a20      	ldr	r2, [pc, #128]	; (80073f0 <TIM_OC1_SetConfig+0xe0>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d10c      	bne.n	800738e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	f023 0308 	bic.w	r3, r3, #8
 800737a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	4313      	orrs	r3, r2
 8007384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f023 0304 	bic.w	r3, r3, #4
 800738c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a16      	ldr	r2, [pc, #88]	; (80073ec <TIM_OC1_SetConfig+0xdc>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d003      	beq.n	800739e <TIM_OC1_SetConfig+0x8e>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a15      	ldr	r2, [pc, #84]	; (80073f0 <TIM_OC1_SetConfig+0xe0>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d111      	bne.n	80073c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	4313      	orrs	r3, r2
 80073c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	685a      	ldr	r2, [r3, #4]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	621a      	str	r2, [r3, #32]
}
 80073dc:	bf00      	nop
 80073de:	371c      	adds	r7, #28
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	fffeff8f 	.word	0xfffeff8f
 80073ec:	40010000 	.word	0x40010000
 80073f0:	40010400 	.word	0x40010400

080073f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b087      	sub	sp, #28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	f023 0210 	bic.w	r2, r3, #16
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	4b2e      	ldr	r3, [pc, #184]	; (80074d8 <TIM_OC2_SetConfig+0xe4>)
 8007420:	4013      	ands	r3, r2
 8007422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800742a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	021b      	lsls	r3, r3, #8
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	4313      	orrs	r3, r2
 8007436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f023 0320 	bic.w	r3, r3, #32
 800743e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	011b      	lsls	r3, r3, #4
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	4313      	orrs	r3, r2
 800744a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a23      	ldr	r2, [pc, #140]	; (80074dc <TIM_OC2_SetConfig+0xe8>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d003      	beq.n	800745c <TIM_OC2_SetConfig+0x68>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a22      	ldr	r2, [pc, #136]	; (80074e0 <TIM_OC2_SetConfig+0xec>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d10d      	bne.n	8007478 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	011b      	lsls	r3, r3, #4
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	4313      	orrs	r3, r2
 800746e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007476:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a18      	ldr	r2, [pc, #96]	; (80074dc <TIM_OC2_SetConfig+0xe8>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d003      	beq.n	8007488 <TIM_OC2_SetConfig+0x94>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a17      	ldr	r2, [pc, #92]	; (80074e0 <TIM_OC2_SetConfig+0xec>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d113      	bne.n	80074b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800748e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007496:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	621a      	str	r2, [r3, #32]
}
 80074ca:	bf00      	nop
 80074cc:	371c      	adds	r7, #28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	feff8fff 	.word	0xfeff8fff
 80074dc:	40010000 	.word	0x40010000
 80074e0:	40010400 	.word	0x40010400

080074e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b087      	sub	sp, #28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	69db      	ldr	r3, [r3, #28]
 800750a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	4b2d      	ldr	r3, [pc, #180]	; (80075c4 <TIM_OC3_SetConfig+0xe0>)
 8007510:	4013      	ands	r3, r2
 8007512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f023 0303 	bic.w	r3, r3, #3
 800751a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800752c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	021b      	lsls	r3, r3, #8
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	4313      	orrs	r3, r2
 8007538:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a22      	ldr	r2, [pc, #136]	; (80075c8 <TIM_OC3_SetConfig+0xe4>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d003      	beq.n	800754a <TIM_OC3_SetConfig+0x66>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a21      	ldr	r2, [pc, #132]	; (80075cc <TIM_OC3_SetConfig+0xe8>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d10d      	bne.n	8007566 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007550:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	021b      	lsls	r3, r3, #8
 8007558:	697a      	ldr	r2, [r7, #20]
 800755a:	4313      	orrs	r3, r2
 800755c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a17      	ldr	r2, [pc, #92]	; (80075c8 <TIM_OC3_SetConfig+0xe4>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d003      	beq.n	8007576 <TIM_OC3_SetConfig+0x92>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a16      	ldr	r2, [pc, #88]	; (80075cc <TIM_OC3_SetConfig+0xe8>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d113      	bne.n	800759e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800757c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	011b      	lsls	r3, r3, #4
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	4313      	orrs	r3, r2
 8007590:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	011b      	lsls	r3, r3, #4
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	4313      	orrs	r3, r2
 800759c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	621a      	str	r2, [r3, #32]
}
 80075b8:	bf00      	nop
 80075ba:	371c      	adds	r7, #28
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	fffeff8f 	.word	0xfffeff8f
 80075c8:	40010000 	.word	0x40010000
 80075cc:	40010400 	.word	0x40010400

080075d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b087      	sub	sp, #28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	4b1e      	ldr	r3, [pc, #120]	; (8007674 <TIM_OC4_SetConfig+0xa4>)
 80075fc:	4013      	ands	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	021b      	lsls	r3, r3, #8
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	4313      	orrs	r3, r2
 8007612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800761a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	031b      	lsls	r3, r3, #12
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	4313      	orrs	r3, r2
 8007626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a13      	ldr	r2, [pc, #76]	; (8007678 <TIM_OC4_SetConfig+0xa8>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d003      	beq.n	8007638 <TIM_OC4_SetConfig+0x68>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a12      	ldr	r2, [pc, #72]	; (800767c <TIM_OC4_SetConfig+0xac>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d109      	bne.n	800764c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800763e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	695b      	ldr	r3, [r3, #20]
 8007644:	019b      	lsls	r3, r3, #6
 8007646:	697a      	ldr	r2, [r7, #20]
 8007648:	4313      	orrs	r3, r2
 800764a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	621a      	str	r2, [r3, #32]
}
 8007666:	bf00      	nop
 8007668:	371c      	adds	r7, #28
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	feff8fff 	.word	0xfeff8fff
 8007678:	40010000 	.word	0x40010000
 800767c:	40010400 	.word	0x40010400

08007680 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	4b1b      	ldr	r3, [pc, #108]	; (8007718 <TIM_OC5_SetConfig+0x98>)
 80076ac:	4013      	ands	r3, r2
 80076ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80076c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	041b      	lsls	r3, r3, #16
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a12      	ldr	r2, [pc, #72]	; (800771c <TIM_OC5_SetConfig+0x9c>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d003      	beq.n	80076de <TIM_OC5_SetConfig+0x5e>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a11      	ldr	r2, [pc, #68]	; (8007720 <TIM_OC5_SetConfig+0xa0>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d109      	bne.n	80076f2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	021b      	lsls	r3, r3, #8
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	621a      	str	r2, [r3, #32]
}
 800770c:	bf00      	nop
 800770e:	371c      	adds	r7, #28
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr
 8007718:	fffeff8f 	.word	0xfffeff8f
 800771c:	40010000 	.word	0x40010000
 8007720:	40010400 	.word	0x40010400

08007724 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007724:	b480      	push	{r7}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800774a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	4b1c      	ldr	r3, [pc, #112]	; (80077c0 <TIM_OC6_SetConfig+0x9c>)
 8007750:	4013      	ands	r3, r2
 8007752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	021b      	lsls	r3, r3, #8
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	4313      	orrs	r3, r2
 800775e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007766:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	051b      	lsls	r3, r3, #20
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	4313      	orrs	r3, r2
 8007772:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a13      	ldr	r2, [pc, #76]	; (80077c4 <TIM_OC6_SetConfig+0xa0>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d003      	beq.n	8007784 <TIM_OC6_SetConfig+0x60>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a12      	ldr	r2, [pc, #72]	; (80077c8 <TIM_OC6_SetConfig+0xa4>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d109      	bne.n	8007798 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800778a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	695b      	ldr	r3, [r3, #20]
 8007790:	029b      	lsls	r3, r3, #10
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	4313      	orrs	r3, r2
 8007796:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	621a      	str	r2, [r3, #32]
}
 80077b2:	bf00      	nop
 80077b4:	371c      	adds	r7, #28
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	feff8fff 	.word	0xfeff8fff
 80077c4:	40010000 	.word	0x40010000
 80077c8:	40010400 	.word	0x40010400

080077cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b087      	sub	sp, #28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6a1b      	ldr	r3, [r3, #32]
 80077dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6a1b      	ldr	r3, [r3, #32]
 80077e2:	f023 0201 	bic.w	r2, r3, #1
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	011b      	lsls	r3, r3, #4
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	4313      	orrs	r3, r2
 8007800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f023 030a 	bic.w	r3, r3, #10
 8007808:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	4313      	orrs	r3, r2
 8007810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	621a      	str	r2, [r3, #32]
}
 800781e:	bf00      	nop
 8007820:	371c      	adds	r7, #28
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800782a:	b480      	push	{r7}
 800782c:	b087      	sub	sp, #28
 800782e:	af00      	add	r7, sp, #0
 8007830:	60f8      	str	r0, [r7, #12]
 8007832:	60b9      	str	r1, [r7, #8]
 8007834:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	f023 0210 	bic.w	r2, r3, #16
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6a1b      	ldr	r3, [r3, #32]
 800784c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007854:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	031b      	lsls	r3, r3, #12
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	4313      	orrs	r3, r2
 800785e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007866:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	011b      	lsls	r3, r3, #4
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	4313      	orrs	r3, r2
 8007870:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	621a      	str	r2, [r3, #32]
}
 800787e:	bf00      	nop
 8007880:	371c      	adds	r7, #28
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800788a:	b480      	push	{r7}
 800788c:	b085      	sub	sp, #20
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	f043 0307 	orr.w	r3, r3, #7
 80078ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	609a      	str	r2, [r3, #8]
}
 80078b4:	bf00      	nop
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b087      	sub	sp, #28
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
 80078cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	021a      	lsls	r2, r3, #8
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	431a      	orrs	r2, r3
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	609a      	str	r2, [r3, #8]
}
 80078f4:	bf00      	nop
 80078f6:	371c      	adds	r7, #28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007914:	2302      	movs	r3, #2
 8007916:	e06d      	b.n	80079f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2202      	movs	r2, #2
 8007924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a30      	ldr	r2, [pc, #192]	; (8007a00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d004      	beq.n	800794c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a2f      	ldr	r2, [pc, #188]	; (8007a04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d108      	bne.n	800795e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007952:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	4313      	orrs	r3, r2
 800795c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007964:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	4313      	orrs	r3, r2
 800796e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a20      	ldr	r2, [pc, #128]	; (8007a00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d022      	beq.n	80079c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800798a:	d01d      	beq.n	80079c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a1d      	ldr	r2, [pc, #116]	; (8007a08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d018      	beq.n	80079c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a1c      	ldr	r2, [pc, #112]	; (8007a0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d013      	beq.n	80079c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a1a      	ldr	r2, [pc, #104]	; (8007a10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d00e      	beq.n	80079c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a15      	ldr	r2, [pc, #84]	; (8007a04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d009      	beq.n	80079c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a16      	ldr	r2, [pc, #88]	; (8007a14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d004      	beq.n	80079c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a15      	ldr	r2, [pc, #84]	; (8007a18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d10c      	bne.n	80079e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	40010000 	.word	0x40010000
 8007a04:	40010400 	.word	0x40010400
 8007a08:	40000400 	.word	0x40000400
 8007a0c:	40000800 	.word	0x40000800
 8007a10:	40000c00 	.word	0x40000c00
 8007a14:	40014000 	.word	0x40014000
 8007a18:	40001800 	.word	0x40001800

08007a1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d101      	bne.n	8007a38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a34:	2302      	movs	r3, #2
 8007a36:	e065      	b.n	8007b04 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	695b      	ldr	r3, [r3, #20]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	699b      	ldr	r3, [r3, #24]
 8007aac:	041b      	lsls	r3, r3, #16
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a16      	ldr	r2, [pc, #88]	; (8007b10 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d004      	beq.n	8007ac6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a14      	ldr	r2, [pc, #80]	; (8007b14 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d115      	bne.n	8007af2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad0:	051b      	lsls	r3, r3, #20
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	69db      	ldr	r3, [r3, #28]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	40010000 	.word	0x40010000
 8007b14:	40010400 	.word	0x40010400

08007b18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e040      	b.n	8007be8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d106      	bne.n	8007b7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f7fa fbd6 	bl	8002328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2224      	movs	r2, #36	; 0x24
 8007b80:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f022 0201 	bic.w	r2, r2, #1
 8007b90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f82c 	bl	8007bf0 <UART_SetConfig>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d101      	bne.n	8007ba2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e022      	b.n	8007be8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d002      	beq.n	8007bb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fa84 	bl	80080b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007bbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689a      	ldr	r2, [r3, #8]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007bce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f042 0201 	orr.w	r2, r2, #1
 8007bde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fb0b 	bl	80081fc <UART_CheckIdleState>
 8007be6:	4603      	mov	r3, r0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b088      	sub	sp, #32
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	689a      	ldr	r2, [r3, #8]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	431a      	orrs	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	69db      	ldr	r3, [r3, #28]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	4ba6      	ldr	r3, [pc, #664]	; (8007eb4 <UART_SetConfig+0x2c4>)
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	6812      	ldr	r2, [r2, #0]
 8007c22:	6979      	ldr	r1, [r7, #20]
 8007c24:	430b      	orrs	r3, r1
 8007c26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68da      	ldr	r2, [r3, #12]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a1b      	ldr	r3, [r3, #32]
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a94      	ldr	r2, [pc, #592]	; (8007eb8 <UART_SetConfig+0x2c8>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d120      	bne.n	8007cae <UART_SetConfig+0xbe>
 8007c6c:	4b93      	ldr	r3, [pc, #588]	; (8007ebc <UART_SetConfig+0x2cc>)
 8007c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c72:	f003 0303 	and.w	r3, r3, #3
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	d816      	bhi.n	8007ca8 <UART_SetConfig+0xb8>
 8007c7a:	a201      	add	r2, pc, #4	; (adr r2, 8007c80 <UART_SetConfig+0x90>)
 8007c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c80:	08007c91 	.word	0x08007c91
 8007c84:	08007c9d 	.word	0x08007c9d
 8007c88:	08007c97 	.word	0x08007c97
 8007c8c:	08007ca3 	.word	0x08007ca3
 8007c90:	2301      	movs	r3, #1
 8007c92:	77fb      	strb	r3, [r7, #31]
 8007c94:	e150      	b.n	8007f38 <UART_SetConfig+0x348>
 8007c96:	2302      	movs	r3, #2
 8007c98:	77fb      	strb	r3, [r7, #31]
 8007c9a:	e14d      	b.n	8007f38 <UART_SetConfig+0x348>
 8007c9c:	2304      	movs	r3, #4
 8007c9e:	77fb      	strb	r3, [r7, #31]
 8007ca0:	e14a      	b.n	8007f38 <UART_SetConfig+0x348>
 8007ca2:	2308      	movs	r3, #8
 8007ca4:	77fb      	strb	r3, [r7, #31]
 8007ca6:	e147      	b.n	8007f38 <UART_SetConfig+0x348>
 8007ca8:	2310      	movs	r3, #16
 8007caa:	77fb      	strb	r3, [r7, #31]
 8007cac:	e144      	b.n	8007f38 <UART_SetConfig+0x348>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a83      	ldr	r2, [pc, #524]	; (8007ec0 <UART_SetConfig+0x2d0>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d132      	bne.n	8007d1e <UART_SetConfig+0x12e>
 8007cb8:	4b80      	ldr	r3, [pc, #512]	; (8007ebc <UART_SetConfig+0x2cc>)
 8007cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cbe:	f003 030c 	and.w	r3, r3, #12
 8007cc2:	2b0c      	cmp	r3, #12
 8007cc4:	d828      	bhi.n	8007d18 <UART_SetConfig+0x128>
 8007cc6:	a201      	add	r2, pc, #4	; (adr r2, 8007ccc <UART_SetConfig+0xdc>)
 8007cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ccc:	08007d01 	.word	0x08007d01
 8007cd0:	08007d19 	.word	0x08007d19
 8007cd4:	08007d19 	.word	0x08007d19
 8007cd8:	08007d19 	.word	0x08007d19
 8007cdc:	08007d0d 	.word	0x08007d0d
 8007ce0:	08007d19 	.word	0x08007d19
 8007ce4:	08007d19 	.word	0x08007d19
 8007ce8:	08007d19 	.word	0x08007d19
 8007cec:	08007d07 	.word	0x08007d07
 8007cf0:	08007d19 	.word	0x08007d19
 8007cf4:	08007d19 	.word	0x08007d19
 8007cf8:	08007d19 	.word	0x08007d19
 8007cfc:	08007d13 	.word	0x08007d13
 8007d00:	2300      	movs	r3, #0
 8007d02:	77fb      	strb	r3, [r7, #31]
 8007d04:	e118      	b.n	8007f38 <UART_SetConfig+0x348>
 8007d06:	2302      	movs	r3, #2
 8007d08:	77fb      	strb	r3, [r7, #31]
 8007d0a:	e115      	b.n	8007f38 <UART_SetConfig+0x348>
 8007d0c:	2304      	movs	r3, #4
 8007d0e:	77fb      	strb	r3, [r7, #31]
 8007d10:	e112      	b.n	8007f38 <UART_SetConfig+0x348>
 8007d12:	2308      	movs	r3, #8
 8007d14:	77fb      	strb	r3, [r7, #31]
 8007d16:	e10f      	b.n	8007f38 <UART_SetConfig+0x348>
 8007d18:	2310      	movs	r3, #16
 8007d1a:	77fb      	strb	r3, [r7, #31]
 8007d1c:	e10c      	b.n	8007f38 <UART_SetConfig+0x348>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a68      	ldr	r2, [pc, #416]	; (8007ec4 <UART_SetConfig+0x2d4>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d120      	bne.n	8007d6a <UART_SetConfig+0x17a>
 8007d28:	4b64      	ldr	r3, [pc, #400]	; (8007ebc <UART_SetConfig+0x2cc>)
 8007d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007d32:	2b30      	cmp	r3, #48	; 0x30
 8007d34:	d013      	beq.n	8007d5e <UART_SetConfig+0x16e>
 8007d36:	2b30      	cmp	r3, #48	; 0x30
 8007d38:	d814      	bhi.n	8007d64 <UART_SetConfig+0x174>
 8007d3a:	2b20      	cmp	r3, #32
 8007d3c:	d009      	beq.n	8007d52 <UART_SetConfig+0x162>
 8007d3e:	2b20      	cmp	r3, #32
 8007d40:	d810      	bhi.n	8007d64 <UART_SetConfig+0x174>
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d002      	beq.n	8007d4c <UART_SetConfig+0x15c>
 8007d46:	2b10      	cmp	r3, #16
 8007d48:	d006      	beq.n	8007d58 <UART_SetConfig+0x168>
 8007d4a:	e00b      	b.n	8007d64 <UART_SetConfig+0x174>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	77fb      	strb	r3, [r7, #31]
 8007d50:	e0f2      	b.n	8007f38 <UART_SetConfig+0x348>
 8007d52:	2302      	movs	r3, #2
 8007d54:	77fb      	strb	r3, [r7, #31]
 8007d56:	e0ef      	b.n	8007f38 <UART_SetConfig+0x348>
 8007d58:	2304      	movs	r3, #4
 8007d5a:	77fb      	strb	r3, [r7, #31]
 8007d5c:	e0ec      	b.n	8007f38 <UART_SetConfig+0x348>
 8007d5e:	2308      	movs	r3, #8
 8007d60:	77fb      	strb	r3, [r7, #31]
 8007d62:	e0e9      	b.n	8007f38 <UART_SetConfig+0x348>
 8007d64:	2310      	movs	r3, #16
 8007d66:	77fb      	strb	r3, [r7, #31]
 8007d68:	e0e6      	b.n	8007f38 <UART_SetConfig+0x348>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a56      	ldr	r2, [pc, #344]	; (8007ec8 <UART_SetConfig+0x2d8>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d120      	bne.n	8007db6 <UART_SetConfig+0x1c6>
 8007d74:	4b51      	ldr	r3, [pc, #324]	; (8007ebc <UART_SetConfig+0x2cc>)
 8007d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d7e:	2bc0      	cmp	r3, #192	; 0xc0
 8007d80:	d013      	beq.n	8007daa <UART_SetConfig+0x1ba>
 8007d82:	2bc0      	cmp	r3, #192	; 0xc0
 8007d84:	d814      	bhi.n	8007db0 <UART_SetConfig+0x1c0>
 8007d86:	2b80      	cmp	r3, #128	; 0x80
 8007d88:	d009      	beq.n	8007d9e <UART_SetConfig+0x1ae>
 8007d8a:	2b80      	cmp	r3, #128	; 0x80
 8007d8c:	d810      	bhi.n	8007db0 <UART_SetConfig+0x1c0>
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d002      	beq.n	8007d98 <UART_SetConfig+0x1a8>
 8007d92:	2b40      	cmp	r3, #64	; 0x40
 8007d94:	d006      	beq.n	8007da4 <UART_SetConfig+0x1b4>
 8007d96:	e00b      	b.n	8007db0 <UART_SetConfig+0x1c0>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	77fb      	strb	r3, [r7, #31]
 8007d9c:	e0cc      	b.n	8007f38 <UART_SetConfig+0x348>
 8007d9e:	2302      	movs	r3, #2
 8007da0:	77fb      	strb	r3, [r7, #31]
 8007da2:	e0c9      	b.n	8007f38 <UART_SetConfig+0x348>
 8007da4:	2304      	movs	r3, #4
 8007da6:	77fb      	strb	r3, [r7, #31]
 8007da8:	e0c6      	b.n	8007f38 <UART_SetConfig+0x348>
 8007daa:	2308      	movs	r3, #8
 8007dac:	77fb      	strb	r3, [r7, #31]
 8007dae:	e0c3      	b.n	8007f38 <UART_SetConfig+0x348>
 8007db0:	2310      	movs	r3, #16
 8007db2:	77fb      	strb	r3, [r7, #31]
 8007db4:	e0c0      	b.n	8007f38 <UART_SetConfig+0x348>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a44      	ldr	r2, [pc, #272]	; (8007ecc <UART_SetConfig+0x2dc>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d125      	bne.n	8007e0c <UART_SetConfig+0x21c>
 8007dc0:	4b3e      	ldr	r3, [pc, #248]	; (8007ebc <UART_SetConfig+0x2cc>)
 8007dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dce:	d017      	beq.n	8007e00 <UART_SetConfig+0x210>
 8007dd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dd4:	d817      	bhi.n	8007e06 <UART_SetConfig+0x216>
 8007dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dda:	d00b      	beq.n	8007df4 <UART_SetConfig+0x204>
 8007ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007de0:	d811      	bhi.n	8007e06 <UART_SetConfig+0x216>
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <UART_SetConfig+0x1fe>
 8007de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dea:	d006      	beq.n	8007dfa <UART_SetConfig+0x20a>
 8007dec:	e00b      	b.n	8007e06 <UART_SetConfig+0x216>
 8007dee:	2300      	movs	r3, #0
 8007df0:	77fb      	strb	r3, [r7, #31]
 8007df2:	e0a1      	b.n	8007f38 <UART_SetConfig+0x348>
 8007df4:	2302      	movs	r3, #2
 8007df6:	77fb      	strb	r3, [r7, #31]
 8007df8:	e09e      	b.n	8007f38 <UART_SetConfig+0x348>
 8007dfa:	2304      	movs	r3, #4
 8007dfc:	77fb      	strb	r3, [r7, #31]
 8007dfe:	e09b      	b.n	8007f38 <UART_SetConfig+0x348>
 8007e00:	2308      	movs	r3, #8
 8007e02:	77fb      	strb	r3, [r7, #31]
 8007e04:	e098      	b.n	8007f38 <UART_SetConfig+0x348>
 8007e06:	2310      	movs	r3, #16
 8007e08:	77fb      	strb	r3, [r7, #31]
 8007e0a:	e095      	b.n	8007f38 <UART_SetConfig+0x348>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a2f      	ldr	r2, [pc, #188]	; (8007ed0 <UART_SetConfig+0x2e0>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d125      	bne.n	8007e62 <UART_SetConfig+0x272>
 8007e16:	4b29      	ldr	r3, [pc, #164]	; (8007ebc <UART_SetConfig+0x2cc>)
 8007e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e24:	d017      	beq.n	8007e56 <UART_SetConfig+0x266>
 8007e26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e2a:	d817      	bhi.n	8007e5c <UART_SetConfig+0x26c>
 8007e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e30:	d00b      	beq.n	8007e4a <UART_SetConfig+0x25a>
 8007e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e36:	d811      	bhi.n	8007e5c <UART_SetConfig+0x26c>
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d003      	beq.n	8007e44 <UART_SetConfig+0x254>
 8007e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e40:	d006      	beq.n	8007e50 <UART_SetConfig+0x260>
 8007e42:	e00b      	b.n	8007e5c <UART_SetConfig+0x26c>
 8007e44:	2301      	movs	r3, #1
 8007e46:	77fb      	strb	r3, [r7, #31]
 8007e48:	e076      	b.n	8007f38 <UART_SetConfig+0x348>
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	77fb      	strb	r3, [r7, #31]
 8007e4e:	e073      	b.n	8007f38 <UART_SetConfig+0x348>
 8007e50:	2304      	movs	r3, #4
 8007e52:	77fb      	strb	r3, [r7, #31]
 8007e54:	e070      	b.n	8007f38 <UART_SetConfig+0x348>
 8007e56:	2308      	movs	r3, #8
 8007e58:	77fb      	strb	r3, [r7, #31]
 8007e5a:	e06d      	b.n	8007f38 <UART_SetConfig+0x348>
 8007e5c:	2310      	movs	r3, #16
 8007e5e:	77fb      	strb	r3, [r7, #31]
 8007e60:	e06a      	b.n	8007f38 <UART_SetConfig+0x348>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a1b      	ldr	r2, [pc, #108]	; (8007ed4 <UART_SetConfig+0x2e4>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d138      	bne.n	8007ede <UART_SetConfig+0x2ee>
 8007e6c:	4b13      	ldr	r3, [pc, #76]	; (8007ebc <UART_SetConfig+0x2cc>)
 8007e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e72:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007e76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e7a:	d017      	beq.n	8007eac <UART_SetConfig+0x2bc>
 8007e7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e80:	d82a      	bhi.n	8007ed8 <UART_SetConfig+0x2e8>
 8007e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e86:	d00b      	beq.n	8007ea0 <UART_SetConfig+0x2b0>
 8007e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e8c:	d824      	bhi.n	8007ed8 <UART_SetConfig+0x2e8>
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d003      	beq.n	8007e9a <UART_SetConfig+0x2aa>
 8007e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e96:	d006      	beq.n	8007ea6 <UART_SetConfig+0x2b6>
 8007e98:	e01e      	b.n	8007ed8 <UART_SetConfig+0x2e8>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	77fb      	strb	r3, [r7, #31]
 8007e9e:	e04b      	b.n	8007f38 <UART_SetConfig+0x348>
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	77fb      	strb	r3, [r7, #31]
 8007ea4:	e048      	b.n	8007f38 <UART_SetConfig+0x348>
 8007ea6:	2304      	movs	r3, #4
 8007ea8:	77fb      	strb	r3, [r7, #31]
 8007eaa:	e045      	b.n	8007f38 <UART_SetConfig+0x348>
 8007eac:	2308      	movs	r3, #8
 8007eae:	77fb      	strb	r3, [r7, #31]
 8007eb0:	e042      	b.n	8007f38 <UART_SetConfig+0x348>
 8007eb2:	bf00      	nop
 8007eb4:	efff69f3 	.word	0xefff69f3
 8007eb8:	40011000 	.word	0x40011000
 8007ebc:	40023800 	.word	0x40023800
 8007ec0:	40004400 	.word	0x40004400
 8007ec4:	40004800 	.word	0x40004800
 8007ec8:	40004c00 	.word	0x40004c00
 8007ecc:	40005000 	.word	0x40005000
 8007ed0:	40011400 	.word	0x40011400
 8007ed4:	40007800 	.word	0x40007800
 8007ed8:	2310      	movs	r3, #16
 8007eda:	77fb      	strb	r3, [r7, #31]
 8007edc:	e02c      	b.n	8007f38 <UART_SetConfig+0x348>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a72      	ldr	r2, [pc, #456]	; (80080ac <UART_SetConfig+0x4bc>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d125      	bne.n	8007f34 <UART_SetConfig+0x344>
 8007ee8:	4b71      	ldr	r3, [pc, #452]	; (80080b0 <UART_SetConfig+0x4c0>)
 8007eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007ef2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ef6:	d017      	beq.n	8007f28 <UART_SetConfig+0x338>
 8007ef8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007efc:	d817      	bhi.n	8007f2e <UART_SetConfig+0x33e>
 8007efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f02:	d00b      	beq.n	8007f1c <UART_SetConfig+0x32c>
 8007f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f08:	d811      	bhi.n	8007f2e <UART_SetConfig+0x33e>
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d003      	beq.n	8007f16 <UART_SetConfig+0x326>
 8007f0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f12:	d006      	beq.n	8007f22 <UART_SetConfig+0x332>
 8007f14:	e00b      	b.n	8007f2e <UART_SetConfig+0x33e>
 8007f16:	2300      	movs	r3, #0
 8007f18:	77fb      	strb	r3, [r7, #31]
 8007f1a:	e00d      	b.n	8007f38 <UART_SetConfig+0x348>
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	77fb      	strb	r3, [r7, #31]
 8007f20:	e00a      	b.n	8007f38 <UART_SetConfig+0x348>
 8007f22:	2304      	movs	r3, #4
 8007f24:	77fb      	strb	r3, [r7, #31]
 8007f26:	e007      	b.n	8007f38 <UART_SetConfig+0x348>
 8007f28:	2308      	movs	r3, #8
 8007f2a:	77fb      	strb	r3, [r7, #31]
 8007f2c:	e004      	b.n	8007f38 <UART_SetConfig+0x348>
 8007f2e:	2310      	movs	r3, #16
 8007f30:	77fb      	strb	r3, [r7, #31]
 8007f32:	e001      	b.n	8007f38 <UART_SetConfig+0x348>
 8007f34:	2310      	movs	r3, #16
 8007f36:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	69db      	ldr	r3, [r3, #28]
 8007f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f40:	d15b      	bne.n	8007ffa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007f42:	7ffb      	ldrb	r3, [r7, #31]
 8007f44:	2b08      	cmp	r3, #8
 8007f46:	d828      	bhi.n	8007f9a <UART_SetConfig+0x3aa>
 8007f48:	a201      	add	r2, pc, #4	; (adr r2, 8007f50 <UART_SetConfig+0x360>)
 8007f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4e:	bf00      	nop
 8007f50:	08007f75 	.word	0x08007f75
 8007f54:	08007f7d 	.word	0x08007f7d
 8007f58:	08007f85 	.word	0x08007f85
 8007f5c:	08007f9b 	.word	0x08007f9b
 8007f60:	08007f8b 	.word	0x08007f8b
 8007f64:	08007f9b 	.word	0x08007f9b
 8007f68:	08007f9b 	.word	0x08007f9b
 8007f6c:	08007f9b 	.word	0x08007f9b
 8007f70:	08007f93 	.word	0x08007f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f74:	f7fd f88a 	bl	800508c <HAL_RCC_GetPCLK1Freq>
 8007f78:	61b8      	str	r0, [r7, #24]
        break;
 8007f7a:	e013      	b.n	8007fa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f7c:	f7fd f89a 	bl	80050b4 <HAL_RCC_GetPCLK2Freq>
 8007f80:	61b8      	str	r0, [r7, #24]
        break;
 8007f82:	e00f      	b.n	8007fa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f84:	4b4b      	ldr	r3, [pc, #300]	; (80080b4 <UART_SetConfig+0x4c4>)
 8007f86:	61bb      	str	r3, [r7, #24]
        break;
 8007f88:	e00c      	b.n	8007fa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f8a:	f7fc ffad 	bl	8004ee8 <HAL_RCC_GetSysClockFreq>
 8007f8e:	61b8      	str	r0, [r7, #24]
        break;
 8007f90:	e008      	b.n	8007fa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f96:	61bb      	str	r3, [r7, #24]
        break;
 8007f98:	e004      	b.n	8007fa4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	77bb      	strb	r3, [r7, #30]
        break;
 8007fa2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d074      	beq.n	8008094 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	005a      	lsls	r2, r3, #1
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	085b      	lsrs	r3, r3, #1
 8007fb4:	441a      	add	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	2b0f      	cmp	r3, #15
 8007fc4:	d916      	bls.n	8007ff4 <UART_SetConfig+0x404>
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fcc:	d212      	bcs.n	8007ff4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	f023 030f 	bic.w	r3, r3, #15
 8007fd6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	085b      	lsrs	r3, r3, #1
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	f003 0307 	and.w	r3, r3, #7
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	89fb      	ldrh	r3, [r7, #14]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	89fa      	ldrh	r2, [r7, #14]
 8007ff0:	60da      	str	r2, [r3, #12]
 8007ff2:	e04f      	b.n	8008094 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	77bb      	strb	r3, [r7, #30]
 8007ff8:	e04c      	b.n	8008094 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ffa:	7ffb      	ldrb	r3, [r7, #31]
 8007ffc:	2b08      	cmp	r3, #8
 8007ffe:	d828      	bhi.n	8008052 <UART_SetConfig+0x462>
 8008000:	a201      	add	r2, pc, #4	; (adr r2, 8008008 <UART_SetConfig+0x418>)
 8008002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008006:	bf00      	nop
 8008008:	0800802d 	.word	0x0800802d
 800800c:	08008035 	.word	0x08008035
 8008010:	0800803d 	.word	0x0800803d
 8008014:	08008053 	.word	0x08008053
 8008018:	08008043 	.word	0x08008043
 800801c:	08008053 	.word	0x08008053
 8008020:	08008053 	.word	0x08008053
 8008024:	08008053 	.word	0x08008053
 8008028:	0800804b 	.word	0x0800804b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800802c:	f7fd f82e 	bl	800508c <HAL_RCC_GetPCLK1Freq>
 8008030:	61b8      	str	r0, [r7, #24]
        break;
 8008032:	e013      	b.n	800805c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008034:	f7fd f83e 	bl	80050b4 <HAL_RCC_GetPCLK2Freq>
 8008038:	61b8      	str	r0, [r7, #24]
        break;
 800803a:	e00f      	b.n	800805c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800803c:	4b1d      	ldr	r3, [pc, #116]	; (80080b4 <UART_SetConfig+0x4c4>)
 800803e:	61bb      	str	r3, [r7, #24]
        break;
 8008040:	e00c      	b.n	800805c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008042:	f7fc ff51 	bl	8004ee8 <HAL_RCC_GetSysClockFreq>
 8008046:	61b8      	str	r0, [r7, #24]
        break;
 8008048:	e008      	b.n	800805c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800804a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800804e:	61bb      	str	r3, [r7, #24]
        break;
 8008050:	e004      	b.n	800805c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008052:	2300      	movs	r3, #0
 8008054:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	77bb      	strb	r3, [r7, #30]
        break;
 800805a:	bf00      	nop
    }

    if (pclk != 0U)
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d018      	beq.n	8008094 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	085a      	lsrs	r2, r3, #1
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	441a      	add	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	fbb2 f3f3 	udiv	r3, r2, r3
 8008074:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	2b0f      	cmp	r3, #15
 800807a:	d909      	bls.n	8008090 <UART_SetConfig+0x4a0>
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008082:	d205      	bcs.n	8008090 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	b29a      	uxth	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	60da      	str	r2, [r3, #12]
 800808e:	e001      	b.n	8008094 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80080a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3720      	adds	r7, #32
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	40007c00 	.word	0x40007c00
 80080b0:	40023800 	.word	0x40023800
 80080b4:	00f42400 	.word	0x00f42400

080080b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c4:	f003 0301 	and.w	r3, r3, #1
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00a      	beq.n	80080e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	430a      	orrs	r2, r1
 80080e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e6:	f003 0302 	and.w	r3, r3, #2
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00a      	beq.n	8008104 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	430a      	orrs	r2, r1
 8008102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008108:	f003 0304 	and.w	r3, r3, #4
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00a      	beq.n	8008126 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	430a      	orrs	r2, r1
 8008124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812a:	f003 0308 	and.w	r3, r3, #8
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00a      	beq.n	8008148 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	430a      	orrs	r2, r1
 8008146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814c:	f003 0310 	and.w	r3, r3, #16
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00a      	beq.n	800816a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	430a      	orrs	r2, r1
 8008168:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816e:	f003 0320 	and.w	r3, r3, #32
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00a      	beq.n	800818c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	430a      	orrs	r2, r1
 800818a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008194:	2b00      	cmp	r3, #0
 8008196:	d01a      	beq.n	80081ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	430a      	orrs	r2, r1
 80081ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081b6:	d10a      	bne.n	80081ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	430a      	orrs	r2, r1
 80081cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00a      	beq.n	80081f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	430a      	orrs	r2, r1
 80081ee:	605a      	str	r2, [r3, #4]
  }
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af02      	add	r7, sp, #8
 8008202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800820c:	f7fa fb1a 	bl	8002844 <HAL_GetTick>
 8008210:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0308 	and.w	r3, r3, #8
 800821c:	2b08      	cmp	r3, #8
 800821e:	d10e      	bne.n	800823e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008220:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f817 	bl	8008262 <UART_WaitOnFlagUntilTimeout>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e00d      	b.n	800825a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2220      	movs	r2, #32
 8008242:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2220      	movs	r2, #32
 8008248:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b09c      	sub	sp, #112	; 0x70
 8008266:	af00      	add	r7, sp, #0
 8008268:	60f8      	str	r0, [r7, #12]
 800826a:	60b9      	str	r1, [r7, #8]
 800826c:	603b      	str	r3, [r7, #0]
 800826e:	4613      	mov	r3, r2
 8008270:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008272:	e0a5      	b.n	80083c0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008274:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800827a:	f000 80a1 	beq.w	80083c0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800827e:	f7fa fae1 	bl	8002844 <HAL_GetTick>
 8008282:	4602      	mov	r2, r0
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800828a:	429a      	cmp	r2, r3
 800828c:	d302      	bcc.n	8008294 <UART_WaitOnFlagUntilTimeout+0x32>
 800828e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008290:	2b00      	cmp	r3, #0
 8008292:	d13e      	bne.n	8008312 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800829c:	e853 3f00 	ldrex	r3, [r3]
 80082a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80082a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082a8:	667b      	str	r3, [r7, #100]	; 0x64
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082b4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082ba:	e841 2300 	strex	r3, r2, [r1]
 80082be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80082c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e6      	bne.n	8008294 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	3308      	adds	r3, #8
 80082cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d0:	e853 3f00 	ldrex	r3, [r3]
 80082d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d8:	f023 0301 	bic.w	r3, r3, #1
 80082dc:	663b      	str	r3, [r7, #96]	; 0x60
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3308      	adds	r3, #8
 80082e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80082e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80082e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082ee:	e841 2300 	strex	r3, r2, [r1]
 80082f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80082f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1e5      	bne.n	80082c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2220      	movs	r2, #32
 80082fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2220      	movs	r2, #32
 8008304:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e067      	b.n	80083e2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0304 	and.w	r3, r3, #4
 800831c:	2b00      	cmp	r3, #0
 800831e:	d04f      	beq.n	80083c0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800832a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800832e:	d147      	bne.n	80083c0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008338:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008342:	e853 3f00 	ldrex	r3, [r3]
 8008346:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800834e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	461a      	mov	r2, r3
 8008356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008358:	637b      	str	r3, [r7, #52]	; 0x34
 800835a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800835e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008360:	e841 2300 	strex	r3, r2, [r1]
 8008364:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1e6      	bne.n	800833a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	3308      	adds	r3, #8
 8008372:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	e853 3f00 	ldrex	r3, [r3]
 800837a:	613b      	str	r3, [r7, #16]
   return(result);
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	f023 0301 	bic.w	r3, r3, #1
 8008382:	66bb      	str	r3, [r7, #104]	; 0x68
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	3308      	adds	r3, #8
 800838a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800838c:	623a      	str	r2, [r7, #32]
 800838e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008390:	69f9      	ldr	r1, [r7, #28]
 8008392:	6a3a      	ldr	r2, [r7, #32]
 8008394:	e841 2300 	strex	r3, r2, [r1]
 8008398:	61bb      	str	r3, [r7, #24]
   return(result);
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1e5      	bne.n	800836c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2220      	movs	r2, #32
 80083a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2220      	movs	r2, #32
 80083aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2220      	movs	r2, #32
 80083b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e010      	b.n	80083e2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	69da      	ldr	r2, [r3, #28]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	4013      	ands	r3, r2
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	bf0c      	ite	eq
 80083d0:	2301      	moveq	r3, #1
 80083d2:	2300      	movne	r3, #0
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	461a      	mov	r2, r3
 80083d8:	79fb      	ldrb	r3, [r7, #7]
 80083da:	429a      	cmp	r2, r3
 80083dc:	f43f af4a 	beq.w	8008274 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3770      	adds	r7, #112	; 0x70
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
	...

080083ec <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d121      	bne.n	8008442 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	4b27      	ldr	r3, [pc, #156]	; (80084a0 <FMC_SDRAM_Init+0xb4>)
 8008404:	4013      	ands	r3, r2
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	6851      	ldr	r1, [r2, #4]
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	6892      	ldr	r2, [r2, #8]
 800840e:	4311      	orrs	r1, r2
 8008410:	683a      	ldr	r2, [r7, #0]
 8008412:	68d2      	ldr	r2, [r2, #12]
 8008414:	4311      	orrs	r1, r2
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	6912      	ldr	r2, [r2, #16]
 800841a:	4311      	orrs	r1, r2
 800841c:	683a      	ldr	r2, [r7, #0]
 800841e:	6952      	ldr	r2, [r2, #20]
 8008420:	4311      	orrs	r1, r2
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	6992      	ldr	r2, [r2, #24]
 8008426:	4311      	orrs	r1, r2
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	69d2      	ldr	r2, [r2, #28]
 800842c:	4311      	orrs	r1, r2
 800842e:	683a      	ldr	r2, [r7, #0]
 8008430:	6a12      	ldr	r2, [r2, #32]
 8008432:	4311      	orrs	r1, r2
 8008434:	683a      	ldr	r2, [r7, #0]
 8008436:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008438:	430a      	orrs	r2, r1
 800843a:	431a      	orrs	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	601a      	str	r2, [r3, #0]
 8008440:	e026      	b.n	8008490 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	69d9      	ldr	r1, [r3, #28]
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	6a1b      	ldr	r3, [r3, #32]
 8008452:	4319      	orrs	r1, r3
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008458:	430b      	orrs	r3, r1
 800845a:	431a      	orrs	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685a      	ldr	r2, [r3, #4]
 8008464:	4b0e      	ldr	r3, [pc, #56]	; (80084a0 <FMC_SDRAM_Init+0xb4>)
 8008466:	4013      	ands	r3, r2
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	6851      	ldr	r1, [r2, #4]
 800846c:	683a      	ldr	r2, [r7, #0]
 800846e:	6892      	ldr	r2, [r2, #8]
 8008470:	4311      	orrs	r1, r2
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	68d2      	ldr	r2, [r2, #12]
 8008476:	4311      	orrs	r1, r2
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	6912      	ldr	r2, [r2, #16]
 800847c:	4311      	orrs	r1, r2
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	6952      	ldr	r2, [r2, #20]
 8008482:	4311      	orrs	r1, r2
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	6992      	ldr	r2, [r2, #24]
 8008488:	430a      	orrs	r2, r1
 800848a:	431a      	orrs	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	ffff8000 	.word	0xffff8000

080084a4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d128      	bne.n	8008508 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	1e59      	subs	r1, r3, #1
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	3b01      	subs	r3, #1
 80084ca:	011b      	lsls	r3, r3, #4
 80084cc:	4319      	orrs	r1, r3
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	3b01      	subs	r3, #1
 80084d4:	021b      	lsls	r3, r3, #8
 80084d6:	4319      	orrs	r1, r3
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	3b01      	subs	r3, #1
 80084de:	031b      	lsls	r3, r3, #12
 80084e0:	4319      	orrs	r1, r3
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	3b01      	subs	r3, #1
 80084e8:	041b      	lsls	r3, r3, #16
 80084ea:	4319      	orrs	r1, r3
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	695b      	ldr	r3, [r3, #20]
 80084f0:	3b01      	subs	r3, #1
 80084f2:	051b      	lsls	r3, r3, #20
 80084f4:	4319      	orrs	r1, r3
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	3b01      	subs	r3, #1
 80084fc:	061b      	lsls	r3, r3, #24
 80084fe:	430b      	orrs	r3, r1
 8008500:	431a      	orrs	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	609a      	str	r2, [r3, #8]
 8008506:	e02d      	b.n	8008564 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	689a      	ldr	r2, [r3, #8]
 800850c:	4b19      	ldr	r3, [pc, #100]	; (8008574 <FMC_SDRAM_Timing_Init+0xd0>)
 800850e:	4013      	ands	r3, r2
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	68d2      	ldr	r2, [r2, #12]
 8008514:	3a01      	subs	r2, #1
 8008516:	0311      	lsls	r1, r2, #12
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	6952      	ldr	r2, [r2, #20]
 800851c:	3a01      	subs	r2, #1
 800851e:	0512      	lsls	r2, r2, #20
 8008520:	430a      	orrs	r2, r1
 8008522:	431a      	orrs	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	1e59      	subs	r1, r3, #1
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	3b01      	subs	r3, #1
 800853c:	011b      	lsls	r3, r3, #4
 800853e:	4319      	orrs	r1, r3
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	3b01      	subs	r3, #1
 8008546:	021b      	lsls	r3, r3, #8
 8008548:	4319      	orrs	r1, r3
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	3b01      	subs	r3, #1
 8008550:	041b      	lsls	r3, r3, #16
 8008552:	4319      	orrs	r1, r3
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	699b      	ldr	r3, [r3, #24]
 8008558:	3b01      	subs	r3, #1
 800855a:	061b      	lsls	r3, r3, #24
 800855c:	430b      	orrs	r3, r1
 800855e:	431a      	orrs	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	ff0f0fff 	.word	0xff0f0fff

08008578 <__libc_init_array>:
 8008578:	b570      	push	{r4, r5, r6, lr}
 800857a:	4d0d      	ldr	r5, [pc, #52]	; (80085b0 <__libc_init_array+0x38>)
 800857c:	4c0d      	ldr	r4, [pc, #52]	; (80085b4 <__libc_init_array+0x3c>)
 800857e:	1b64      	subs	r4, r4, r5
 8008580:	10a4      	asrs	r4, r4, #2
 8008582:	2600      	movs	r6, #0
 8008584:	42a6      	cmp	r6, r4
 8008586:	d109      	bne.n	800859c <__libc_init_array+0x24>
 8008588:	4d0b      	ldr	r5, [pc, #44]	; (80085b8 <__libc_init_array+0x40>)
 800858a:	4c0c      	ldr	r4, [pc, #48]	; (80085bc <__libc_init_array+0x44>)
 800858c:	f000 f820 	bl	80085d0 <_init>
 8008590:	1b64      	subs	r4, r4, r5
 8008592:	10a4      	asrs	r4, r4, #2
 8008594:	2600      	movs	r6, #0
 8008596:	42a6      	cmp	r6, r4
 8008598:	d105      	bne.n	80085a6 <__libc_init_array+0x2e>
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f855 3b04 	ldr.w	r3, [r5], #4
 80085a0:	4798      	blx	r3
 80085a2:	3601      	adds	r6, #1
 80085a4:	e7ee      	b.n	8008584 <__libc_init_array+0xc>
 80085a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085aa:	4798      	blx	r3
 80085ac:	3601      	adds	r6, #1
 80085ae:	e7f2      	b.n	8008596 <__libc_init_array+0x1e>
 80085b0:	08008608 	.word	0x08008608
 80085b4:	08008608 	.word	0x08008608
 80085b8:	08008608 	.word	0x08008608
 80085bc:	0800860c 	.word	0x0800860c

080085c0 <memset>:
 80085c0:	4402      	add	r2, r0
 80085c2:	4603      	mov	r3, r0
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d100      	bne.n	80085ca <memset+0xa>
 80085c8:	4770      	bx	lr
 80085ca:	f803 1b01 	strb.w	r1, [r3], #1
 80085ce:	e7f9      	b.n	80085c4 <memset+0x4>

080085d0 <_init>:
 80085d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d2:	bf00      	nop
 80085d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085d6:	bc08      	pop	{r3}
 80085d8:	469e      	mov	lr, r3
 80085da:	4770      	bx	lr

080085dc <_fini>:
 80085dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085de:	bf00      	nop
 80085e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e2:	bc08      	pop	{r3}
 80085e4:	469e      	mov	lr, r3
 80085e6:	4770      	bx	lr
