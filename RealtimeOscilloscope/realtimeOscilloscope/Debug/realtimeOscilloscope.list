
realtimeOscilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f60  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08008128  08008128  00018128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008140  08008140  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008140  08008140  00018140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008148  08008148  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008148  08008148  00018148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800814c  0800814c  0001814c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006bc  2000000c  0800815c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  200006c8  0800815c  000206c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023fd2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f1b  00000000  00000000  0004400e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e58  00000000  00000000  00047f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cb8  00000000  00000000  00049d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b4d4  00000000  00000000  0004ba40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000259f0  00000000  00000000  00076f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a995  00000000  00000000  0009c904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a7299  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082c4  00000000  00000000  001a72ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008110 	.word	0x08008110

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08008110 	.word	0x08008110

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f002 f94f 	bl	80027b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f82a 	bl	800056c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000518:	f000 f89a 	bl	8000650 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 ff46 	bl	80013ac <MX_GPIO_Init>
  MX_ADC3_Init();
 8000520:	f000 f8c0 	bl	80006a4 <MX_ADC3_Init>
  MX_CRC_Init();
 8000524:	f000 f910 	bl	8000748 <MX_CRC_Init>
  MX_DCMI_Init();
 8000528:	f000 f930 	bl	800078c <MX_DCMI_Init>
  MX_DMA2D_Init();
 800052c:	f000 f962 	bl	80007f4 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000530:	f000 feec 	bl	800130c <MX_FMC_Init>
  MX_I2C3_Init();
 8000534:	f000 f990 	bl	8000858 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000538:	f000 f9ce 	bl	80008d8 <MX_LTDC_Init>
  MX_RTC_Init();
 800053c:	f000 fa4e 	bl	80009dc <MX_RTC_Init>
  MX_SAI2_Init();
 8000540:	f000 faf2 	bl	8000b28 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 8000544:	f000 fb98 	bl	8000c78 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000548:	f000 fbc6 	bl	8000cd8 <MX_SPI2_Init>
  MX_TIM1_Init();
 800054c:	f000 fc02 	bl	8000d54 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000550:	f000 fcac 	bl	8000eac <MX_TIM2_Init>
  MX_TIM3_Init();
 8000554:	f000 fd20 	bl	8000f98 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000558:	f000 fd96 	bl	8001088 <MX_TIM5_Init>
  MX_TIM8_Init();
 800055c:	f000 fe0c 	bl	8001178 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000560:	f000 fe5e 	bl	8001220 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000564:	f000 fea2 	bl	80012ac <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000568:	e7fe      	b.n	8000568 <main+0x5c>
	...

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	; 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	; 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f007 fdc0 	bl	8008100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000590:	f003 fe5a 	bl	8004248 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	4b2c      	ldr	r3, [pc, #176]	; (8000648 <SystemClock_Config+0xdc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	4a2b      	ldr	r2, [pc, #172]	; (8000648 <SystemClock_Config+0xdc>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
 80005a0:	4b29      	ldr	r3, [pc, #164]	; (8000648 <SystemClock_Config+0xdc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	4b27      	ldr	r3, [pc, #156]	; (800064c <SystemClock_Config+0xe0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a26      	ldr	r2, [pc, #152]	; (800064c <SystemClock_Config+0xe0>)
 80005b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b24      	ldr	r3, [pc, #144]	; (800064c <SystemClock_Config+0xe0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80005c4:	2309      	movs	r3, #9
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005ce:	2301      	movs	r3, #1
 80005d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005dc:	2319      	movs	r3, #25
 80005de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80005e0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80005e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80005ea:	2309      	movs	r3, #9
 80005ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fe88 	bl	8004308 <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005fe:	f001 f975 	bl	80018ec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000602:	f003 fe31 	bl	8004268 <HAL_PWREx_EnableOverDrive>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800060c:	f001 f96e 	bl	80018ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2302      	movs	r3, #2
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800061c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000626:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2106      	movs	r1, #6
 800062e:	4618      	mov	r0, r3
 8000630:	f004 f90e 	bl	8004850 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800063a:	f001 f957 	bl	80018ec <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3750      	adds	r7, #80	; 0x50
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b0a2      	sub	sp, #136	; 0x88
 8000654:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2284      	movs	r2, #132	; 0x84
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f007 fd4f 	bl	8008100 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2;
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <PeriphCommonClock_Config+0x50>)
 8000664:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000666:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800066a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800066c:	2305      	movs	r3, #5
 800066e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000670:	2302      	movs	r3, #2
 8000672:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000674:	2303      	movs	r3, #3
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000678:	2301      	movs	r3, #1
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800067c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000680:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000682:	2300      	movs	r3, #0
 8000684:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	4618      	mov	r0, r3
 800068a:	f004 faf9 	bl	8004c80 <HAL_RCCEx_PeriphCLKConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 8000694:	f001 f92a 	bl	80018ec <Error_Handler>
  }
}
 8000698:	bf00      	nop
 800069a:	3788      	adds	r7, #136	; 0x88
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	00100008 	.word	0x00100008

080006a4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006aa:	463b      	mov	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_ADC3_Init+0x98>)
 80006b8:	4a21      	ldr	r2, [pc, #132]	; (8000740 <MX_ADC3_Init+0x9c>)
 80006ba:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_ADC3_Init+0x98>)
 80006be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006c2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006c4:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_ADC3_Init+0x98>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <MX_ADC3_Init+0x98>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	; (800073c <MX_ADC3_Init+0x98>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_ADC3_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_ADC3_Init+0x98>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_ADC3_Init+0x98>)
 80006e6:	4a17      	ldr	r2, [pc, #92]	; (8000744 <MX_ADC3_Init+0xa0>)
 80006e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_ADC3_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_ADC3_Init+0x98>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_ADC3_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_ADC3_Init+0x98>)
 8000700:	2201      	movs	r2, #1
 8000702:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <MX_ADC3_Init+0x98>)
 8000706:	f002 f881 	bl	800280c <HAL_ADC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000710:	f001 f8ec 	bl	80018ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000714:	2304      	movs	r3, #4
 8000716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000718:	2301      	movs	r3, #1
 800071a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	4619      	mov	r1, r3
 8000724:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_ADC3_Init+0x98>)
 8000726:	f002 f8b5 	bl	8002894 <HAL_ADC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000730:	f001 f8dc 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000028 	.word	0x20000028
 8000740:	40012200 	.word	0x40012200
 8000744:	0f000001 	.word	0x0f000001

08000748 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <MX_CRC_Init+0x3c>)
 800074e:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <MX_CRC_Init+0x40>)
 8000750:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_CRC_Init+0x3c>)
 8000754:	2200      	movs	r2, #0
 8000756:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <MX_CRC_Init+0x3c>)
 800075a:	2200      	movs	r2, #0
 800075c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_CRC_Init+0x3c>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <MX_CRC_Init+0x3c>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_CRC_Init+0x3c>)
 800076c:	2201      	movs	r2, #1
 800076e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_CRC_Init+0x3c>)
 8000772:	f002 fbc1 	bl	8002ef8 <HAL_CRC_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800077c:	f001 f8b6 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000070 	.word	0x20000070
 8000788:	40023000 	.word	0x40023000

0800078c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000790:	4b16      	ldr	r3, [pc, #88]	; (80007ec <MX_DCMI_Init+0x60>)
 8000792:	4a17      	ldr	r2, [pc, #92]	; (80007f0 <MX_DCMI_Init+0x64>)
 8000794:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_DCMI_Init+0x60>)
 8000798:	2200      	movs	r2, #0
 800079a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800079c:	4b13      	ldr	r3, [pc, #76]	; (80007ec <MX_DCMI_Init+0x60>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80007a2:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_DCMI_Init+0x60>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80007a8:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_DCMI_Init+0x60>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_DCMI_Init+0x60>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <MX_DCMI_Init+0x60>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_DCMI_Init+0x60>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <MX_DCMI_Init+0x60>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_DCMI_Init+0x60>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <MX_DCMI_Init+0x60>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_DCMI_Init+0x60>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_DCMI_Init+0x60>)
 80007da:	f002 fc77 	bl	80030cc <HAL_DCMI_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80007e4:	f001 f882 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000094 	.word	0x20000094
 80007f0:	50050000 	.word	0x50050000

080007f4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_DMA2D_Init+0x5c>)
 80007fa:	4a16      	ldr	r2, [pc, #88]	; (8000854 <MX_DMA2D_Init+0x60>)
 80007fc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_DMA2D_Init+0x5c>)
 8000800:	2200      	movs	r2, #0
 8000802:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_DMA2D_Init+0x5c>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_DMA2D_Init+0x5c>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_DMA2D_Init+0x5c>)
 8000812:	2200      	movs	r2, #0
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_DMA2D_Init+0x5c>)
 8000818:	2200      	movs	r2, #0
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_DMA2D_Init+0x5c>)
 800081e:	2200      	movs	r2, #0
 8000820:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_DMA2D_Init+0x5c>)
 8000824:	2200      	movs	r2, #0
 8000826:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000828:	4809      	ldr	r0, [pc, #36]	; (8000850 <MX_DMA2D_Init+0x5c>)
 800082a:	f002 fcc9 	bl	80031c0 <HAL_DMA2D_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000834:	f001 f85a 	bl	80018ec <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000838:	2101      	movs	r1, #1
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_DMA2D_Init+0x5c>)
 800083c:	f002 fe1a 	bl	8003474 <HAL_DMA2D_ConfigLayer>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000846:	f001 f851 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000e4 	.word	0x200000e4
 8000854:	4002b000 	.word	0x4002b000

08000858 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_I2C3_Init+0x74>)
 800085e:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <MX_I2C3_Init+0x78>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_I2C3_Init+0x74>)
 8000864:	4a1b      	ldr	r2, [pc, #108]	; (80008d4 <MX_I2C3_Init+0x7c>)
 8000866:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000868:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_I2C3_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <MX_I2C3_Init+0x74>)
 8000870:	2201      	movs	r2, #1
 8000872:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000874:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_I2C3_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_I2C3_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_I2C3_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_I2C3_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_I2C3_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000892:	480e      	ldr	r0, [pc, #56]	; (80008cc <MX_I2C3_Init+0x74>)
 8000894:	f003 f846 	bl	8003924 <HAL_I2C_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800089e:	f001 f825 	bl	80018ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4809      	ldr	r0, [pc, #36]	; (80008cc <MX_I2C3_Init+0x74>)
 80008a6:	f003 f8cd 	bl	8003a44 <HAL_I2CEx_ConfigAnalogFilter>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80008b0:	f001 f81c 	bl	80018ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008b4:	2100      	movs	r1, #0
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_I2C3_Init+0x74>)
 80008b8:	f003 f90f 	bl	8003ada <HAL_I2CEx_ConfigDigitalFilter>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80008c2:	f001 f813 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000124 	.word	0x20000124
 80008d0:	40005c00 	.word	0x40005c00
 80008d4:	00c0eaff 	.word	0x00c0eaff

080008d8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08e      	sub	sp, #56	; 0x38
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2234      	movs	r2, #52	; 0x34
 80008e2:	2100      	movs	r1, #0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f007 fc0b 	bl	8008100 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80008ea:	4b3a      	ldr	r3, [pc, #232]	; (80009d4 <MX_LTDC_Init+0xfc>)
 80008ec:	4a3a      	ldr	r2, [pc, #232]	; (80009d8 <MX_LTDC_Init+0x100>)
 80008ee:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80008f0:	4b38      	ldr	r3, [pc, #224]	; (80009d4 <MX_LTDC_Init+0xfc>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008f6:	4b37      	ldr	r3, [pc, #220]	; (80009d4 <MX_LTDC_Init+0xfc>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008fc:	4b35      	ldr	r3, [pc, #212]	; (80009d4 <MX_LTDC_Init+0xfc>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000902:	4b34      	ldr	r3, [pc, #208]	; (80009d4 <MX_LTDC_Init+0xfc>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000908:	4b32      	ldr	r3, [pc, #200]	; (80009d4 <MX_LTDC_Init+0xfc>)
 800090a:	2228      	movs	r2, #40	; 0x28
 800090c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800090e:	4b31      	ldr	r3, [pc, #196]	; (80009d4 <MX_LTDC_Init+0xfc>)
 8000910:	2209      	movs	r2, #9
 8000912:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000914:	4b2f      	ldr	r3, [pc, #188]	; (80009d4 <MX_LTDC_Init+0xfc>)
 8000916:	2235      	movs	r2, #53	; 0x35
 8000918:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800091a:	4b2e      	ldr	r3, [pc, #184]	; (80009d4 <MX_LTDC_Init+0xfc>)
 800091c:	220b      	movs	r2, #11
 800091e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000920:	4b2c      	ldr	r3, [pc, #176]	; (80009d4 <MX_LTDC_Init+0xfc>)
 8000922:	f240 2215 	movw	r2, #533	; 0x215
 8000926:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000928:	4b2a      	ldr	r3, [pc, #168]	; (80009d4 <MX_LTDC_Init+0xfc>)
 800092a:	f240 121b 	movw	r2, #283	; 0x11b
 800092e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000930:	4b28      	ldr	r3, [pc, #160]	; (80009d4 <MX_LTDC_Init+0xfc>)
 8000932:	f240 2235 	movw	r2, #565	; 0x235
 8000936:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000938:	4b26      	ldr	r3, [pc, #152]	; (80009d4 <MX_LTDC_Init+0xfc>)
 800093a:	f240 121d 	movw	r2, #285	; 0x11d
 800093e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000940:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <MX_LTDC_Init+0xfc>)
 8000942:	2200      	movs	r2, #0
 8000944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000948:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <MX_LTDC_Init+0xfc>)
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000950:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <MX_LTDC_Init+0xfc>)
 8000952:	2200      	movs	r2, #0
 8000954:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000958:	481e      	ldr	r0, [pc, #120]	; (80009d4 <MX_LTDC_Init+0xfc>)
 800095a:	f003 f90b 	bl	8003b74 <HAL_LTDC_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000964:	f000 ffc2 	bl	80018ec <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800096c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000970:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000976:	f44f 7388 	mov.w	r3, #272	; 0x110
 800097a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800097c:	2302      	movs	r3, #2
 800097e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000980:	23ff      	movs	r3, #255	; 0xff
 8000982:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000988:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800098c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800098e:	2307      	movs	r3, #7
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000992:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000998:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800099e:	f44f 7388 	mov.w	r3, #272	; 0x110
 80009a2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2200      	movs	r2, #0
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_LTDC_Init+0xfc>)
 80009be:	f003 fa6b 	bl	8003e98 <HAL_LTDC_ConfigLayer>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80009c8:	f000 ff90 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	3738      	adds	r7, #56	; 0x38
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000170 	.word	0x20000170
 80009d8:	40016800 	.word	0x40016800

080009dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b092      	sub	sp, #72	; 0x48
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
 80009f2:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80009f8:	463b      	mov	r3, r7
 80009fa:	222c      	movs	r2, #44	; 0x2c
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f007 fb7e 	bl	8008100 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a04:	4b46      	ldr	r3, [pc, #280]	; (8000b20 <MX_RTC_Init+0x144>)
 8000a06:	4a47      	ldr	r2, [pc, #284]	; (8000b24 <MX_RTC_Init+0x148>)
 8000a08:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a0a:	4b45      	ldr	r3, [pc, #276]	; (8000b20 <MX_RTC_Init+0x144>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a10:	4b43      	ldr	r3, [pc, #268]	; (8000b20 <MX_RTC_Init+0x144>)
 8000a12:	227f      	movs	r2, #127	; 0x7f
 8000a14:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a16:	4b42      	ldr	r3, [pc, #264]	; (8000b20 <MX_RTC_Init+0x144>)
 8000a18:	22ff      	movs	r2, #255	; 0xff
 8000a1a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a1c:	4b40      	ldr	r3, [pc, #256]	; (8000b20 <MX_RTC_Init+0x144>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a22:	4b3f      	ldr	r3, [pc, #252]	; (8000b20 <MX_RTC_Init+0x144>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a28:	4b3d      	ldr	r3, [pc, #244]	; (8000b20 <MX_RTC_Init+0x144>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a2e:	483c      	ldr	r0, [pc, #240]	; (8000b20 <MX_RTC_Init+0x144>)
 8000a30:	f004 fe5a 	bl	80056e8 <HAL_RTC_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000a3a:	f000 ff57 	bl	80018ec <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a54:	2300      	movs	r3, #0
 8000a56:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4619      	mov	r1, r3
 8000a60:	482f      	ldr	r0, [pc, #188]	; (8000b20 <MX_RTC_Init+0x144>)
 8000a62:	f004 fed3 	bl	800580c <HAL_RTC_SetTime>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000a6c:	f000 ff3e 	bl	80018ec <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a70:	2301      	movs	r3, #1
 8000a72:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000a76:	2301      	movs	r3, #1
 8000a78:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4823      	ldr	r0, [pc, #140]	; (8000b20 <MX_RTC_Init+0x144>)
 8000a92:	f004 ff79 	bl	8005988 <HAL_RTC_SetDate>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000a9c:	f000 ff26 	bl	80018ec <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000aca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4812      	ldr	r0, [pc, #72]	; (8000b20 <MX_RTC_Init+0x144>)
 8000ad8:	f004 fffe 	bl	8005ad8 <HAL_RTC_SetAlarm>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000ae2:	f000 ff03 	bl	80018ec <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000aec:	463b      	mov	r3, r7
 8000aee:	2201      	movs	r2, #1
 8000af0:	4619      	mov	r1, r3
 8000af2:	480b      	ldr	r0, [pc, #44]	; (8000b20 <MX_RTC_Init+0x144>)
 8000af4:	f004 fff0 	bl	8005ad8 <HAL_RTC_SetAlarm>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000afe:	f000 fef5 	bl	80018ec <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000b02:	2202      	movs	r2, #2
 8000b04:	2100      	movs	r1, #0
 8000b06:	4806      	ldr	r0, [pc, #24]	; (8000b20 <MX_RTC_Init+0x144>)
 8000b08:	f005 f970 	bl	8005dec <HAL_RTCEx_SetTimeStamp>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000b12:	f000 feeb 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	3748      	adds	r7, #72	; 0x48
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000218 	.word	0x20000218
 8000b24:	40002800 	.word	0x40002800

08000b28 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000b2c:	4b4d      	ldr	r3, [pc, #308]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000b2e:	4a4e      	ldr	r2, [pc, #312]	; (8000c68 <MX_SAI2_Init+0x140>)
 8000b30:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b32:	4b4c      	ldr	r3, [pc, #304]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000b38:	4b4a      	ldr	r3, [pc, #296]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000b3e:	4b49      	ldr	r3, [pc, #292]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000b40:	2240      	movs	r2, #64	; 0x40
 8000b42:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000b44:	4b47      	ldr	r3, [pc, #284]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000b4a:	4b46      	ldr	r3, [pc, #280]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b50:	4b44      	ldr	r3, [pc, #272]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b56:	4b43      	ldr	r3, [pc, #268]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b5c:	4b41      	ldr	r3, [pc, #260]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b62:	4b40      	ldr	r3, [pc, #256]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000b68:	4b3e      	ldr	r3, [pc, #248]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000b6a:	4a40      	ldr	r2, [pc, #256]	; (8000c6c <MX_SAI2_Init+0x144>)
 8000b6c:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b6e:	4b3d      	ldr	r3, [pc, #244]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b74:	4b3b      	ldr	r3, [pc, #236]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b7a:	4b3a      	ldr	r3, [pc, #232]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000b80:	4b38      	ldr	r3, [pc, #224]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000b86:	4b37      	ldr	r3, [pc, #220]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000b88:	2208      	movs	r2, #8
 8000b8a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000b8c:	4b35      	ldr	r3, [pc, #212]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000b92:	4b34      	ldr	r3, [pc, #208]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000b98:	4b32      	ldr	r3, [pc, #200]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000b9e:	4b31      	ldr	r3, [pc, #196]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000ba4:	4b2f      	ldr	r3, [pc, #188]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000baa:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000bb0:	4b2c      	ldr	r3, [pc, #176]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000bb6:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000bbc:	4829      	ldr	r0, [pc, #164]	; (8000c64 <MX_SAI2_Init+0x13c>)
 8000bbe:	f005 f96b 	bl	8005e98 <HAL_SAI_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000bc8:	f000 fe90 	bl	80018ec <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000bcc:	4b28      	ldr	r3, [pc, #160]	; (8000c70 <MX_SAI2_Init+0x148>)
 8000bce:	4a29      	ldr	r2, [pc, #164]	; (8000c74 <MX_SAI2_Init+0x14c>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000bd2:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <MX_SAI2_Init+0x148>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000bd8:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <MX_SAI2_Init+0x148>)
 8000bda:	2203      	movs	r2, #3
 8000bdc:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000bde:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <MX_SAI2_Init+0x148>)
 8000be0:	2240      	movs	r2, #64	; 0x40
 8000be2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000be4:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <MX_SAI2_Init+0x148>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000bea:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <MX_SAI2_Init+0x148>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <MX_SAI2_Init+0x148>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000bf6:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <MX_SAI2_Init+0x148>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000bfc:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <MX_SAI2_Init+0x148>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c02:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <MX_SAI2_Init+0x148>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c08:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <MX_SAI2_Init+0x148>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <MX_SAI2_Init+0x148>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000c14:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_SAI2_Init+0x148>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <MX_SAI2_Init+0x148>)
 8000c1c:	2208      	movs	r2, #8
 8000c1e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_SAI2_Init+0x148>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_SAI2_Init+0x148>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000c2c:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_SAI2_Init+0x148>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_SAI2_Init+0x148>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000c38:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <MX_SAI2_Init+0x148>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_SAI2_Init+0x148>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <MX_SAI2_Init+0x148>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_SAI2_Init+0x148>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000c50:	4807      	ldr	r0, [pc, #28]	; (8000c70 <MX_SAI2_Init+0x148>)
 8000c52:	f005 f921 	bl	8005e98 <HAL_SAI_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000c5c:	f000 fe46 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000238 	.word	0x20000238
 8000c68:	40015c04 	.word	0x40015c04
 8000c6c:	0002ee00 	.word	0x0002ee00
 8000c70:	200002bc 	.word	0x200002bc
 8000c74:	40015c24 	.word	0x40015c24

08000c78 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000c7c:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_SPDIFRX_Init+0x5c>)
 8000c7e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000c82:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <MX_SPDIFRX_Init+0x5c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <MX_SPDIFRX_Init+0x5c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000c90:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <MX_SPDIFRX_Init+0x5c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_SPDIFRX_Init+0x5c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <MX_SPDIFRX_Init+0x5c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_SPDIFRX_Init+0x5c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <MX_SPDIFRX_Init+0x5c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_SPDIFRX_Init+0x5c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <MX_SPDIFRX_Init+0x5c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <MX_SPDIFRX_Init+0x5c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000cc0:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <MX_SPDIFRX_Init+0x5c>)
 8000cc2:	f005 fad3 	bl	800626c <HAL_SPDIFRX_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000ccc:	f000 fe0e 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000340 	.word	0x20000340

08000cd8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <MX_SPI2_Init+0x74>)
 8000cde:	4a1c      	ldr	r2, [pc, #112]	; (8000d50 <MX_SPI2_Init+0x78>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_SPI2_Init+0x74>)
 8000ce4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ce8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cea:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <MX_SPI2_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cf0:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <MX_SPI2_Init+0x74>)
 8000cf2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cf6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_SPI2_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <MX_SPI2_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_SPI2_Init+0x74>)
 8000d06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d0a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_SPI2_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_SPI2_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <MX_SPI2_Init+0x74>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <MX_SPI2_Init+0x74>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d24:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <MX_SPI2_Init+0x74>)
 8000d26:	2207      	movs	r2, #7
 8000d28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <MX_SPI2_Init+0x74>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_SPI2_Init+0x74>)
 8000d32:	2208      	movs	r2, #8
 8000d34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_SPI2_Init+0x74>)
 8000d38:	f005 faf4 	bl	8006324 <HAL_SPI_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000d42:	f000 fdd3 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2000038c 	.word	0x2000038c
 8000d50:	40003800 	.word	0x40003800

08000d54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b09a      	sub	sp, #104	; 0x68
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d68:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
 8000d84:	615a      	str	r2, [r3, #20]
 8000d86:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	222c      	movs	r2, #44	; 0x2c
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f007 f9b6 	bl	8008100 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d94:	4b43      	ldr	r3, [pc, #268]	; (8000ea4 <MX_TIM1_Init+0x150>)
 8000d96:	4a44      	ldr	r2, [pc, #272]	; (8000ea8 <MX_TIM1_Init+0x154>)
 8000d98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d9a:	4b42      	ldr	r3, [pc, #264]	; (8000ea4 <MX_TIM1_Init+0x150>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da0:	4b40      	ldr	r3, [pc, #256]	; (8000ea4 <MX_TIM1_Init+0x150>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000da6:	4b3f      	ldr	r3, [pc, #252]	; (8000ea4 <MX_TIM1_Init+0x150>)
 8000da8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dae:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <MX_TIM1_Init+0x150>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000db4:	4b3b      	ldr	r3, [pc, #236]	; (8000ea4 <MX_TIM1_Init+0x150>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dba:	4b3a      	ldr	r3, [pc, #232]	; (8000ea4 <MX_TIM1_Init+0x150>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dc0:	4838      	ldr	r0, [pc, #224]	; (8000ea4 <MX_TIM1_Init+0x150>)
 8000dc2:	f005 fb5a 	bl	800647a <HAL_TIM_Base_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000dcc:	f000 fd8e 	bl	80018ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dd6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4831      	ldr	r0, [pc, #196]	; (8000ea4 <MX_TIM1_Init+0x150>)
 8000dde:	f005 fea5 	bl	8006b2c <HAL_TIM_ConfigClockSource>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000de8:	f000 fd80 	bl	80018ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dec:	482d      	ldr	r0, [pc, #180]	; (8000ea4 <MX_TIM1_Init+0x150>)
 8000dee:	f005 fc13 	bl	8006618 <HAL_TIM_PWM_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000df8:	f000 fd78 	bl	80018ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e00:	2300      	movs	r3, #0
 8000e02:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4825      	ldr	r0, [pc, #148]	; (8000ea4 <MX_TIM1_Init+0x150>)
 8000e10:	f006 fb16 	bl	8007440 <HAL_TIMEx_MasterConfigSynchronization>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000e1a:	f000 fd67 	bl	80018ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e1e:	2360      	movs	r3, #96	; 0x60
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e26:	2300      	movs	r3, #0
 8000e28:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e32:	2300      	movs	r3, #0
 8000e34:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e3e:	2200      	movs	r2, #0
 8000e40:	4619      	mov	r1, r3
 8000e42:	4818      	ldr	r0, [pc, #96]	; (8000ea4 <MX_TIM1_Init+0x150>)
 8000e44:	f005 fd5e 	bl	8006904 <HAL_TIM_PWM_ConfigChannel>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000e4e:	f000 fd4d 	bl	80018ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	4619      	mov	r1, r3
 8000e86:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <MX_TIM1_Init+0x150>)
 8000e88:	f006 fb68 	bl	800755c <HAL_TIMEx_ConfigBreakDeadTime>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000e92:	f000 fd2b 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e96:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <MX_TIM1_Init+0x150>)
 8000e98:	f001 f95a 	bl	8002150 <HAL_TIM_MspPostInit>

}
 8000e9c:	bf00      	nop
 8000e9e:	3768      	adds	r7, #104	; 0x68
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200003f0 	.word	0x200003f0
 8000ea8:	40010000 	.word	0x40010000

08000eac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08e      	sub	sp, #56	; 0x38
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ecc:	463b      	mov	r3, r7
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]
 8000eda:	615a      	str	r2, [r3, #20]
 8000edc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ede:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <MX_TIM2_Init+0xe8>)
 8000ee0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ee6:	4b2b      	ldr	r3, [pc, #172]	; (8000f94 <MX_TIM2_Init+0xe8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eec:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <MX_TIM2_Init+0xe8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ef2:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <MX_TIM2_Init+0xe8>)
 8000ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efa:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <MX_TIM2_Init+0xe8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f00:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <MX_TIM2_Init+0xe8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f06:	4823      	ldr	r0, [pc, #140]	; (8000f94 <MX_TIM2_Init+0xe8>)
 8000f08:	f005 fab7 	bl	800647a <HAL_TIM_Base_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000f12:	f000 fceb 	bl	80018ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f20:	4619      	mov	r1, r3
 8000f22:	481c      	ldr	r0, [pc, #112]	; (8000f94 <MX_TIM2_Init+0xe8>)
 8000f24:	f005 fe02 	bl	8006b2c <HAL_TIM_ConfigClockSource>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000f2e:	f000 fcdd 	bl	80018ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f32:	4818      	ldr	r0, [pc, #96]	; (8000f94 <MX_TIM2_Init+0xe8>)
 8000f34:	f005 fb70 	bl	8006618 <HAL_TIM_PWM_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000f3e:	f000 fcd5 	bl	80018ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4810      	ldr	r0, [pc, #64]	; (8000f94 <MX_TIM2_Init+0xe8>)
 8000f52:	f006 fa75 	bl	8007440 <HAL_TIMEx_MasterConfigSynchronization>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f5c:	f000 fcc6 	bl	80018ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f60:	2360      	movs	r3, #96	; 0x60
 8000f62:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f70:	463b      	mov	r3, r7
 8000f72:	2200      	movs	r2, #0
 8000f74:	4619      	mov	r1, r3
 8000f76:	4807      	ldr	r0, [pc, #28]	; (8000f94 <MX_TIM2_Init+0xe8>)
 8000f78:	f005 fcc4 	bl	8006904 <HAL_TIM_PWM_ConfigChannel>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000f82:	f000 fcb3 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f86:	4803      	ldr	r0, [pc, #12]	; (8000f94 <MX_TIM2_Init+0xe8>)
 8000f88:	f001 f8e2 	bl	8002150 <HAL_TIM_MspPostInit>

}
 8000f8c:	bf00      	nop
 8000f8e:	3738      	adds	r7, #56	; 0x38
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	2000043c 	.word	0x2000043c

08000f98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08e      	sub	sp, #56	; 0x38
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb8:	463b      	mov	r3, r7
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	611a      	str	r2, [r3, #16]
 8000fc6:	615a      	str	r2, [r3, #20]
 8000fc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fca:	4b2d      	ldr	r3, [pc, #180]	; (8001080 <MX_TIM3_Init+0xe8>)
 8000fcc:	4a2d      	ldr	r2, [pc, #180]	; (8001084 <MX_TIM3_Init+0xec>)
 8000fce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000fd0:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <MX_TIM3_Init+0xe8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd6:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <MX_TIM3_Init+0xe8>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000fdc:	4b28      	ldr	r3, [pc, #160]	; (8001080 <MX_TIM3_Init+0xe8>)
 8000fde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fe2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe4:	4b26      	ldr	r3, [pc, #152]	; (8001080 <MX_TIM3_Init+0xe8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fea:	4b25      	ldr	r3, [pc, #148]	; (8001080 <MX_TIM3_Init+0xe8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ff0:	4823      	ldr	r0, [pc, #140]	; (8001080 <MX_TIM3_Init+0xe8>)
 8000ff2:	f005 fa42 	bl	800647a <HAL_TIM_Base_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ffc:	f000 fc76 	bl	80018ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001006:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800100a:	4619      	mov	r1, r3
 800100c:	481c      	ldr	r0, [pc, #112]	; (8001080 <MX_TIM3_Init+0xe8>)
 800100e:	f005 fd8d 	bl	8006b2c <HAL_TIM_ConfigClockSource>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001018:	f000 fc68 	bl	80018ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800101c:	4818      	ldr	r0, [pc, #96]	; (8001080 <MX_TIM3_Init+0xe8>)
 800101e:	f005 fafb 	bl	8006618 <HAL_TIM_PWM_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001028:	f000 fc60 	bl	80018ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4619      	mov	r1, r3
 800103a:	4811      	ldr	r0, [pc, #68]	; (8001080 <MX_TIM3_Init+0xe8>)
 800103c:	f006 fa00 	bl	8007440 <HAL_TIMEx_MasterConfigSynchronization>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001046:	f000 fc51 	bl	80018ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800104a:	2360      	movs	r3, #96	; 0x60
 800104c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800105a:	463b      	mov	r3, r7
 800105c:	2200      	movs	r2, #0
 800105e:	4619      	mov	r1, r3
 8001060:	4807      	ldr	r0, [pc, #28]	; (8001080 <MX_TIM3_Init+0xe8>)
 8001062:	f005 fc4f 	bl	8006904 <HAL_TIM_PWM_ConfigChannel>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800106c:	f000 fc3e 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001070:	4803      	ldr	r0, [pc, #12]	; (8001080 <MX_TIM3_Init+0xe8>)
 8001072:	f001 f86d 	bl	8002150 <HAL_TIM_MspPostInit>

}
 8001076:	bf00      	nop
 8001078:	3738      	adds	r7, #56	; 0x38
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000488 	.word	0x20000488
 8001084:	40000400 	.word	0x40000400

08001088 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08e      	sub	sp, #56	; 0x38
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800108e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a8:	463b      	mov	r3, r7
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]
 80010b6:	615a      	str	r2, [r3, #20]
 80010b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010ba:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <MX_TIM5_Init+0xe8>)
 80010bc:	4a2d      	ldr	r2, [pc, #180]	; (8001174 <MX_TIM5_Init+0xec>)
 80010be:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80010c0:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <MX_TIM5_Init+0xe8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c6:	4b2a      	ldr	r3, [pc, #168]	; (8001170 <MX_TIM5_Init+0xe8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80010cc:	4b28      	ldr	r3, [pc, #160]	; (8001170 <MX_TIM5_Init+0xe8>)
 80010ce:	f04f 32ff 	mov.w	r2, #4294967295
 80010d2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d4:	4b26      	ldr	r3, [pc, #152]	; (8001170 <MX_TIM5_Init+0xe8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010da:	4b25      	ldr	r3, [pc, #148]	; (8001170 <MX_TIM5_Init+0xe8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80010e0:	4823      	ldr	r0, [pc, #140]	; (8001170 <MX_TIM5_Init+0xe8>)
 80010e2:	f005 f9ca 	bl	800647a <HAL_TIM_Base_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80010ec:	f000 fbfe 	bl	80018ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80010f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010fa:	4619      	mov	r1, r3
 80010fc:	481c      	ldr	r0, [pc, #112]	; (8001170 <MX_TIM5_Init+0xe8>)
 80010fe:	f005 fd15 	bl	8006b2c <HAL_TIM_ConfigClockSource>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001108:	f000 fbf0 	bl	80018ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800110c:	4818      	ldr	r0, [pc, #96]	; (8001170 <MX_TIM5_Init+0xe8>)
 800110e:	f005 fa83 	bl	8006618 <HAL_TIM_PWM_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001118:	f000 fbe8 	bl	80018ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	4619      	mov	r1, r3
 800112a:	4811      	ldr	r0, [pc, #68]	; (8001170 <MX_TIM5_Init+0xe8>)
 800112c:	f006 f988 	bl	8007440 <HAL_TIMEx_MasterConfigSynchronization>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001136:	f000 fbd9 	bl	80018ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800113a:	2360      	movs	r3, #96	; 0x60
 800113c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800114a:	463b      	mov	r3, r7
 800114c:	220c      	movs	r2, #12
 800114e:	4619      	mov	r1, r3
 8001150:	4807      	ldr	r0, [pc, #28]	; (8001170 <MX_TIM5_Init+0xe8>)
 8001152:	f005 fbd7 	bl	8006904 <HAL_TIM_PWM_ConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800115c:	f000 fbc6 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001160:	4803      	ldr	r0, [pc, #12]	; (8001170 <MX_TIM5_Init+0xe8>)
 8001162:	f000 fff5 	bl	8002150 <HAL_TIM_MspPostInit>

}
 8001166:	bf00      	nop
 8001168:	3738      	adds	r7, #56	; 0x38
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200004d4 	.word	0x200004d4
 8001174:	40000c00 	.word	0x40000c00

08001178 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001196:	4b20      	ldr	r3, [pc, #128]	; (8001218 <MX_TIM8_Init+0xa0>)
 8001198:	4a20      	ldr	r2, [pc, #128]	; (800121c <MX_TIM8_Init+0xa4>)
 800119a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800119c:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <MX_TIM8_Init+0xa0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a2:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <MX_TIM8_Init+0xa0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <MX_TIM8_Init+0xa0>)
 80011aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ae:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <MX_TIM8_Init+0xa0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011b6:	4b18      	ldr	r3, [pc, #96]	; (8001218 <MX_TIM8_Init+0xa0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <MX_TIM8_Init+0xa0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80011c2:	4815      	ldr	r0, [pc, #84]	; (8001218 <MX_TIM8_Init+0xa0>)
 80011c4:	f005 f959 	bl	800647a <HAL_TIM_Base_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80011ce:	f000 fb8d 	bl	80018ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	4619      	mov	r1, r3
 80011de:	480e      	ldr	r0, [pc, #56]	; (8001218 <MX_TIM8_Init+0xa0>)
 80011e0:	f005 fca4 	bl	8006b2c <HAL_TIM_ConfigClockSource>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80011ea:	f000 fb7f 	bl	80018ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	4619      	mov	r1, r3
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <MX_TIM8_Init+0xa0>)
 8001200:	f006 f91e 	bl	8007440 <HAL_TIMEx_MasterConfigSynchronization>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800120a:	f000 fb6f 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	3720      	adds	r7, #32
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000520 	.word	0x20000520
 800121c:	40010400 	.word	0x40010400

08001220 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
 8001234:	615a      	str	r2, [r3, #20]
 8001236:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_TIM12_Init+0x84>)
 800123a:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <MX_TIM12_Init+0x88>)
 800123c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <MX_TIM12_Init+0x84>)
 8001240:	2200      	movs	r2, #0
 8001242:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001244:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_TIM12_Init+0x84>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <MX_TIM12_Init+0x84>)
 800124c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001250:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_TIM12_Init+0x84>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_TIM12_Init+0x84>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800125e:	4811      	ldr	r0, [pc, #68]	; (80012a4 <MX_TIM12_Init+0x84>)
 8001260:	f005 f9da 	bl	8006618 <HAL_TIM_PWM_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800126a:	f000 fb3f 	bl	80018ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800126e:	2360      	movs	r3, #96	; 0x60
 8001270:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2200      	movs	r2, #0
 8001282:	4619      	mov	r1, r3
 8001284:	4807      	ldr	r0, [pc, #28]	; (80012a4 <MX_TIM12_Init+0x84>)
 8001286:	f005 fb3d 	bl	8006904 <HAL_TIM_PWM_ConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001290:	f000 fb2c 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <MX_TIM12_Init+0x84>)
 8001296:	f000 ff5b 	bl	8002150 <HAL_TIM_MspPostInit>

}
 800129a:	bf00      	nop
 800129c:	3720      	adds	r7, #32
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	2000056c 	.word	0x2000056c
 80012a8:	40001800 	.word	0x40001800

080012ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <MX_USART1_UART_Init+0x58>)
 80012b2:	4a15      	ldr	r2, [pc, #84]	; (8001308 <MX_USART1_UART_Init+0x5c>)
 80012b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <MX_USART1_UART_Init+0x58>)
 80012b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_USART1_UART_Init+0x58>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_USART1_UART_Init+0x58>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_USART1_UART_Init+0x58>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_USART1_UART_Init+0x58>)
 80012d2:	220c      	movs	r2, #12
 80012d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <MX_USART1_UART_Init+0x58>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_USART1_UART_Init+0x58>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <MX_USART1_UART_Init+0x58>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_USART1_UART_Init+0x58>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_USART1_UART_Init+0x58>)
 80012f0:	f006 f9d0 	bl	8007694 <HAL_UART_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80012fa:	f000 faf7 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200005b8 	.word	0x200005b8
 8001308:	40011000 	.word	0x40011000

0800130c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
 8001320:	615a      	str	r2, [r3, #20]
 8001322:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001324:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <MX_FMC_Init+0x98>)
 8001326:	4a20      	ldr	r2, [pc, #128]	; (80013a8 <MX_FMC_Init+0x9c>)
 8001328:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800132a:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <MX_FMC_Init+0x98>)
 800132c:	2200      	movs	r2, #0
 800132e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001330:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <MX_FMC_Init+0x98>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001336:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <MX_FMC_Init+0x98>)
 8001338:	2204      	movs	r2, #4
 800133a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <MX_FMC_Init+0x98>)
 800133e:	2210      	movs	r2, #16
 8001340:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <MX_FMC_Init+0x98>)
 8001344:	2240      	movs	r2, #64	; 0x40
 8001346:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001348:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <MX_FMC_Init+0x98>)
 800134a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800134e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001350:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <MX_FMC_Init+0x98>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001356:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <MX_FMC_Init+0x98>)
 8001358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800135c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_FMC_Init+0x98>)
 8001360:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001364:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <MX_FMC_Init+0x98>)
 8001368:	2200      	movs	r2, #0
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800136c:	2302      	movs	r3, #2
 800136e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001370:	2307      	movs	r3, #7
 8001372:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001374:	2304      	movs	r3, #4
 8001376:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001378:	2307      	movs	r3, #7
 800137a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800137c:	2303      	movs	r3, #3
 800137e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001380:	2302      	movs	r3, #2
 8001382:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001384:	2302      	movs	r3, #2
 8001386:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	4619      	mov	r1, r3
 800138c:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_FMC_Init+0x98>)
 800138e:	f004 ff39 	bl	8006204 <HAL_SDRAM_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001398:	f000 faa8 	bl	80018ec <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800139c:	bf00      	nop
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	2000063c 	.word	0x2000063c
 80013a8:	a0000140 	.word	0xa0000140

080013ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b090      	sub	sp, #64	; 0x40
 80013b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013c2:	4baf      	ldr	r3, [pc, #700]	; (8001680 <MX_GPIO_Init+0x2d4>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4aae      	ldr	r2, [pc, #696]	; (8001680 <MX_GPIO_Init+0x2d4>)
 80013c8:	f043 0310 	orr.w	r3, r3, #16
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4bac      	ldr	r3, [pc, #688]	; (8001680 <MX_GPIO_Init+0x2d4>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80013d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013da:	4ba9      	ldr	r3, [pc, #676]	; (8001680 <MX_GPIO_Init+0x2d4>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4aa8      	ldr	r2, [pc, #672]	; (8001680 <MX_GPIO_Init+0x2d4>)
 80013e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4ba6      	ldr	r3, [pc, #664]	; (8001680 <MX_GPIO_Init+0x2d4>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	4ba3      	ldr	r3, [pc, #652]	; (8001680 <MX_GPIO_Init+0x2d4>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4aa2      	ldr	r2, [pc, #648]	; (8001680 <MX_GPIO_Init+0x2d4>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4ba0      	ldr	r3, [pc, #640]	; (8001680 <MX_GPIO_Init+0x2d4>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	623b      	str	r3, [r7, #32]
 8001408:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800140a:	4b9d      	ldr	r3, [pc, #628]	; (8001680 <MX_GPIO_Init+0x2d4>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a9c      	ldr	r2, [pc, #624]	; (8001680 <MX_GPIO_Init+0x2d4>)
 8001410:	f043 0308 	orr.w	r3, r3, #8
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b9a      	ldr	r3, [pc, #616]	; (8001680 <MX_GPIO_Init+0x2d4>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	61fb      	str	r3, [r7, #28]
 8001420:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001422:	4b97      	ldr	r3, [pc, #604]	; (8001680 <MX_GPIO_Init+0x2d4>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a96      	ldr	r2, [pc, #600]	; (8001680 <MX_GPIO_Init+0x2d4>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b94      	ldr	r3, [pc, #592]	; (8001680 <MX_GPIO_Init+0x2d4>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	61bb      	str	r3, [r7, #24]
 8001438:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	4b91      	ldr	r3, [pc, #580]	; (8001680 <MX_GPIO_Init+0x2d4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a90      	ldr	r2, [pc, #576]	; (8001680 <MX_GPIO_Init+0x2d4>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b8e      	ldr	r3, [pc, #568]	; (8001680 <MX_GPIO_Init+0x2d4>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001452:	4b8b      	ldr	r3, [pc, #556]	; (8001680 <MX_GPIO_Init+0x2d4>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a8a      	ldr	r2, [pc, #552]	; (8001680 <MX_GPIO_Init+0x2d4>)
 8001458:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b88      	ldr	r3, [pc, #544]	; (8001680 <MX_GPIO_Init+0x2d4>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800146a:	4b85      	ldr	r3, [pc, #532]	; (8001680 <MX_GPIO_Init+0x2d4>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a84      	ldr	r2, [pc, #528]	; (8001680 <MX_GPIO_Init+0x2d4>)
 8001470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b82      	ldr	r3, [pc, #520]	; (8001680 <MX_GPIO_Init+0x2d4>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001482:	4b7f      	ldr	r3, [pc, #508]	; (8001680 <MX_GPIO_Init+0x2d4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a7e      	ldr	r2, [pc, #504]	; (8001680 <MX_GPIO_Init+0x2d4>)
 8001488:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b7c      	ldr	r3, [pc, #496]	; (8001680 <MX_GPIO_Init+0x2d4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800149a:	4b79      	ldr	r3, [pc, #484]	; (8001680 <MX_GPIO_Init+0x2d4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a78      	ldr	r2, [pc, #480]	; (8001680 <MX_GPIO_Init+0x2d4>)
 80014a0:	f043 0320 	orr.w	r3, r3, #32
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b76      	ldr	r3, [pc, #472]	; (8001680 <MX_GPIO_Init+0x2d4>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0320 	and.w	r3, r3, #32
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b2:	4b73      	ldr	r3, [pc, #460]	; (8001680 <MX_GPIO_Init+0x2d4>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a72      	ldr	r2, [pc, #456]	; (8001680 <MX_GPIO_Init+0x2d4>)
 80014b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b70      	ldr	r3, [pc, #448]	; (8001680 <MX_GPIO_Init+0x2d4>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80014ca:	2201      	movs	r2, #1
 80014cc:	2120      	movs	r1, #32
 80014ce:	486d      	ldr	r0, [pc, #436]	; (8001684 <MX_GPIO_Init+0x2d8>)
 80014d0:	f002 fa0e 	bl	80038f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	210c      	movs	r1, #12
 80014d8:	486b      	ldr	r0, [pc, #428]	; (8001688 <MX_GPIO_Init+0x2dc>)
 80014da:	f002 fa09 	bl	80038f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	2108      	movs	r1, #8
 80014e2:	486a      	ldr	r0, [pc, #424]	; (800168c <MX_GPIO_Init+0x2e0>)
 80014e4:	f002 fa04 	bl	80038f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ee:	4866      	ldr	r0, [pc, #408]	; (8001688 <MX_GPIO_Init+0x2dc>)
 80014f0:	f002 f9fe 	bl	80038f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014fa:	4865      	ldr	r0, [pc, #404]	; (8001690 <MX_GPIO_Init+0x2e4>)
 80014fc:	f002 f9f8 	bl	80038f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	21c8      	movs	r1, #200	; 0xc8
 8001504:	4863      	ldr	r0, [pc, #396]	; (8001694 <MX_GPIO_Init+0x2e8>)
 8001506:	f002 f9f3 	bl	80038f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800150a:	2308      	movs	r3, #8
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150e:	2300      	movs	r3, #0
 8001510:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800151a:	4619      	mov	r1, r3
 800151c:	485e      	ldr	r0, [pc, #376]	; (8001698 <MX_GPIO_Init+0x2ec>)
 800151e:	f002 f83b 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001522:	2304      	movs	r3, #4
 8001524:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001532:	2309      	movs	r3, #9
 8001534:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800153a:	4619      	mov	r1, r3
 800153c:	4856      	ldr	r0, [pc, #344]	; (8001698 <MX_GPIO_Init+0x2ec>)
 800153e:	f002 f82b 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001542:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001554:	230b      	movs	r3, #11
 8001556:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001558:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800155c:	4619      	mov	r1, r3
 800155e:	484d      	ldr	r0, [pc, #308]	; (8001694 <MX_GPIO_Init+0x2e8>)
 8001560:	f002 f81a 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001564:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800156a:	2312      	movs	r3, #18
 800156c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800156e:	2301      	movs	r3, #1
 8001570:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001576:	2304      	movs	r3, #4
 8001578:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800157e:	4619      	mov	r1, r3
 8001580:	4846      	ldr	r0, [pc, #280]	; (800169c <MX_GPIO_Init+0x2f0>)
 8001582:	f002 f809 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001586:	f643 4323 	movw	r3, #15395	; 0x3c23
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001598:	230a      	movs	r3, #10
 800159a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015a0:	4619      	mov	r1, r3
 80015a2:	483e      	ldr	r0, [pc, #248]	; (800169c <MX_GPIO_Init+0x2f0>)
 80015a4:	f001 fff8 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80015a8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b6:	2303      	movs	r3, #3
 80015b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015ba:	230c      	movs	r3, #12
 80015bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c2:	4619      	mov	r1, r3
 80015c4:	4836      	ldr	r0, [pc, #216]	; (80016a0 <MX_GPIO_Init+0x2f4>)
 80015c6:	f001 ffe7 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80015ca:	2340      	movs	r3, #64	; 0x40
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80015da:	230a      	movs	r3, #10
 80015dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015e2:	4619      	mov	r1, r3
 80015e4:	482d      	ldr	r0, [pc, #180]	; (800169c <MX_GPIO_Init+0x2f0>)
 80015e6:	f001 ffd7 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80015ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f0:	2300      	movs	r3, #0
 80015f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015fc:	4619      	mov	r1, r3
 80015fe:	4829      	ldr	r0, [pc, #164]	; (80016a4 <MX_GPIO_Init+0x2f8>)
 8001600:	f001 ffca 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001604:	2340      	movs	r3, #64	; 0x40
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001608:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800160c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001616:	4619      	mov	r1, r3
 8001618:	481a      	ldr	r0, [pc, #104]	; (8001684 <MX_GPIO_Init+0x2d8>)
 800161a:	f001 ffbd 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800161e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162c:	2303      	movs	r3, #3
 800162e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001630:	230a      	movs	r3, #10
 8001632:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001638:	4619      	mov	r1, r3
 800163a:	481b      	ldr	r0, [pc, #108]	; (80016a8 <MX_GPIO_Init+0x2fc>)
 800163c:	f001 ffac 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001640:	2320      	movs	r3, #32
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001654:	4619      	mov	r1, r3
 8001656:	480b      	ldr	r0, [pc, #44]	; (8001684 <MX_GPIO_Init+0x2d8>)
 8001658:	f001 ff9e 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800165c:	f241 030c 	movw	r3, #4108	; 0x100c
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001662:	2301      	movs	r3, #1
 8001664:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800166e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001672:	4619      	mov	r1, r3
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <MX_GPIO_Init+0x2dc>)
 8001676:	f001 ff8f 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800167a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800167e:	e015      	b.n	80016ac <MX_GPIO_Init+0x300>
 8001680:	40023800 	.word	0x40023800
 8001684:	40020c00 	.word	0x40020c00
 8001688:	40022000 	.word	0x40022000
 800168c:	40022800 	.word	0x40022800
 8001690:	40021c00 	.word	0x40021c00
 8001694:	40021800 	.word	0x40021800
 8001698:	40021000 	.word	0x40021000
 800169c:	40020400 	.word	0x40020400
 80016a0:	40020800 	.word	0x40020800
 80016a4:	40022400 	.word	0x40022400
 80016a8:	40020000 	.word	0x40020000
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ae:	2300      	movs	r3, #0
 80016b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ba:	4619      	mov	r1, r3
 80016bc:	487a      	ldr	r0, [pc, #488]	; (80018a8 <MX_GPIO_Init+0x4fc>)
 80016be:	f001 ff6b 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80016c2:	2308      	movs	r3, #8
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80016d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d6:	4619      	mov	r1, r3
 80016d8:	4874      	ldr	r0, [pc, #464]	; (80018ac <MX_GPIO_Init+0x500>)
 80016da:	f001 ff5d 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80016de:	2310      	movs	r3, #16
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e2:	2300      	movs	r3, #0
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ee:	4619      	mov	r1, r3
 80016f0:	486f      	ldr	r0, [pc, #444]	; (80018b0 <MX_GPIO_Init+0x504>)
 80016f2:	f001 ff51 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80016f6:	2304      	movs	r3, #4
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001706:	230c      	movs	r3, #12
 8001708:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800170a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800170e:	4619      	mov	r1, r3
 8001710:	4867      	ldr	r0, [pc, #412]	; (80018b0 <MX_GPIO_Init+0x504>)
 8001712:	f001 ff41 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001716:	f248 0304 	movw	r3, #32772	; 0x8004
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171c:	2300      	movs	r3, #0
 800171e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001724:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001728:	4619      	mov	r1, r3
 800172a:	4862      	ldr	r0, [pc, #392]	; (80018b4 <MX_GPIO_Init+0x508>)
 800172c:	f001 ff34 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001736:	2301      	movs	r3, #1
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001742:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001746:	4619      	mov	r1, r3
 8001748:	485a      	ldr	r0, [pc, #360]	; (80018b4 <MX_GPIO_Init+0x508>)
 800174a:	f001 ff25 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800174e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001754:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001758:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800175e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001762:	4619      	mov	r1, r3
 8001764:	4854      	ldr	r0, [pc, #336]	; (80018b8 <MX_GPIO_Init+0x50c>)
 8001766:	f001 ff17 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800176a:	23c0      	movs	r3, #192	; 0xc0
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800177a:	2308      	movs	r3, #8
 800177c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001782:	4619      	mov	r1, r3
 8001784:	4848      	ldr	r0, [pc, #288]	; (80018a8 <MX_GPIO_Init+0x4fc>)
 8001786:	f001 ff07 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800178a:	2310      	movs	r3, #16
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800179a:	230a      	movs	r3, #10
 800179c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800179e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a2:	4619      	mov	r1, r3
 80017a4:	4843      	ldr	r0, [pc, #268]	; (80018b4 <MX_GPIO_Init+0x508>)
 80017a6:	f001 fef7 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80017aa:	23c8      	movs	r3, #200	; 0xc8
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017be:	4619      	mov	r1, r3
 80017c0:	483e      	ldr	r0, [pc, #248]	; (80018bc <MX_GPIO_Init+0x510>)
 80017c2:	f001 fee9 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80017c6:	2305      	movs	r3, #5
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d2:	2303      	movs	r3, #3
 80017d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017d6:	230a      	movs	r3, #10
 80017d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017de:	4619      	mov	r1, r3
 80017e0:	4831      	ldr	r0, [pc, #196]	; (80018a8 <MX_GPIO_Init+0x4fc>)
 80017e2:	f001 fed9 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80017e6:	2332      	movs	r3, #50	; 0x32
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017f6:	230b      	movs	r3, #11
 80017f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017fe:	4619      	mov	r1, r3
 8001800:	4829      	ldr	r0, [pc, #164]	; (80018a8 <MX_GPIO_Init+0x4fc>)
 8001802:	f001 fec9 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001806:	2304      	movs	r3, #4
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001816:	2309      	movs	r3, #9
 8001818:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800181e:	4619      	mov	r1, r3
 8001820:	4827      	ldr	r0, [pc, #156]	; (80018c0 <MX_GPIO_Init+0x514>)
 8001822:	f001 feb9 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001826:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001834:	2303      	movs	r3, #3
 8001836:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001838:	2309      	movs	r3, #9
 800183a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800183c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001840:	4619      	mov	r1, r3
 8001842:	481b      	ldr	r0, [pc, #108]	; (80018b0 <MX_GPIO_Init+0x504>)
 8001844:	f001 fea8 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001848:	2304      	movs	r3, #4
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184c:	2300      	movs	r3, #0
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001858:	4619      	mov	r1, r3
 800185a:	4818      	ldr	r0, [pc, #96]	; (80018bc <MX_GPIO_Init+0x510>)
 800185c:	f001 fe9c 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001860:	2386      	movs	r3, #134	; 0x86
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186c:	2303      	movs	r3, #3
 800186e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001870:	230b      	movs	r3, #11
 8001872:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001874:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001878:	4619      	mov	r1, r3
 800187a:	4812      	ldr	r0, [pc, #72]	; (80018c4 <MX_GPIO_Init+0x518>)
 800187c:	f001 fe8c 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001880:	2328      	movs	r3, #40	; 0x28
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001890:	230a      	movs	r3, #10
 8001892:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001894:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001898:	4619      	mov	r1, r3
 800189a:	480a      	ldr	r0, [pc, #40]	; (80018c4 <MX_GPIO_Init+0x518>)
 800189c:	f001 fe7c 	bl	8003598 <HAL_GPIO_Init>

}
 80018a0:	bf00      	nop
 80018a2:	3740      	adds	r7, #64	; 0x40
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40020800 	.word	0x40020800
 80018ac:	40022800 	.word	0x40022800
 80018b0:	40020c00 	.word	0x40020c00
 80018b4:	40021c00 	.word	0x40021c00
 80018b8:	40022000 	.word	0x40022000
 80018bc:	40021800 	.word	0x40021800
 80018c0:	40020400 	.word	0x40020400
 80018c4:	40020000 	.word	0x40020000

080018c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d101      	bne.n	80018de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018da:	f000 ff77 	bl	80027cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40001000 	.word	0x40001000

080018ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f0:	b672      	cpsid	i
}
 80018f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <Error_Handler+0x8>
	...

080018f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <HAL_MspInit+0x44>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	4a0e      	ldr	r2, [pc, #56]	; (800193c <HAL_MspInit+0x44>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001908:	6413      	str	r3, [r2, #64]	; 0x40
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <HAL_MspInit+0x44>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_MspInit+0x44>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	4a08      	ldr	r2, [pc, #32]	; (800193c <HAL_MspInit+0x44>)
 800191c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001920:	6453      	str	r3, [r2, #68]	; 0x44
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_MspInit+0x44>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800

08001940 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a21      	ldr	r2, [pc, #132]	; (80019e4 <HAL_ADC_MspInit+0xa4>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d13c      	bne.n	80019dc <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001962:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <HAL_ADC_MspInit+0xa8>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a20      	ldr	r2, [pc, #128]	; (80019e8 <HAL_ADC_MspInit+0xa8>)
 8001968:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <HAL_ADC_MspInit+0xa8>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800197a:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <HAL_ADC_MspInit+0xa8>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a1a      	ldr	r2, [pc, #104]	; (80019e8 <HAL_ADC_MspInit+0xa8>)
 8001980:	f043 0320 	orr.w	r3, r3, #32
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <HAL_ADC_MspInit+0xa8>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0320 	and.w	r3, r3, #32
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <HAL_ADC_MspInit+0xa8>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <HAL_ADC_MspInit+0xa8>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_ADC_MspInit+0xa8>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80019aa:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80019ae:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019b0:	2303      	movs	r3, #3
 80019b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	4619      	mov	r1, r3
 80019be:	480b      	ldr	r0, [pc, #44]	; (80019ec <HAL_ADC_MspInit+0xac>)
 80019c0:	f001 fdea 	bl	8003598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80019c4:	2301      	movs	r3, #1
 80019c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019c8:	2303      	movs	r3, #3
 80019ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4619      	mov	r1, r3
 80019d6:	4806      	ldr	r0, [pc, #24]	; (80019f0 <HAL_ADC_MspInit+0xb0>)
 80019d8:	f001 fdde 	bl	8003598 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80019dc:	bf00      	nop
 80019de:	3728      	adds	r7, #40	; 0x28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40012200 	.word	0x40012200
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40021400 	.word	0x40021400
 80019f0:	40020000 	.word	0x40020000

080019f4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <HAL_CRC_MspInit+0x38>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d10b      	bne.n	8001a1e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <HAL_CRC_MspInit+0x3c>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a09      	ldr	r2, [pc, #36]	; (8001a30 <HAL_CRC_MspInit+0x3c>)
 8001a0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <HAL_CRC_MspInit+0x3c>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001a1e:	bf00      	nop
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40023000 	.word	0x40023000
 8001a30:	40023800 	.word	0x40023800

08001a34 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08e      	sub	sp, #56	; 0x38
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a50      	ldr	r2, [pc, #320]	; (8001b94 <HAL_DCMI_MspInit+0x160>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	f040 809a 	bne.w	8001b8c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001a58:	4b4f      	ldr	r3, [pc, #316]	; (8001b98 <HAL_DCMI_MspInit+0x164>)
 8001a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5c:	4a4e      	ldr	r2, [pc, #312]	; (8001b98 <HAL_DCMI_MspInit+0x164>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	6353      	str	r3, [r2, #52]	; 0x34
 8001a64:	4b4c      	ldr	r3, [pc, #304]	; (8001b98 <HAL_DCMI_MspInit+0x164>)
 8001a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	623b      	str	r3, [r7, #32]
 8001a6e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a70:	4b49      	ldr	r3, [pc, #292]	; (8001b98 <HAL_DCMI_MspInit+0x164>)
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	4a48      	ldr	r2, [pc, #288]	; (8001b98 <HAL_DCMI_MspInit+0x164>)
 8001a76:	f043 0310 	orr.w	r3, r3, #16
 8001a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7c:	4b46      	ldr	r3, [pc, #280]	; (8001b98 <HAL_DCMI_MspInit+0x164>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a88:	4b43      	ldr	r3, [pc, #268]	; (8001b98 <HAL_DCMI_MspInit+0x164>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	4a42      	ldr	r2, [pc, #264]	; (8001b98 <HAL_DCMI_MspInit+0x164>)
 8001a8e:	f043 0308 	orr.w	r3, r3, #8
 8001a92:	6313      	str	r3, [r2, #48]	; 0x30
 8001a94:	4b40      	ldr	r3, [pc, #256]	; (8001b98 <HAL_DCMI_MspInit+0x164>)
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aa0:	4b3d      	ldr	r3, [pc, #244]	; (8001b98 <HAL_DCMI_MspInit+0x164>)
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa4:	4a3c      	ldr	r2, [pc, #240]	; (8001b98 <HAL_DCMI_MspInit+0x164>)
 8001aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8001aac:	4b3a      	ldr	r3, [pc, #232]	; (8001b98 <HAL_DCMI_MspInit+0x164>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ab8:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <HAL_DCMI_MspInit+0x164>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	4a36      	ldr	r2, [pc, #216]	; (8001b98 <HAL_DCMI_MspInit+0x164>)
 8001abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac4:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <HAL_DCMI_MspInit+0x164>)
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad0:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <HAL_DCMI_MspInit+0x164>)
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	4a30      	ldr	r2, [pc, #192]	; (8001b98 <HAL_DCMI_MspInit+0x164>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6313      	str	r3, [r2, #48]	; 0x30
 8001adc:	4b2e      	ldr	r3, [pc, #184]	; (8001b98 <HAL_DCMI_MspInit+0x164>)
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001ae8:	2360      	movs	r3, #96	; 0x60
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001af8:	230d      	movs	r3, #13
 8001afa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b00:	4619      	mov	r1, r3
 8001b02:	4826      	ldr	r0, [pc, #152]	; (8001b9c <HAL_DCMI_MspInit+0x168>)
 8001b04:	f001 fd48 	bl	8003598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001b08:	2308      	movs	r3, #8
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2300      	movs	r3, #0
 8001b16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b18:	230d      	movs	r3, #13
 8001b1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b20:	4619      	mov	r1, r3
 8001b22:	481f      	ldr	r0, [pc, #124]	; (8001ba0 <HAL_DCMI_MspInit+0x16c>)
 8001b24:	f001 fd38 	bl	8003598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b3a:	230d      	movs	r3, #13
 8001b3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b42:	4619      	mov	r1, r3
 8001b44:	4817      	ldr	r0, [pc, #92]	; (8001ba4 <HAL_DCMI_MspInit+0x170>)
 8001b46:	f001 fd27 	bl	8003598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001b4a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b5c:	230d      	movs	r3, #13
 8001b5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b64:	4619      	mov	r1, r3
 8001b66:	4810      	ldr	r0, [pc, #64]	; (8001ba8 <HAL_DCMI_MspInit+0x174>)
 8001b68:	f001 fd16 	bl	8003598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001b6c:	2350      	movs	r3, #80	; 0x50
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b7c:	230d      	movs	r3, #13
 8001b7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b84:	4619      	mov	r1, r3
 8001b86:	4809      	ldr	r0, [pc, #36]	; (8001bac <HAL_DCMI_MspInit+0x178>)
 8001b88:	f001 fd06 	bl	8003598 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001b8c:	bf00      	nop
 8001b8e:	3738      	adds	r7, #56	; 0x38
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	50050000 	.word	0x50050000
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40020c00 	.word	0x40020c00
 8001ba4:	40021800 	.word	0x40021800
 8001ba8:	40021c00 	.word	0x40021c00
 8001bac:	40020000 	.word	0x40020000

08001bb0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <HAL_DMA2D_MspInit+0x44>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d113      	bne.n	8001bea <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <HAL_DMA2D_MspInit+0x48>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a0c      	ldr	r2, [pc, #48]	; (8001bf8 <HAL_DMA2D_MspInit+0x48>)
 8001bc8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <HAL_DMA2D_MspInit+0x48>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	205a      	movs	r0, #90	; 0x5a
 8001be0:	f001 f960 	bl	8002ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001be4:	205a      	movs	r0, #90	; 0x5a
 8001be6:	f001 f979 	bl	8002edc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	4002b000 	.word	0x4002b000
 8001bf8:	40023800 	.word	0x40023800

08001bfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b0aa      	sub	sp, #168	; 0xa8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c14:	f107 0310 	add.w	r3, r7, #16
 8001c18:	2284      	movs	r2, #132	; 0x84
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f006 fa6f 	bl	8008100 <memset>
  if(hi2c->Instance==I2C3)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a22      	ldr	r2, [pc, #136]	; (8001cb0 <HAL_I2C_MspInit+0xb4>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d13c      	bne.n	8001ca6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001c2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c30:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001c32:	2300      	movs	r3, #0
 8001c34:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c36:	f107 0310 	add.w	r3, r7, #16
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 f820 	bl	8004c80 <HAL_RCCEx_PeriphCLKConfig>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001c46:	f7ff fe51 	bl	80018ec <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <HAL_I2C_MspInit+0xb8>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a19      	ldr	r2, [pc, #100]	; (8001cb4 <HAL_I2C_MspInit+0xb8>)
 8001c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <HAL_I2C_MspInit+0xb8>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001c62:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c6a:	2312      	movs	r3, #18
 8001c6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c70:	2301      	movs	r3, #1
 8001c72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c76:	2303      	movs	r3, #3
 8001c78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c82:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c86:	4619      	mov	r1, r3
 8001c88:	480b      	ldr	r0, [pc, #44]	; (8001cb8 <HAL_I2C_MspInit+0xbc>)
 8001c8a:	f001 fc85 	bl	8003598 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <HAL_I2C_MspInit+0xb8>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	4a08      	ldr	r2, [pc, #32]	; (8001cb4 <HAL_I2C_MspInit+0xb8>)
 8001c94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c98:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_I2C_MspInit+0xb8>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ca6:	bf00      	nop
 8001ca8:	37a8      	adds	r7, #168	; 0xa8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40005c00 	.word	0x40005c00
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40021c00 	.word	0x40021c00

08001cbc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08e      	sub	sp, #56	; 0x38
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a55      	ldr	r2, [pc, #340]	; (8001e30 <HAL_LTDC_MspInit+0x174>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	f040 80a3 	bne.w	8001e26 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001ce0:	4b54      	ldr	r3, [pc, #336]	; (8001e34 <HAL_LTDC_MspInit+0x178>)
 8001ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce4:	4a53      	ldr	r2, [pc, #332]	; (8001e34 <HAL_LTDC_MspInit+0x178>)
 8001ce6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cea:	6453      	str	r3, [r2, #68]	; 0x44
 8001cec:	4b51      	ldr	r3, [pc, #324]	; (8001e34 <HAL_LTDC_MspInit+0x178>)
 8001cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cf4:	623b      	str	r3, [r7, #32]
 8001cf6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cf8:	4b4e      	ldr	r3, [pc, #312]	; (8001e34 <HAL_LTDC_MspInit+0x178>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	4a4d      	ldr	r2, [pc, #308]	; (8001e34 <HAL_LTDC_MspInit+0x178>)
 8001cfe:	f043 0310 	orr.w	r3, r3, #16
 8001d02:	6313      	str	r3, [r2, #48]	; 0x30
 8001d04:	4b4b      	ldr	r3, [pc, #300]	; (8001e34 <HAL_LTDC_MspInit+0x178>)
 8001d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d08:	f003 0310 	and.w	r3, r3, #16
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001d10:	4b48      	ldr	r3, [pc, #288]	; (8001e34 <HAL_LTDC_MspInit+0x178>)
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d14:	4a47      	ldr	r2, [pc, #284]	; (8001e34 <HAL_LTDC_MspInit+0x178>)
 8001d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1c:	4b45      	ldr	r3, [pc, #276]	; (8001e34 <HAL_LTDC_MspInit+0x178>)
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001d28:	4b42      	ldr	r3, [pc, #264]	; (8001e34 <HAL_LTDC_MspInit+0x178>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	4a41      	ldr	r2, [pc, #260]	; (8001e34 <HAL_LTDC_MspInit+0x178>)
 8001d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d32:	6313      	str	r3, [r2, #48]	; 0x30
 8001d34:	4b3f      	ldr	r3, [pc, #252]	; (8001e34 <HAL_LTDC_MspInit+0x178>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d40:	4b3c      	ldr	r3, [pc, #240]	; (8001e34 <HAL_LTDC_MspInit+0x178>)
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	4a3b      	ldr	r2, [pc, #236]	; (8001e34 <HAL_LTDC_MspInit+0x178>)
 8001d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4c:	4b39      	ldr	r3, [pc, #228]	; (8001e34 <HAL_LTDC_MspInit+0x178>)
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d58:	4b36      	ldr	r3, [pc, #216]	; (8001e34 <HAL_LTDC_MspInit+0x178>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	4a35      	ldr	r2, [pc, #212]	; (8001e34 <HAL_LTDC_MspInit+0x178>)
 8001d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d62:	6313      	str	r3, [r2, #48]	; 0x30
 8001d64:	4b33      	ldr	r3, [pc, #204]	; (8001e34 <HAL_LTDC_MspInit+0x178>)
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001d70:	2310      	movs	r3, #16
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d80:	230e      	movs	r3, #14
 8001d82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d88:	4619      	mov	r1, r3
 8001d8a:	482b      	ldr	r0, [pc, #172]	; (8001e38 <HAL_LTDC_MspInit+0x17c>)
 8001d8c:	f001 fc04 	bl	8003598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001d90:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d96:	2302      	movs	r3, #2
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001da2:	230e      	movs	r3, #14
 8001da4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001daa:	4619      	mov	r1, r3
 8001dac:	4823      	ldr	r0, [pc, #140]	; (8001e3c <HAL_LTDC_MspInit+0x180>)
 8001dae:	f001 fbf3 	bl	8003598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001db2:	23f7      	movs	r3, #247	; 0xf7
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db6:	2302      	movs	r3, #2
 8001db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dc2:	230e      	movs	r3, #14
 8001dc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dca:	4619      	mov	r1, r3
 8001dcc:	481c      	ldr	r0, [pc, #112]	; (8001e40 <HAL_LTDC_MspInit+0x184>)
 8001dce:	f001 fbe3 	bl	8003598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	2300      	movs	r3, #0
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001de4:	2309      	movs	r3, #9
 8001de6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dec:	4619      	mov	r1, r3
 8001dee:	4815      	ldr	r0, [pc, #84]	; (8001e44 <HAL_LTDC_MspInit+0x188>)
 8001df0:	f001 fbd2 	bl	8003598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001df4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e06:	230e      	movs	r3, #14
 8001e08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e0e:	4619      	mov	r1, r3
 8001e10:	480d      	ldr	r0, [pc, #52]	; (8001e48 <HAL_LTDC_MspInit+0x18c>)
 8001e12:	f001 fbc1 	bl	8003598 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2100      	movs	r1, #0
 8001e1a:	2058      	movs	r0, #88	; 0x58
 8001e1c:	f001 f842 	bl	8002ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001e20:	2058      	movs	r0, #88	; 0x58
 8001e22:	f001 f85b 	bl	8002edc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001e26:	bf00      	nop
 8001e28:	3738      	adds	r7, #56	; 0x38
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40016800 	.word	0x40016800
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40022400 	.word	0x40022400
 8001e40:	40022800 	.word	0x40022800
 8001e44:	40021800 	.word	0x40021800
 8001e48:	40022000 	.word	0x40022000

08001e4c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b0a4      	sub	sp, #144	; 0x90
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e54:	f107 030c 	add.w	r3, r7, #12
 8001e58:	2284      	movs	r2, #132	; 0x84
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f006 f94f 	bl	8008100 <memset>
  if(hrtc->Instance==RTC)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a0e      	ldr	r2, [pc, #56]	; (8001ea0 <HAL_RTC_MspInit+0x54>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d114      	bne.n	8001e96 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e6c:	2320      	movs	r3, #32
 8001e6e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e74:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f002 ff00 	bl	8004c80 <HAL_RCCEx_PeriphCLKConfig>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001e86:	f7ff fd31 	bl	80018ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_RTC_MspInit+0x58>)
 8001e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8e:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <HAL_RTC_MspInit+0x58>)
 8001e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e94:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e96:	bf00      	nop
 8001e98:	3790      	adds	r7, #144	; 0x90
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40002800 	.word	0x40002800
 8001ea4:	40023800 	.word	0x40023800

08001ea8 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b0aa      	sub	sp, #168	; 0xa8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ec0:	f107 0310 	add.w	r3, r7, #16
 8001ec4:	2284      	movs	r2, #132	; 0x84
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f006 f919 	bl	8008100 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8001ed6:	d143      	bne.n	8001f60 <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8001ed8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001edc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001ede:	2364      	movs	r3, #100	; 0x64
 8001ee0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001eea:	2302      	movs	r3, #2
 8001eec:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ef2:	f107 0310 	add.w	r3, r7, #16
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f002 fec2 	bl	8004c80 <HAL_RCCEx_PeriphCLKConfig>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8001f02:	f7ff fcf3 	bl	80018ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8001f06:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	4a17      	ldr	r2, [pc, #92]	; (8001f68 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f10:	6413      	str	r3, [r2, #64]	; 0x40
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a11      	ldr	r2, [pc, #68]	; (8001f68 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f24:	f043 0308 	orr.w	r3, r3, #8
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001f36:	2380      	movs	r3, #128	; 0x80
 8001f38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001f4e:	2308      	movs	r3, #8
 8001f50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001f54:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4804      	ldr	r0, [pc, #16]	; (8001f6c <HAL_SPDIFRX_MspInit+0xc4>)
 8001f5c:	f001 fb1c 	bl	8003598 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8001f60:	bf00      	nop
 8001f62:	37a8      	adds	r7, #168	; 0xa8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40020c00 	.word	0x40020c00

08001f70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	; 0x28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a25      	ldr	r2, [pc, #148]	; (8002024 <HAL_SPI_MspInit+0xb4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d144      	bne.n	800201c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f92:	4b25      	ldr	r3, [pc, #148]	; (8002028 <HAL_SPI_MspInit+0xb8>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	4a24      	ldr	r2, [pc, #144]	; (8002028 <HAL_SPI_MspInit+0xb8>)
 8001f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9e:	4b22      	ldr	r3, [pc, #136]	; (8002028 <HAL_SPI_MspInit+0xb8>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001faa:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <HAL_SPI_MspInit+0xb8>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a1e      	ldr	r2, [pc, #120]	; (8002028 <HAL_SPI_MspInit+0xb8>)
 8001fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <HAL_SPI_MspInit+0xb8>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc2:	4b19      	ldr	r3, [pc, #100]	; (8002028 <HAL_SPI_MspInit+0xb8>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a18      	ldr	r2, [pc, #96]	; (8002028 <HAL_SPI_MspInit+0xb8>)
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b16      	ldr	r3, [pc, #88]	; (8002028 <HAL_SPI_MspInit+0xb8>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fea:	2305      	movs	r3, #5
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	480d      	ldr	r0, [pc, #52]	; (800202c <HAL_SPI_MspInit+0xbc>)
 8001ff6:	f001 facf 	bl	8003598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001ffa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2300      	movs	r3, #0
 800200a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800200c:	2305      	movs	r3, #5
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	4619      	mov	r1, r3
 8002016:	4806      	ldr	r0, [pc, #24]	; (8002030 <HAL_SPI_MspInit+0xc0>)
 8002018:	f001 fabe 	bl	8003598 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800201c:	bf00      	nop
 800201e:	3728      	adds	r7, #40	; 0x28
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40003800 	.word	0x40003800
 8002028:	40023800 	.word	0x40023800
 800202c:	40022000 	.word	0x40022000
 8002030:	40020400 	.word	0x40020400

08002034 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a2e      	ldr	r2, [pc, #184]	; (80020fc <HAL_TIM_Base_MspInit+0xc8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d10c      	bne.n	8002060 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002046:	4b2e      	ldr	r3, [pc, #184]	; (8002100 <HAL_TIM_Base_MspInit+0xcc>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	4a2d      	ldr	r2, [pc, #180]	; (8002100 <HAL_TIM_Base_MspInit+0xcc>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6453      	str	r3, [r2, #68]	; 0x44
 8002052:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <HAL_TIM_Base_MspInit+0xcc>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	61fb      	str	r3, [r7, #28]
 800205c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800205e:	e046      	b.n	80020ee <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002068:	d10c      	bne.n	8002084 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800206a:	4b25      	ldr	r3, [pc, #148]	; (8002100 <HAL_TIM_Base_MspInit+0xcc>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	4a24      	ldr	r2, [pc, #144]	; (8002100 <HAL_TIM_Base_MspInit+0xcc>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6413      	str	r3, [r2, #64]	; 0x40
 8002076:	4b22      	ldr	r3, [pc, #136]	; (8002100 <HAL_TIM_Base_MspInit+0xcc>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	61bb      	str	r3, [r7, #24]
 8002080:	69bb      	ldr	r3, [r7, #24]
}
 8002082:	e034      	b.n	80020ee <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a1e      	ldr	r2, [pc, #120]	; (8002104 <HAL_TIM_Base_MspInit+0xd0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d10c      	bne.n	80020a8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800208e:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <HAL_TIM_Base_MspInit+0xcc>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	4a1b      	ldr	r2, [pc, #108]	; (8002100 <HAL_TIM_Base_MspInit+0xcc>)
 8002094:	f043 0302 	orr.w	r3, r3, #2
 8002098:	6413      	str	r3, [r2, #64]	; 0x40
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_TIM_Base_MspInit+0xcc>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	697b      	ldr	r3, [r7, #20]
}
 80020a6:	e022      	b.n	80020ee <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a16      	ldr	r2, [pc, #88]	; (8002108 <HAL_TIM_Base_MspInit+0xd4>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d10c      	bne.n	80020cc <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <HAL_TIM_Base_MspInit+0xcc>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a12      	ldr	r2, [pc, #72]	; (8002100 <HAL_TIM_Base_MspInit+0xcc>)
 80020b8:	f043 0308 	orr.w	r3, r3, #8
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <HAL_TIM_Base_MspInit+0xcc>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]
}
 80020ca:	e010      	b.n	80020ee <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0e      	ldr	r2, [pc, #56]	; (800210c <HAL_TIM_Base_MspInit+0xd8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d10b      	bne.n	80020ee <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <HAL_TIM_Base_MspInit+0xcc>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	4a09      	ldr	r2, [pc, #36]	; (8002100 <HAL_TIM_Base_MspInit+0xcc>)
 80020dc:	f043 0302 	orr.w	r3, r3, #2
 80020e0:	6453      	str	r3, [r2, #68]	; 0x44
 80020e2:	4b07      	ldr	r3, [pc, #28]	; (8002100 <HAL_TIM_Base_MspInit+0xcc>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
}
 80020ee:	bf00      	nop
 80020f0:	3724      	adds	r7, #36	; 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40010000 	.word	0x40010000
 8002100:	40023800 	.word	0x40023800
 8002104:	40000400 	.word	0x40000400
 8002108:	40000c00 	.word	0x40000c00
 800210c:	40010400 	.word	0x40010400

08002110 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <HAL_TIM_PWM_MspInit+0x38>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d10b      	bne.n	800213a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002122:	4b0a      	ldr	r3, [pc, #40]	; (800214c <HAL_TIM_PWM_MspInit+0x3c>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	4a09      	ldr	r2, [pc, #36]	; (800214c <HAL_TIM_PWM_MspInit+0x3c>)
 8002128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800212c:	6413      	str	r3, [r2, #64]	; 0x40
 800212e:	4b07      	ldr	r3, [pc, #28]	; (800214c <HAL_TIM_PWM_MspInit+0x3c>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40001800 	.word	0x40001800
 800214c:	40023800 	.word	0x40023800

08002150 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08c      	sub	sp, #48	; 0x30
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 031c 	add.w	r3, r7, #28
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a56      	ldr	r2, [pc, #344]	; (80022c8 <HAL_TIM_MspPostInit+0x178>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d11d      	bne.n	80021ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002172:	4b56      	ldr	r3, [pc, #344]	; (80022cc <HAL_TIM_MspPostInit+0x17c>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a55      	ldr	r2, [pc, #340]	; (80022cc <HAL_TIM_MspPostInit+0x17c>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b53      	ldr	r3, [pc, #332]	; (80022cc <HAL_TIM_MspPostInit+0x17c>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800218a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800218e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	2300      	movs	r3, #0
 800219a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800219c:	2301      	movs	r3, #1
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80021a0:	f107 031c 	add.w	r3, r7, #28
 80021a4:	4619      	mov	r1, r3
 80021a6:	484a      	ldr	r0, [pc, #296]	; (80022d0 <HAL_TIM_MspPostInit+0x180>)
 80021a8:	f001 f9f6 	bl	8003598 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80021ac:	e087      	b.n	80022be <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b6:	d11d      	bne.n	80021f4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b8:	4b44      	ldr	r3, [pc, #272]	; (80022cc <HAL_TIM_MspPostInit+0x17c>)
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	4a43      	ldr	r2, [pc, #268]	; (80022cc <HAL_TIM_MspPostInit+0x17c>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6313      	str	r3, [r2, #48]	; 0x30
 80021c4:	4b41      	ldr	r3, [pc, #260]	; (80022cc <HAL_TIM_MspPostInit+0x17c>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80021d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021de:	2300      	movs	r3, #0
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021e2:	2301      	movs	r3, #1
 80021e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80021e6:	f107 031c 	add.w	r3, r7, #28
 80021ea:	4619      	mov	r1, r3
 80021ec:	4838      	ldr	r0, [pc, #224]	; (80022d0 <HAL_TIM_MspPostInit+0x180>)
 80021ee:	f001 f9d3 	bl	8003598 <HAL_GPIO_Init>
}
 80021f2:	e064      	b.n	80022be <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a36      	ldr	r2, [pc, #216]	; (80022d4 <HAL_TIM_MspPostInit+0x184>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d11c      	bne.n	8002238 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fe:	4b33      	ldr	r3, [pc, #204]	; (80022cc <HAL_TIM_MspPostInit+0x17c>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	4a32      	ldr	r2, [pc, #200]	; (80022cc <HAL_TIM_MspPostInit+0x17c>)
 8002204:	f043 0302 	orr.w	r3, r3, #2
 8002208:	6313      	str	r3, [r2, #48]	; 0x30
 800220a:	4b30      	ldr	r3, [pc, #192]	; (80022cc <HAL_TIM_MspPostInit+0x17c>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002216:	2310      	movs	r3, #16
 8002218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	2300      	movs	r3, #0
 8002224:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002226:	2302      	movs	r3, #2
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	4619      	mov	r1, r3
 8002230:	4829      	ldr	r0, [pc, #164]	; (80022d8 <HAL_TIM_MspPostInit+0x188>)
 8002232:	f001 f9b1 	bl	8003598 <HAL_GPIO_Init>
}
 8002236:	e042      	b.n	80022be <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a27      	ldr	r2, [pc, #156]	; (80022dc <HAL_TIM_MspPostInit+0x18c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d11c      	bne.n	800227c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002242:	4b22      	ldr	r3, [pc, #136]	; (80022cc <HAL_TIM_MspPostInit+0x17c>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4a21      	ldr	r2, [pc, #132]	; (80022cc <HAL_TIM_MspPostInit+0x17c>)
 8002248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4b1f      	ldr	r3, [pc, #124]	; (80022cc <HAL_TIM_MspPostInit+0x17c>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800225a:	2301      	movs	r3, #1
 800225c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800226a:	2302      	movs	r3, #2
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800226e:	f107 031c 	add.w	r3, r7, #28
 8002272:	4619      	mov	r1, r3
 8002274:	481a      	ldr	r0, [pc, #104]	; (80022e0 <HAL_TIM_MspPostInit+0x190>)
 8002276:	f001 f98f 	bl	8003598 <HAL_GPIO_Init>
}
 800227a:	e020      	b.n	80022be <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a18      	ldr	r2, [pc, #96]	; (80022e4 <HAL_TIM_MspPostInit+0x194>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d11b      	bne.n	80022be <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002286:	4b11      	ldr	r3, [pc, #68]	; (80022cc <HAL_TIM_MspPostInit+0x17c>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a10      	ldr	r2, [pc, #64]	; (80022cc <HAL_TIM_MspPostInit+0x17c>)
 800228c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <HAL_TIM_MspPostInit+0x17c>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800229e:	2340      	movs	r3, #64	; 0x40
 80022a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022aa:	2300      	movs	r3, #0
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80022ae:	2309      	movs	r3, #9
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80022b2:	f107 031c 	add.w	r3, r7, #28
 80022b6:	4619      	mov	r1, r3
 80022b8:	480b      	ldr	r0, [pc, #44]	; (80022e8 <HAL_TIM_MspPostInit+0x198>)
 80022ba:	f001 f96d 	bl	8003598 <HAL_GPIO_Init>
}
 80022be:	bf00      	nop
 80022c0:	3730      	adds	r7, #48	; 0x30
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40010000 	.word	0x40010000
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40020000 	.word	0x40020000
 80022d4:	40000400 	.word	0x40000400
 80022d8:	40020400 	.word	0x40020400
 80022dc:	40000c00 	.word	0x40000c00
 80022e0:	40022000 	.word	0x40022000
 80022e4:	40001800 	.word	0x40001800
 80022e8:	40021c00 	.word	0x40021c00

080022ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b0ac      	sub	sp, #176	; 0xb0
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002304:	f107 0318 	add.w	r3, r7, #24
 8002308:	2284      	movs	r2, #132	; 0x84
 800230a:	2100      	movs	r1, #0
 800230c:	4618      	mov	r0, r3
 800230e:	f005 fef7 	bl	8008100 <memset>
  if(huart->Instance==USART1)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a32      	ldr	r2, [pc, #200]	; (80023e0 <HAL_UART_MspInit+0xf4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d15c      	bne.n	80023d6 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800231c:	2340      	movs	r3, #64	; 0x40
 800231e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002320:	2300      	movs	r3, #0
 8002322:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002324:	f107 0318 	add.w	r3, r7, #24
 8002328:	4618      	mov	r0, r3
 800232a:	f002 fca9 	bl	8004c80 <HAL_RCCEx_PeriphCLKConfig>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002334:	f7ff fada 	bl	80018ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002338:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <HAL_UART_MspInit+0xf8>)
 800233a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233c:	4a29      	ldr	r2, [pc, #164]	; (80023e4 <HAL_UART_MspInit+0xf8>)
 800233e:	f043 0310 	orr.w	r3, r3, #16
 8002342:	6453      	str	r3, [r2, #68]	; 0x44
 8002344:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <HAL_UART_MspInit+0xf8>)
 8002346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002348:	f003 0310 	and.w	r3, r3, #16
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002350:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <HAL_UART_MspInit+0xf8>)
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	4a23      	ldr	r2, [pc, #140]	; (80023e4 <HAL_UART_MspInit+0xf8>)
 8002356:	f043 0302 	orr.w	r3, r3, #2
 800235a:	6313      	str	r3, [r2, #48]	; 0x30
 800235c:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <HAL_UART_MspInit+0xf8>)
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002368:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <HAL_UART_MspInit+0xf8>)
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	4a1d      	ldr	r2, [pc, #116]	; (80023e4 <HAL_UART_MspInit+0xf8>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6313      	str	r3, [r2, #48]	; 0x30
 8002374:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <HAL_UART_MspInit+0xf8>)
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	2302      	movs	r3, #2
 8002388:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002392:	2300      	movs	r3, #0
 8002394:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002398:	2307      	movs	r3, #7
 800239a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800239e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023a2:	4619      	mov	r1, r3
 80023a4:	4810      	ldr	r0, [pc, #64]	; (80023e8 <HAL_UART_MspInit+0xfc>)
 80023a6:	f001 f8f7 	bl	8003598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80023aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b2:	2302      	movs	r3, #2
 80023b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023be:	2300      	movs	r3, #0
 80023c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023c4:	2307      	movs	r3, #7
 80023c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80023ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023ce:	4619      	mov	r1, r3
 80023d0:	4806      	ldr	r0, [pc, #24]	; (80023ec <HAL_UART_MspInit+0x100>)
 80023d2:	f001 f8e1 	bl	8003598 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023d6:	bf00      	nop
 80023d8:	37b0      	adds	r7, #176	; 0xb0
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40011000 	.word	0x40011000
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40020400 	.word	0x40020400
 80023ec:	40020000 	.word	0x40020000

080023f0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80023f6:	1d3b      	adds	r3, r7, #4
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002404:	4b3a      	ldr	r3, [pc, #232]	; (80024f0 <HAL_FMC_MspInit+0x100>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d16d      	bne.n	80024e8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800240c:	4b38      	ldr	r3, [pc, #224]	; (80024f0 <HAL_FMC_MspInit+0x100>)
 800240e:	2201      	movs	r2, #1
 8002410:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002412:	4b38      	ldr	r3, [pc, #224]	; (80024f4 <HAL_FMC_MspInit+0x104>)
 8002414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002416:	4a37      	ldr	r2, [pc, #220]	; (80024f4 <HAL_FMC_MspInit+0x104>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6393      	str	r3, [r2, #56]	; 0x38
 800241e:	4b35      	ldr	r3, [pc, #212]	; (80024f4 <HAL_FMC_MspInit+0x104>)
 8002420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800242a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800242e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002438:	2303      	movs	r3, #3
 800243a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800243c:	230c      	movs	r3, #12
 800243e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002440:	1d3b      	adds	r3, r7, #4
 8002442:	4619      	mov	r1, r3
 8002444:	482c      	ldr	r0, [pc, #176]	; (80024f8 <HAL_FMC_MspInit+0x108>)
 8002446:	f001 f8a7 	bl	8003598 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800244a:	f248 1333 	movw	r3, #33075	; 0x8133
 800244e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	2302      	movs	r3, #2
 8002452:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002458:	2303      	movs	r3, #3
 800245a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800245c:	230c      	movs	r3, #12
 800245e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	4619      	mov	r1, r3
 8002464:	4825      	ldr	r0, [pc, #148]	; (80024fc <HAL_FMC_MspInit+0x10c>)
 8002466:	f001 f897 	bl	8003598 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800246a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800246e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002478:	2303      	movs	r3, #3
 800247a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800247c:	230c      	movs	r3, #12
 800247e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002480:	1d3b      	adds	r3, r7, #4
 8002482:	4619      	mov	r1, r3
 8002484:	481e      	ldr	r0, [pc, #120]	; (8002500 <HAL_FMC_MspInit+0x110>)
 8002486:	f001 f887 	bl	8003598 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800248a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800248e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002498:	2303      	movs	r3, #3
 800249a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800249c:	230c      	movs	r3, #12
 800249e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024a0:	1d3b      	adds	r3, r7, #4
 80024a2:	4619      	mov	r1, r3
 80024a4:	4817      	ldr	r0, [pc, #92]	; (8002504 <HAL_FMC_MspInit+0x114>)
 80024a6:	f001 f877 	bl	8003598 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80024aa:	2328      	movs	r3, #40	; 0x28
 80024ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ae:	2302      	movs	r3, #2
 80024b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b6:	2303      	movs	r3, #3
 80024b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024ba:	230c      	movs	r3, #12
 80024bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80024be:	1d3b      	adds	r3, r7, #4
 80024c0:	4619      	mov	r1, r3
 80024c2:	4811      	ldr	r0, [pc, #68]	; (8002508 <HAL_FMC_MspInit+0x118>)
 80024c4:	f001 f868 	bl	8003598 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80024c8:	2308      	movs	r3, #8
 80024ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024cc:	2302      	movs	r3, #2
 80024ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d4:	2303      	movs	r3, #3
 80024d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024d8:	230c      	movs	r3, #12
 80024da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	4619      	mov	r1, r3
 80024e0:	480a      	ldr	r0, [pc, #40]	; (800250c <HAL_FMC_MspInit+0x11c>)
 80024e2:	f001 f859 	bl	8003598 <HAL_GPIO_Init>
 80024e6:	e000      	b.n	80024ea <HAL_FMC_MspInit+0xfa>
    return;
 80024e8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000670 	.word	0x20000670
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40021800 	.word	0x40021800
 8002500:	40020c00 	.word	0x40020c00
 8002504:	40021400 	.word	0x40021400
 8002508:	40021c00 	.word	0x40021c00
 800250c:	40020800 	.word	0x40020800

08002510 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002518:	f7ff ff6a 	bl	80023f0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	; 0x28
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a2b      	ldr	r2, [pc, #172]	; (80025e0 <HAL_SAI_MspInit+0xbc>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d124      	bne.n	8002580 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002536:	4b2b      	ldr	r3, [pc, #172]	; (80025e4 <HAL_SAI_MspInit+0xc0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10b      	bne.n	8002556 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800253e:	4b2a      	ldr	r3, [pc, #168]	; (80025e8 <HAL_SAI_MspInit+0xc4>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	4a29      	ldr	r2, [pc, #164]	; (80025e8 <HAL_SAI_MspInit+0xc4>)
 8002544:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002548:	6453      	str	r3, [r2, #68]	; 0x44
 800254a:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <HAL_SAI_MspInit+0xc4>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002556:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <HAL_SAI_MspInit+0xc0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	3301      	adds	r3, #1
 800255c:	4a21      	ldr	r2, [pc, #132]	; (80025e4 <HAL_SAI_MspInit+0xc0>)
 800255e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002560:	23f0      	movs	r3, #240	; 0xf0
 8002562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002564:	2302      	movs	r3, #2
 8002566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256c:	2300      	movs	r3, #0
 800256e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002570:	230a      	movs	r3, #10
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002574:	f107 0314 	add.w	r3, r7, #20
 8002578:	4619      	mov	r1, r3
 800257a:	481c      	ldr	r0, [pc, #112]	; (80025ec <HAL_SAI_MspInit+0xc8>)
 800257c:	f001 f80c 	bl	8003598 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a1a      	ldr	r2, [pc, #104]	; (80025f0 <HAL_SAI_MspInit+0xcc>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d125      	bne.n	80025d6 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800258a:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <HAL_SAI_MspInit+0xc0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10b      	bne.n	80025aa <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <HAL_SAI_MspInit+0xc4>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <HAL_SAI_MspInit+0xc4>)
 8002598:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800259c:	6453      	str	r3, [r2, #68]	; 0x44
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_SAI_MspInit+0xc4>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80025aa:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <HAL_SAI_MspInit+0xc0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	3301      	adds	r3, #1
 80025b0:	4a0c      	ldr	r2, [pc, #48]	; (80025e4 <HAL_SAI_MspInit+0xc0>)
 80025b2:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80025b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ba:	2302      	movs	r3, #2
 80025bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c2:	2300      	movs	r3, #0
 80025c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80025c6:	230a      	movs	r3, #10
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80025ca:	f107 0314 	add.w	r3, r7, #20
 80025ce:	4619      	mov	r1, r3
 80025d0:	4808      	ldr	r0, [pc, #32]	; (80025f4 <HAL_SAI_MspInit+0xd0>)
 80025d2:	f000 ffe1 	bl	8003598 <HAL_GPIO_Init>

    }
}
 80025d6:	bf00      	nop
 80025d8:	3728      	adds	r7, #40	; 0x28
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40015c04 	.word	0x40015c04
 80025e4:	20000674 	.word	0x20000674
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40022000 	.word	0x40022000
 80025f0:	40015c24 	.word	0x40015c24
 80025f4:	40021800 	.word	0x40021800

080025f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08c      	sub	sp, #48	; 0x30
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002608:	2200      	movs	r2, #0
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	2036      	movs	r0, #54	; 0x36
 800260e:	f000 fc49 	bl	8002ea4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002612:	2036      	movs	r0, #54	; 0x36
 8002614:	f000 fc62 	bl	8002edc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002618:	4b1f      	ldr	r3, [pc, #124]	; (8002698 <HAL_InitTick+0xa0>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	4a1e      	ldr	r2, [pc, #120]	; (8002698 <HAL_InitTick+0xa0>)
 800261e:	f043 0310 	orr.w	r3, r3, #16
 8002622:	6413      	str	r3, [r2, #64]	; 0x40
 8002624:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <HAL_InitTick+0xa0>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002630:	f107 0210 	add.w	r2, r7, #16
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	4611      	mov	r1, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f002 faee 	bl	8004c1c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002640:	f002 fac4 	bl	8004bcc <HAL_RCC_GetPCLK1Freq>
 8002644:	4603      	mov	r3, r0
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800264a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264c:	4a13      	ldr	r2, [pc, #76]	; (800269c <HAL_InitTick+0xa4>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	0c9b      	lsrs	r3, r3, #18
 8002654:	3b01      	subs	r3, #1
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <HAL_InitTick+0xa8>)
 800265a:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <HAL_InitTick+0xac>)
 800265c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <HAL_InitTick+0xa8>)
 8002660:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002664:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002666:	4a0e      	ldr	r2, [pc, #56]	; (80026a0 <HAL_InitTick+0xa8>)
 8002668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <HAL_InitTick+0xa8>)
 800266e:	2200      	movs	r2, #0
 8002670:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_InitTick+0xa8>)
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002678:	4809      	ldr	r0, [pc, #36]	; (80026a0 <HAL_InitTick+0xa8>)
 800267a:	f003 fefe 	bl	800647a <HAL_TIM_Base_Init>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d104      	bne.n	800268e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002684:	4806      	ldr	r0, [pc, #24]	; (80026a0 <HAL_InitTick+0xa8>)
 8002686:	f003 ff4f 	bl	8006528 <HAL_TIM_Base_Start_IT>
 800268a:	4603      	mov	r3, r0
 800268c:	e000      	b.n	8002690 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
}
 8002690:	4618      	mov	r0, r3
 8002692:	3730      	adds	r7, #48	; 0x30
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40023800 	.word	0x40023800
 800269c:	431bde83 	.word	0x431bde83
 80026a0:	20000678 	.word	0x20000678
 80026a4:	40001000 	.word	0x40001000

080026a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026ac:	e7fe      	b.n	80026ac <NMI_Handler+0x4>

080026ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026b2:	e7fe      	b.n	80026b2 <HardFault_Handler+0x4>

080026b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026b8:	e7fe      	b.n	80026b8 <MemManage_Handler+0x4>

080026ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026be:	e7fe      	b.n	80026be <BusFault_Handler+0x4>

080026c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026c4:	e7fe      	b.n	80026c4 <UsageFault_Handler+0x4>

080026c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026e2:	b480      	push	{r7}
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002704:	4802      	ldr	r0, [pc, #8]	; (8002710 <TIM6_DAC_IRQHandler+0x10>)
 8002706:	f003 ffde 	bl	80066c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000678 	.word	0x20000678

08002714 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002718:	4802      	ldr	r0, [pc, #8]	; (8002724 <LTDC_IRQHandler+0x10>)
 800271a:	f001 fafb 	bl	8003d14 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000170 	.word	0x20000170

08002728 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800272c:	4802      	ldr	r0, [pc, #8]	; (8002738 <DMA2D_IRQHandler+0x10>)
 800272e:	f000 fd91 	bl	8003254 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	200000e4 	.word	0x200000e4

0800273c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <SystemInit+0x20>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002746:	4a05      	ldr	r2, [pc, #20]	; (800275c <SystemInit+0x20>)
 8002748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800274c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002798 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002764:	480d      	ldr	r0, [pc, #52]	; (800279c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002766:	490e      	ldr	r1, [pc, #56]	; (80027a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002768:	4a0e      	ldr	r2, [pc, #56]	; (80027a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800276a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800276c:	e002      	b.n	8002774 <LoopCopyDataInit>

0800276e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800276e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002772:	3304      	adds	r3, #4

08002774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002778:	d3f9      	bcc.n	800276e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800277a:	4a0b      	ldr	r2, [pc, #44]	; (80027a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800277c:	4c0b      	ldr	r4, [pc, #44]	; (80027ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800277e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002780:	e001      	b.n	8002786 <LoopFillZerobss>

08002782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002784:	3204      	adds	r2, #4

08002786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002788:	d3fb      	bcc.n	8002782 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800278a:	f7ff ffd7 	bl	800273c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800278e:	f005 fc93 	bl	80080b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002792:	f7fd febb 	bl	800050c <main>
  bx  lr    
 8002796:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002798:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800279c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80027a4:	08008150 	.word	0x08008150
  ldr r2, =_sbss
 80027a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80027ac:	200006c8 	.word	0x200006c8

080027b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027b0:	e7fe      	b.n	80027b0 <ADC_IRQHandler>

080027b2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b6:	2003      	movs	r0, #3
 80027b8:	f000 fb69 	bl	8002e8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027bc:	200f      	movs	r0, #15
 80027be:	f7ff ff1b 	bl	80025f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027c2:	f7ff f899 	bl	80018f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_IncTick+0x20>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <HAL_IncTick+0x24>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4413      	add	r3, r2
 80027dc:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <HAL_IncTick+0x24>)
 80027de:	6013      	str	r3, [r2, #0]
}
 80027e0:	bf00      	nop
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	20000008 	.word	0x20000008
 80027f0:	200006c4 	.word	0x200006c4

080027f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return uwTick;
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <HAL_GetTick+0x14>)
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	200006c4 	.word	0x200006c4

0800280c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e031      	b.n	8002886 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	2b00      	cmp	r3, #0
 8002828:	d109      	bne.n	800283e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff f888 	bl	8001940 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	2b00      	cmp	r3, #0
 8002848:	d116      	bne.n	8002878 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800284e:	4b10      	ldr	r3, [pc, #64]	; (8002890 <HAL_ADC_Init+0x84>)
 8002850:	4013      	ands	r3, r2
 8002852:	f043 0202 	orr.w	r2, r3, #2
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f970 	bl	8002b40 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f023 0303 	bic.w	r3, r3, #3
 800286e:	f043 0201 	orr.w	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	641a      	str	r2, [r3, #64]	; 0x40
 8002876:	e001      	b.n	800287c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002884:	7bfb      	ldrb	r3, [r7, #15]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	ffffeefd 	.word	0xffffeefd

08002894 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x1c>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e136      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x28a>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b09      	cmp	r3, #9
 80028be:	d93a      	bls.n	8002936 <HAL_ADC_ConfigChannel+0xa2>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028c8:	d035      	beq.n	8002936 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68d9      	ldr	r1, [r3, #12]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	4613      	mov	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4413      	add	r3, r2
 80028de:	3b1e      	subs	r3, #30
 80028e0:	2207      	movs	r2, #7
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43da      	mvns	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	400a      	ands	r2, r1
 80028ee:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a8d      	ldr	r2, [pc, #564]	; (8002b2c <HAL_ADC_ConfigChannel+0x298>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d10a      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68d9      	ldr	r1, [r3, #12]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	061a      	lsls	r2, r3, #24
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800290e:	e035      	b.n	800297c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68d9      	ldr	r1, [r3, #12]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	b29b      	uxth	r3, r3
 8002920:	4618      	mov	r0, r3
 8002922:	4603      	mov	r3, r0
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	4403      	add	r3, r0
 8002928:	3b1e      	subs	r3, #30
 800292a:	409a      	lsls	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002934:	e022      	b.n	800297c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6919      	ldr	r1, [r3, #16]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	b29b      	uxth	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	4613      	mov	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	2207      	movs	r2, #7
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43da      	mvns	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	400a      	ands	r2, r1
 8002958:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6919      	ldr	r1, [r3, #16]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	b29b      	uxth	r3, r3
 800296a:	4618      	mov	r0, r3
 800296c:	4603      	mov	r3, r0
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4403      	add	r3, r0
 8002972:	409a      	lsls	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b06      	cmp	r3, #6
 8002982:	d824      	bhi.n	80029ce <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	3b05      	subs	r3, #5
 8002996:	221f      	movs	r2, #31
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43da      	mvns	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	400a      	ands	r2, r1
 80029a4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	4618      	mov	r0, r3
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	3b05      	subs	r3, #5
 80029c0:	fa00 f203 	lsl.w	r2, r0, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	635a      	str	r2, [r3, #52]	; 0x34
 80029cc:	e04c      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b0c      	cmp	r3, #12
 80029d4:	d824      	bhi.n	8002a20 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	3b23      	subs	r3, #35	; 0x23
 80029e8:	221f      	movs	r2, #31
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43da      	mvns	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	400a      	ands	r2, r1
 80029f6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	4618      	mov	r0, r3
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	3b23      	subs	r3, #35	; 0x23
 8002a12:	fa00 f203 	lsl.w	r2, r0, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a1e:	e023      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	3b41      	subs	r3, #65	; 0x41
 8002a32:	221f      	movs	r2, #31
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43da      	mvns	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	400a      	ands	r2, r1
 8002a40:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	4618      	mov	r0, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	3b41      	subs	r3, #65	; 0x41
 8002a5c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a30      	ldr	r2, [pc, #192]	; (8002b30 <HAL_ADC_ConfigChannel+0x29c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d10a      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x1f4>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a7a:	d105      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002a7c:	4b2d      	ldr	r3, [pc, #180]	; (8002b34 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	4a2c      	ldr	r2, [pc, #176]	; (8002b34 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a82:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002a86:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a28      	ldr	r2, [pc, #160]	; (8002b30 <HAL_ADC_ConfigChannel+0x29c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d10f      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x21e>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b12      	cmp	r3, #18
 8002a98:	d10b      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002a9a:	4b26      	ldr	r3, [pc, #152]	; (8002b34 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	4a25      	ldr	r2, [pc, #148]	; (8002b34 <HAL_ADC_ConfigChannel+0x2a0>)
 8002aa0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002aa4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002aa6:	4b23      	ldr	r3, [pc, #140]	; (8002b34 <HAL_ADC_ConfigChannel+0x2a0>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4a22      	ldr	r2, [pc, #136]	; (8002b34 <HAL_ADC_ConfigChannel+0x2a0>)
 8002aac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ab0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a1e      	ldr	r2, [pc, #120]	; (8002b30 <HAL_ADC_ConfigChannel+0x29c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d12b      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x280>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1a      	ldr	r2, [pc, #104]	; (8002b2c <HAL_ADC_ConfigChannel+0x298>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d003      	beq.n	8002ace <HAL_ADC_ConfigChannel+0x23a>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b11      	cmp	r3, #17
 8002acc:	d122      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002ace:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	4a18      	ldr	r2, [pc, #96]	; (8002b34 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ad4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002ad8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002ada:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <HAL_ADC_ConfigChannel+0x2a0>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4a15      	ldr	r2, [pc, #84]	; (8002b34 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ae0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ae4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a10      	ldr	r2, [pc, #64]	; (8002b2c <HAL_ADC_ConfigChannel+0x298>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d111      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002af0:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <HAL_ADC_ConfigChannel+0x2a4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a11      	ldr	r2, [pc, #68]	; (8002b3c <HAL_ADC_ConfigChannel+0x2a8>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	0c9a      	lsrs	r2, r3, #18
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b06:	e002      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1f9      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	10000012 	.word	0x10000012
 8002b30:	40012000 	.word	0x40012000
 8002b34:	40012300 	.word	0x40012300
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	431bde83 	.word	0x431bde83

08002b40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002b48:	4b78      	ldr	r3, [pc, #480]	; (8002d2c <ADC_Init+0x1ec>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	4a77      	ldr	r2, [pc, #476]	; (8002d2c <ADC_Init+0x1ec>)
 8002b4e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002b52:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002b54:	4b75      	ldr	r3, [pc, #468]	; (8002d2c <ADC_Init+0x1ec>)
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	4973      	ldr	r1, [pc, #460]	; (8002d2c <ADC_Init+0x1ec>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6859      	ldr	r1, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	021a      	lsls	r2, r3, #8
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6859      	ldr	r1, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6899      	ldr	r1, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	4a58      	ldr	r2, [pc, #352]	; (8002d30 <ADC_Init+0x1f0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d022      	beq.n	8002c1a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002be2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6899      	ldr	r1, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6899      	ldr	r1, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	e00f      	b.n	8002c3a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0202 	bic.w	r2, r2, #2
 8002c48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6899      	ldr	r1, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	005a      	lsls	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d01b      	beq.n	8002ca0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6859      	ldr	r1, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	3b01      	subs	r3, #1
 8002c94:	035a      	lsls	r2, r3, #13
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	e007      	b.n	8002cb0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	051a      	lsls	r2, r3, #20
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ce4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6899      	ldr	r1, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cf2:	025a      	lsls	r2, r3, #9
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6899      	ldr	r1, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	029a      	lsls	r2, r3, #10
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	609a      	str	r2, [r3, #8]
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	40012300 	.word	0x40012300
 8002d30:	0f000001 	.word	0x0f000001

08002d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d44:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <__NVIC_SetPriorityGrouping+0x40>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d50:	4013      	ands	r3, r2
 8002d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <__NVIC_SetPriorityGrouping+0x44>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d62:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <__NVIC_SetPriorityGrouping+0x40>)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	60d3      	str	r3, [r2, #12]
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	e000ed00 	.word	0xe000ed00
 8002d78:	05fa0000 	.word	0x05fa0000

08002d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d80:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <__NVIC_GetPriorityGrouping+0x18>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	0a1b      	lsrs	r3, r3, #8
 8002d86:	f003 0307 	and.w	r3, r3, #7
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	db0b      	blt.n	8002dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	f003 021f 	and.w	r2, r3, #31
 8002db0:	4907      	ldr	r1, [pc, #28]	; (8002dd0 <__NVIC_EnableIRQ+0x38>)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	095b      	lsrs	r3, r3, #5
 8002db8:	2001      	movs	r0, #1
 8002dba:	fa00 f202 	lsl.w	r2, r0, r2
 8002dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	e000e100 	.word	0xe000e100

08002dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	6039      	str	r1, [r7, #0]
 8002dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	db0a      	blt.n	8002dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	490c      	ldr	r1, [pc, #48]	; (8002e20 <__NVIC_SetPriority+0x4c>)
 8002dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df2:	0112      	lsls	r2, r2, #4
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	440b      	add	r3, r1
 8002df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dfc:	e00a      	b.n	8002e14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	4908      	ldr	r1, [pc, #32]	; (8002e24 <__NVIC_SetPriority+0x50>)
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	3b04      	subs	r3, #4
 8002e0c:	0112      	lsls	r2, r2, #4
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	440b      	add	r3, r1
 8002e12:	761a      	strb	r2, [r3, #24]
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	e000e100 	.word	0xe000e100
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b089      	sub	sp, #36	; 0x24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f1c3 0307 	rsb	r3, r3, #7
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	bf28      	it	cs
 8002e46:	2304      	movcs	r3, #4
 8002e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	2b06      	cmp	r3, #6
 8002e50:	d902      	bls.n	8002e58 <NVIC_EncodePriority+0x30>
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3b03      	subs	r3, #3
 8002e56:	e000      	b.n	8002e5a <NVIC_EncodePriority+0x32>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43da      	mvns	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e70:	f04f 31ff 	mov.w	r1, #4294967295
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7a:	43d9      	mvns	r1, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e80:	4313      	orrs	r3, r2
         );
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3724      	adds	r7, #36	; 0x24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff ff4c 	bl	8002d34 <__NVIC_SetPriorityGrouping>
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eb6:	f7ff ff61 	bl	8002d7c <__NVIC_GetPriorityGrouping>
 8002eba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	68b9      	ldr	r1, [r7, #8]
 8002ec0:	6978      	ldr	r0, [r7, #20]
 8002ec2:	f7ff ffb1 	bl	8002e28 <NVIC_EncodePriority>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff ff80 	bl	8002dd4 <__NVIC_SetPriority>
}
 8002ed4:	bf00      	nop
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff ff54 	bl	8002d98 <__NVIC_EnableIRQ>
}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e054      	b.n	8002fb4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	7f5b      	ldrb	r3, [r3, #29]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d105      	bne.n	8002f20 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fe fd6a 	bl	80019f4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	791b      	ldrb	r3, [r3, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10c      	bne.n	8002f48 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a22      	ldr	r2, [pc, #136]	; (8002fbc <HAL_CRC_Init+0xc4>)
 8002f34:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0218 	bic.w	r2, r2, #24
 8002f44:	609a      	str	r2, [r3, #8]
 8002f46:	e00c      	b.n	8002f62 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6899      	ldr	r1, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	461a      	mov	r2, r3
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f834 	bl	8002fc0 <HAL_CRCEx_Polynomial_Set>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e028      	b.n	8002fb4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	795b      	ldrb	r3, [r3, #5]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d105      	bne.n	8002f76 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f72:	611a      	str	r2, [r3, #16]
 8002f74:	e004      	b.n	8002f80 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6912      	ldr	r2, [r2, #16]
 8002f7e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699a      	ldr	r2, [r3, #24]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	04c11db7 	.word	0x04c11db7

08002fc0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002fd0:	231f      	movs	r3, #31
 8002fd2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002fd4:	bf00      	nop
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1e5a      	subs	r2, r3, #1
 8002fda:	613a      	str	r2, [r7, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d009      	beq.n	8002ff4 <HAL_CRCEx_Polynomial_Set+0x34>
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0f0      	beq.n	8002fd6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b18      	cmp	r3, #24
 8002ff8:	d846      	bhi.n	8003088 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002ffa:	a201      	add	r2, pc, #4	; (adr r2, 8003000 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003000:	0800308f 	.word	0x0800308f
 8003004:	08003089 	.word	0x08003089
 8003008:	08003089 	.word	0x08003089
 800300c:	08003089 	.word	0x08003089
 8003010:	08003089 	.word	0x08003089
 8003014:	08003089 	.word	0x08003089
 8003018:	08003089 	.word	0x08003089
 800301c:	08003089 	.word	0x08003089
 8003020:	0800307d 	.word	0x0800307d
 8003024:	08003089 	.word	0x08003089
 8003028:	08003089 	.word	0x08003089
 800302c:	08003089 	.word	0x08003089
 8003030:	08003089 	.word	0x08003089
 8003034:	08003089 	.word	0x08003089
 8003038:	08003089 	.word	0x08003089
 800303c:	08003089 	.word	0x08003089
 8003040:	08003071 	.word	0x08003071
 8003044:	08003089 	.word	0x08003089
 8003048:	08003089 	.word	0x08003089
 800304c:	08003089 	.word	0x08003089
 8003050:	08003089 	.word	0x08003089
 8003054:	08003089 	.word	0x08003089
 8003058:	08003089 	.word	0x08003089
 800305c:	08003089 	.word	0x08003089
 8003060:	08003065 	.word	0x08003065
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	2b06      	cmp	r3, #6
 8003068:	d913      	bls.n	8003092 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800306e:	e010      	b.n	8003092 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	2b07      	cmp	r3, #7
 8003074:	d90f      	bls.n	8003096 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800307a:	e00c      	b.n	8003096 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	2b0f      	cmp	r3, #15
 8003080:	d90b      	bls.n	800309a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003086:	e008      	b.n	800309a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	75fb      	strb	r3, [r7, #23]
      break;
 800308c:	e006      	b.n	800309c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800308e:	bf00      	nop
 8003090:	e004      	b.n	800309c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003092:	bf00      	nop
 8003094:	e002      	b.n	800309c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003096:	bf00      	nop
 8003098:	e000      	b.n	800309c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800309a:	bf00      	nop
  }
  if (status == HAL_OK)
 800309c:	7dfb      	ldrb	r3, [r7, #23]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10d      	bne.n	80030be <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f023 0118 	bic.w	r1, r3, #24
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80030be:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	371c      	adds	r7, #28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e069      	b.n	80031b2 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d102      	bne.n	80030f0 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fe fca2 	bl	8001a34 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6819      	ldr	r1, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4b2a      	ldr	r3, [pc, #168]	; (80031bc <HAL_DCMI_Init+0xf0>)
 8003112:	400b      	ands	r3, r1
 8003114:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6819      	ldr	r1, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800312a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003136:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003142:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800314e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800315a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b10      	cmp	r3, #16
 800316a:	d112      	bne.n	8003192 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	7f1b      	ldrb	r3, [r3, #28]
 8003170:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	7f5b      	ldrb	r3, [r3, #29]
 8003176:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003178:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	7f9b      	ldrb	r3, [r3, #30]
 800317e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003180:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	7fdb      	ldrb	r3, [r3, #31]
 8003188:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800318e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003190:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f042 021e 	orr.w	r2, r2, #30
 80031a0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	ffe0f007 	.word	0xffe0f007

080031c0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e039      	b.n	8003246 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fe fce2 	bl	8001bb0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003210:	f023 0107 	bic.w	r1, r3, #7
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003226:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <HAL_DMA2D_Init+0x90>)
 8003228:	4013      	ands	r3, r2
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	68d1      	ldr	r1, [r2, #12]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6812      	ldr	r2, [r2, #0]
 8003232:	430b      	orrs	r3, r1
 8003234:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	ffffc000 	.word	0xffffc000

08003254 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d026      	beq.n	80032c4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327c:	2b00      	cmp	r3, #0
 800327e:	d021      	beq.n	80032c4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800328e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003294:	f043 0201 	orr.w	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2201      	movs	r2, #1
 80032a2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2204      	movs	r2, #4
 80032a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d026      	beq.n	800331c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d021      	beq.n	800331c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032e6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2220      	movs	r2, #32
 80032ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f4:	f043 0202 	orr.w	r2, r3, #2
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2204      	movs	r2, #4
 8003300:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d026      	beq.n	8003374 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800332c:	2b00      	cmp	r3, #0
 800332e:	d021      	beq.n	8003374 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800333e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2208      	movs	r2, #8
 8003346:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334c:	f043 0204 	orr.w	r2, r3, #4
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2204      	movs	r2, #4
 8003358:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f003 0304 	and.w	r3, r3, #4
 800337a:	2b00      	cmp	r3, #0
 800337c:	d013      	beq.n	80033a6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00e      	beq.n	80033a6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003396:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2204      	movs	r2, #4
 800339e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f853 	bl	800344c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d024      	beq.n	80033fa <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d01f      	beq.n	80033fa <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033c8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2202      	movs	r2, #2
 80033d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01f      	beq.n	8003444 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d01a      	beq.n	8003444 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800341c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2210      	movs	r2, #16
 8003424:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f80e 	bl	8003460 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_DMA2D_ConfigLayer+0x20>
 8003490:	2302      	movs	r3, #2
 8003492:	e079      	b.n	8003588 <HAL_DMA2D_ConfigLayer+0x114>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	3318      	adds	r3, #24
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	4413      	add	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	041b      	lsls	r3, r3, #16
 80034ba:	4313      	orrs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80034be:	4b35      	ldr	r3, [pc, #212]	; (8003594 <HAL_DMA2D_ConfigLayer+0x120>)
 80034c0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b0a      	cmp	r3, #10
 80034c8:	d003      	beq.n	80034d2 <HAL_DMA2D_ConfigLayer+0x5e>
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b09      	cmp	r3, #9
 80034d0:	d107      	bne.n	80034e2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	e005      	b.n	80034ee <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	061b      	lsls	r3, r3, #24
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d120      	bne.n	8003536 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	ea02 0103 	and.w	r1, r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	430a      	orrs	r2, r1
 800350a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b0a      	cmp	r3, #10
 800351c:	d003      	beq.n	8003526 <HAL_DMA2D_ConfigLayer+0xb2>
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b09      	cmp	r3, #9
 8003524:	d127      	bne.n	8003576 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003532:	629a      	str	r2, [r3, #40]	; 0x28
 8003534:	e01f      	b.n	8003576 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69da      	ldr	r2, [r3, #28]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	43db      	mvns	r3, r3
 8003540:	ea02 0103 	and.w	r1, r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	430a      	orrs	r2, r1
 800354c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	6812      	ldr	r2, [r2, #0]
 8003556:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b0a      	cmp	r3, #10
 800355e:	d003      	beq.n	8003568 <HAL_DMA2D_ConfigLayer+0xf4>
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b09      	cmp	r3, #9
 8003566:	d106      	bne.n	8003576 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003574:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	371c      	adds	r7, #28
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	ff03000f 	.word	0xff03000f

08003598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003598:	b480      	push	{r7}
 800359a:	b089      	sub	sp, #36	; 0x24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80035aa:	2300      	movs	r3, #0
 80035ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
 80035b6:	e175      	b.n	80038a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80035b8:	2201      	movs	r2, #1
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4013      	ands	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	f040 8164 	bne.w	800389e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d005      	beq.n	80035ee <HAL_GPIO_Init+0x56>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d130      	bne.n	8003650 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	2203      	movs	r2, #3
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4013      	ands	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003624:	2201      	movs	r2, #1
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	f003 0201 	and.w	r2, r3, #1
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	2b03      	cmp	r3, #3
 800365a:	d017      	beq.n	800368c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	2203      	movs	r2, #3
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	43db      	mvns	r3, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4013      	ands	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4313      	orrs	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d123      	bne.n	80036e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	08da      	lsrs	r2, r3, #3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3208      	adds	r2, #8
 80036a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	220f      	movs	r2, #15
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	08da      	lsrs	r2, r3, #3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3208      	adds	r2, #8
 80036da:	69b9      	ldr	r1, [r7, #24]
 80036dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	2203      	movs	r2, #3
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 0203 	and.w	r2, r3, #3
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80be 	beq.w	800389e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003722:	4b66      	ldr	r3, [pc, #408]	; (80038bc <HAL_GPIO_Init+0x324>)
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	4a65      	ldr	r2, [pc, #404]	; (80038bc <HAL_GPIO_Init+0x324>)
 8003728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800372c:	6453      	str	r3, [r2, #68]	; 0x44
 800372e:	4b63      	ldr	r3, [pc, #396]	; (80038bc <HAL_GPIO_Init+0x324>)
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800373a:	4a61      	ldr	r2, [pc, #388]	; (80038c0 <HAL_GPIO_Init+0x328>)
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	089b      	lsrs	r3, r3, #2
 8003740:	3302      	adds	r3, #2
 8003742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003746:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	220f      	movs	r2, #15
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	43db      	mvns	r3, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4013      	ands	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a58      	ldr	r2, [pc, #352]	; (80038c4 <HAL_GPIO_Init+0x32c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d037      	beq.n	80037d6 <HAL_GPIO_Init+0x23e>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a57      	ldr	r2, [pc, #348]	; (80038c8 <HAL_GPIO_Init+0x330>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d031      	beq.n	80037d2 <HAL_GPIO_Init+0x23a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a56      	ldr	r2, [pc, #344]	; (80038cc <HAL_GPIO_Init+0x334>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d02b      	beq.n	80037ce <HAL_GPIO_Init+0x236>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a55      	ldr	r2, [pc, #340]	; (80038d0 <HAL_GPIO_Init+0x338>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d025      	beq.n	80037ca <HAL_GPIO_Init+0x232>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a54      	ldr	r2, [pc, #336]	; (80038d4 <HAL_GPIO_Init+0x33c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d01f      	beq.n	80037c6 <HAL_GPIO_Init+0x22e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a53      	ldr	r2, [pc, #332]	; (80038d8 <HAL_GPIO_Init+0x340>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d019      	beq.n	80037c2 <HAL_GPIO_Init+0x22a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a52      	ldr	r2, [pc, #328]	; (80038dc <HAL_GPIO_Init+0x344>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d013      	beq.n	80037be <HAL_GPIO_Init+0x226>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a51      	ldr	r2, [pc, #324]	; (80038e0 <HAL_GPIO_Init+0x348>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00d      	beq.n	80037ba <HAL_GPIO_Init+0x222>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a50      	ldr	r2, [pc, #320]	; (80038e4 <HAL_GPIO_Init+0x34c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d007      	beq.n	80037b6 <HAL_GPIO_Init+0x21e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a4f      	ldr	r2, [pc, #316]	; (80038e8 <HAL_GPIO_Init+0x350>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d101      	bne.n	80037b2 <HAL_GPIO_Init+0x21a>
 80037ae:	2309      	movs	r3, #9
 80037b0:	e012      	b.n	80037d8 <HAL_GPIO_Init+0x240>
 80037b2:	230a      	movs	r3, #10
 80037b4:	e010      	b.n	80037d8 <HAL_GPIO_Init+0x240>
 80037b6:	2308      	movs	r3, #8
 80037b8:	e00e      	b.n	80037d8 <HAL_GPIO_Init+0x240>
 80037ba:	2307      	movs	r3, #7
 80037bc:	e00c      	b.n	80037d8 <HAL_GPIO_Init+0x240>
 80037be:	2306      	movs	r3, #6
 80037c0:	e00a      	b.n	80037d8 <HAL_GPIO_Init+0x240>
 80037c2:	2305      	movs	r3, #5
 80037c4:	e008      	b.n	80037d8 <HAL_GPIO_Init+0x240>
 80037c6:	2304      	movs	r3, #4
 80037c8:	e006      	b.n	80037d8 <HAL_GPIO_Init+0x240>
 80037ca:	2303      	movs	r3, #3
 80037cc:	e004      	b.n	80037d8 <HAL_GPIO_Init+0x240>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e002      	b.n	80037d8 <HAL_GPIO_Init+0x240>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <HAL_GPIO_Init+0x240>
 80037d6:	2300      	movs	r3, #0
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	f002 0203 	and.w	r2, r2, #3
 80037de:	0092      	lsls	r2, r2, #2
 80037e0:	4093      	lsls	r3, r2
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80037e8:	4935      	ldr	r1, [pc, #212]	; (80038c0 <HAL_GPIO_Init+0x328>)
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	089b      	lsrs	r3, r3, #2
 80037ee:	3302      	adds	r3, #2
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037f6:	4b3d      	ldr	r3, [pc, #244]	; (80038ec <HAL_GPIO_Init+0x354>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	43db      	mvns	r3, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4013      	ands	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4313      	orrs	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800381a:	4a34      	ldr	r2, [pc, #208]	; (80038ec <HAL_GPIO_Init+0x354>)
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003820:	4b32      	ldr	r3, [pc, #200]	; (80038ec <HAL_GPIO_Init+0x354>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003844:	4a29      	ldr	r2, [pc, #164]	; (80038ec <HAL_GPIO_Init+0x354>)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800384a:	4b28      	ldr	r3, [pc, #160]	; (80038ec <HAL_GPIO_Init+0x354>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800386e:	4a1f      	ldr	r2, [pc, #124]	; (80038ec <HAL_GPIO_Init+0x354>)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003874:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <HAL_GPIO_Init+0x354>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	43db      	mvns	r3, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4013      	ands	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003898:	4a14      	ldr	r2, [pc, #80]	; (80038ec <HAL_GPIO_Init+0x354>)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	3301      	adds	r3, #1
 80038a2:	61fb      	str	r3, [r7, #28]
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	2b0f      	cmp	r3, #15
 80038a8:	f67f ae86 	bls.w	80035b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80038ac:	bf00      	nop
 80038ae:	bf00      	nop
 80038b0:	3724      	adds	r7, #36	; 0x24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40023800 	.word	0x40023800
 80038c0:	40013800 	.word	0x40013800
 80038c4:	40020000 	.word	0x40020000
 80038c8:	40020400 	.word	0x40020400
 80038cc:	40020800 	.word	0x40020800
 80038d0:	40020c00 	.word	0x40020c00
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40021400 	.word	0x40021400
 80038dc:	40021800 	.word	0x40021800
 80038e0:	40021c00 	.word	0x40021c00
 80038e4:	40022000 	.word	0x40022000
 80038e8:	40022400 	.word	0x40022400
 80038ec:	40013c00 	.word	0x40013c00

080038f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	807b      	strh	r3, [r7, #2]
 80038fc:	4613      	mov	r3, r2
 80038fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003900:	787b      	ldrb	r3, [r7, #1]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003906:	887a      	ldrh	r2, [r7, #2]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800390c:	e003      	b.n	8003916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800390e:	887b      	ldrh	r3, [r7, #2]
 8003910:	041a      	lsls	r2, r3, #16
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	619a      	str	r2, [r3, #24]
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e07f      	b.n	8003a36 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fe f956 	bl	8001bfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2224      	movs	r2, #36	; 0x24
 8003954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0201 	bic.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003974:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003984:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d107      	bne.n	800399e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800399a:	609a      	str	r2, [r3, #8]
 800399c:	e006      	b.n	80039ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689a      	ldr	r2, [r3, #8]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80039aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d104      	bne.n	80039be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6859      	ldr	r1, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	4b1d      	ldr	r3, [pc, #116]	; (8003a40 <HAL_I2C_Init+0x11c>)
 80039ca:	430b      	orrs	r3, r1
 80039cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691a      	ldr	r2, [r3, #16]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69d9      	ldr	r1, [r3, #28]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1a      	ldr	r2, [r3, #32]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0201 	orr.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	02008000 	.word	0x02008000

08003a44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b20      	cmp	r3, #32
 8003a58:	d138      	bne.n	8003acc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e032      	b.n	8003ace <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2224      	movs	r2, #36	; 0x24
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0201 	bic.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6819      	ldr	r1, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e000      	b.n	8003ace <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003acc:	2302      	movs	r3, #2
  }
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b085      	sub	sp, #20
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d139      	bne.n	8003b64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d101      	bne.n	8003afe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e033      	b.n	8003b66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2224      	movs	r2, #36	; 0x24
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0201 	bic.w	r2, r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	021b      	lsls	r3, r3, #8
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	e000      	b.n	8003b66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b64:	2302      	movs	r3, #2
  }
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
	...

08003b74 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e0bf      	b.n	8003d06 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fe f88e 	bl	8001cbc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699a      	ldr	r2, [r3, #24]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003bb6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6999      	ldr	r1, [r3, #24]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003bcc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6899      	ldr	r1, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	4b4a      	ldr	r3, [pc, #296]	; (8003d10 <HAL_LTDC_Init+0x19c>)
 8003be8:	400b      	ands	r3, r1
 8003bea:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	041b      	lsls	r3, r3, #16
 8003bf2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6899      	ldr	r1, [r3, #8]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699a      	ldr	r2, [r3, #24]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68d9      	ldr	r1, [r3, #12]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4b3e      	ldr	r3, [pc, #248]	; (8003d10 <HAL_LTDC_Init+0x19c>)
 8003c16:	400b      	ands	r3, r1
 8003c18:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	041b      	lsls	r3, r3, #16
 8003c20:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68d9      	ldr	r1, [r3, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1a      	ldr	r2, [r3, #32]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6919      	ldr	r1, [r3, #16]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	4b33      	ldr	r3, [pc, #204]	; (8003d10 <HAL_LTDC_Init+0x19c>)
 8003c44:	400b      	ands	r3, r1
 8003c46:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	041b      	lsls	r3, r3, #16
 8003c4e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6919      	ldr	r1, [r3, #16]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6959      	ldr	r1, [r3, #20]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	4b27      	ldr	r3, [pc, #156]	; (8003d10 <HAL_LTDC_Init+0x19c>)
 8003c72:	400b      	ands	r3, r1
 8003c74:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	041b      	lsls	r3, r3, #16
 8003c7c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6959      	ldr	r1, [r3, #20]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c9a:	021b      	lsls	r3, r3, #8
 8003c9c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003ca4:	041b      	lsls	r3, r3, #16
 8003ca6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0206 	orr.w	r2, r2, #6
 8003ce2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699a      	ldr	r2, [r3, #24]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	f000f800 	.word	0xf000f800

08003d14 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d023      	beq.n	8003d7e <HAL_LTDC_IRQHandler+0x6a>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d01e      	beq.n	8003d7e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0204 	bic.w	r2, r2, #4
 8003d4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2204      	movs	r2, #4
 8003d56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d5e:	f043 0201 	orr.w	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2204      	movs	r2, #4
 8003d6c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f86f 	bl	8003e5c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d023      	beq.n	8003dd0 <HAL_LTDC_IRQHandler+0xbc>
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d01e      	beq.n	8003dd0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0202 	bic.w	r2, r2, #2
 8003da0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2202      	movs	r2, #2
 8003da8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003db0:	f043 0202 	orr.w	r2, r3, #2
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2204      	movs	r2, #4
 8003dbe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f846 	bl	8003e5c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d01b      	beq.n	8003e12 <HAL_LTDC_IRQHandler+0xfe>
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d016      	beq.n	8003e12 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0201 	bic.w	r2, r2, #1
 8003df2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f82f 	bl	8003e70 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f003 0308 	and.w	r3, r3, #8
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d01b      	beq.n	8003e54 <HAL_LTDC_IRQHandler+0x140>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d016      	beq.n	8003e54 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0208 	bic.w	r2, r2, #8
 8003e34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2208      	movs	r2, #8
 8003e3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f818 	bl	8003e84 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003e54:	bf00      	nop
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003e98:	b5b0      	push	{r4, r5, r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d101      	bne.n	8003eb2 <HAL_LTDC_ConfigLayer+0x1a>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e02c      	b.n	8003f0c <HAL_LTDC_ConfigLayer+0x74>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2134      	movs	r1, #52	; 0x34
 8003ec8:	fb01 f303 	mul.w	r3, r1, r3
 8003ecc:	4413      	add	r3, r2
 8003ece:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	4614      	mov	r4, r2
 8003ed6:	461d      	mov	r5, r3
 8003ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ee4:	682b      	ldr	r3, [r5, #0]
 8003ee6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	68b9      	ldr	r1, [r7, #8]
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 f811 	bl	8003f14 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bdb0      	pop	{r4, r5, r7, pc}

08003f14 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b089      	sub	sp, #36	; 0x24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	0c1b      	lsrs	r3, r3, #16
 8003f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f30:	4413      	add	r3, r2
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	01db      	lsls	r3, r3, #7
 8003f40:	4413      	add	r3, r2
 8003f42:	3384      	adds	r3, #132	; 0x84
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	6812      	ldr	r2, [r2, #0]
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	01d2      	lsls	r2, r2, #7
 8003f50:	440a      	add	r2, r1
 8003f52:	3284      	adds	r2, #132	; 0x84
 8003f54:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003f58:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	0c1b      	lsrs	r3, r3, #16
 8003f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f6a:	4413      	add	r3, r2
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4619      	mov	r1, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	01db      	lsls	r3, r3, #7
 8003f78:	440b      	add	r3, r1
 8003f7a:	3384      	adds	r3, #132	; 0x84
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f92:	4413      	add	r3, r2
 8003f94:	041b      	lsls	r3, r3, #16
 8003f96:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	01db      	lsls	r3, r3, #7
 8003fa2:	4413      	add	r3, r2
 8003fa4:	3384      	adds	r3, #132	; 0x84
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	4611      	mov	r1, r2
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	01d2      	lsls	r2, r2, #7
 8003fb2:	440a      	add	r2, r1
 8003fb4:	3284      	adds	r2, #132	; 0x84
 8003fb6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003fba:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fca:	4413      	add	r3, r2
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	01db      	lsls	r3, r3, #7
 8003fd8:	440b      	add	r3, r1
 8003fda:	3384      	adds	r3, #132	; 0x84
 8003fdc:	4619      	mov	r1, r3
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	01db      	lsls	r3, r3, #7
 8003fee:	4413      	add	r3, r2
 8003ff0:	3384      	adds	r3, #132	; 0x84
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	6812      	ldr	r2, [r2, #0]
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	01d2      	lsls	r2, r2, #7
 8003ffe:	440a      	add	r2, r1
 8004000:	3284      	adds	r2, #132	; 0x84
 8004002:	f023 0307 	bic.w	r3, r3, #7
 8004006:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	01db      	lsls	r3, r3, #7
 8004012:	4413      	add	r3, r2
 8004014:	3384      	adds	r3, #132	; 0x84
 8004016:	461a      	mov	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004024:	021b      	lsls	r3, r3, #8
 8004026:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800402e:	041b      	lsls	r3, r3, #16
 8004030:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	061b      	lsls	r3, r3, #24
 8004038:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	01db      	lsls	r3, r3, #7
 8004044:	4413      	add	r3, r2
 8004046:	3384      	adds	r3, #132	; 0x84
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	01db      	lsls	r3, r3, #7
 8004054:	4413      	add	r3, r2
 8004056:	3384      	adds	r3, #132	; 0x84
 8004058:	461a      	mov	r2, r3
 800405a:	2300      	movs	r3, #0
 800405c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004064:	461a      	mov	r2, r3
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	431a      	orrs	r2, r3
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	431a      	orrs	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4619      	mov	r1, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	01db      	lsls	r3, r3, #7
 8004078:	440b      	add	r3, r1
 800407a:	3384      	adds	r3, #132	; 0x84
 800407c:	4619      	mov	r1, r3
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	01db      	lsls	r3, r3, #7
 800408e:	4413      	add	r3, r2
 8004090:	3384      	adds	r3, #132	; 0x84
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	6812      	ldr	r2, [r2, #0]
 8004098:	4611      	mov	r1, r2
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	01d2      	lsls	r2, r2, #7
 800409e:	440a      	add	r2, r1
 80040a0:	3284      	adds	r2, #132	; 0x84
 80040a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040a6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	461a      	mov	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	01db      	lsls	r3, r3, #7
 80040b2:	4413      	add	r3, r2
 80040b4:	3384      	adds	r3, #132	; 0x84
 80040b6:	461a      	mov	r2, r3
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	01db      	lsls	r3, r3, #7
 80040c8:	4413      	add	r3, r2
 80040ca:	3384      	adds	r3, #132	; 0x84
 80040cc:	69da      	ldr	r2, [r3, #28]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4619      	mov	r1, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	01db      	lsls	r3, r3, #7
 80040d8:	440b      	add	r3, r1
 80040da:	3384      	adds	r3, #132	; 0x84
 80040dc:	4619      	mov	r1, r3
 80040de:	4b58      	ldr	r3, [pc, #352]	; (8004240 <LTDC_SetConfig+0x32c>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	69da      	ldr	r2, [r3, #28]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	68f9      	ldr	r1, [r7, #12]
 80040ee:	6809      	ldr	r1, [r1, #0]
 80040f0:	4608      	mov	r0, r1
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	01c9      	lsls	r1, r1, #7
 80040f6:	4401      	add	r1, r0
 80040f8:	3184      	adds	r1, #132	; 0x84
 80040fa:	4313      	orrs	r3, r2
 80040fc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	01db      	lsls	r3, r3, #7
 8004108:	4413      	add	r3, r2
 800410a:	3384      	adds	r3, #132	; 0x84
 800410c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	01db      	lsls	r3, r3, #7
 8004118:	4413      	add	r3, r2
 800411a:	3384      	adds	r3, #132	; 0x84
 800411c:	461a      	mov	r2, r3
 800411e:	2300      	movs	r3, #0
 8004120:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	01db      	lsls	r3, r3, #7
 800412c:	4413      	add	r3, r2
 800412e:	3384      	adds	r3, #132	; 0x84
 8004130:	461a      	mov	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d102      	bne.n	8004146 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004140:	2304      	movs	r3, #4
 8004142:	61fb      	str	r3, [r7, #28]
 8004144:	e01b      	b.n	800417e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d102      	bne.n	8004154 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800414e:	2303      	movs	r3, #3
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	e014      	b.n	800417e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	2b04      	cmp	r3, #4
 800415a:	d00b      	beq.n	8004174 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004160:	2b02      	cmp	r3, #2
 8004162:	d007      	beq.n	8004174 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004168:	2b03      	cmp	r3, #3
 800416a:	d003      	beq.n	8004174 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004170:	2b07      	cmp	r3, #7
 8004172:	d102      	bne.n	800417a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004174:	2302      	movs	r3, #2
 8004176:	61fb      	str	r3, [r7, #28]
 8004178:	e001      	b.n	800417e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800417a:	2301      	movs	r3, #1
 800417c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	01db      	lsls	r3, r3, #7
 8004188:	4413      	add	r3, r2
 800418a:	3384      	adds	r3, #132	; 0x84
 800418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	6812      	ldr	r2, [r2, #0]
 8004192:	4611      	mov	r1, r2
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	01d2      	lsls	r2, r2, #7
 8004198:	440a      	add	r2, r1
 800419a:	3284      	adds	r2, #132	; 0x84
 800419c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80041a0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	69fa      	ldr	r2, [r7, #28]
 80041a8:	fb02 f303 	mul.w	r3, r2, r3
 80041ac:	041a      	lsls	r2, r3, #16
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	6859      	ldr	r1, [r3, #4]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	1acb      	subs	r3, r1, r3
 80041b8:	69f9      	ldr	r1, [r7, #28]
 80041ba:	fb01 f303 	mul.w	r3, r1, r3
 80041be:	3303      	adds	r3, #3
 80041c0:	68f9      	ldr	r1, [r7, #12]
 80041c2:	6809      	ldr	r1, [r1, #0]
 80041c4:	4608      	mov	r0, r1
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	01c9      	lsls	r1, r1, #7
 80041ca:	4401      	add	r1, r0
 80041cc:	3184      	adds	r1, #132	; 0x84
 80041ce:	4313      	orrs	r3, r2
 80041d0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	01db      	lsls	r3, r3, #7
 80041dc:	4413      	add	r3, r2
 80041de:	3384      	adds	r3, #132	; 0x84
 80041e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4619      	mov	r1, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	01db      	lsls	r3, r3, #7
 80041ec:	440b      	add	r3, r1
 80041ee:	3384      	adds	r3, #132	; 0x84
 80041f0:	4619      	mov	r1, r3
 80041f2:	4b14      	ldr	r3, [pc, #80]	; (8004244 <LTDC_SetConfig+0x330>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	461a      	mov	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	01db      	lsls	r3, r3, #7
 8004202:	4413      	add	r3, r2
 8004204:	3384      	adds	r3, #132	; 0x84
 8004206:	461a      	mov	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	01db      	lsls	r3, r3, #7
 8004218:	4413      	add	r3, r2
 800421a:	3384      	adds	r3, #132	; 0x84
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	6812      	ldr	r2, [r2, #0]
 8004222:	4611      	mov	r1, r2
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	01d2      	lsls	r2, r2, #7
 8004228:	440a      	add	r2, r1
 800422a:	3284      	adds	r2, #132	; 0x84
 800422c:	f043 0301 	orr.w	r3, r3, #1
 8004230:	6013      	str	r3, [r2, #0]
}
 8004232:	bf00      	nop
 8004234:	3724      	adds	r7, #36	; 0x24
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	fffff8f8 	.word	0xfffff8f8
 8004244:	fffff800 	.word	0xfffff800

08004248 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a04      	ldr	r2, [pc, #16]	; (8004264 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004256:	6013      	str	r3, [r2, #0]
}
 8004258:	bf00      	nop
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40007000 	.word	0x40007000

08004268 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800426e:	2300      	movs	r3, #0
 8004270:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004272:	4b23      	ldr	r3, [pc, #140]	; (8004300 <HAL_PWREx_EnableOverDrive+0x98>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	4a22      	ldr	r2, [pc, #136]	; (8004300 <HAL_PWREx_EnableOverDrive+0x98>)
 8004278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800427c:	6413      	str	r3, [r2, #64]	; 0x40
 800427e:	4b20      	ldr	r3, [pc, #128]	; (8004300 <HAL_PWREx_EnableOverDrive+0x98>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800428a:	4b1e      	ldr	r3, [pc, #120]	; (8004304 <HAL_PWREx_EnableOverDrive+0x9c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1d      	ldr	r2, [pc, #116]	; (8004304 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004294:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004296:	f7fe faad 	bl	80027f4 <HAL_GetTick>
 800429a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800429c:	e009      	b.n	80042b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800429e:	f7fe faa9 	bl	80027f4 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042ac:	d901      	bls.n	80042b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e022      	b.n	80042f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042b2:	4b14      	ldr	r3, [pc, #80]	; (8004304 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042be:	d1ee      	bne.n	800429e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80042c0:	4b10      	ldr	r3, [pc, #64]	; (8004304 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a0f      	ldr	r2, [pc, #60]	; (8004304 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042cc:	f7fe fa92 	bl	80027f4 <HAL_GetTick>
 80042d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042d2:	e009      	b.n	80042e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042d4:	f7fe fa8e 	bl	80027f4 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042e2:	d901      	bls.n	80042e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e007      	b.n	80042f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042e8:	4b06      	ldr	r3, [pc, #24]	; (8004304 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042f4:	d1ee      	bne.n	80042d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40023800 	.word	0x40023800
 8004304:	40007000 	.word	0x40007000

08004308 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004310:	2300      	movs	r3, #0
 8004312:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e291      	b.n	8004842 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 8087 	beq.w	800443a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800432c:	4b96      	ldr	r3, [pc, #600]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 030c 	and.w	r3, r3, #12
 8004334:	2b04      	cmp	r3, #4
 8004336:	d00c      	beq.n	8004352 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004338:	4b93      	ldr	r3, [pc, #588]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 030c 	and.w	r3, r3, #12
 8004340:	2b08      	cmp	r3, #8
 8004342:	d112      	bne.n	800436a <HAL_RCC_OscConfig+0x62>
 8004344:	4b90      	ldr	r3, [pc, #576]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800434c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004350:	d10b      	bne.n	800436a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004352:	4b8d      	ldr	r3, [pc, #564]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d06c      	beq.n	8004438 <HAL_RCC_OscConfig+0x130>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d168      	bne.n	8004438 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e26b      	b.n	8004842 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004372:	d106      	bne.n	8004382 <HAL_RCC_OscConfig+0x7a>
 8004374:	4b84      	ldr	r3, [pc, #528]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a83      	ldr	r2, [pc, #524]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 800437a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	e02e      	b.n	80043e0 <HAL_RCC_OscConfig+0xd8>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10c      	bne.n	80043a4 <HAL_RCC_OscConfig+0x9c>
 800438a:	4b7f      	ldr	r3, [pc, #508]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a7e      	ldr	r2, [pc, #504]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 8004390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	4b7c      	ldr	r3, [pc, #496]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a7b      	ldr	r2, [pc, #492]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 800439c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	e01d      	b.n	80043e0 <HAL_RCC_OscConfig+0xd8>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043ac:	d10c      	bne.n	80043c8 <HAL_RCC_OscConfig+0xc0>
 80043ae:	4b76      	ldr	r3, [pc, #472]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a75      	ldr	r2, [pc, #468]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 80043b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	4b73      	ldr	r3, [pc, #460]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a72      	ldr	r2, [pc, #456]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 80043c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	e00b      	b.n	80043e0 <HAL_RCC_OscConfig+0xd8>
 80043c8:	4b6f      	ldr	r3, [pc, #444]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a6e      	ldr	r2, [pc, #440]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 80043ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	4b6c      	ldr	r3, [pc, #432]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a6b      	ldr	r2, [pc, #428]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 80043da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d013      	beq.n	8004410 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fe fa04 	bl	80027f4 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043f0:	f7fe fa00 	bl	80027f4 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b64      	cmp	r3, #100	; 0x64
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e21f      	b.n	8004842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004402:	4b61      	ldr	r3, [pc, #388]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f0      	beq.n	80043f0 <HAL_RCC_OscConfig+0xe8>
 800440e:	e014      	b.n	800443a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004410:	f7fe f9f0 	bl	80027f4 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004418:	f7fe f9ec 	bl	80027f4 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b64      	cmp	r3, #100	; 0x64
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e20b      	b.n	8004842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800442a:	4b57      	ldr	r3, [pc, #348]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f0      	bne.n	8004418 <HAL_RCC_OscConfig+0x110>
 8004436:	e000      	b.n	800443a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d069      	beq.n	800451a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004446:	4b50      	ldr	r3, [pc, #320]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 030c 	and.w	r3, r3, #12
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00b      	beq.n	800446a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004452:	4b4d      	ldr	r3, [pc, #308]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 030c 	and.w	r3, r3, #12
 800445a:	2b08      	cmp	r3, #8
 800445c:	d11c      	bne.n	8004498 <HAL_RCC_OscConfig+0x190>
 800445e:	4b4a      	ldr	r3, [pc, #296]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d116      	bne.n	8004498 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446a:	4b47      	ldr	r3, [pc, #284]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d005      	beq.n	8004482 <HAL_RCC_OscConfig+0x17a>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d001      	beq.n	8004482 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e1df      	b.n	8004842 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004482:	4b41      	ldr	r3, [pc, #260]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	493d      	ldr	r1, [pc, #244]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 8004492:	4313      	orrs	r3, r2
 8004494:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004496:	e040      	b.n	800451a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d023      	beq.n	80044e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044a0:	4b39      	ldr	r3, [pc, #228]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a38      	ldr	r2, [pc, #224]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ac:	f7fe f9a2 	bl	80027f4 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b4:	f7fe f99e 	bl	80027f4 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e1bd      	b.n	8004842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c6:	4b30      	ldr	r3, [pc, #192]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0f0      	beq.n	80044b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d2:	4b2d      	ldr	r3, [pc, #180]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	4929      	ldr	r1, [pc, #164]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	600b      	str	r3, [r1, #0]
 80044e6:	e018      	b.n	800451a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044e8:	4b27      	ldr	r3, [pc, #156]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a26      	ldr	r2, [pc, #152]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 80044ee:	f023 0301 	bic.w	r3, r3, #1
 80044f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f4:	f7fe f97e 	bl	80027f4 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044fc:	f7fe f97a 	bl	80027f4 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e199      	b.n	8004842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800450e:	4b1e      	ldr	r3, [pc, #120]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d038      	beq.n	8004598 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d019      	beq.n	8004562 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800452e:	4b16      	ldr	r3, [pc, #88]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 8004530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004532:	4a15      	ldr	r2, [pc, #84]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 8004534:	f043 0301 	orr.w	r3, r3, #1
 8004538:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453a:	f7fe f95b 	bl	80027f4 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004542:	f7fe f957 	bl	80027f4 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e176      	b.n	8004842 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004554:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 8004556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0f0      	beq.n	8004542 <HAL_RCC_OscConfig+0x23a>
 8004560:	e01a      	b.n	8004598 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004562:	4b09      	ldr	r3, [pc, #36]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 8004564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004566:	4a08      	ldr	r2, [pc, #32]	; (8004588 <HAL_RCC_OscConfig+0x280>)
 8004568:	f023 0301 	bic.w	r3, r3, #1
 800456c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456e:	f7fe f941 	bl	80027f4 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004574:	e00a      	b.n	800458c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004576:	f7fe f93d 	bl	80027f4 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d903      	bls.n	800458c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e15c      	b.n	8004842 <HAL_RCC_OscConfig+0x53a>
 8004588:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800458c:	4b91      	ldr	r3, [pc, #580]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 800458e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1ee      	bne.n	8004576 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 80a4 	beq.w	80046ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045a6:	4b8b      	ldr	r3, [pc, #556]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10d      	bne.n	80045ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b2:	4b88      	ldr	r3, [pc, #544]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	4a87      	ldr	r2, [pc, #540]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 80045b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045bc:	6413      	str	r3, [r2, #64]	; 0x40
 80045be:	4b85      	ldr	r3, [pc, #532]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c6:	60bb      	str	r3, [r7, #8]
 80045c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ca:	2301      	movs	r3, #1
 80045cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ce:	4b82      	ldr	r3, [pc, #520]	; (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d118      	bne.n	800460c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80045da:	4b7f      	ldr	r3, [pc, #508]	; (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a7e      	ldr	r2, [pc, #504]	; (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 80045e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045e6:	f7fe f905 	bl	80027f4 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ee:	f7fe f901 	bl	80027f4 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b64      	cmp	r3, #100	; 0x64
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e120      	b.n	8004842 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004600:	4b75      	ldr	r3, [pc, #468]	; (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f0      	beq.n	80045ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d106      	bne.n	8004622 <HAL_RCC_OscConfig+0x31a>
 8004614:	4b6f      	ldr	r3, [pc, #444]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004618:	4a6e      	ldr	r2, [pc, #440]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	6713      	str	r3, [r2, #112]	; 0x70
 8004620:	e02d      	b.n	800467e <HAL_RCC_OscConfig+0x376>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10c      	bne.n	8004644 <HAL_RCC_OscConfig+0x33c>
 800462a:	4b6a      	ldr	r3, [pc, #424]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	4a69      	ldr	r2, [pc, #420]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 8004630:	f023 0301 	bic.w	r3, r3, #1
 8004634:	6713      	str	r3, [r2, #112]	; 0x70
 8004636:	4b67      	ldr	r3, [pc, #412]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	4a66      	ldr	r2, [pc, #408]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 800463c:	f023 0304 	bic.w	r3, r3, #4
 8004640:	6713      	str	r3, [r2, #112]	; 0x70
 8004642:	e01c      	b.n	800467e <HAL_RCC_OscConfig+0x376>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	2b05      	cmp	r3, #5
 800464a:	d10c      	bne.n	8004666 <HAL_RCC_OscConfig+0x35e>
 800464c:	4b61      	ldr	r3, [pc, #388]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 800464e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004650:	4a60      	ldr	r2, [pc, #384]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 8004652:	f043 0304 	orr.w	r3, r3, #4
 8004656:	6713      	str	r3, [r2, #112]	; 0x70
 8004658:	4b5e      	ldr	r3, [pc, #376]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465c:	4a5d      	ldr	r2, [pc, #372]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 800465e:	f043 0301 	orr.w	r3, r3, #1
 8004662:	6713      	str	r3, [r2, #112]	; 0x70
 8004664:	e00b      	b.n	800467e <HAL_RCC_OscConfig+0x376>
 8004666:	4b5b      	ldr	r3, [pc, #364]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466a:	4a5a      	ldr	r2, [pc, #360]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 800466c:	f023 0301 	bic.w	r3, r3, #1
 8004670:	6713      	str	r3, [r2, #112]	; 0x70
 8004672:	4b58      	ldr	r3, [pc, #352]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	4a57      	ldr	r2, [pc, #348]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 8004678:	f023 0304 	bic.w	r3, r3, #4
 800467c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d015      	beq.n	80046b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004686:	f7fe f8b5 	bl	80027f4 <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468c:	e00a      	b.n	80046a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468e:	f7fe f8b1 	bl	80027f4 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f241 3288 	movw	r2, #5000	; 0x1388
 800469c:	4293      	cmp	r3, r2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e0ce      	b.n	8004842 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a4:	4b4b      	ldr	r3, [pc, #300]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 80046a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0ee      	beq.n	800468e <HAL_RCC_OscConfig+0x386>
 80046b0:	e014      	b.n	80046dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b2:	f7fe f89f 	bl	80027f4 <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b8:	e00a      	b.n	80046d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ba:	f7fe f89b 	bl	80027f4 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e0b8      	b.n	8004842 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046d0:	4b40      	ldr	r3, [pc, #256]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 80046d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1ee      	bne.n	80046ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046dc:	7dfb      	ldrb	r3, [r7, #23]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d105      	bne.n	80046ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e2:	4b3c      	ldr	r3, [pc, #240]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	4a3b      	ldr	r2, [pc, #236]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 80046e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 80a4 	beq.w	8004840 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046f8:	4b36      	ldr	r3, [pc, #216]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 030c 	and.w	r3, r3, #12
 8004700:	2b08      	cmp	r3, #8
 8004702:	d06b      	beq.n	80047dc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	2b02      	cmp	r3, #2
 800470a:	d149      	bne.n	80047a0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470c:	4b31      	ldr	r3, [pc, #196]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a30      	ldr	r2, [pc, #192]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 8004712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004718:	f7fe f86c 	bl	80027f4 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004720:	f7fe f868 	bl	80027f4 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e087      	b.n	8004842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004732:	4b28      	ldr	r3, [pc, #160]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69da      	ldr	r2, [r3, #28]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	019b      	lsls	r3, r3, #6
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	085b      	lsrs	r3, r3, #1
 8004756:	3b01      	subs	r3, #1
 8004758:	041b      	lsls	r3, r3, #16
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004760:	061b      	lsls	r3, r3, #24
 8004762:	4313      	orrs	r3, r2
 8004764:	4a1b      	ldr	r2, [pc, #108]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 8004766:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800476a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800476c:	4b19      	ldr	r3, [pc, #100]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a18      	ldr	r2, [pc, #96]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 8004772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004778:	f7fe f83c 	bl	80027f4 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004780:	f7fe f838 	bl	80027f4 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e057      	b.n	8004842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004792:	4b10      	ldr	r3, [pc, #64]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0x478>
 800479e:	e04f      	b.n	8004840 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a0:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a0b      	ldr	r2, [pc, #44]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 80047a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fe f822 	bl	80027f4 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b4:	f7fe f81e 	bl	80027f4 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e03d      	b.n	8004842 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c6:	4b03      	ldr	r3, [pc, #12]	; (80047d4 <HAL_RCC_OscConfig+0x4cc>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0x4ac>
 80047d2:	e035      	b.n	8004840 <HAL_RCC_OscConfig+0x538>
 80047d4:	40023800 	.word	0x40023800
 80047d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80047dc:	4b1b      	ldr	r3, [pc, #108]	; (800484c <HAL_RCC_OscConfig+0x544>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d028      	beq.n	800483c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d121      	bne.n	800483c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004802:	429a      	cmp	r2, r3
 8004804:	d11a      	bne.n	800483c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800480c:	4013      	ands	r3, r2
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004812:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004814:	4293      	cmp	r3, r2
 8004816:	d111      	bne.n	800483c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	085b      	lsrs	r3, r3, #1
 8004824:	3b01      	subs	r3, #1
 8004826:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004828:	429a      	cmp	r2, r3
 800482a:	d107      	bne.n	800483c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004836:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d001      	beq.n	8004840 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40023800 	.word	0x40023800

08004850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800485a:	2300      	movs	r3, #0
 800485c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0d0      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004868:	4b6a      	ldr	r3, [pc, #424]	; (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 030f 	and.w	r3, r3, #15
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d910      	bls.n	8004898 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004876:	4b67      	ldr	r3, [pc, #412]	; (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f023 020f 	bic.w	r2, r3, #15
 800487e:	4965      	ldr	r1, [pc, #404]	; (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	4313      	orrs	r3, r2
 8004884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004886:	4b63      	ldr	r3, [pc, #396]	; (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d001      	beq.n	8004898 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e0b8      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d020      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048b0:	4b59      	ldr	r3, [pc, #356]	; (8004a18 <HAL_RCC_ClockConfig+0x1c8>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	4a58      	ldr	r2, [pc, #352]	; (8004a18 <HAL_RCC_ClockConfig+0x1c8>)
 80048b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048c8:	4b53      	ldr	r3, [pc, #332]	; (8004a18 <HAL_RCC_ClockConfig+0x1c8>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	4a52      	ldr	r2, [pc, #328]	; (8004a18 <HAL_RCC_ClockConfig+0x1c8>)
 80048ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d4:	4b50      	ldr	r3, [pc, #320]	; (8004a18 <HAL_RCC_ClockConfig+0x1c8>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	494d      	ldr	r1, [pc, #308]	; (8004a18 <HAL_RCC_ClockConfig+0x1c8>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d040      	beq.n	8004974 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d107      	bne.n	800490a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fa:	4b47      	ldr	r3, [pc, #284]	; (8004a18 <HAL_RCC_ClockConfig+0x1c8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d115      	bne.n	8004932 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e07f      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d107      	bne.n	8004922 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004912:	4b41      	ldr	r3, [pc, #260]	; (8004a18 <HAL_RCC_ClockConfig+0x1c8>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d109      	bne.n	8004932 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e073      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004922:	4b3d      	ldr	r3, [pc, #244]	; (8004a18 <HAL_RCC_ClockConfig+0x1c8>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e06b      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004932:	4b39      	ldr	r3, [pc, #228]	; (8004a18 <HAL_RCC_ClockConfig+0x1c8>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f023 0203 	bic.w	r2, r3, #3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	4936      	ldr	r1, [pc, #216]	; (8004a18 <HAL_RCC_ClockConfig+0x1c8>)
 8004940:	4313      	orrs	r3, r2
 8004942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004944:	f7fd ff56 	bl	80027f4 <HAL_GetTick>
 8004948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800494a:	e00a      	b.n	8004962 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800494c:	f7fd ff52 	bl	80027f4 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	f241 3288 	movw	r2, #5000	; 0x1388
 800495a:	4293      	cmp	r3, r2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e053      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004962:	4b2d      	ldr	r3, [pc, #180]	; (8004a18 <HAL_RCC_ClockConfig+0x1c8>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 020c 	and.w	r2, r3, #12
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	429a      	cmp	r2, r3
 8004972:	d1eb      	bne.n	800494c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004974:	4b27      	ldr	r3, [pc, #156]	; (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d210      	bcs.n	80049a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004982:	4b24      	ldr	r3, [pc, #144]	; (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f023 020f 	bic.w	r2, r3, #15
 800498a:	4922      	ldr	r1, [pc, #136]	; (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	4313      	orrs	r3, r2
 8004990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004992:	4b20      	ldr	r3, [pc, #128]	; (8004a14 <HAL_RCC_ClockConfig+0x1c4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	429a      	cmp	r2, r3
 800499e:	d001      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e032      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d008      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049b0:	4b19      	ldr	r3, [pc, #100]	; (8004a18 <HAL_RCC_ClockConfig+0x1c8>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	4916      	ldr	r1, [pc, #88]	; (8004a18 <HAL_RCC_ClockConfig+0x1c8>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d009      	beq.n	80049e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049ce:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <HAL_RCC_ClockConfig+0x1c8>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	490e      	ldr	r1, [pc, #56]	; (8004a18 <HAL_RCC_ClockConfig+0x1c8>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049e2:	f000 f821 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
 80049e6:	4602      	mov	r2, r0
 80049e8:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <HAL_RCC_ClockConfig+0x1c8>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	091b      	lsrs	r3, r3, #4
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	490a      	ldr	r1, [pc, #40]	; (8004a1c <HAL_RCC_ClockConfig+0x1cc>)
 80049f4:	5ccb      	ldrb	r3, [r1, r3]
 80049f6:	fa22 f303 	lsr.w	r3, r2, r3
 80049fa:	4a09      	ldr	r2, [pc, #36]	; (8004a20 <HAL_RCC_ClockConfig+0x1d0>)
 80049fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049fe:	4b09      	ldr	r3, [pc, #36]	; (8004a24 <HAL_RCC_ClockConfig+0x1d4>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fd fdf8 	bl	80025f8 <HAL_InitTick>

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40023c00 	.word	0x40023c00
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	08008128 	.word	0x08008128
 8004a20:	20000000 	.word	0x20000000
 8004a24:	20000004 	.word	0x20000004

08004a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a2c:	b090      	sub	sp, #64	; 0x40
 8004a2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	637b      	str	r3, [r7, #52]	; 0x34
 8004a34:	2300      	movs	r3, #0
 8004a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a38:	2300      	movs	r3, #0
 8004a3a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a40:	4b59      	ldr	r3, [pc, #356]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 030c 	and.w	r3, r3, #12
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d00d      	beq.n	8004a68 <HAL_RCC_GetSysClockFreq+0x40>
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	f200 80a1 	bhi.w	8004b94 <HAL_RCC_GetSysClockFreq+0x16c>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <HAL_RCC_GetSysClockFreq+0x34>
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d003      	beq.n	8004a62 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a5a:	e09b      	b.n	8004b94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a5c:	4b53      	ldr	r3, [pc, #332]	; (8004bac <HAL_RCC_GetSysClockFreq+0x184>)
 8004a5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a60:	e09b      	b.n	8004b9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a62:	4b53      	ldr	r3, [pc, #332]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a66:	e098      	b.n	8004b9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a68:	4b4f      	ldr	r3, [pc, #316]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a70:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a72:	4b4d      	ldr	r3, [pc, #308]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d028      	beq.n	8004ad0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a7e:	4b4a      	ldr	r3, [pc, #296]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	099b      	lsrs	r3, r3, #6
 8004a84:	2200      	movs	r2, #0
 8004a86:	623b      	str	r3, [r7, #32]
 8004a88:	627a      	str	r2, [r7, #36]	; 0x24
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a90:	2100      	movs	r1, #0
 8004a92:	4b47      	ldr	r3, [pc, #284]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a94:	fb03 f201 	mul.w	r2, r3, r1
 8004a98:	2300      	movs	r3, #0
 8004a9a:	fb00 f303 	mul.w	r3, r0, r3
 8004a9e:	4413      	add	r3, r2
 8004aa0:	4a43      	ldr	r2, [pc, #268]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004aa2:	fba0 1202 	umull	r1, r2, r0, r2
 8004aa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004aa8:	460a      	mov	r2, r1
 8004aaa:	62ba      	str	r2, [r7, #40]	; 0x28
 8004aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aae:	4413      	add	r3, r2
 8004ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	61bb      	str	r3, [r7, #24]
 8004ab8:	61fa      	str	r2, [r7, #28]
 8004aba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004abe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004ac2:	f7fb fba1 	bl	8000208 <__aeabi_uldivmod>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4613      	mov	r3, r2
 8004acc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ace:	e053      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ad0:	4b35      	ldr	r3, [pc, #212]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	099b      	lsrs	r3, r3, #6
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	613b      	str	r3, [r7, #16]
 8004ada:	617a      	str	r2, [r7, #20]
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ae2:	f04f 0b00 	mov.w	fp, #0
 8004ae6:	4652      	mov	r2, sl
 8004ae8:	465b      	mov	r3, fp
 8004aea:	f04f 0000 	mov.w	r0, #0
 8004aee:	f04f 0100 	mov.w	r1, #0
 8004af2:	0159      	lsls	r1, r3, #5
 8004af4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004af8:	0150      	lsls	r0, r2, #5
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	ebb2 080a 	subs.w	r8, r2, sl
 8004b02:	eb63 090b 	sbc.w	r9, r3, fp
 8004b06:	f04f 0200 	mov.w	r2, #0
 8004b0a:	f04f 0300 	mov.w	r3, #0
 8004b0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b1a:	ebb2 0408 	subs.w	r4, r2, r8
 8004b1e:	eb63 0509 	sbc.w	r5, r3, r9
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	00eb      	lsls	r3, r5, #3
 8004b2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b30:	00e2      	lsls	r2, r4, #3
 8004b32:	4614      	mov	r4, r2
 8004b34:	461d      	mov	r5, r3
 8004b36:	eb14 030a 	adds.w	r3, r4, sl
 8004b3a:	603b      	str	r3, [r7, #0]
 8004b3c:	eb45 030b 	adc.w	r3, r5, fp
 8004b40:	607b      	str	r3, [r7, #4]
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	f04f 0300 	mov.w	r3, #0
 8004b4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b4e:	4629      	mov	r1, r5
 8004b50:	028b      	lsls	r3, r1, #10
 8004b52:	4621      	mov	r1, r4
 8004b54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b58:	4621      	mov	r1, r4
 8004b5a:	028a      	lsls	r2, r1, #10
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	4619      	mov	r1, r3
 8004b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b62:	2200      	movs	r2, #0
 8004b64:	60bb      	str	r3, [r7, #8]
 8004b66:	60fa      	str	r2, [r7, #12]
 8004b68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b6c:	f7fb fb4c 	bl	8000208 <__aeabi_uldivmod>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	4613      	mov	r3, r2
 8004b76:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004b78:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	0c1b      	lsrs	r3, r3, #16
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	3301      	adds	r3, #1
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004b88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b92:	e002      	b.n	8004b9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b94:	4b05      	ldr	r3, [pc, #20]	; (8004bac <HAL_RCC_GetSysClockFreq+0x184>)
 8004b96:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3740      	adds	r7, #64	; 0x40
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ba6:	bf00      	nop
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	00f42400 	.word	0x00f42400
 8004bb0:	017d7840 	.word	0x017d7840

08004bb4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bb8:	4b03      	ldr	r3, [pc, #12]	; (8004bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bba:	681b      	ldr	r3, [r3, #0]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	20000000 	.word	0x20000000

08004bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bd0:	f7ff fff0 	bl	8004bb4 <HAL_RCC_GetHCLKFreq>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	4b05      	ldr	r3, [pc, #20]	; (8004bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	0a9b      	lsrs	r3, r3, #10
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	4903      	ldr	r1, [pc, #12]	; (8004bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004be2:	5ccb      	ldrb	r3, [r1, r3]
 8004be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	08008138 	.word	0x08008138

08004bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bf8:	f7ff ffdc 	bl	8004bb4 <HAL_RCC_GetHCLKFreq>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	0b5b      	lsrs	r3, r3, #13
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	4903      	ldr	r1, [pc, #12]	; (8004c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c0a:	5ccb      	ldrb	r3, [r1, r3]
 8004c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40023800 	.word	0x40023800
 8004c18:	08008138 	.word	0x08008138

08004c1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	220f      	movs	r2, #15
 8004c2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c2c:	4b12      	ldr	r3, [pc, #72]	; (8004c78 <HAL_RCC_GetClockConfig+0x5c>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 0203 	and.w	r2, r3, #3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c38:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <HAL_RCC_GetClockConfig+0x5c>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c44:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <HAL_RCC_GetClockConfig+0x5c>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004c50:	4b09      	ldr	r3, [pc, #36]	; (8004c78 <HAL_RCC_GetClockConfig+0x5c>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	08db      	lsrs	r3, r3, #3
 8004c56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c5e:	4b07      	ldr	r3, [pc, #28]	; (8004c7c <HAL_RCC_GetClockConfig+0x60>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 020f 	and.w	r2, r3, #15
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	601a      	str	r2, [r3, #0]
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	40023c00 	.word	0x40023c00

08004c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004c90:	2300      	movs	r3, #0
 8004c92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004c94:	2300      	movs	r3, #0
 8004c96:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d012      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ca8:	4b69      	ldr	r3, [pc, #420]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	4a68      	ldr	r2, [pc, #416]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004cb2:	6093      	str	r3, [r2, #8]
 8004cb4:	4b66      	ldr	r3, [pc, #408]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbc:	4964      	ldr	r1, [pc, #400]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d017      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cda:	4b5d      	ldr	r3, [pc, #372]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ce0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce8:	4959      	ldr	r1, [pc, #356]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cf8:	d101      	bne.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004d06:	2301      	movs	r3, #1
 8004d08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d017      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d16:	4b4e      	ldr	r3, [pc, #312]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	494a      	ldr	r1, [pc, #296]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d34:	d101      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004d36:	2301      	movs	r3, #1
 8004d38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004d42:	2301      	movs	r3, #1
 8004d44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004d52:	2301      	movs	r3, #1
 8004d54:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0320 	and.w	r3, r3, #32
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 808b 	beq.w	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d64:	4b3a      	ldr	r3, [pc, #232]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d68:	4a39      	ldr	r2, [pc, #228]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8004d70:	4b37      	ldr	r3, [pc, #220]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d78:	60bb      	str	r3, [r7, #8]
 8004d7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d7c:	4b35      	ldr	r3, [pc, #212]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a34      	ldr	r2, [pc, #208]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d88:	f7fd fd34 	bl	80027f4 <HAL_GetTick>
 8004d8c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d90:	f7fd fd30 	bl	80027f4 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b64      	cmp	r3, #100	; 0x64
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e357      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004da2:	4b2c      	ldr	r3, [pc, #176]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0f0      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dae:	4b28      	ldr	r3, [pc, #160]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004db6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d035      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d02e      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dcc:	4b20      	ldr	r3, [pc, #128]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dd6:	4b1e      	ldr	r3, [pc, #120]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dda:	4a1d      	ldr	r2, [pc, #116]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004de2:	4b1b      	ldr	r3, [pc, #108]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de6:	4a1a      	ldr	r2, [pc, #104]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004dee:	4a18      	ldr	r2, [pc, #96]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004df4:	4b16      	ldr	r3, [pc, #88]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d114      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e00:	f7fd fcf8 	bl	80027f4 <HAL_GetTick>
 8004e04:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e06:	e00a      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e08:	f7fd fcf4 	bl	80027f4 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e319      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e1e:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0ee      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e36:	d111      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004e38:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e44:	4b04      	ldr	r3, [pc, #16]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e46:	400b      	ands	r3, r1
 8004e48:	4901      	ldr	r1, [pc, #4]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	608b      	str	r3, [r1, #8]
 8004e4e:	e00b      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004e50:	40023800 	.word	0x40023800
 8004e54:	40007000 	.word	0x40007000
 8004e58:	0ffffcff 	.word	0x0ffffcff
 8004e5c:	4baa      	ldr	r3, [pc, #680]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	4aa9      	ldr	r2, [pc, #676]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e62:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e66:	6093      	str	r3, [r2, #8]
 8004e68:	4ba7      	ldr	r3, [pc, #668]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e74:	49a4      	ldr	r1, [pc, #656]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0310 	and.w	r3, r3, #16
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d010      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e86:	4ba0      	ldr	r3, [pc, #640]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e8c:	4a9e      	ldr	r2, [pc, #632]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004e96:	4b9c      	ldr	r3, [pc, #624]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e98:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	4999      	ldr	r1, [pc, #612]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00a      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004eb4:	4b94      	ldr	r3, [pc, #592]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ec2:	4991      	ldr	r1, [pc, #580]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ed6:	4b8c      	ldr	r3, [pc, #560]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004edc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ee4:	4988      	ldr	r1, [pc, #544]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00a      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ef8:	4b83      	ldr	r3, [pc, #524]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f06:	4980      	ldr	r1, [pc, #512]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00a      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f1a:	4b7b      	ldr	r3, [pc, #492]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f28:	4977      	ldr	r1, [pc, #476]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00a      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f3c:	4b72      	ldr	r3, [pc, #456]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f42:	f023 0203 	bic.w	r2, r3, #3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4a:	496f      	ldr	r1, [pc, #444]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f5e:	4b6a      	ldr	r3, [pc, #424]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f64:	f023 020c 	bic.w	r2, r3, #12
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f6c:	4966      	ldr	r1, [pc, #408]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00a      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f80:	4b61      	ldr	r3, [pc, #388]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f86:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8e:	495e      	ldr	r1, [pc, #376]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fa2:	4b59      	ldr	r3, [pc, #356]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb0:	4955      	ldr	r1, [pc, #340]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00a      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fc4:	4b50      	ldr	r3, [pc, #320]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd2:	494d      	ldr	r1, [pc, #308]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004fe6:	4b48      	ldr	r3, [pc, #288]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff4:	4944      	ldr	r1, [pc, #272]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005008:	4b3f      	ldr	r3, [pc, #252]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005016:	493c      	ldr	r1, [pc, #240]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800502a:	4b37      	ldr	r3, [pc, #220]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005030:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005038:	4933      	ldr	r1, [pc, #204]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800504c:	4b2e      	ldr	r3, [pc, #184]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005052:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800505a:	492b      	ldr	r1, [pc, #172]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800505c:	4313      	orrs	r3, r2
 800505e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d011      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800506e:	4b26      	ldr	r3, [pc, #152]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005074:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800507c:	4922      	ldr	r1, [pc, #136]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800507e:	4313      	orrs	r3, r2
 8005080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005088:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800508c:	d101      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800508e:	2301      	movs	r3, #1
 8005090:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0308 	and.w	r3, r3, #8
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800509e:	2301      	movs	r3, #1
 80050a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050ae:	4b16      	ldr	r3, [pc, #88]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050bc:	4912      	ldr	r1, [pc, #72]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00b      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050d0:	4b0d      	ldr	r3, [pc, #52]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050e0:	4909      	ldr	r1, [pc, #36]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d006      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 80d9 	beq.w	80052ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050fc:	4b02      	ldr	r3, [pc, #8]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a01      	ldr	r2, [pc, #4]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005102:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005106:	e001      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005108:	40023800 	.word	0x40023800
 800510c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800510e:	f7fd fb71 	bl	80027f4 <HAL_GetTick>
 8005112:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005114:	e008      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005116:	f7fd fb6d 	bl	80027f4 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b64      	cmp	r3, #100	; 0x64
 8005122:	d901      	bls.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e194      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005128:	4b6c      	ldr	r3, [pc, #432]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1f0      	bne.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b00      	cmp	r3, #0
 800513e:	d021      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005144:	2b00      	cmp	r3, #0
 8005146:	d11d      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005148:	4b64      	ldr	r3, [pc, #400]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800514a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800514e:	0c1b      	lsrs	r3, r3, #16
 8005150:	f003 0303 	and.w	r3, r3, #3
 8005154:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005156:	4b61      	ldr	r3, [pc, #388]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800515c:	0e1b      	lsrs	r3, r3, #24
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	019a      	lsls	r2, r3, #6
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	041b      	lsls	r3, r3, #16
 800516e:	431a      	orrs	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	061b      	lsls	r3, r3, #24
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	071b      	lsls	r3, r3, #28
 800517c:	4957      	ldr	r1, [pc, #348]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800517e:	4313      	orrs	r3, r2
 8005180:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d004      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005198:	d00a      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d02e      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051ae:	d129      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051b0:	4b4a      	ldr	r3, [pc, #296]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051b6:	0c1b      	lsrs	r3, r3, #16
 80051b8:	f003 0303 	and.w	r3, r3, #3
 80051bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051be:	4b47      	ldr	r3, [pc, #284]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051c4:	0f1b      	lsrs	r3, r3, #28
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	019a      	lsls	r2, r3, #6
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	041b      	lsls	r3, r3, #16
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	061b      	lsls	r3, r3, #24
 80051de:	431a      	orrs	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	071b      	lsls	r3, r3, #28
 80051e4:	493d      	ldr	r1, [pc, #244]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80051ec:	4b3b      	ldr	r3, [pc, #236]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051f2:	f023 021f 	bic.w	r2, r3, #31
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	3b01      	subs	r3, #1
 80051fc:	4937      	ldr	r1, [pc, #220]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d01d      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005210:	4b32      	ldr	r3, [pc, #200]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005216:	0e1b      	lsrs	r3, r3, #24
 8005218:	f003 030f 	and.w	r3, r3, #15
 800521c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800521e:	4b2f      	ldr	r3, [pc, #188]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005224:	0f1b      	lsrs	r3, r3, #28
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	019a      	lsls	r2, r3, #6
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	041b      	lsls	r3, r3, #16
 8005238:	431a      	orrs	r2, r3
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	061b      	lsls	r3, r3, #24
 800523e:	431a      	orrs	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	071b      	lsls	r3, r3, #28
 8005244:	4925      	ldr	r1, [pc, #148]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d011      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	019a      	lsls	r2, r3, #6
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	041b      	lsls	r3, r3, #16
 8005264:	431a      	orrs	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	061b      	lsls	r3, r3, #24
 800526c:	431a      	orrs	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	071b      	lsls	r3, r3, #28
 8005274:	4919      	ldr	r1, [pc, #100]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800527c:	4b17      	ldr	r3, [pc, #92]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a16      	ldr	r2, [pc, #88]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005282:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005286:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005288:	f7fd fab4 	bl	80027f4 <HAL_GetTick>
 800528c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800528e:	e008      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005290:	f7fd fab0 	bl	80027f4 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b64      	cmp	r3, #100	; 0x64
 800529c:	d901      	bls.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e0d7      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052a2:	4b0e      	ldr	r3, [pc, #56]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0f0      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	f040 80cd 	bne.w	8005450 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80052b6:	4b09      	ldr	r3, [pc, #36]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a08      	ldr	r2, [pc, #32]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052c2:	f7fd fa97 	bl	80027f4 <HAL_GetTick>
 80052c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052c8:	e00a      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052ca:	f7fd fa93 	bl	80027f4 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b64      	cmp	r3, #100	; 0x64
 80052d6:	d903      	bls.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e0ba      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80052dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052e0:	4b5e      	ldr	r3, [pc, #376]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ec:	d0ed      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d009      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800530a:	2b00      	cmp	r3, #0
 800530c:	d02e      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	2b00      	cmp	r3, #0
 8005314:	d12a      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005316:	4b51      	ldr	r3, [pc, #324]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531c:	0c1b      	lsrs	r3, r3, #16
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005324:	4b4d      	ldr	r3, [pc, #308]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532a:	0f1b      	lsrs	r3, r3, #28
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	019a      	lsls	r2, r3, #6
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	041b      	lsls	r3, r3, #16
 800533c:	431a      	orrs	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	061b      	lsls	r3, r3, #24
 8005344:	431a      	orrs	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	071b      	lsls	r3, r3, #28
 800534a:	4944      	ldr	r1, [pc, #272]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005352:	4b42      	ldr	r3, [pc, #264]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005358:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005360:	3b01      	subs	r3, #1
 8005362:	021b      	lsls	r3, r3, #8
 8005364:	493d      	ldr	r1, [pc, #244]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005366:	4313      	orrs	r3, r2
 8005368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d022      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800537c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005380:	d11d      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005382:	4b36      	ldr	r3, [pc, #216]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005388:	0e1b      	lsrs	r3, r3, #24
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005390:	4b32      	ldr	r3, [pc, #200]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005396:	0f1b      	lsrs	r3, r3, #28
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	019a      	lsls	r2, r3, #6
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	041b      	lsls	r3, r3, #16
 80053aa:	431a      	orrs	r2, r3
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	061b      	lsls	r3, r3, #24
 80053b0:	431a      	orrs	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	071b      	lsls	r3, r3, #28
 80053b6:	4929      	ldr	r1, [pc, #164]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d028      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053ca:	4b24      	ldr	r3, [pc, #144]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d0:	0e1b      	lsrs	r3, r3, #24
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80053d8:	4b20      	ldr	r3, [pc, #128]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053de:	0c1b      	lsrs	r3, r3, #16
 80053e0:	f003 0303 	and.w	r3, r3, #3
 80053e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	019a      	lsls	r2, r3, #6
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	041b      	lsls	r3, r3, #16
 80053f0:	431a      	orrs	r2, r3
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	061b      	lsls	r3, r3, #24
 80053f6:	431a      	orrs	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	071b      	lsls	r3, r3, #28
 80053fe:	4917      	ldr	r1, [pc, #92]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005406:	4b15      	ldr	r3, [pc, #84]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800540c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	4911      	ldr	r1, [pc, #68]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005416:	4313      	orrs	r3, r2
 8005418:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800541c:	4b0f      	ldr	r3, [pc, #60]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a0e      	ldr	r2, [pc, #56]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005426:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005428:	f7fd f9e4 	bl	80027f4 <HAL_GetTick>
 800542c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800542e:	e008      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005430:	f7fd f9e0 	bl	80027f4 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b64      	cmp	r3, #100	; 0x64
 800543c:	d901      	bls.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e007      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005442:	4b06      	ldr	r3, [pc, #24]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800544a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800544e:	d1ef      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3720      	adds	r7, #32
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	40023800 	.word	0x40023800

08005460 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005468:	2300      	movs	r3, #0
 800546a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800546c:	2300      	movs	r3, #0
 800546e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8005470:	2300      	movs	r3, #0
 8005472:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800547e:	f040 808c 	bne.w	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005482:	4b95      	ldr	r3, [pc, #596]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005488:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005490:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005498:	d07c      	beq.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054a0:	d87d      	bhi.n	800559e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d004      	beq.n	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ae:	d039      	beq.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80054b0:	e075      	b.n	800559e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80054b2:	4b89      	ldr	r3, [pc, #548]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d108      	bne.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80054be:	4b86      	ldr	r3, [pc, #536]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054c6:	4a85      	ldr	r2, [pc, #532]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80054c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054cc:	613b      	str	r3, [r7, #16]
 80054ce:	e007      	b.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80054d0:	4b81      	ldr	r3, [pc, #516]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054d8:	4a81      	ldr	r2, [pc, #516]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80054da:	fbb2 f3f3 	udiv	r3, r2, r3
 80054de:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80054e0:	4b7d      	ldr	r3, [pc, #500]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e6:	0e1b      	lsrs	r3, r3, #24
 80054e8:	f003 030f 	and.w	r3, r3, #15
 80054ec:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80054ee:	4b7a      	ldr	r3, [pc, #488]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f4:	099b      	lsrs	r3, r3, #6
 80054f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	fb03 f202 	mul.w	r2, r3, r2
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	fbb2 f3f3 	udiv	r3, r2, r3
 8005506:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005508:	4b73      	ldr	r3, [pc, #460]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800550a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800550e:	0a1b      	lsrs	r3, r3, #8
 8005510:	f003 031f 	and.w	r3, r3, #31
 8005514:	3301      	adds	r3, #1
 8005516:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005520:	617b      	str	r3, [r7, #20]
        break;
 8005522:	e03d      	b.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005524:	4b6c      	ldr	r3, [pc, #432]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d108      	bne.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005530:	4b69      	ldr	r3, [pc, #420]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005538:	4a68      	ldr	r2, [pc, #416]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800553a:	fbb2 f3f3 	udiv	r3, r2, r3
 800553e:	613b      	str	r3, [r7, #16]
 8005540:	e007      	b.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005542:	4b65      	ldr	r3, [pc, #404]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800554a:	4a65      	ldr	r2, [pc, #404]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800554c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005550:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005552:	4b61      	ldr	r3, [pc, #388]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005558:	0e1b      	lsrs	r3, r3, #24
 800555a:	f003 030f 	and.w	r3, r3, #15
 800555e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005560:	4b5d      	ldr	r3, [pc, #372]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005566:	099b      	lsrs	r3, r3, #6
 8005568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	fb03 f202 	mul.w	r2, r3, r2
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	fbb2 f3f3 	udiv	r3, r2, r3
 8005578:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800557a:	4b57      	ldr	r3, [pc, #348]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800557c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005580:	f003 031f 	and.w	r3, r3, #31
 8005584:	3301      	adds	r3, #1
 8005586:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005590:	617b      	str	r3, [r7, #20]
        break;
 8005592:	e005      	b.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005594:	4b53      	ldr	r3, [pc, #332]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005596:	617b      	str	r3, [r7, #20]
        break;
 8005598:	e002      	b.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800559a:	bf00      	nop
 800559c:	e000      	b.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800559e:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055a6:	f040 808c 	bne.w	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 80055aa:	4b4b      	ldr	r3, [pc, #300]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80055ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80055b8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055c0:	d07c      	beq.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055c8:	d87d      	bhi.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d004      	beq.n	80055da <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055d6:	d039      	beq.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80055d8:	e075      	b.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80055da:	4b3f      	ldr	r3, [pc, #252]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d108      	bne.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80055e6:	4b3c      	ldr	r3, [pc, #240]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055ee:	4a3b      	ldr	r2, [pc, #236]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80055f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f4:	613b      	str	r3, [r7, #16]
 80055f6:	e007      	b.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80055f8:	4b37      	ldr	r3, [pc, #220]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005600:	4a37      	ldr	r2, [pc, #220]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005602:	fbb2 f3f3 	udiv	r3, r2, r3
 8005606:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005608:	4b33      	ldr	r3, [pc, #204]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800560a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560e:	0e1b      	lsrs	r3, r3, #24
 8005610:	f003 030f 	and.w	r3, r3, #15
 8005614:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005616:	4b30      	ldr	r3, [pc, #192]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561c:	099b      	lsrs	r3, r3, #6
 800561e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	fb03 f202 	mul.w	r2, r3, r2
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	fbb2 f3f3 	udiv	r3, r2, r3
 800562e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005630:	4b29      	ldr	r3, [pc, #164]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005636:	0a1b      	lsrs	r3, r3, #8
 8005638:	f003 031f 	and.w	r3, r3, #31
 800563c:	3301      	adds	r3, #1
 800563e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	fbb2 f3f3 	udiv	r3, r2, r3
 8005648:	617b      	str	r3, [r7, #20]
        break;
 800564a:	e03d      	b.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800564c:	4b22      	ldr	r3, [pc, #136]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d108      	bne.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005658:	4b1f      	ldr	r3, [pc, #124]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005660:	4a1e      	ldr	r2, [pc, #120]	; (80056dc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005662:	fbb2 f3f3 	udiv	r3, r2, r3
 8005666:	613b      	str	r3, [r7, #16]
 8005668:	e007      	b.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800566a:	4b1b      	ldr	r3, [pc, #108]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005672:	4a1b      	ldr	r2, [pc, #108]	; (80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005674:	fbb2 f3f3 	udiv	r3, r2, r3
 8005678:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800567a:	4b17      	ldr	r3, [pc, #92]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800567c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005680:	0e1b      	lsrs	r3, r3, #24
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005688:	4b13      	ldr	r3, [pc, #76]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800568a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800568e:	099b      	lsrs	r3, r3, #6
 8005690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	fb03 f202 	mul.w	r2, r3, r2
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80056a2:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80056a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056a8:	f003 031f 	and.w	r3, r3, #31
 80056ac:	3301      	adds	r3, #1
 80056ae:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b8:	617b      	str	r3, [r7, #20]
        break;
 80056ba:	e005      	b.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 80056bc:	4b09      	ldr	r3, [pc, #36]	; (80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80056be:	617b      	str	r3, [r7, #20]
        break;
 80056c0:	e002      	b.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 80056c2:	bf00      	nop
 80056c4:	e000      	b.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 80056c6:	bf00      	nop

  return frequency;
 80056c8:	697b      	ldr	r3, [r7, #20]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	371c      	adds	r7, #28
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	40023800 	.word	0x40023800
 80056dc:	00f42400 	.word	0x00f42400
 80056e0:	017d7840 	.word	0x017d7840
 80056e4:	00bb8000 	.word	0x00bb8000

080056e8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e081      	b.n	80057fe <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	7f5b      	ldrb	r3, [r3, #29]
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d105      	bne.n	8005710 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7fc fb9e 	bl	8001e4c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	22ca      	movs	r2, #202	; 0xca
 800571c:	625a      	str	r2, [r3, #36]	; 0x24
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2253      	movs	r2, #83	; 0x53
 8005724:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fb16 	bl	8005d58 <RTC_EnterInitMode>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d008      	beq.n	8005744 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	22ff      	movs	r2, #255	; 0xff
 8005738:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2204      	movs	r2, #4
 800573e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e05c      	b.n	80057fe <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6899      	ldr	r1, [r3, #8]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	4b2e      	ldr	r3, [pc, #184]	; (8005808 <HAL_RTC_Init+0x120>)
 8005750:	400b      	ands	r3, r1
 8005752:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6899      	ldr	r1, [r3, #8]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	431a      	orrs	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	68d2      	ldr	r2, [r2, #12]
 800577a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6919      	ldr	r1, [r3, #16]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	041a      	lsls	r2, r3, #16
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800579e:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 0320 	and.w	r3, r3, #32
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10e      	bne.n	80057cc <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 faaa 	bl	8005d08 <HAL_RTC_WaitForSynchro>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d008      	beq.n	80057cc <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	22ff      	movs	r2, #255	; 0xff
 80057c0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2204      	movs	r2, #4
 80057c6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e018      	b.n	80057fe <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0208 	bic.w	r2, r2, #8
 80057da:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	22ff      	movs	r2, #255	; 0xff
 80057f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80057fc:	2300      	movs	r3, #0
  }
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	ff8fffbf 	.word	0xff8fffbf

0800580c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800580c:	b590      	push	{r4, r7, lr}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005818:	2300      	movs	r3, #0
 800581a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	7f1b      	ldrb	r3, [r3, #28]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d101      	bne.n	8005828 <HAL_RTC_SetTime+0x1c>
 8005824:	2302      	movs	r3, #2
 8005826:	e0a8      	b.n	800597a <HAL_RTC_SetTime+0x16e>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2201      	movs	r2, #1
 800582c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2202      	movs	r2, #2
 8005832:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d126      	bne.n	8005888 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005844:	2b00      	cmp	r3, #0
 8005846:	d102      	bne.n	800584e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2200      	movs	r2, #0
 800584c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f000 faac 	bl	8005db0 <RTC_ByteToBcd2>
 8005858:	4603      	mov	r3, r0
 800585a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	785b      	ldrb	r3, [r3, #1]
 8005860:	4618      	mov	r0, r3
 8005862:	f000 faa5 	bl	8005db0 <RTC_ByteToBcd2>
 8005866:	4603      	mov	r3, r0
 8005868:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800586a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	789b      	ldrb	r3, [r3, #2]
 8005870:	4618      	mov	r0, r3
 8005872:	f000 fa9d 	bl	8005db0 <RTC_ByteToBcd2>
 8005876:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005878:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	7b1b      	ldrb	r3, [r3, #12]
 8005880:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005882:	4313      	orrs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	e018      	b.n	80058ba <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005892:	2b00      	cmp	r3, #0
 8005894:	d102      	bne.n	800589c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2200      	movs	r2, #0
 800589a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	785b      	ldrb	r3, [r3, #1]
 80058a6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80058a8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80058ae:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	7b1b      	ldrb	r3, [r3, #12]
 80058b4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80058b6:	4313      	orrs	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	22ca      	movs	r2, #202	; 0xca
 80058c0:	625a      	str	r2, [r3, #36]	; 0x24
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2253      	movs	r2, #83	; 0x53
 80058c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 fa44 	bl	8005d58 <RTC_EnterInitMode>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00b      	beq.n	80058ee <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	22ff      	movs	r2, #255	; 0xff
 80058dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2204      	movs	r2, #4
 80058e2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e045      	b.n	800597a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	6979      	ldr	r1, [r7, #20]
 80058f4:	4b23      	ldr	r3, [pc, #140]	; (8005984 <HAL_RTC_SetTime+0x178>)
 80058f6:	400b      	ands	r3, r1
 80058f8:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005908:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6899      	ldr	r1, [r3, #8]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	691a      	ldr	r2, [r3, #16]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	431a      	orrs	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005930:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f003 0320 	and.w	r3, r3, #32
 800593c:	2b00      	cmp	r3, #0
 800593e:	d111      	bne.n	8005964 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 f9e1 	bl	8005d08 <HAL_RTC_WaitForSynchro>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00b      	beq.n	8005964 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	22ff      	movs	r2, #255	; 0xff
 8005952:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2204      	movs	r2, #4
 8005958:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e00a      	b.n	800597a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	22ff      	movs	r2, #255	; 0xff
 800596a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2201      	movs	r2, #1
 8005970:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005978:	2300      	movs	r3, #0
  }
}
 800597a:	4618      	mov	r0, r3
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	bd90      	pop	{r4, r7, pc}
 8005982:	bf00      	nop
 8005984:	007f7f7f 	.word	0x007f7f7f

08005988 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005988:	b590      	push	{r4, r7, lr}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8005994:	2300      	movs	r3, #0
 8005996:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	7f1b      	ldrb	r3, [r3, #28]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d101      	bne.n	80059a4 <HAL_RTC_SetDate+0x1c>
 80059a0:	2302      	movs	r3, #2
 80059a2:	e092      	b.n	8005aca <HAL_RTC_SetDate+0x142>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2201      	movs	r2, #1
 80059a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2202      	movs	r2, #2
 80059ae:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10e      	bne.n	80059d4 <HAL_RTC_SetDate+0x4c>
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	785b      	ldrb	r3, [r3, #1]
 80059ba:	f003 0310 	and.w	r3, r3, #16
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d008      	beq.n	80059d4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	785b      	ldrb	r3, [r3, #1]
 80059c6:	f023 0310 	bic.w	r3, r3, #16
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	330a      	adds	r3, #10
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d11c      	bne.n	8005a14 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	78db      	ldrb	r3, [r3, #3]
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 f9e6 	bl	8005db0 <RTC_ByteToBcd2>
 80059e4:	4603      	mov	r3, r0
 80059e6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	785b      	ldrb	r3, [r3, #1]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 f9df 	bl	8005db0 <RTC_ByteToBcd2>
 80059f2:	4603      	mov	r3, r0
 80059f4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80059f6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	789b      	ldrb	r3, [r3, #2]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 f9d7 	bl	8005db0 <RTC_ByteToBcd2>
 8005a02:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005a04:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]
 8005a12:	e00e      	b.n	8005a32 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	78db      	ldrb	r3, [r3, #3]
 8005a18:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	785b      	ldrb	r3, [r3, #1]
 8005a1e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005a20:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8005a26:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	22ca      	movs	r2, #202	; 0xca
 8005a38:	625a      	str	r2, [r3, #36]	; 0x24
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2253      	movs	r2, #83	; 0x53
 8005a40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 f988 	bl	8005d58 <RTC_EnterInitMode>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00b      	beq.n	8005a66 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	22ff      	movs	r2, #255	; 0xff
 8005a54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2204      	movs	r2, #4
 8005a5a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e031      	b.n	8005aca <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	6979      	ldr	r1, [r7, #20]
 8005a6c:	4b19      	ldr	r3, [pc, #100]	; (8005ad4 <HAL_RTC_SetDate+0x14c>)
 8005a6e:	400b      	ands	r3, r1
 8005a70:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68da      	ldr	r2, [r3, #12]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a80:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f003 0320 	and.w	r3, r3, #32
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d111      	bne.n	8005ab4 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 f939 	bl	8005d08 <HAL_RTC_WaitForSynchro>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00b      	beq.n	8005ab4 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	22ff      	movs	r2, #255	; 0xff
 8005aa2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2204      	movs	r2, #4
 8005aa8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e00a      	b.n	8005aca <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	22ff      	movs	r2, #255	; 0xff
 8005aba:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
  }
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	371c      	adds	r7, #28
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd90      	pop	{r4, r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	00ffff3f 	.word	0x00ffff3f

08005ad8 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005ad8:	b590      	push	{r4, r7, lr}
 8005ada:	b089      	sub	sp, #36	; 0x24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	61fb      	str	r3, [r7, #28]
 8005aec:	2300      	movs	r3, #0
 8005aee:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	7f1b      	ldrb	r3, [r3, #28]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d101      	bne.n	8005afc <HAL_RTC_SetAlarm+0x24>
 8005af8:	2302      	movs	r3, #2
 8005afa:	e101      	b.n	8005d00 <HAL_RTC_SetAlarm+0x228>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2201      	movs	r2, #1
 8005b00:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2202      	movs	r2, #2
 8005b06:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d137      	bne.n	8005b7e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d102      	bne.n	8005b22 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 f942 	bl	8005db0 <RTC_ByteToBcd2>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	785b      	ldrb	r3, [r3, #1]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f000 f93b 	bl	8005db0 <RTC_ByteToBcd2>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005b3e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	789b      	ldrb	r3, [r3, #2]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 f933 	bl	8005db0 <RTC_ByteToBcd2>
 8005b4a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8005b4c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	7b1b      	ldrb	r3, [r3, #12]
 8005b54:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005b56:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 f925 	bl	8005db0 <RTC_ByteToBcd2>
 8005b66:	4603      	mov	r3, r0
 8005b68:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005b6a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8005b72:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	61fb      	str	r3, [r7, #28]
 8005b7c:	e023      	b.n	8005bc6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d102      	bne.n	8005b92 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	785b      	ldrb	r3, [r3, #1]
 8005b9c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005b9e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005ba4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	7b1b      	ldrb	r3, [r3, #12]
 8005baa:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005bac:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bb4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005bb6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8005bbc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	22ca      	movs	r2, #202	; 0xca
 8005bd8:	625a      	str	r2, [r3, #36]	; 0x24
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2253      	movs	r2, #83	; 0x53
 8005be0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bea:	d13f      	bne.n	8005c6c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689a      	ldr	r2, [r3, #8]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bfa:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689a      	ldr	r2, [r3, #8]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c0a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c0c:	f7fc fdf2 	bl	80027f4 <HAL_GetTick>
 8005c10:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005c12:	e013      	b.n	8005c3c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c14:	f7fc fdee 	bl	80027f4 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c22:	d90b      	bls.n	8005c3c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	22ff      	movs	r2, #255	; 0xff
 8005c2a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2203      	movs	r2, #3
 8005c30:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e061      	b.n	8005d00 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0e4      	beq.n	8005c14 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69fa      	ldr	r2, [r7, #28]
 8005c50:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c68:	609a      	str	r2, [r3, #8]
 8005c6a:	e03e      	b.n	8005cea <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689a      	ldr	r2, [r3, #8]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c7a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c8a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c8c:	f7fc fdb2 	bl	80027f4 <HAL_GetTick>
 8005c90:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005c92:	e013      	b.n	8005cbc <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c94:	f7fc fdae 	bl	80027f4 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ca2:	d90b      	bls.n	8005cbc <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	22ff      	movs	r2, #255	; 0xff
 8005caa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2203      	movs	r2, #3
 8005cb0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e021      	b.n	8005d00 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0e4      	beq.n	8005c94 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	69fa      	ldr	r2, [r7, #28]
 8005cd0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	22ff      	movs	r2, #255	; 0xff
 8005cf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3724      	adds	r7, #36	; 0x24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd90      	pop	{r4, r7, pc}

08005d08 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005d10:	2300      	movs	r3, #0
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d22:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d24:	f7fc fd66 	bl	80027f4 <HAL_GetTick>
 8005d28:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005d2a:	e009      	b.n	8005d40 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005d2c:	f7fc fd62 	bl	80027f4 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d3a:	d901      	bls.n	8005d40 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e007      	b.n	8005d50 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f003 0320 	and.w	r3, r3, #32
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d0ee      	beq.n	8005d2c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005d60:	2300      	movs	r3, #0
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d119      	bne.n	8005da6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f04f 32ff 	mov.w	r2, #4294967295
 8005d7a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d7c:	f7fc fd3a 	bl	80027f4 <HAL_GetTick>
 8005d80:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005d82:	e009      	b.n	8005d98 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005d84:	f7fc fd36 	bl	80027f4 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d92:	d901      	bls.n	8005d98 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e007      	b.n	8005da8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0ee      	beq.n	8005d84 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	4603      	mov	r3, r0
 8005db8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8005dbe:	e005      	b.n	8005dcc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8005dc6:	79fb      	ldrb	r3, [r7, #7]
 8005dc8:	3b0a      	subs	r3, #10
 8005dca:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8005dcc:	79fb      	ldrb	r3, [r7, #7]
 8005dce:	2b09      	cmp	r3, #9
 8005dd0:	d8f6      	bhi.n	8005dc0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	79fb      	ldrb	r3, [r7, #7]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	b2db      	uxtb	r3, r3
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	7f1b      	ldrb	r3, [r3, #28]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_RTCEx_SetTimeStamp+0x1c>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e03e      	b.n	8005e86 <HAL_RTCEx_SetTimeStamp+0x9a>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2202      	movs	r2, #2
 8005e12:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689a      	ldr	r2, [r3, #8]
 8005e1a:	4b1e      	ldr	r3, [pc, #120]	; (8005e94 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	22ca      	movs	r2, #202	; 0xca
 8005e2e:	625a      	str	r2, [r3, #36]	; 0x24
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2253      	movs	r2, #83	; 0x53
 8005e36:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0206 	bic.w	r2, r2, #6
 8005e46:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689a      	ldr	r2, [r3, #8]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e6e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	22ff      	movs	r2, #255	; 0xff
 8005e76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	371c      	adds	r7, #28
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	fffff7f7 	.word	0xfffff7f7

08005e98 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b088      	sub	sp, #32
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e156      	b.n	8006164 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d106      	bne.n	8005ed0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7fc fb2a 	bl	8002524 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f95b 	bl	8006194 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d00c      	beq.n	8005f00 <HAL_SAI_Init+0x68>
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d80d      	bhi.n	8005f06 <HAL_SAI_Init+0x6e>
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d002      	beq.n	8005ef4 <HAL_SAI_Init+0x5c>
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d003      	beq.n	8005efa <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8005ef2:	e008      	b.n	8005f06 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	61fb      	str	r3, [r7, #28]
      break;
 8005ef8:	e006      	b.n	8005f08 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005efa:	2310      	movs	r3, #16
 8005efc:	61fb      	str	r3, [r7, #28]
      break;
 8005efe:	e003      	b.n	8005f08 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005f00:	2320      	movs	r3, #32
 8005f02:	61fb      	str	r3, [r7, #28]
      break;
 8005f04:	e000      	b.n	8005f08 <HAL_SAI_Init+0x70>
      break;
 8005f06:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	2b03      	cmp	r3, #3
 8005f0e:	d81e      	bhi.n	8005f4e <HAL_SAI_Init+0xb6>
 8005f10:	a201      	add	r2, pc, #4	; (adr r2, 8005f18 <HAL_SAI_Init+0x80>)
 8005f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f16:	bf00      	nop
 8005f18:	08005f29 	.word	0x08005f29
 8005f1c:	08005f2f 	.word	0x08005f2f
 8005f20:	08005f37 	.word	0x08005f37
 8005f24:	08005f3f 	.word	0x08005f3f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	617b      	str	r3, [r7, #20]
    }
    break;
 8005f2c:	e010      	b.n	8005f50 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f32:	617b      	str	r3, [r7, #20]
    }
    break;
 8005f34:	e00c      	b.n	8005f50 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005f36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f3a:	617b      	str	r3, [r7, #20]
    }
    break;
 8005f3c:	e008      	b.n	8005f50 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005f3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f42:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f043 0301 	orr.w	r3, r3, #1
 8005f4a:	61fb      	str	r3, [r7, #28]
    }
    break;
 8005f4c:	e000      	b.n	8005f50 <HAL_SAI_Init+0xb8>
    default:
      break;
 8005f4e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a85      	ldr	r2, [pc, #532]	; (800616c <HAL_SAI_Init+0x2d4>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d004      	beq.n	8005f64 <HAL_SAI_Init+0xcc>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a84      	ldr	r2, [pc, #528]	; (8006170 <HAL_SAI_Init+0x2d8>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d103      	bne.n	8005f6c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8005f64:	4a83      	ldr	r2, [pc, #524]	; (8006174 <HAL_SAI_Init+0x2dc>)
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	6013      	str	r3, [r2, #0]
 8005f6a:	e002      	b.n	8005f72 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005f6c:	4a82      	ldr	r2, [pc, #520]	; (8006178 <HAL_SAI_Init+0x2e0>)
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d04c      	beq.n	8006014 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a7a      	ldr	r2, [pc, #488]	; (800616c <HAL_SAI_Init+0x2d4>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d004      	beq.n	8005f92 <HAL_SAI_Init+0xfa>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a78      	ldr	r2, [pc, #480]	; (8006170 <HAL_SAI_Init+0x2d8>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d104      	bne.n	8005f9c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005f92:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005f96:	f7ff fa63 	bl	8005460 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f9a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a76      	ldr	r2, [pc, #472]	; (800617c <HAL_SAI_Init+0x2e4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d004      	beq.n	8005fb0 <HAL_SAI_Init+0x118>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a75      	ldr	r2, [pc, #468]	; (8006180 <HAL_SAI_Init+0x2e8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d104      	bne.n	8005fba <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005fb0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005fb4:	f7ff fa54 	bl	8005460 <HAL_RCCEx_GetPeriphCLKFreq>
 8005fb8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	025b      	lsls	r3, r3, #9
 8005fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4a6b      	ldr	r2, [pc, #428]	; (8006184 <HAL_SAI_Init+0x2ec>)
 8005fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fda:	08da      	lsrs	r2, r3, #3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8005fe0:	68f9      	ldr	r1, [r7, #12]
 8005fe2:	4b68      	ldr	r3, [pc, #416]	; (8006184 <HAL_SAI_Init+0x2ec>)
 8005fe4:	fba3 2301 	umull	r2, r3, r3, r1
 8005fe8:	08da      	lsrs	r2, r3, #3
 8005fea:	4613      	mov	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	1aca      	subs	r2, r1, r3
 8005ff4:	2a08      	cmp	r2, #8
 8005ff6:	d904      	bls.n	8006002 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006006:	2b04      	cmp	r3, #4
 8006008:	d104      	bne.n	8006014 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	085a      	lsrs	r2, r3, #1
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <HAL_SAI_Init+0x18c>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d109      	bne.n	8006038 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006028:	2b01      	cmp	r3, #1
 800602a:	d101      	bne.n	8006030 <HAL_SAI_Init+0x198>
 800602c:	2300      	movs	r3, #0
 800602e:	e001      	b.n	8006034 <HAL_SAI_Init+0x19c>
 8006030:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006034:	61bb      	str	r3, [r7, #24]
 8006036:	e008      	b.n	800604a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603c:	2b01      	cmp	r3, #1
 800603e:	d102      	bne.n	8006046 <HAL_SAI_Init+0x1ae>
 8006040:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006044:	e000      	b.n	8006048 <HAL_SAI_Init+0x1b0>
 8006046:	2300      	movs	r3, #0
 8006048:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6819      	ldr	r1, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	4b4c      	ldr	r3, [pc, #304]	; (8006188 <HAL_SAI_Init+0x2f0>)
 8006056:	400b      	ands	r3, r1
 8006058:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6819      	ldr	r1, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006068:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800606e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006074:	431a      	orrs	r2, r3
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8006082:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800608e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	051b      	lsls	r3, r3, #20
 8006096:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	430a      	orrs	r2, r1
 800609e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6859      	ldr	r1, [r3, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	4b38      	ldr	r3, [pc, #224]	; (800618c <HAL_SAI_Init+0x2f4>)
 80060ac:	400b      	ands	r3, r1
 80060ae:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6859      	ldr	r1, [r3, #4]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	699a      	ldr	r2, [r3, #24]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060be:	431a      	orrs	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c4:	431a      	orrs	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6899      	ldr	r1, [r3, #8]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	4b2d      	ldr	r3, [pc, #180]	; (8006190 <HAL_SAI_Init+0x2f8>)
 80060da:	400b      	ands	r3, r1
 80060dc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6899      	ldr	r1, [r3, #8]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80060ee:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80060f4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80060fa:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006100:	3b01      	subs	r3, #1
 8006102:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006104:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	430a      	orrs	r2, r1
 800610c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68d9      	ldr	r1, [r3, #12]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	f24f 0320 	movw	r3, #61472	; 0xf020
 800611c:	400b      	ands	r3, r1
 800611e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68d9      	ldr	r1, [r3, #12]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006134:	041b      	lsls	r3, r3, #16
 8006136:	431a      	orrs	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800613c:	3b01      	subs	r3, #1
 800613e:	021b      	lsls	r3, r3, #8
 8006140:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3720      	adds	r7, #32
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	40015804 	.word	0x40015804
 8006170:	40015824 	.word	0x40015824
 8006174:	40015800 	.word	0x40015800
 8006178:	40015c00 	.word	0x40015c00
 800617c:	40015c04 	.word	0x40015c04
 8006180:	40015c24 	.word	0x40015c24
 8006184:	cccccccd 	.word	0xcccccccd
 8006188:	ff05c010 	.word	0xff05c010
 800618c:	ffff1ff0 	.word	0xffff1ff0
 8006190:	fff88000 	.word	0xfff88000

08006194 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800619c:	4b17      	ldr	r3, [pc, #92]	; (80061fc <SAI_Disable+0x68>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a17      	ldr	r2, [pc, #92]	; (8006200 <SAI_Disable+0x6c>)
 80061a2:	fba2 2303 	umull	r2, r3, r2, r3
 80061a6:	0b1b      	lsrs	r3, r3, #12
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80061ac:	2300      	movs	r3, #0
 80061ae:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80061be:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	1e5a      	subs	r2, r3, #1
 80061c4:	60fa      	str	r2, [r7, #12]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10a      	bne.n	80061e0 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	72fb      	strb	r3, [r7, #11]
      break;
 80061de:	e006      	b.n	80061ee <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1e8      	bne.n	80061c0 <SAI_Disable+0x2c>

  return status;
 80061ee:	7afb      	ldrb	r3, [r7, #11]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	20000000 	.word	0x20000000
 8006200:	95cbec1b 	.word	0x95cbec1b

08006204 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e025      	b.n	8006264 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	d106      	bne.n	8006232 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7fc f96f 	bl	8002510 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2202      	movs	r2, #2
 8006236:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	3304      	adds	r3, #4
 8006242:	4619      	mov	r1, r3
 8006244:	4610      	mov	r0, r2
 8006246:	f001 fe71 	bl	8007f2c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6818      	ldr	r0, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	461a      	mov	r2, r3
 8006254:	6839      	ldr	r1, [r7, #0]
 8006256:	f001 fec5 	bl	8007fe4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e04c      	b.n	8006318 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d106      	bne.n	8006298 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fb fe08 	bl	8001ea8 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 0203 	bic.w	r2, r2, #3
 80062ae:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	4b19      	ldr	r3, [pc, #100]	; (8006320 <HAL_SPDIFRX_Init+0xb4>)
 80062bc:	4013      	ands	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 80062c8:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 80062ce:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 80062d4:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 80062da:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 80062e0:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 80062e6:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 80062ec:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 80062f2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 80062f8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	fff88407 	.word	0xfff88407

08006324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e09d      	b.n	8006472 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	2b00      	cmp	r3, #0
 800633c:	d108      	bne.n	8006350 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006346:	d009      	beq.n	800635c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	61da      	str	r2, [r3, #28]
 800634e:	e005      	b.n	800635c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d106      	bne.n	800637c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7fb fdfa 	bl	8001f70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2202      	movs	r2, #2
 8006380:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006392:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800639c:	d902      	bls.n	80063a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800639e:	2300      	movs	r3, #0
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	e002      	b.n	80063aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80063a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80063b2:	d007      	beq.n	80063c4 <HAL_SPI_Init+0xa0>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063bc:	d002      	beq.n	80063c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80063d4:	431a      	orrs	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	431a      	orrs	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	431a      	orrs	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063f2:	431a      	orrs	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	69db      	ldr	r3, [r3, #28]
 80063f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063fc:	431a      	orrs	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006406:	ea42 0103 	orr.w	r1, r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	0c1b      	lsrs	r3, r3, #16
 8006420:	f003 0204 	and.w	r2, r3, #4
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	f003 0310 	and.w	r3, r3, #16
 800642c:	431a      	orrs	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006432:	f003 0308 	and.w	r3, r3, #8
 8006436:	431a      	orrs	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006440:	ea42 0103 	orr.w	r1, r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	69da      	ldr	r2, [r3, #28]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006460:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b082      	sub	sp, #8
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e049      	b.n	8006520 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d106      	bne.n	80064a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f7fb fdc7 	bl	8002034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2202      	movs	r2, #2
 80064aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	3304      	adds	r3, #4
 80064b6:	4619      	mov	r1, r3
 80064b8:	4610      	mov	r0, r2
 80064ba:	f000 fc29 	bl	8006d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b01      	cmp	r3, #1
 800653a:	d001      	beq.n	8006540 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e054      	b.n	80065ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2202      	movs	r2, #2
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 0201 	orr.w	r2, r2, #1
 8006556:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a26      	ldr	r2, [pc, #152]	; (80065f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d022      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0x80>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656a:	d01d      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0x80>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a22      	ldr	r2, [pc, #136]	; (80065fc <HAL_TIM_Base_Start_IT+0xd4>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d018      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0x80>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a21      	ldr	r2, [pc, #132]	; (8006600 <HAL_TIM_Base_Start_IT+0xd8>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d013      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0x80>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a1f      	ldr	r2, [pc, #124]	; (8006604 <HAL_TIM_Base_Start_IT+0xdc>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00e      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0x80>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a1e      	ldr	r2, [pc, #120]	; (8006608 <HAL_TIM_Base_Start_IT+0xe0>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d009      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0x80>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a1c      	ldr	r2, [pc, #112]	; (800660c <HAL_TIM_Base_Start_IT+0xe4>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d004      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0x80>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a1b      	ldr	r2, [pc, #108]	; (8006610 <HAL_TIM_Base_Start_IT+0xe8>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d115      	bne.n	80065d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689a      	ldr	r2, [r3, #8]
 80065ae:	4b19      	ldr	r3, [pc, #100]	; (8006614 <HAL_TIM_Base_Start_IT+0xec>)
 80065b0:	4013      	ands	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2b06      	cmp	r3, #6
 80065b8:	d015      	beq.n	80065e6 <HAL_TIM_Base_Start_IT+0xbe>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c0:	d011      	beq.n	80065e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f042 0201 	orr.w	r2, r2, #1
 80065d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d2:	e008      	b.n	80065e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 0201 	orr.w	r2, r2, #1
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	e000      	b.n	80065e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	40010000 	.word	0x40010000
 80065fc:	40000400 	.word	0x40000400
 8006600:	40000800 	.word	0x40000800
 8006604:	40000c00 	.word	0x40000c00
 8006608:	40010400 	.word	0x40010400
 800660c:	40014000 	.word	0x40014000
 8006610:	40001800 	.word	0x40001800
 8006614:	00010007 	.word	0x00010007

08006618 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e049      	b.n	80066be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d106      	bne.n	8006644 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7fb fd66 	bl	8002110 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3304      	adds	r3, #4
 8006654:	4619      	mov	r1, r3
 8006656:	4610      	mov	r0, r2
 8006658:	f000 fb5a 	bl	8006d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b082      	sub	sp, #8
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d122      	bne.n	8006722 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d11b      	bne.n	8006722 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f06f 0202 	mvn.w	r2, #2
 80066f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	f003 0303 	and.w	r3, r3, #3
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fae3 	bl	8006cd4 <HAL_TIM_IC_CaptureCallback>
 800670e:	e005      	b.n	800671c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fad5 	bl	8006cc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fae6 	bl	8006ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b04      	cmp	r3, #4
 800672e:	d122      	bne.n	8006776 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f003 0304 	and.w	r3, r3, #4
 800673a:	2b04      	cmp	r3, #4
 800673c:	d11b      	bne.n	8006776 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f06f 0204 	mvn.w	r2, #4
 8006746:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006758:	2b00      	cmp	r3, #0
 800675a:	d003      	beq.n	8006764 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fab9 	bl	8006cd4 <HAL_TIM_IC_CaptureCallback>
 8006762:	e005      	b.n	8006770 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 faab 	bl	8006cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fabc 	bl	8006ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	f003 0308 	and.w	r3, r3, #8
 8006780:	2b08      	cmp	r3, #8
 8006782:	d122      	bne.n	80067ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f003 0308 	and.w	r3, r3, #8
 800678e:	2b08      	cmp	r3, #8
 8006790:	d11b      	bne.n	80067ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f06f 0208 	mvn.w	r2, #8
 800679a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2204      	movs	r2, #4
 80067a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	f003 0303 	and.w	r3, r3, #3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fa8f 	bl	8006cd4 <HAL_TIM_IC_CaptureCallback>
 80067b6:	e005      	b.n	80067c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fa81 	bl	8006cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fa92 	bl	8006ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	f003 0310 	and.w	r3, r3, #16
 80067d4:	2b10      	cmp	r3, #16
 80067d6:	d122      	bne.n	800681e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f003 0310 	and.w	r3, r3, #16
 80067e2:	2b10      	cmp	r3, #16
 80067e4:	d11b      	bne.n	800681e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f06f 0210 	mvn.w	r2, #16
 80067ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2208      	movs	r2, #8
 80067f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69db      	ldr	r3, [r3, #28]
 80067fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006800:	2b00      	cmp	r3, #0
 8006802:	d003      	beq.n	800680c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fa65 	bl	8006cd4 <HAL_TIM_IC_CaptureCallback>
 800680a:	e005      	b.n	8006818 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fa57 	bl	8006cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fa68 	bl	8006ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b01      	cmp	r3, #1
 800682a:	d10e      	bne.n	800684a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b01      	cmp	r3, #1
 8006838:	d107      	bne.n	800684a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f06f 0201 	mvn.w	r2, #1
 8006842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7fb f83f 	bl	80018c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006854:	2b80      	cmp	r3, #128	; 0x80
 8006856:	d10e      	bne.n	8006876 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006862:	2b80      	cmp	r3, #128	; 0x80
 8006864:	d107      	bne.n	8006876 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800686e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fefb 	bl	800766c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006884:	d10e      	bne.n	80068a4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006890:	2b80      	cmp	r3, #128	; 0x80
 8006892:	d107      	bne.n	80068a4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800689c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 feee 	bl	8007680 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ae:	2b40      	cmp	r3, #64	; 0x40
 80068b0:	d10e      	bne.n	80068d0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068bc:	2b40      	cmp	r3, #64	; 0x40
 80068be:	d107      	bne.n	80068d0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fa16 	bl	8006cfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	f003 0320 	and.w	r3, r3, #32
 80068da:	2b20      	cmp	r3, #32
 80068dc:	d10e      	bne.n	80068fc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	f003 0320 	and.w	r3, r3, #32
 80068e8:	2b20      	cmp	r3, #32
 80068ea:	d107      	bne.n	80068fc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f06f 0220 	mvn.w	r2, #32
 80068f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 feae 	bl	8007658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068fc:	bf00      	nop
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006910:	2300      	movs	r3, #0
 8006912:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800691a:	2b01      	cmp	r3, #1
 800691c:	d101      	bne.n	8006922 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800691e:	2302      	movs	r3, #2
 8006920:	e0ff      	b.n	8006b22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b14      	cmp	r3, #20
 800692e:	f200 80f0 	bhi.w	8006b12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006932:	a201      	add	r2, pc, #4	; (adr r2, 8006938 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006938:	0800698d 	.word	0x0800698d
 800693c:	08006b13 	.word	0x08006b13
 8006940:	08006b13 	.word	0x08006b13
 8006944:	08006b13 	.word	0x08006b13
 8006948:	080069cd 	.word	0x080069cd
 800694c:	08006b13 	.word	0x08006b13
 8006950:	08006b13 	.word	0x08006b13
 8006954:	08006b13 	.word	0x08006b13
 8006958:	08006a0f 	.word	0x08006a0f
 800695c:	08006b13 	.word	0x08006b13
 8006960:	08006b13 	.word	0x08006b13
 8006964:	08006b13 	.word	0x08006b13
 8006968:	08006a4f 	.word	0x08006a4f
 800696c:	08006b13 	.word	0x08006b13
 8006970:	08006b13 	.word	0x08006b13
 8006974:	08006b13 	.word	0x08006b13
 8006978:	08006a91 	.word	0x08006a91
 800697c:	08006b13 	.word	0x08006b13
 8006980:	08006b13 	.word	0x08006b13
 8006984:	08006b13 	.word	0x08006b13
 8006988:	08006ad1 	.word	0x08006ad1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68b9      	ldr	r1, [r7, #8]
 8006992:	4618      	mov	r0, r3
 8006994:	f000 fa5c 	bl	8006e50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	699a      	ldr	r2, [r3, #24]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f042 0208 	orr.w	r2, r2, #8
 80069a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699a      	ldr	r2, [r3, #24]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0204 	bic.w	r2, r2, #4
 80069b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6999      	ldr	r1, [r3, #24]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	691a      	ldr	r2, [r3, #16]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	619a      	str	r2, [r3, #24]
      break;
 80069ca:	e0a5      	b.n	8006b18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68b9      	ldr	r1, [r7, #8]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 faae 	bl	8006f34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	699a      	ldr	r2, [r3, #24]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	699a      	ldr	r2, [r3, #24]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6999      	ldr	r1, [r3, #24]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	021a      	lsls	r2, r3, #8
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	619a      	str	r2, [r3, #24]
      break;
 8006a0c:	e084      	b.n	8006b18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68b9      	ldr	r1, [r7, #8]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f000 fb05 	bl	8007024 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	69da      	ldr	r2, [r3, #28]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f042 0208 	orr.w	r2, r2, #8
 8006a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	69da      	ldr	r2, [r3, #28]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 0204 	bic.w	r2, r2, #4
 8006a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	69d9      	ldr	r1, [r3, #28]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	691a      	ldr	r2, [r3, #16]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	61da      	str	r2, [r3, #28]
      break;
 8006a4c:	e064      	b.n	8006b18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68b9      	ldr	r1, [r7, #8]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f000 fb5b 	bl	8007110 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	69da      	ldr	r2, [r3, #28]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	69da      	ldr	r2, [r3, #28]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69d9      	ldr	r1, [r3, #28]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	021a      	lsls	r2, r3, #8
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	61da      	str	r2, [r3, #28]
      break;
 8006a8e:	e043      	b.n	8006b18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68b9      	ldr	r1, [r7, #8]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 fb92 	bl	80071c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f042 0208 	orr.w	r2, r2, #8
 8006aaa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0204 	bic.w	r2, r2, #4
 8006aba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	691a      	ldr	r2, [r3, #16]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ace:	e023      	b.n	8006b18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68b9      	ldr	r1, [r7, #8]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 fbc4 	bl	8007264 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006afa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	021a      	lsls	r2, r3, #8
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b10:	e002      	b.n	8006b18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	75fb      	strb	r3, [r7, #23]
      break;
 8006b16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop

08006b2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d101      	bne.n	8006b48 <HAL_TIM_ConfigClockSource+0x1c>
 8006b44:	2302      	movs	r3, #2
 8006b46:	e0b4      	b.n	8006cb2 <HAL_TIM_ConfigClockSource+0x186>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	4b56      	ldr	r3, [pc, #344]	; (8006cbc <HAL_TIM_ConfigClockSource+0x190>)
 8006b64:	4013      	ands	r3, r2
 8006b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b80:	d03e      	beq.n	8006c00 <HAL_TIM_ConfigClockSource+0xd4>
 8006b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b86:	f200 8087 	bhi.w	8006c98 <HAL_TIM_ConfigClockSource+0x16c>
 8006b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b8e:	f000 8086 	beq.w	8006c9e <HAL_TIM_ConfigClockSource+0x172>
 8006b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b96:	d87f      	bhi.n	8006c98 <HAL_TIM_ConfigClockSource+0x16c>
 8006b98:	2b70      	cmp	r3, #112	; 0x70
 8006b9a:	d01a      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0xa6>
 8006b9c:	2b70      	cmp	r3, #112	; 0x70
 8006b9e:	d87b      	bhi.n	8006c98 <HAL_TIM_ConfigClockSource+0x16c>
 8006ba0:	2b60      	cmp	r3, #96	; 0x60
 8006ba2:	d050      	beq.n	8006c46 <HAL_TIM_ConfigClockSource+0x11a>
 8006ba4:	2b60      	cmp	r3, #96	; 0x60
 8006ba6:	d877      	bhi.n	8006c98 <HAL_TIM_ConfigClockSource+0x16c>
 8006ba8:	2b50      	cmp	r3, #80	; 0x50
 8006baa:	d03c      	beq.n	8006c26 <HAL_TIM_ConfigClockSource+0xfa>
 8006bac:	2b50      	cmp	r3, #80	; 0x50
 8006bae:	d873      	bhi.n	8006c98 <HAL_TIM_ConfigClockSource+0x16c>
 8006bb0:	2b40      	cmp	r3, #64	; 0x40
 8006bb2:	d058      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0x13a>
 8006bb4:	2b40      	cmp	r3, #64	; 0x40
 8006bb6:	d86f      	bhi.n	8006c98 <HAL_TIM_ConfigClockSource+0x16c>
 8006bb8:	2b30      	cmp	r3, #48	; 0x30
 8006bba:	d064      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0x15a>
 8006bbc:	2b30      	cmp	r3, #48	; 0x30
 8006bbe:	d86b      	bhi.n	8006c98 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d060      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0x15a>
 8006bc4:	2b20      	cmp	r3, #32
 8006bc6:	d867      	bhi.n	8006c98 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d05c      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0x15a>
 8006bcc:	2b10      	cmp	r3, #16
 8006bce:	d05a      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0x15a>
 8006bd0:	e062      	b.n	8006c98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6818      	ldr	r0, [r3, #0]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	6899      	ldr	r1, [r3, #8]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	f000 fc0d 	bl	8007400 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bf4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	609a      	str	r2, [r3, #8]
      break;
 8006bfe:	e04f      	b.n	8006ca0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6818      	ldr	r0, [r3, #0]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	6899      	ldr	r1, [r3, #8]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	f000 fbf6 	bl	8007400 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	689a      	ldr	r2, [r3, #8]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c22:	609a      	str	r2, [r3, #8]
      break;
 8006c24:	e03c      	b.n	8006ca0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6818      	ldr	r0, [r3, #0]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	6859      	ldr	r1, [r3, #4]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	461a      	mov	r2, r3
 8006c34:	f000 fb6a 	bl	800730c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2150      	movs	r1, #80	; 0x50
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 fbc3 	bl	80073ca <TIM_ITRx_SetConfig>
      break;
 8006c44:	e02c      	b.n	8006ca0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6818      	ldr	r0, [r3, #0]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	6859      	ldr	r1, [r3, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	461a      	mov	r2, r3
 8006c54:	f000 fb89 	bl	800736a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2160      	movs	r1, #96	; 0x60
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 fbb3 	bl	80073ca <TIM_ITRx_SetConfig>
      break;
 8006c64:	e01c      	b.n	8006ca0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6818      	ldr	r0, [r3, #0]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	6859      	ldr	r1, [r3, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	461a      	mov	r2, r3
 8006c74:	f000 fb4a 	bl	800730c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2140      	movs	r1, #64	; 0x40
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 fba3 	bl	80073ca <TIM_ITRx_SetConfig>
      break;
 8006c84:	e00c      	b.n	8006ca0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4619      	mov	r1, r3
 8006c90:	4610      	mov	r0, r2
 8006c92:	f000 fb9a 	bl	80073ca <TIM_ITRx_SetConfig>
      break;
 8006c96:	e003      	b.n	8006ca0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c9c:	e000      	b.n	8006ca0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	fffeff88 	.word	0xfffeff88

08006cc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a40      	ldr	r2, [pc, #256]	; (8006e24 <TIM_Base_SetConfig+0x114>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d013      	beq.n	8006d50 <TIM_Base_SetConfig+0x40>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d2e:	d00f      	beq.n	8006d50 <TIM_Base_SetConfig+0x40>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a3d      	ldr	r2, [pc, #244]	; (8006e28 <TIM_Base_SetConfig+0x118>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d00b      	beq.n	8006d50 <TIM_Base_SetConfig+0x40>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a3c      	ldr	r2, [pc, #240]	; (8006e2c <TIM_Base_SetConfig+0x11c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d007      	beq.n	8006d50 <TIM_Base_SetConfig+0x40>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a3b      	ldr	r2, [pc, #236]	; (8006e30 <TIM_Base_SetConfig+0x120>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d003      	beq.n	8006d50 <TIM_Base_SetConfig+0x40>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a3a      	ldr	r2, [pc, #232]	; (8006e34 <TIM_Base_SetConfig+0x124>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d108      	bne.n	8006d62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a2f      	ldr	r2, [pc, #188]	; (8006e24 <TIM_Base_SetConfig+0x114>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d02b      	beq.n	8006dc2 <TIM_Base_SetConfig+0xb2>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d70:	d027      	beq.n	8006dc2 <TIM_Base_SetConfig+0xb2>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a2c      	ldr	r2, [pc, #176]	; (8006e28 <TIM_Base_SetConfig+0x118>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d023      	beq.n	8006dc2 <TIM_Base_SetConfig+0xb2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a2b      	ldr	r2, [pc, #172]	; (8006e2c <TIM_Base_SetConfig+0x11c>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d01f      	beq.n	8006dc2 <TIM_Base_SetConfig+0xb2>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a2a      	ldr	r2, [pc, #168]	; (8006e30 <TIM_Base_SetConfig+0x120>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d01b      	beq.n	8006dc2 <TIM_Base_SetConfig+0xb2>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a29      	ldr	r2, [pc, #164]	; (8006e34 <TIM_Base_SetConfig+0x124>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d017      	beq.n	8006dc2 <TIM_Base_SetConfig+0xb2>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a28      	ldr	r2, [pc, #160]	; (8006e38 <TIM_Base_SetConfig+0x128>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d013      	beq.n	8006dc2 <TIM_Base_SetConfig+0xb2>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a27      	ldr	r2, [pc, #156]	; (8006e3c <TIM_Base_SetConfig+0x12c>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d00f      	beq.n	8006dc2 <TIM_Base_SetConfig+0xb2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a26      	ldr	r2, [pc, #152]	; (8006e40 <TIM_Base_SetConfig+0x130>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d00b      	beq.n	8006dc2 <TIM_Base_SetConfig+0xb2>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a25      	ldr	r2, [pc, #148]	; (8006e44 <TIM_Base_SetConfig+0x134>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d007      	beq.n	8006dc2 <TIM_Base_SetConfig+0xb2>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a24      	ldr	r2, [pc, #144]	; (8006e48 <TIM_Base_SetConfig+0x138>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d003      	beq.n	8006dc2 <TIM_Base_SetConfig+0xb2>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a23      	ldr	r2, [pc, #140]	; (8006e4c <TIM_Base_SetConfig+0x13c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d108      	bne.n	8006dd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	689a      	ldr	r2, [r3, #8]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a0a      	ldr	r2, [pc, #40]	; (8006e24 <TIM_Base_SetConfig+0x114>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d003      	beq.n	8006e08 <TIM_Base_SetConfig+0xf8>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a0c      	ldr	r2, [pc, #48]	; (8006e34 <TIM_Base_SetConfig+0x124>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d103      	bne.n	8006e10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	691a      	ldr	r2, [r3, #16]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	615a      	str	r2, [r3, #20]
}
 8006e16:	bf00      	nop
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	40010000 	.word	0x40010000
 8006e28:	40000400 	.word	0x40000400
 8006e2c:	40000800 	.word	0x40000800
 8006e30:	40000c00 	.word	0x40000c00
 8006e34:	40010400 	.word	0x40010400
 8006e38:	40014000 	.word	0x40014000
 8006e3c:	40014400 	.word	0x40014400
 8006e40:	40014800 	.word	0x40014800
 8006e44:	40001800 	.word	0x40001800
 8006e48:	40001c00 	.word	0x40001c00
 8006e4c:	40002000 	.word	0x40002000

08006e50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	f023 0201 	bic.w	r2, r3, #1
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	4b2b      	ldr	r3, [pc, #172]	; (8006f28 <TIM_OC1_SetConfig+0xd8>)
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f023 0303 	bic.w	r3, r3, #3
 8006e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f023 0302 	bic.w	r3, r3, #2
 8006e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a21      	ldr	r2, [pc, #132]	; (8006f2c <TIM_OC1_SetConfig+0xdc>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d003      	beq.n	8006eb4 <TIM_OC1_SetConfig+0x64>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a20      	ldr	r2, [pc, #128]	; (8006f30 <TIM_OC1_SetConfig+0xe0>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d10c      	bne.n	8006ece <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f023 0308 	bic.w	r3, r3, #8
 8006eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f023 0304 	bic.w	r3, r3, #4
 8006ecc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a16      	ldr	r2, [pc, #88]	; (8006f2c <TIM_OC1_SetConfig+0xdc>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d003      	beq.n	8006ede <TIM_OC1_SetConfig+0x8e>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a15      	ldr	r2, [pc, #84]	; (8006f30 <TIM_OC1_SetConfig+0xe0>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d111      	bne.n	8006f02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ee4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006eec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	685a      	ldr	r2, [r3, #4]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	621a      	str	r2, [r3, #32]
}
 8006f1c:	bf00      	nop
 8006f1e:	371c      	adds	r7, #28
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	fffeff8f 	.word	0xfffeff8f
 8006f2c:	40010000 	.word	0x40010000
 8006f30:	40010400 	.word	0x40010400

08006f34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	f023 0210 	bic.w	r2, r3, #16
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	4b2e      	ldr	r3, [pc, #184]	; (8007018 <TIM_OC2_SetConfig+0xe4>)
 8006f60:	4013      	ands	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	021b      	lsls	r3, r3, #8
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	f023 0320 	bic.w	r3, r3, #32
 8006f7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	011b      	lsls	r3, r3, #4
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a23      	ldr	r2, [pc, #140]	; (800701c <TIM_OC2_SetConfig+0xe8>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d003      	beq.n	8006f9c <TIM_OC2_SetConfig+0x68>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a22      	ldr	r2, [pc, #136]	; (8007020 <TIM_OC2_SetConfig+0xec>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d10d      	bne.n	8006fb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	011b      	lsls	r3, r3, #4
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a18      	ldr	r2, [pc, #96]	; (800701c <TIM_OC2_SetConfig+0xe8>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d003      	beq.n	8006fc8 <TIM_OC2_SetConfig+0x94>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a17      	ldr	r2, [pc, #92]	; (8007020 <TIM_OC2_SetConfig+0xec>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d113      	bne.n	8006ff0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	685a      	ldr	r2, [r3, #4]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	621a      	str	r2, [r3, #32]
}
 800700a:	bf00      	nop
 800700c:	371c      	adds	r7, #28
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	feff8fff 	.word	0xfeff8fff
 800701c:	40010000 	.word	0x40010000
 8007020:	40010400 	.word	0x40010400

08007024 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007024:	b480      	push	{r7}
 8007026:	b087      	sub	sp, #28
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	69db      	ldr	r3, [r3, #28]
 800704a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	4b2d      	ldr	r3, [pc, #180]	; (8007104 <TIM_OC3_SetConfig+0xe0>)
 8007050:	4013      	ands	r3, r2
 8007052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f023 0303 	bic.w	r3, r3, #3
 800705a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	4313      	orrs	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800706c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	021b      	lsls	r3, r3, #8
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	4313      	orrs	r3, r2
 8007078:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a22      	ldr	r2, [pc, #136]	; (8007108 <TIM_OC3_SetConfig+0xe4>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d003      	beq.n	800708a <TIM_OC3_SetConfig+0x66>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a21      	ldr	r2, [pc, #132]	; (800710c <TIM_OC3_SetConfig+0xe8>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d10d      	bne.n	80070a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007090:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	021b      	lsls	r3, r3, #8
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	4313      	orrs	r3, r2
 800709c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a17      	ldr	r2, [pc, #92]	; (8007108 <TIM_OC3_SetConfig+0xe4>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d003      	beq.n	80070b6 <TIM_OC3_SetConfig+0x92>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a16      	ldr	r2, [pc, #88]	; (800710c <TIM_OC3_SetConfig+0xe8>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d113      	bne.n	80070de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	011b      	lsls	r3, r3, #4
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	011b      	lsls	r3, r3, #4
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	4313      	orrs	r3, r2
 80070dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	621a      	str	r2, [r3, #32]
}
 80070f8:	bf00      	nop
 80070fa:	371c      	adds	r7, #28
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	fffeff8f 	.word	0xfffeff8f
 8007108:	40010000 	.word	0x40010000
 800710c:	40010400 	.word	0x40010400

08007110 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007110:	b480      	push	{r7}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	69db      	ldr	r3, [r3, #28]
 8007136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	4b1e      	ldr	r3, [pc, #120]	; (80071b4 <TIM_OC4_SetConfig+0xa4>)
 800713c:	4013      	ands	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	021b      	lsls	r3, r3, #8
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	4313      	orrs	r3, r2
 8007152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800715a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	031b      	lsls	r3, r3, #12
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	4313      	orrs	r3, r2
 8007166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a13      	ldr	r2, [pc, #76]	; (80071b8 <TIM_OC4_SetConfig+0xa8>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d003      	beq.n	8007178 <TIM_OC4_SetConfig+0x68>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a12      	ldr	r2, [pc, #72]	; (80071bc <TIM_OC4_SetConfig+0xac>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d109      	bne.n	800718c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800717e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	019b      	lsls	r3, r3, #6
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	4313      	orrs	r3, r2
 800718a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	621a      	str	r2, [r3, #32]
}
 80071a6:	bf00      	nop
 80071a8:	371c      	adds	r7, #28
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	feff8fff 	.word	0xfeff8fff
 80071b8:	40010000 	.word	0x40010000
 80071bc:	40010400 	.word	0x40010400

080071c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	4b1b      	ldr	r3, [pc, #108]	; (8007258 <TIM_OC5_SetConfig+0x98>)
 80071ec:	4013      	ands	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007200:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	041b      	lsls	r3, r3, #16
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	4313      	orrs	r3, r2
 800720c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a12      	ldr	r2, [pc, #72]	; (800725c <TIM_OC5_SetConfig+0x9c>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d003      	beq.n	800721e <TIM_OC5_SetConfig+0x5e>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a11      	ldr	r2, [pc, #68]	; (8007260 <TIM_OC5_SetConfig+0xa0>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d109      	bne.n	8007232 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007224:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	021b      	lsls	r3, r3, #8
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	4313      	orrs	r3, r2
 8007230:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	621a      	str	r2, [r3, #32]
}
 800724c:	bf00      	nop
 800724e:	371c      	adds	r7, #28
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	fffeff8f 	.word	0xfffeff8f
 800725c:	40010000 	.word	0x40010000
 8007260:	40010400 	.word	0x40010400

08007264 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007264:	b480      	push	{r7}
 8007266:	b087      	sub	sp, #28
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	4b1c      	ldr	r3, [pc, #112]	; (8007300 <TIM_OC6_SetConfig+0x9c>)
 8007290:	4013      	ands	r3, r2
 8007292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	021b      	lsls	r3, r3, #8
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	4313      	orrs	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	051b      	lsls	r3, r3, #20
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a13      	ldr	r2, [pc, #76]	; (8007304 <TIM_OC6_SetConfig+0xa0>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d003      	beq.n	80072c4 <TIM_OC6_SetConfig+0x60>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a12      	ldr	r2, [pc, #72]	; (8007308 <TIM_OC6_SetConfig+0xa4>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d109      	bne.n	80072d8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	029b      	lsls	r3, r3, #10
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	621a      	str	r2, [r3, #32]
}
 80072f2:	bf00      	nop
 80072f4:	371c      	adds	r7, #28
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	feff8fff 	.word	0xfeff8fff
 8007304:	40010000 	.word	0x40010000
 8007308:	40010400 	.word	0x40010400

0800730c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800730c:	b480      	push	{r7}
 800730e:	b087      	sub	sp, #28
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	f023 0201 	bic.w	r2, r3, #1
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	011b      	lsls	r3, r3, #4
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	4313      	orrs	r3, r2
 8007340:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	f023 030a 	bic.w	r3, r3, #10
 8007348:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	4313      	orrs	r3, r2
 8007350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	621a      	str	r2, [r3, #32]
}
 800735e:	bf00      	nop
 8007360:	371c      	adds	r7, #28
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr

0800736a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800736a:	b480      	push	{r7}
 800736c:	b087      	sub	sp, #28
 800736e:	af00      	add	r7, sp, #0
 8007370:	60f8      	str	r0, [r7, #12]
 8007372:	60b9      	str	r1, [r7, #8]
 8007374:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	f023 0210 	bic.w	r2, r3, #16
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6a1b      	ldr	r3, [r3, #32]
 800738c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007394:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	031b      	lsls	r3, r3, #12
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	4313      	orrs	r3, r2
 800739e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	621a      	str	r2, [r3, #32]
}
 80073be:	bf00      	nop
 80073c0:	371c      	adds	r7, #28
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b085      	sub	sp, #20
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	f043 0307 	orr.w	r3, r3, #7
 80073ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	609a      	str	r2, [r3, #8]
}
 80073f4:	bf00      	nop
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
 800740c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800741a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	021a      	lsls	r2, r3, #8
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	431a      	orrs	r2, r3
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	4313      	orrs	r3, r2
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	4313      	orrs	r3, r2
 800742c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	609a      	str	r2, [r3, #8]
}
 8007434:	bf00      	nop
 8007436:	371c      	adds	r7, #28
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007450:	2b01      	cmp	r3, #1
 8007452:	d101      	bne.n	8007458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007454:	2302      	movs	r3, #2
 8007456:	e06d      	b.n	8007534 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2202      	movs	r2, #2
 8007464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a30      	ldr	r2, [pc, #192]	; (8007540 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d004      	beq.n	800748c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a2f      	ldr	r2, [pc, #188]	; (8007544 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d108      	bne.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007492:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	4313      	orrs	r3, r2
 800749c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a20      	ldr	r2, [pc, #128]	; (8007540 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d022      	beq.n	8007508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ca:	d01d      	beq.n	8007508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a1d      	ldr	r2, [pc, #116]	; (8007548 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d018      	beq.n	8007508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a1c      	ldr	r2, [pc, #112]	; (800754c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d013      	beq.n	8007508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a1a      	ldr	r2, [pc, #104]	; (8007550 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d00e      	beq.n	8007508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a15      	ldr	r2, [pc, #84]	; (8007544 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d009      	beq.n	8007508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a16      	ldr	r2, [pc, #88]	; (8007554 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d004      	beq.n	8007508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a15      	ldr	r2, [pc, #84]	; (8007558 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d10c      	bne.n	8007522 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800750e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	68ba      	ldr	r2, [r7, #8]
 8007516:	4313      	orrs	r3, r2
 8007518:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr
 8007540:	40010000 	.word	0x40010000
 8007544:	40010400 	.word	0x40010400
 8007548:	40000400 	.word	0x40000400
 800754c:	40000800 	.word	0x40000800
 8007550:	40000c00 	.word	0x40000c00
 8007554:	40014000 	.word	0x40014000
 8007558:	40001800 	.word	0x40001800

0800755c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007570:	2b01      	cmp	r3, #1
 8007572:	d101      	bne.n	8007578 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007574:	2302      	movs	r3, #2
 8007576:	e065      	b.n	8007644 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	4313      	orrs	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	4313      	orrs	r3, r2
 800759a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075de:	4313      	orrs	r3, r2
 80075e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	041b      	lsls	r3, r3, #16
 80075ee:	4313      	orrs	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a16      	ldr	r2, [pc, #88]	; (8007650 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d004      	beq.n	8007606 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a14      	ldr	r2, [pc, #80]	; (8007654 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d115      	bne.n	8007632 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007610:	051b      	lsls	r3, r3, #20
 8007612:	4313      	orrs	r3, r2
 8007614:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	69db      	ldr	r3, [r3, #28]
 8007620:	4313      	orrs	r3, r2
 8007622:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	4313      	orrs	r3, r2
 8007630:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr
 8007650:	40010000 	.word	0x40010000
 8007654:	40010400 	.word	0x40010400

08007658 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e040      	b.n	8007728 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d106      	bne.n	80076bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7fa fe18 	bl	80022ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2224      	movs	r2, #36	; 0x24
 80076c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 0201 	bic.w	r2, r2, #1
 80076d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f82c 	bl	8007730 <UART_SetConfig>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d101      	bne.n	80076e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e022      	b.n	8007728 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d002      	beq.n	80076f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fa84 	bl	8007bf8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689a      	ldr	r2, [r3, #8]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800770e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 0201 	orr.w	r2, r2, #1
 800771e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fb0b 	bl	8007d3c <UART_CheckIdleState>
 8007726:	4603      	mov	r3, r0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b088      	sub	sp, #32
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	689a      	ldr	r2, [r3, #8]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	431a      	orrs	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	431a      	orrs	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	69db      	ldr	r3, [r3, #28]
 8007750:	4313      	orrs	r3, r2
 8007752:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	4ba6      	ldr	r3, [pc, #664]	; (80079f4 <UART_SetConfig+0x2c4>)
 800775c:	4013      	ands	r3, r2
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	6812      	ldr	r2, [r2, #0]
 8007762:	6979      	ldr	r1, [r7, #20]
 8007764:	430b      	orrs	r3, r1
 8007766:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68da      	ldr	r2, [r3, #12]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	430a      	orrs	r2, r1
 800777c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a1b      	ldr	r3, [r3, #32]
 8007788:	697a      	ldr	r2, [r7, #20]
 800778a:	4313      	orrs	r3, r2
 800778c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	430a      	orrs	r2, r1
 80077a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a94      	ldr	r2, [pc, #592]	; (80079f8 <UART_SetConfig+0x2c8>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d120      	bne.n	80077ee <UART_SetConfig+0xbe>
 80077ac:	4b93      	ldr	r3, [pc, #588]	; (80079fc <UART_SetConfig+0x2cc>)
 80077ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077b2:	f003 0303 	and.w	r3, r3, #3
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	d816      	bhi.n	80077e8 <UART_SetConfig+0xb8>
 80077ba:	a201      	add	r2, pc, #4	; (adr r2, 80077c0 <UART_SetConfig+0x90>)
 80077bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c0:	080077d1 	.word	0x080077d1
 80077c4:	080077dd 	.word	0x080077dd
 80077c8:	080077d7 	.word	0x080077d7
 80077cc:	080077e3 	.word	0x080077e3
 80077d0:	2301      	movs	r3, #1
 80077d2:	77fb      	strb	r3, [r7, #31]
 80077d4:	e150      	b.n	8007a78 <UART_SetConfig+0x348>
 80077d6:	2302      	movs	r3, #2
 80077d8:	77fb      	strb	r3, [r7, #31]
 80077da:	e14d      	b.n	8007a78 <UART_SetConfig+0x348>
 80077dc:	2304      	movs	r3, #4
 80077de:	77fb      	strb	r3, [r7, #31]
 80077e0:	e14a      	b.n	8007a78 <UART_SetConfig+0x348>
 80077e2:	2308      	movs	r3, #8
 80077e4:	77fb      	strb	r3, [r7, #31]
 80077e6:	e147      	b.n	8007a78 <UART_SetConfig+0x348>
 80077e8:	2310      	movs	r3, #16
 80077ea:	77fb      	strb	r3, [r7, #31]
 80077ec:	e144      	b.n	8007a78 <UART_SetConfig+0x348>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a83      	ldr	r2, [pc, #524]	; (8007a00 <UART_SetConfig+0x2d0>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d132      	bne.n	800785e <UART_SetConfig+0x12e>
 80077f8:	4b80      	ldr	r3, [pc, #512]	; (80079fc <UART_SetConfig+0x2cc>)
 80077fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077fe:	f003 030c 	and.w	r3, r3, #12
 8007802:	2b0c      	cmp	r3, #12
 8007804:	d828      	bhi.n	8007858 <UART_SetConfig+0x128>
 8007806:	a201      	add	r2, pc, #4	; (adr r2, 800780c <UART_SetConfig+0xdc>)
 8007808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780c:	08007841 	.word	0x08007841
 8007810:	08007859 	.word	0x08007859
 8007814:	08007859 	.word	0x08007859
 8007818:	08007859 	.word	0x08007859
 800781c:	0800784d 	.word	0x0800784d
 8007820:	08007859 	.word	0x08007859
 8007824:	08007859 	.word	0x08007859
 8007828:	08007859 	.word	0x08007859
 800782c:	08007847 	.word	0x08007847
 8007830:	08007859 	.word	0x08007859
 8007834:	08007859 	.word	0x08007859
 8007838:	08007859 	.word	0x08007859
 800783c:	08007853 	.word	0x08007853
 8007840:	2300      	movs	r3, #0
 8007842:	77fb      	strb	r3, [r7, #31]
 8007844:	e118      	b.n	8007a78 <UART_SetConfig+0x348>
 8007846:	2302      	movs	r3, #2
 8007848:	77fb      	strb	r3, [r7, #31]
 800784a:	e115      	b.n	8007a78 <UART_SetConfig+0x348>
 800784c:	2304      	movs	r3, #4
 800784e:	77fb      	strb	r3, [r7, #31]
 8007850:	e112      	b.n	8007a78 <UART_SetConfig+0x348>
 8007852:	2308      	movs	r3, #8
 8007854:	77fb      	strb	r3, [r7, #31]
 8007856:	e10f      	b.n	8007a78 <UART_SetConfig+0x348>
 8007858:	2310      	movs	r3, #16
 800785a:	77fb      	strb	r3, [r7, #31]
 800785c:	e10c      	b.n	8007a78 <UART_SetConfig+0x348>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a68      	ldr	r2, [pc, #416]	; (8007a04 <UART_SetConfig+0x2d4>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d120      	bne.n	80078aa <UART_SetConfig+0x17a>
 8007868:	4b64      	ldr	r3, [pc, #400]	; (80079fc <UART_SetConfig+0x2cc>)
 800786a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800786e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007872:	2b30      	cmp	r3, #48	; 0x30
 8007874:	d013      	beq.n	800789e <UART_SetConfig+0x16e>
 8007876:	2b30      	cmp	r3, #48	; 0x30
 8007878:	d814      	bhi.n	80078a4 <UART_SetConfig+0x174>
 800787a:	2b20      	cmp	r3, #32
 800787c:	d009      	beq.n	8007892 <UART_SetConfig+0x162>
 800787e:	2b20      	cmp	r3, #32
 8007880:	d810      	bhi.n	80078a4 <UART_SetConfig+0x174>
 8007882:	2b00      	cmp	r3, #0
 8007884:	d002      	beq.n	800788c <UART_SetConfig+0x15c>
 8007886:	2b10      	cmp	r3, #16
 8007888:	d006      	beq.n	8007898 <UART_SetConfig+0x168>
 800788a:	e00b      	b.n	80078a4 <UART_SetConfig+0x174>
 800788c:	2300      	movs	r3, #0
 800788e:	77fb      	strb	r3, [r7, #31]
 8007890:	e0f2      	b.n	8007a78 <UART_SetConfig+0x348>
 8007892:	2302      	movs	r3, #2
 8007894:	77fb      	strb	r3, [r7, #31]
 8007896:	e0ef      	b.n	8007a78 <UART_SetConfig+0x348>
 8007898:	2304      	movs	r3, #4
 800789a:	77fb      	strb	r3, [r7, #31]
 800789c:	e0ec      	b.n	8007a78 <UART_SetConfig+0x348>
 800789e:	2308      	movs	r3, #8
 80078a0:	77fb      	strb	r3, [r7, #31]
 80078a2:	e0e9      	b.n	8007a78 <UART_SetConfig+0x348>
 80078a4:	2310      	movs	r3, #16
 80078a6:	77fb      	strb	r3, [r7, #31]
 80078a8:	e0e6      	b.n	8007a78 <UART_SetConfig+0x348>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a56      	ldr	r2, [pc, #344]	; (8007a08 <UART_SetConfig+0x2d8>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d120      	bne.n	80078f6 <UART_SetConfig+0x1c6>
 80078b4:	4b51      	ldr	r3, [pc, #324]	; (80079fc <UART_SetConfig+0x2cc>)
 80078b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80078be:	2bc0      	cmp	r3, #192	; 0xc0
 80078c0:	d013      	beq.n	80078ea <UART_SetConfig+0x1ba>
 80078c2:	2bc0      	cmp	r3, #192	; 0xc0
 80078c4:	d814      	bhi.n	80078f0 <UART_SetConfig+0x1c0>
 80078c6:	2b80      	cmp	r3, #128	; 0x80
 80078c8:	d009      	beq.n	80078de <UART_SetConfig+0x1ae>
 80078ca:	2b80      	cmp	r3, #128	; 0x80
 80078cc:	d810      	bhi.n	80078f0 <UART_SetConfig+0x1c0>
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d002      	beq.n	80078d8 <UART_SetConfig+0x1a8>
 80078d2:	2b40      	cmp	r3, #64	; 0x40
 80078d4:	d006      	beq.n	80078e4 <UART_SetConfig+0x1b4>
 80078d6:	e00b      	b.n	80078f0 <UART_SetConfig+0x1c0>
 80078d8:	2300      	movs	r3, #0
 80078da:	77fb      	strb	r3, [r7, #31]
 80078dc:	e0cc      	b.n	8007a78 <UART_SetConfig+0x348>
 80078de:	2302      	movs	r3, #2
 80078e0:	77fb      	strb	r3, [r7, #31]
 80078e2:	e0c9      	b.n	8007a78 <UART_SetConfig+0x348>
 80078e4:	2304      	movs	r3, #4
 80078e6:	77fb      	strb	r3, [r7, #31]
 80078e8:	e0c6      	b.n	8007a78 <UART_SetConfig+0x348>
 80078ea:	2308      	movs	r3, #8
 80078ec:	77fb      	strb	r3, [r7, #31]
 80078ee:	e0c3      	b.n	8007a78 <UART_SetConfig+0x348>
 80078f0:	2310      	movs	r3, #16
 80078f2:	77fb      	strb	r3, [r7, #31]
 80078f4:	e0c0      	b.n	8007a78 <UART_SetConfig+0x348>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a44      	ldr	r2, [pc, #272]	; (8007a0c <UART_SetConfig+0x2dc>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d125      	bne.n	800794c <UART_SetConfig+0x21c>
 8007900:	4b3e      	ldr	r3, [pc, #248]	; (80079fc <UART_SetConfig+0x2cc>)
 8007902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800790a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800790e:	d017      	beq.n	8007940 <UART_SetConfig+0x210>
 8007910:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007914:	d817      	bhi.n	8007946 <UART_SetConfig+0x216>
 8007916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800791a:	d00b      	beq.n	8007934 <UART_SetConfig+0x204>
 800791c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007920:	d811      	bhi.n	8007946 <UART_SetConfig+0x216>
 8007922:	2b00      	cmp	r3, #0
 8007924:	d003      	beq.n	800792e <UART_SetConfig+0x1fe>
 8007926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800792a:	d006      	beq.n	800793a <UART_SetConfig+0x20a>
 800792c:	e00b      	b.n	8007946 <UART_SetConfig+0x216>
 800792e:	2300      	movs	r3, #0
 8007930:	77fb      	strb	r3, [r7, #31]
 8007932:	e0a1      	b.n	8007a78 <UART_SetConfig+0x348>
 8007934:	2302      	movs	r3, #2
 8007936:	77fb      	strb	r3, [r7, #31]
 8007938:	e09e      	b.n	8007a78 <UART_SetConfig+0x348>
 800793a:	2304      	movs	r3, #4
 800793c:	77fb      	strb	r3, [r7, #31]
 800793e:	e09b      	b.n	8007a78 <UART_SetConfig+0x348>
 8007940:	2308      	movs	r3, #8
 8007942:	77fb      	strb	r3, [r7, #31]
 8007944:	e098      	b.n	8007a78 <UART_SetConfig+0x348>
 8007946:	2310      	movs	r3, #16
 8007948:	77fb      	strb	r3, [r7, #31]
 800794a:	e095      	b.n	8007a78 <UART_SetConfig+0x348>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a2f      	ldr	r2, [pc, #188]	; (8007a10 <UART_SetConfig+0x2e0>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d125      	bne.n	80079a2 <UART_SetConfig+0x272>
 8007956:	4b29      	ldr	r3, [pc, #164]	; (80079fc <UART_SetConfig+0x2cc>)
 8007958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800795c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007960:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007964:	d017      	beq.n	8007996 <UART_SetConfig+0x266>
 8007966:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800796a:	d817      	bhi.n	800799c <UART_SetConfig+0x26c>
 800796c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007970:	d00b      	beq.n	800798a <UART_SetConfig+0x25a>
 8007972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007976:	d811      	bhi.n	800799c <UART_SetConfig+0x26c>
 8007978:	2b00      	cmp	r3, #0
 800797a:	d003      	beq.n	8007984 <UART_SetConfig+0x254>
 800797c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007980:	d006      	beq.n	8007990 <UART_SetConfig+0x260>
 8007982:	e00b      	b.n	800799c <UART_SetConfig+0x26c>
 8007984:	2301      	movs	r3, #1
 8007986:	77fb      	strb	r3, [r7, #31]
 8007988:	e076      	b.n	8007a78 <UART_SetConfig+0x348>
 800798a:	2302      	movs	r3, #2
 800798c:	77fb      	strb	r3, [r7, #31]
 800798e:	e073      	b.n	8007a78 <UART_SetConfig+0x348>
 8007990:	2304      	movs	r3, #4
 8007992:	77fb      	strb	r3, [r7, #31]
 8007994:	e070      	b.n	8007a78 <UART_SetConfig+0x348>
 8007996:	2308      	movs	r3, #8
 8007998:	77fb      	strb	r3, [r7, #31]
 800799a:	e06d      	b.n	8007a78 <UART_SetConfig+0x348>
 800799c:	2310      	movs	r3, #16
 800799e:	77fb      	strb	r3, [r7, #31]
 80079a0:	e06a      	b.n	8007a78 <UART_SetConfig+0x348>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a1b      	ldr	r2, [pc, #108]	; (8007a14 <UART_SetConfig+0x2e4>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d138      	bne.n	8007a1e <UART_SetConfig+0x2ee>
 80079ac:	4b13      	ldr	r3, [pc, #76]	; (80079fc <UART_SetConfig+0x2cc>)
 80079ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079b2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80079b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80079ba:	d017      	beq.n	80079ec <UART_SetConfig+0x2bc>
 80079bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80079c0:	d82a      	bhi.n	8007a18 <UART_SetConfig+0x2e8>
 80079c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079c6:	d00b      	beq.n	80079e0 <UART_SetConfig+0x2b0>
 80079c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079cc:	d824      	bhi.n	8007a18 <UART_SetConfig+0x2e8>
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <UART_SetConfig+0x2aa>
 80079d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d6:	d006      	beq.n	80079e6 <UART_SetConfig+0x2b6>
 80079d8:	e01e      	b.n	8007a18 <UART_SetConfig+0x2e8>
 80079da:	2300      	movs	r3, #0
 80079dc:	77fb      	strb	r3, [r7, #31]
 80079de:	e04b      	b.n	8007a78 <UART_SetConfig+0x348>
 80079e0:	2302      	movs	r3, #2
 80079e2:	77fb      	strb	r3, [r7, #31]
 80079e4:	e048      	b.n	8007a78 <UART_SetConfig+0x348>
 80079e6:	2304      	movs	r3, #4
 80079e8:	77fb      	strb	r3, [r7, #31]
 80079ea:	e045      	b.n	8007a78 <UART_SetConfig+0x348>
 80079ec:	2308      	movs	r3, #8
 80079ee:	77fb      	strb	r3, [r7, #31]
 80079f0:	e042      	b.n	8007a78 <UART_SetConfig+0x348>
 80079f2:	bf00      	nop
 80079f4:	efff69f3 	.word	0xefff69f3
 80079f8:	40011000 	.word	0x40011000
 80079fc:	40023800 	.word	0x40023800
 8007a00:	40004400 	.word	0x40004400
 8007a04:	40004800 	.word	0x40004800
 8007a08:	40004c00 	.word	0x40004c00
 8007a0c:	40005000 	.word	0x40005000
 8007a10:	40011400 	.word	0x40011400
 8007a14:	40007800 	.word	0x40007800
 8007a18:	2310      	movs	r3, #16
 8007a1a:	77fb      	strb	r3, [r7, #31]
 8007a1c:	e02c      	b.n	8007a78 <UART_SetConfig+0x348>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a72      	ldr	r2, [pc, #456]	; (8007bec <UART_SetConfig+0x4bc>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d125      	bne.n	8007a74 <UART_SetConfig+0x344>
 8007a28:	4b71      	ldr	r3, [pc, #452]	; (8007bf0 <UART_SetConfig+0x4c0>)
 8007a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007a32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007a36:	d017      	beq.n	8007a68 <UART_SetConfig+0x338>
 8007a38:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007a3c:	d817      	bhi.n	8007a6e <UART_SetConfig+0x33e>
 8007a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a42:	d00b      	beq.n	8007a5c <UART_SetConfig+0x32c>
 8007a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a48:	d811      	bhi.n	8007a6e <UART_SetConfig+0x33e>
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <UART_SetConfig+0x326>
 8007a4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a52:	d006      	beq.n	8007a62 <UART_SetConfig+0x332>
 8007a54:	e00b      	b.n	8007a6e <UART_SetConfig+0x33e>
 8007a56:	2300      	movs	r3, #0
 8007a58:	77fb      	strb	r3, [r7, #31]
 8007a5a:	e00d      	b.n	8007a78 <UART_SetConfig+0x348>
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	77fb      	strb	r3, [r7, #31]
 8007a60:	e00a      	b.n	8007a78 <UART_SetConfig+0x348>
 8007a62:	2304      	movs	r3, #4
 8007a64:	77fb      	strb	r3, [r7, #31]
 8007a66:	e007      	b.n	8007a78 <UART_SetConfig+0x348>
 8007a68:	2308      	movs	r3, #8
 8007a6a:	77fb      	strb	r3, [r7, #31]
 8007a6c:	e004      	b.n	8007a78 <UART_SetConfig+0x348>
 8007a6e:	2310      	movs	r3, #16
 8007a70:	77fb      	strb	r3, [r7, #31]
 8007a72:	e001      	b.n	8007a78 <UART_SetConfig+0x348>
 8007a74:	2310      	movs	r3, #16
 8007a76:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	69db      	ldr	r3, [r3, #28]
 8007a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a80:	d15b      	bne.n	8007b3a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007a82:	7ffb      	ldrb	r3, [r7, #31]
 8007a84:	2b08      	cmp	r3, #8
 8007a86:	d828      	bhi.n	8007ada <UART_SetConfig+0x3aa>
 8007a88:	a201      	add	r2, pc, #4	; (adr r2, 8007a90 <UART_SetConfig+0x360>)
 8007a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8e:	bf00      	nop
 8007a90:	08007ab5 	.word	0x08007ab5
 8007a94:	08007abd 	.word	0x08007abd
 8007a98:	08007ac5 	.word	0x08007ac5
 8007a9c:	08007adb 	.word	0x08007adb
 8007aa0:	08007acb 	.word	0x08007acb
 8007aa4:	08007adb 	.word	0x08007adb
 8007aa8:	08007adb 	.word	0x08007adb
 8007aac:	08007adb 	.word	0x08007adb
 8007ab0:	08007ad3 	.word	0x08007ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ab4:	f7fd f88a 	bl	8004bcc <HAL_RCC_GetPCLK1Freq>
 8007ab8:	61b8      	str	r0, [r7, #24]
        break;
 8007aba:	e013      	b.n	8007ae4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007abc:	f7fd f89a 	bl	8004bf4 <HAL_RCC_GetPCLK2Freq>
 8007ac0:	61b8      	str	r0, [r7, #24]
        break;
 8007ac2:	e00f      	b.n	8007ae4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ac4:	4b4b      	ldr	r3, [pc, #300]	; (8007bf4 <UART_SetConfig+0x4c4>)
 8007ac6:	61bb      	str	r3, [r7, #24]
        break;
 8007ac8:	e00c      	b.n	8007ae4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007aca:	f7fc ffad 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
 8007ace:	61b8      	str	r0, [r7, #24]
        break;
 8007ad0:	e008      	b.n	8007ae4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ad6:	61bb      	str	r3, [r7, #24]
        break;
 8007ad8:	e004      	b.n	8007ae4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	77bb      	strb	r3, [r7, #30]
        break;
 8007ae2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d074      	beq.n	8007bd4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	005a      	lsls	r2, r3, #1
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	085b      	lsrs	r3, r3, #1
 8007af4:	441a      	add	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007afe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	2b0f      	cmp	r3, #15
 8007b04:	d916      	bls.n	8007b34 <UART_SetConfig+0x404>
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b0c:	d212      	bcs.n	8007b34 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	f023 030f 	bic.w	r3, r3, #15
 8007b16:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	085b      	lsrs	r3, r3, #1
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	f003 0307 	and.w	r3, r3, #7
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	89fb      	ldrh	r3, [r7, #14]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	89fa      	ldrh	r2, [r7, #14]
 8007b30:	60da      	str	r2, [r3, #12]
 8007b32:	e04f      	b.n	8007bd4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	77bb      	strb	r3, [r7, #30]
 8007b38:	e04c      	b.n	8007bd4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b3a:	7ffb      	ldrb	r3, [r7, #31]
 8007b3c:	2b08      	cmp	r3, #8
 8007b3e:	d828      	bhi.n	8007b92 <UART_SetConfig+0x462>
 8007b40:	a201      	add	r2, pc, #4	; (adr r2, 8007b48 <UART_SetConfig+0x418>)
 8007b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b46:	bf00      	nop
 8007b48:	08007b6d 	.word	0x08007b6d
 8007b4c:	08007b75 	.word	0x08007b75
 8007b50:	08007b7d 	.word	0x08007b7d
 8007b54:	08007b93 	.word	0x08007b93
 8007b58:	08007b83 	.word	0x08007b83
 8007b5c:	08007b93 	.word	0x08007b93
 8007b60:	08007b93 	.word	0x08007b93
 8007b64:	08007b93 	.word	0x08007b93
 8007b68:	08007b8b 	.word	0x08007b8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b6c:	f7fd f82e 	bl	8004bcc <HAL_RCC_GetPCLK1Freq>
 8007b70:	61b8      	str	r0, [r7, #24]
        break;
 8007b72:	e013      	b.n	8007b9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b74:	f7fd f83e 	bl	8004bf4 <HAL_RCC_GetPCLK2Freq>
 8007b78:	61b8      	str	r0, [r7, #24]
        break;
 8007b7a:	e00f      	b.n	8007b9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b7c:	4b1d      	ldr	r3, [pc, #116]	; (8007bf4 <UART_SetConfig+0x4c4>)
 8007b7e:	61bb      	str	r3, [r7, #24]
        break;
 8007b80:	e00c      	b.n	8007b9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b82:	f7fc ff51 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
 8007b86:	61b8      	str	r0, [r7, #24]
        break;
 8007b88:	e008      	b.n	8007b9c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b8e:	61bb      	str	r3, [r7, #24]
        break;
 8007b90:	e004      	b.n	8007b9c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007b92:	2300      	movs	r3, #0
 8007b94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	77bb      	strb	r3, [r7, #30]
        break;
 8007b9a:	bf00      	nop
    }

    if (pclk != 0U)
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d018      	beq.n	8007bd4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	085a      	lsrs	r2, r3, #1
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	441a      	add	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	2b0f      	cmp	r3, #15
 8007bba:	d909      	bls.n	8007bd0 <UART_SetConfig+0x4a0>
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bc2:	d205      	bcs.n	8007bd0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	60da      	str	r2, [r3, #12]
 8007bce:	e001      	b.n	8007bd4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007be0:	7fbb      	ldrb	r3, [r7, #30]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3720      	adds	r7, #32
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	40007c00 	.word	0x40007c00
 8007bf0:	40023800 	.word	0x40023800
 8007bf4:	00f42400 	.word	0x00f42400

08007bf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c04:	f003 0301 	and.w	r3, r3, #1
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00a      	beq.n	8007c22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00a      	beq.n	8007c44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	430a      	orrs	r2, r1
 8007c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c48:	f003 0304 	and.w	r3, r3, #4
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00a      	beq.n	8007c66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	430a      	orrs	r2, r1
 8007c64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6a:	f003 0308 	and.w	r3, r3, #8
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00a      	beq.n	8007c88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	430a      	orrs	r2, r1
 8007c86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8c:	f003 0310 	and.w	r3, r3, #16
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00a      	beq.n	8007caa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cae:	f003 0320 	and.w	r3, r3, #32
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00a      	beq.n	8007ccc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d01a      	beq.n	8007d0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	430a      	orrs	r2, r1
 8007cec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cf6:	d10a      	bne.n	8007d0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00a      	beq.n	8007d30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	605a      	str	r2, [r3, #4]
  }
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af02      	add	r7, sp, #8
 8007d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d4c:	f7fa fd52 	bl	80027f4 <HAL_GetTick>
 8007d50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 0308 	and.w	r3, r3, #8
 8007d5c:	2b08      	cmp	r3, #8
 8007d5e:	d10e      	bne.n	8007d7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f817 	bl	8007da2 <UART_WaitOnFlagUntilTimeout>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e00d      	b.n	8007d9a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2220      	movs	r2, #32
 8007d82:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2220      	movs	r2, #32
 8007d88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b09c      	sub	sp, #112	; 0x70
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	603b      	str	r3, [r7, #0]
 8007dae:	4613      	mov	r3, r2
 8007db0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007db2:	e0a5      	b.n	8007f00 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dba:	f000 80a1 	beq.w	8007f00 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dbe:	f7fa fd19 	bl	80027f4 <HAL_GetTick>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d302      	bcc.n	8007dd4 <UART_WaitOnFlagUntilTimeout+0x32>
 8007dce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d13e      	bne.n	8007e52 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ddc:	e853 3f00 	ldrex	r3, [r3]
 8007de0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007de4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007de8:	667b      	str	r3, [r7, #100]	; 0x64
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	461a      	mov	r2, r3
 8007df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007df2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007df4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007df8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007dfa:	e841 2300 	strex	r3, r2, [r1]
 8007dfe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1e6      	bne.n	8007dd4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3308      	adds	r3, #8
 8007e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e10:	e853 3f00 	ldrex	r3, [r3]
 8007e14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e18:	f023 0301 	bic.w	r3, r3, #1
 8007e1c:	663b      	str	r3, [r7, #96]	; 0x60
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3308      	adds	r3, #8
 8007e24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e26:	64ba      	str	r2, [r7, #72]	; 0x48
 8007e28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e2e:	e841 2300 	strex	r3, r2, [r1]
 8007e32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1e5      	bne.n	8007e06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2220      	movs	r2, #32
 8007e3e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2220      	movs	r2, #32
 8007e44:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e067      	b.n	8007f22 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0304 	and.w	r3, r3, #4
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d04f      	beq.n	8007f00 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e6e:	d147      	bne.n	8007f00 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e78:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e82:	e853 3f00 	ldrex	r3, [r3]
 8007e86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	461a      	mov	r2, r3
 8007e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e98:	637b      	str	r3, [r7, #52]	; 0x34
 8007e9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ea0:	e841 2300 	strex	r3, r2, [r1]
 8007ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1e6      	bne.n	8007e7a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	e853 3f00 	ldrex	r3, [r3]
 8007eba:	613b      	str	r3, [r7, #16]
   return(result);
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	f023 0301 	bic.w	r3, r3, #1
 8007ec2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	3308      	adds	r3, #8
 8007eca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ecc:	623a      	str	r2, [r7, #32]
 8007ece:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed0:	69f9      	ldr	r1, [r7, #28]
 8007ed2:	6a3a      	ldr	r2, [r7, #32]
 8007ed4:	e841 2300 	strex	r3, r2, [r1]
 8007ed8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1e5      	bne.n	8007eac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2220      	movs	r2, #32
 8007ee4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2220      	movs	r2, #32
 8007eea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2220      	movs	r2, #32
 8007ef0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e010      	b.n	8007f22 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	69da      	ldr	r2, [r3, #28]
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	4013      	ands	r3, r2
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	bf0c      	ite	eq
 8007f10:	2301      	moveq	r3, #1
 8007f12:	2300      	movne	r3, #0
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	461a      	mov	r2, r3
 8007f18:	79fb      	ldrb	r3, [r7, #7]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	f43f af4a 	beq.w	8007db4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3770      	adds	r7, #112	; 0x70
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d121      	bne.n	8007f82 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	4b27      	ldr	r3, [pc, #156]	; (8007fe0 <FMC_SDRAM_Init+0xb4>)
 8007f44:	4013      	ands	r3, r2
 8007f46:	683a      	ldr	r2, [r7, #0]
 8007f48:	6851      	ldr	r1, [r2, #4]
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	6892      	ldr	r2, [r2, #8]
 8007f4e:	4311      	orrs	r1, r2
 8007f50:	683a      	ldr	r2, [r7, #0]
 8007f52:	68d2      	ldr	r2, [r2, #12]
 8007f54:	4311      	orrs	r1, r2
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	6912      	ldr	r2, [r2, #16]
 8007f5a:	4311      	orrs	r1, r2
 8007f5c:	683a      	ldr	r2, [r7, #0]
 8007f5e:	6952      	ldr	r2, [r2, #20]
 8007f60:	4311      	orrs	r1, r2
 8007f62:	683a      	ldr	r2, [r7, #0]
 8007f64:	6992      	ldr	r2, [r2, #24]
 8007f66:	4311      	orrs	r1, r2
 8007f68:	683a      	ldr	r2, [r7, #0]
 8007f6a:	69d2      	ldr	r2, [r2, #28]
 8007f6c:	4311      	orrs	r1, r2
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	6a12      	ldr	r2, [r2, #32]
 8007f72:	4311      	orrs	r1, r2
 8007f74:	683a      	ldr	r2, [r7, #0]
 8007f76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007f78:	430a      	orrs	r2, r1
 8007f7a:	431a      	orrs	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	601a      	str	r2, [r3, #0]
 8007f80:	e026      	b.n	8007fd0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	69d9      	ldr	r1, [r3, #28]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	4319      	orrs	r1, r3
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f98:	430b      	orrs	r3, r1
 8007f9a:	431a      	orrs	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	4b0e      	ldr	r3, [pc, #56]	; (8007fe0 <FMC_SDRAM_Init+0xb4>)
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	6851      	ldr	r1, [r2, #4]
 8007fac:	683a      	ldr	r2, [r7, #0]
 8007fae:	6892      	ldr	r2, [r2, #8]
 8007fb0:	4311      	orrs	r1, r2
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	68d2      	ldr	r2, [r2, #12]
 8007fb6:	4311      	orrs	r1, r2
 8007fb8:	683a      	ldr	r2, [r7, #0]
 8007fba:	6912      	ldr	r2, [r2, #16]
 8007fbc:	4311      	orrs	r1, r2
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	6952      	ldr	r2, [r2, #20]
 8007fc2:	4311      	orrs	r1, r2
 8007fc4:	683a      	ldr	r2, [r7, #0]
 8007fc6:	6992      	ldr	r2, [r2, #24]
 8007fc8:	430a      	orrs	r2, r1
 8007fca:	431a      	orrs	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	ffff8000 	.word	0xffff8000

08007fe4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d128      	bne.n	8008048 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	1e59      	subs	r1, r3, #1
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	3b01      	subs	r3, #1
 800800a:	011b      	lsls	r3, r3, #4
 800800c:	4319      	orrs	r1, r3
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	3b01      	subs	r3, #1
 8008014:	021b      	lsls	r3, r3, #8
 8008016:	4319      	orrs	r1, r3
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	3b01      	subs	r3, #1
 800801e:	031b      	lsls	r3, r3, #12
 8008020:	4319      	orrs	r1, r3
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	3b01      	subs	r3, #1
 8008028:	041b      	lsls	r3, r3, #16
 800802a:	4319      	orrs	r1, r3
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	695b      	ldr	r3, [r3, #20]
 8008030:	3b01      	subs	r3, #1
 8008032:	051b      	lsls	r3, r3, #20
 8008034:	4319      	orrs	r1, r3
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	3b01      	subs	r3, #1
 800803c:	061b      	lsls	r3, r3, #24
 800803e:	430b      	orrs	r3, r1
 8008040:	431a      	orrs	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	609a      	str	r2, [r3, #8]
 8008046:	e02d      	b.n	80080a4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	689a      	ldr	r2, [r3, #8]
 800804c:	4b19      	ldr	r3, [pc, #100]	; (80080b4 <FMC_SDRAM_Timing_Init+0xd0>)
 800804e:	4013      	ands	r3, r2
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	68d2      	ldr	r2, [r2, #12]
 8008054:	3a01      	subs	r2, #1
 8008056:	0311      	lsls	r1, r2, #12
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	6952      	ldr	r2, [r2, #20]
 800805c:	3a01      	subs	r2, #1
 800805e:	0512      	lsls	r2, r2, #20
 8008060:	430a      	orrs	r2, r1
 8008062:	431a      	orrs	r2, r3
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	1e59      	subs	r1, r3, #1
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	3b01      	subs	r3, #1
 800807c:	011b      	lsls	r3, r3, #4
 800807e:	4319      	orrs	r1, r3
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	3b01      	subs	r3, #1
 8008086:	021b      	lsls	r3, r3, #8
 8008088:	4319      	orrs	r1, r3
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	3b01      	subs	r3, #1
 8008090:	041b      	lsls	r3, r3, #16
 8008092:	4319      	orrs	r1, r3
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	3b01      	subs	r3, #1
 800809a:	061b      	lsls	r3, r3, #24
 800809c:	430b      	orrs	r3, r1
 800809e:	431a      	orrs	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3714      	adds	r7, #20
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	ff0f0fff 	.word	0xff0f0fff

080080b8 <__libc_init_array>:
 80080b8:	b570      	push	{r4, r5, r6, lr}
 80080ba:	4d0d      	ldr	r5, [pc, #52]	; (80080f0 <__libc_init_array+0x38>)
 80080bc:	4c0d      	ldr	r4, [pc, #52]	; (80080f4 <__libc_init_array+0x3c>)
 80080be:	1b64      	subs	r4, r4, r5
 80080c0:	10a4      	asrs	r4, r4, #2
 80080c2:	2600      	movs	r6, #0
 80080c4:	42a6      	cmp	r6, r4
 80080c6:	d109      	bne.n	80080dc <__libc_init_array+0x24>
 80080c8:	4d0b      	ldr	r5, [pc, #44]	; (80080f8 <__libc_init_array+0x40>)
 80080ca:	4c0c      	ldr	r4, [pc, #48]	; (80080fc <__libc_init_array+0x44>)
 80080cc:	f000 f820 	bl	8008110 <_init>
 80080d0:	1b64      	subs	r4, r4, r5
 80080d2:	10a4      	asrs	r4, r4, #2
 80080d4:	2600      	movs	r6, #0
 80080d6:	42a6      	cmp	r6, r4
 80080d8:	d105      	bne.n	80080e6 <__libc_init_array+0x2e>
 80080da:	bd70      	pop	{r4, r5, r6, pc}
 80080dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80080e0:	4798      	blx	r3
 80080e2:	3601      	adds	r6, #1
 80080e4:	e7ee      	b.n	80080c4 <__libc_init_array+0xc>
 80080e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ea:	4798      	blx	r3
 80080ec:	3601      	adds	r6, #1
 80080ee:	e7f2      	b.n	80080d6 <__libc_init_array+0x1e>
 80080f0:	08008148 	.word	0x08008148
 80080f4:	08008148 	.word	0x08008148
 80080f8:	08008148 	.word	0x08008148
 80080fc:	0800814c 	.word	0x0800814c

08008100 <memset>:
 8008100:	4402      	add	r2, r0
 8008102:	4603      	mov	r3, r0
 8008104:	4293      	cmp	r3, r2
 8008106:	d100      	bne.n	800810a <memset+0xa>
 8008108:	4770      	bx	lr
 800810a:	f803 1b01 	strb.w	r1, [r3], #1
 800810e:	e7f9      	b.n	8008104 <memset+0x4>

08008110 <_init>:
 8008110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008112:	bf00      	nop
 8008114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008116:	bc08      	pop	{r3}
 8008118:	469e      	mov	lr, r3
 800811a:	4770      	bx	lr

0800811c <_fini>:
 800811c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811e:	bf00      	nop
 8008120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008122:	bc08      	pop	{r3}
 8008124:	469e      	mov	lr, r3
 8008126:	4770      	bx	lr
