
realtimeOscilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad08  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800aed8  0800aed8  0001aed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b358  0800b358  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800b358  0800b358  0001b358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b360  0800b360  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b360  0800b360  0001b360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800b368  0800b368  0001b368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e0  20000078  0800b3e8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  20000858  0800b3e8  00020858  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004d642  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009132  00000000  00000000  0006d6ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002770  00000000  00000000  00076820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002510  00000000  00000000  00078f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000359ec  00000000  00000000  0007b4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037b0c  00000000  00000000  000b0e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124e50  00000000  00000000  000e8998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020d7e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b468  00000000  00000000  0020d838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aec0 	.word	0x0800aec0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800aec0 	.word	0x0800aec0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <_ZN17ButtonsController11getInstanceEv>:
                      interface::ButtonsControllerCallbackProvider::CallbackMethod> CallbackProvider;

    ButtonsController();
    virtual ~ButtonsController();

    static ButtonsController & getInstance() { assert(_pInstance); return *_pInstance; }    ///< Access to single instance
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <_ZN17ButtonsController11getInstanceEv+0x20>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d105      	bne.n	80005cc <_ZN17ButtonsController11getInstanceEv+0x18>
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <_ZN17ButtonsController11getInstanceEv+0x24>)
 80005c2:	4a06      	ldr	r2, [pc, #24]	; (80005dc <_ZN17ButtonsController11getInstanceEv+0x28>)
 80005c4:	211e      	movs	r1, #30
 80005c6:	4806      	ldr	r0, [pc, #24]	; (80005e0 <_ZN17ButtonsController11getInstanceEv+0x2c>)
 80005c8:	f009 fbe6 	bl	8009d98 <__assert_func>
 80005cc:	4b01      	ldr	r3, [pc, #4]	; (80005d4 <_ZN17ButtonsController11getInstanceEv+0x20>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4618      	mov	r0, r3
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200006ec 	.word	0x200006ec
 80005d8:	0800aed8 	.word	0x0800aed8
 80005dc:	0800aee4 	.word	0x0800aee4
 80005e0:	0800af20 	.word	0x0800af20

080005e4 <HAL_ADC_ConvCpltCallback>:
#include "stm32f7xx_hal.h"
#include "main.h"
#include "board/buttonscontroller.h"

extern "C" void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	volatile uint32_t value = HAL_ADC_GetValue(hadc);
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f002 fb9b 	bl	8002d28 <HAL_ADC_GetValue>
 80005f2:	4603      	mov	r3, r0
 80005f4:	60fb      	str	r3, [r7, #12]
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <HAL_GPIO_EXTI_Callback>:
extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b082      	sub	sp, #8
 8000602:	af00      	add	r7, sp, #0
 8000604:	4603      	mov	r3, r0
 8000606:	80fb      	strh	r3, [r7, #6]
      switch (GPIO_Pin)
 8000608:	88fb      	ldrh	r3, [r7, #6]
 800060a:	2b80      	cmp	r3, #128	; 0x80
 800060c:	d009      	beq.n	8000622 <HAL_GPIO_EXTI_Callback+0x24>
 800060e:	2b80      	cmp	r3, #128	; 0x80
 8000610:	dc10      	bgt.n	8000634 <HAL_GPIO_EXTI_Callback+0x36>
 8000612:	2b40      	cmp	r3, #64	; 0x40
 8000614:	d005      	beq.n	8000622 <HAL_GPIO_EXTI_Callback+0x24>
 8000616:	2b40      	cmp	r3, #64	; 0x40
 8000618:	dc0c      	bgt.n	8000634 <HAL_GPIO_EXTI_Callback+0x36>
 800061a:	2b04      	cmp	r3, #4
 800061c:	d001      	beq.n	8000622 <HAL_GPIO_EXTI_Callback+0x24>
 800061e:	2b08      	cmp	r3, #8
 8000620:	d108      	bne.n	8000634 <HAL_GPIO_EXTI_Callback+0x36>
      {
        case BUTTON0_Pin:
        case BUTTON1_Pin:
        case BUTTON2_Pin:
        case BUTTON3_Pin:
            ButtonsController::getInstance().onIrq();
 8000622:	f7ff ffc7 	bl	80005b4 <_ZN17ButtonsController11getInstanceEv>
 8000626:	4603      	mov	r3, r0
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	3208      	adds	r2, #8
 800062c:	6812      	ldr	r2, [r2, #0]
 800062e:	4618      	mov	r0, r3
 8000630:	4790      	blx	r2
            break;
 8000632:	e000      	b.n	8000636 <HAL_GPIO_EXTI_Callback+0x38>
        default:
            break;
 8000634:	bf00      	nop
      }
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f002 f917 	bl	8002876 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f834 	bl	80006b4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800064c:	f000 f8a4 	bl	8000798 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000650:	f000 fe5e 	bl	8001310 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000654:	f000 f8ca 	bl	80007ec <MX_ADC3_Init>
  MX_CRC_Init();
 8000658:	f000 f91a 	bl	8000890 <MX_CRC_Init>
  MX_DCMI_Init();
 800065c:	f000 f93a 	bl	80008d4 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000660:	f000 f96c 	bl	800093c <MX_DMA2D_Init>
  MX_FMC_Init();
 8000664:	f000 fe04 	bl	8001270 <MX_FMC_Init>
  MX_I2C3_Init();
 8000668:	f000 f99a 	bl	80009a0 <MX_I2C3_Init>
  MX_LTDC_Init();
 800066c:	f000 f9d8 	bl	8000a20 <MX_LTDC_Init>
  MX_RTC_Init();
 8000670:	f000 fa58 	bl	8000b24 <MX_RTC_Init>
  MX_SAI2_Init();
 8000674:	f000 fafc 	bl	8000c70 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 8000678:	f000 fba2 	bl	8000dc0 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 800067c:	f000 fbd0 	bl	8000e20 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000680:	f000 fc0c 	bl	8000e9c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000684:	f000 fc5c 	bl	8000f40 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000688:	f000 fca8 	bl	8000fdc <MX_TIM3_Init>
  MX_TIM5_Init();
 800068c:	f000 fcf4 	bl	8001078 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000690:	f000 fd6a 	bl	8001168 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000694:	f000 fdbc 	bl	8001210 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, htim1.Channel);
 8000698:	4b04      	ldr	r3, [pc, #16]	; (80006ac <main+0x6c>)
 800069a:	7f1b      	ldrb	r3, [r3, #28]
 800069c:	4619      	mov	r1, r3
 800069e:	4803      	ldr	r0, [pc, #12]	; (80006ac <main+0x6c>)
 80006a0:	f006 fa48 	bl	8006b34 <HAL_TIM_OC_Start_IT>
  HAL_ADC_Start_IT(&hadc3);
 80006a4:	4802      	ldr	r0, [pc, #8]	; (80006b0 <main+0x70>)
 80006a6:	f002 f957 	bl	8002958 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <main+0x6a>
 80006ac:	2000045c 	.word	0x2000045c
 80006b0:	20000094 	.word	0x20000094

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	; 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f009 fbd8 	bl	8009e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006d8:	f004 f844 	bl	8004764 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	4b2c      	ldr	r3, [pc, #176]	; (8000790 <SystemClock_Config+0xdc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a2b      	ldr	r2, [pc, #172]	; (8000790 <SystemClock_Config+0xdc>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b29      	ldr	r3, [pc, #164]	; (8000790 <SystemClock_Config+0xdc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	4b27      	ldr	r3, [pc, #156]	; (8000794 <SystemClock_Config+0xe0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a26      	ldr	r2, [pc, #152]	; (8000794 <SystemClock_Config+0xe0>)
 80006fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b24      	ldr	r3, [pc, #144]	; (8000794 <SystemClock_Config+0xe0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800070c:	2309      	movs	r3, #9
 800070e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000710:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000716:	2301      	movs	r3, #1
 8000718:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000724:	2319      	movs	r3, #25
 8000726:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000728:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800072c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000732:	2309      	movs	r3, #9
 8000734:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	4618      	mov	r0, r3
 800073c:	f004 f872 	bl	8004824 <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000746:	f001 f8f5 	bl	8001934 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800074a:	f004 f81b 	bl	8004784 <HAL_PWREx_EnableOverDrive>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000754:	f001 f8ee 	bl	8001934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000764:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2106      	movs	r1, #6
 8000776:	4618      	mov	r0, r3
 8000778:	f004 faf8 	bl	8004d6c <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000782:	f001 f8d7 	bl	8001934 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	; 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b0a2      	sub	sp, #136	; 0x88
 800079c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2284      	movs	r2, #132	; 0x84
 80007a2:	2100      	movs	r1, #0
 80007a4:	4618      	mov	r0, r3
 80007a6:	f009 fb67 	bl	8009e78 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <PeriphCommonClock_Config+0x50>)
 80007ac:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80007ae:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007b2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80007b4:	2305      	movs	r3, #5
 80007b6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80007bc:	2303      	movs	r3, #3
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80007c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007c8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80007ca:	2300      	movs	r3, #0
 80007cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	4618      	mov	r0, r3
 80007d2:	f004 fce3 	bl	800519c <HAL_RCCEx_PeriphCLKConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 80007dc:	f001 f8aa 	bl	8001934 <Error_Handler>
  }
}
 80007e0:	bf00      	nop
 80007e2:	3788      	adds	r7, #136	; 0x88
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	00100008 	.word	0x00100008

080007ec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007f2:	463b      	mov	r3, r7
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80007fe:	4b22      	ldr	r3, [pc, #136]	; (8000888 <MX_ADC3_Init+0x9c>)
 8000800:	4a22      	ldr	r2, [pc, #136]	; (800088c <MX_ADC3_Init+0xa0>)
 8000802:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000804:	4b20      	ldr	r3, [pc, #128]	; (8000888 <MX_ADC3_Init+0x9c>)
 8000806:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800080a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800080c:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <MX_ADC3_Init+0x9c>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000812:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <MX_ADC3_Init+0x9c>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_ADC3_Init+0x9c>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_ADC3_Init+0x9c>)
 8000820:	2200      	movs	r2, #0
 8000822:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_ADC3_Init+0x9c>)
 8000828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800082c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_ADC3_Init+0x9c>)
 8000830:	2200      	movs	r2, #0
 8000832:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_ADC3_Init+0x9c>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_ADC3_Init+0x9c>)
 800083c:	2201      	movs	r2, #1
 800083e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_ADC3_Init+0x9c>)
 8000842:	2200      	movs	r2, #0
 8000844:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_ADC3_Init+0x9c>)
 800084a:	2201      	movs	r2, #1
 800084c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800084e:	480e      	ldr	r0, [pc, #56]	; (8000888 <MX_ADC3_Init+0x9c>)
 8000850:	f002 f83e 	bl	80028d0 <HAL_ADC_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_ADC3_Init+0x72>
  {
    Error_Handler();
 800085a:	f001 f86b 	bl	8001934 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000862:	2301      	movs	r3, #1
 8000864:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800086a:	463b      	mov	r3, r7
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <MX_ADC3_Init+0x9c>)
 8000870:	f002 fa7c 	bl	8002d6c <HAL_ADC_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_ADC3_Init+0x92>
  {
    Error_Handler();
 800087a:	f001 f85b 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000094 	.word	0x20000094
 800088c:	40012200 	.word	0x40012200

08000890 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000894:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <MX_CRC_Init+0x3c>)
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <MX_CRC_Init+0x40>)
 8000898:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_CRC_Init+0x3c>)
 800089c:	2200      	movs	r2, #0
 800089e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <MX_CRC_Init+0x3c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_CRC_Init+0x3c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <MX_CRC_Init+0x3c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_CRC_Init+0x3c>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008b8:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_CRC_Init+0x3c>)
 80008ba:	f002 fd93 	bl	80033e4 <HAL_CRC_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80008c4:	f001 f836 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200000dc 	.word	0x200000dc
 80008d0:	40023000 	.word	0x40023000

080008d4 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80008d8:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_DCMI_Init+0x60>)
 80008da:	4a17      	ldr	r2, [pc, #92]	; (8000938 <MX_DCMI_Init+0x64>)
 80008dc:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_DCMI_Init+0x60>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <MX_DCMI_Init+0x60>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_DCMI_Init+0x60>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80008f0:	4b10      	ldr	r3, [pc, #64]	; (8000934 <MX_DCMI_Init+0x60>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_DCMI_Init+0x60>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80008fc:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <MX_DCMI_Init+0x60>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_DCMI_Init+0x60>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <MX_DCMI_Init+0x60>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_DCMI_Init+0x60>)
 8000910:	2200      	movs	r2, #0
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <MX_DCMI_Init+0x60>)
 8000916:	2200      	movs	r2, #0
 8000918:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_DCMI_Init+0x60>)
 800091c:	2200      	movs	r2, #0
 800091e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_DCMI_Init+0x60>)
 8000922:	f002 fe49 	bl	80035b8 <HAL_DCMI_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 800092c:	f001 f802 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000100 	.word	0x20000100
 8000938:	50050000 	.word	0x50050000

0800093c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_DMA2D_Init+0x5c>)
 8000942:	4a16      	ldr	r2, [pc, #88]	; (800099c <MX_DMA2D_Init+0x60>)
 8000944:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_DMA2D_Init+0x5c>)
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_DMA2D_Init+0x5c>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_DMA2D_Init+0x5c>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_DMA2D_Init+0x5c>)
 800095a:	2200      	movs	r2, #0
 800095c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_DMA2D_Init+0x5c>)
 8000960:	2200      	movs	r2, #0
 8000962:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_DMA2D_Init+0x5c>)
 8000966:	2200      	movs	r2, #0
 8000968:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_DMA2D_Init+0x5c>)
 800096c:	2200      	movs	r2, #0
 800096e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000970:	4809      	ldr	r0, [pc, #36]	; (8000998 <MX_DMA2D_Init+0x5c>)
 8000972:	f002 fe9b 	bl	80036ac <HAL_DMA2D_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800097c:	f000 ffda 	bl	8001934 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000980:	2101      	movs	r1, #1
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_DMA2D_Init+0x5c>)
 8000984:	f002 ffec 	bl	8003960 <HAL_DMA2D_ConfigLayer>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800098e:	f000 ffd1 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000150 	.word	0x20000150
 800099c:	4002b000 	.word	0x4002b000

080009a0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <MX_I2C3_Init+0x74>)
 80009a6:	4a1c      	ldr	r2, [pc, #112]	; (8000a18 <MX_I2C3_Init+0x78>)
 80009a8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <MX_I2C3_Init+0x74>)
 80009ac:	4a1b      	ldr	r2, [pc, #108]	; (8000a1c <MX_I2C3_Init+0x7c>)
 80009ae:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80009b0:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_I2C3_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b6:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_I2C3_Init+0x74>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009bc:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_I2C3_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_I2C3_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <MX_I2C3_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_I2C3_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_I2C3_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80009da:	480e      	ldr	r0, [pc, #56]	; (8000a14 <MX_I2C3_Init+0x74>)
 80009dc:	f003 fa30 	bl	8003e40 <HAL_I2C_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80009e6:	f000 ffa5 	bl	8001934 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ea:	2100      	movs	r1, #0
 80009ec:	4809      	ldr	r0, [pc, #36]	; (8000a14 <MX_I2C3_Init+0x74>)
 80009ee:	f003 fab7 	bl	8003f60 <HAL_I2CEx_ConfigAnalogFilter>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80009f8:	f000 ff9c 	bl	8001934 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80009fc:	2100      	movs	r1, #0
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_I2C3_Init+0x74>)
 8000a00:	f003 faf9 	bl	8003ff6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000a0a:	f000 ff93 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000190 	.word	0x20000190
 8000a18:	40005c00 	.word	0x40005c00
 8000a1c:	00c0eaff 	.word	0x00c0eaff

08000a20 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08e      	sub	sp, #56	; 0x38
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2234      	movs	r2, #52	; 0x34
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f009 fa23 	bl	8009e78 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000a32:	4b3a      	ldr	r3, [pc, #232]	; (8000b1c <MX_LTDC_Init+0xfc>)
 8000a34:	4a3a      	ldr	r2, [pc, #232]	; (8000b20 <MX_LTDC_Init+0x100>)
 8000a36:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a38:	4b38      	ldr	r3, [pc, #224]	; (8000b1c <MX_LTDC_Init+0xfc>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a3e:	4b37      	ldr	r3, [pc, #220]	; (8000b1c <MX_LTDC_Init+0xfc>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a44:	4b35      	ldr	r3, [pc, #212]	; (8000b1c <MX_LTDC_Init+0xfc>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a4a:	4b34      	ldr	r3, [pc, #208]	; (8000b1c <MX_LTDC_Init+0xfc>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000a50:	4b32      	ldr	r3, [pc, #200]	; (8000b1c <MX_LTDC_Init+0xfc>)
 8000a52:	2228      	movs	r2, #40	; 0x28
 8000a54:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000a56:	4b31      	ldr	r3, [pc, #196]	; (8000b1c <MX_LTDC_Init+0xfc>)
 8000a58:	2209      	movs	r2, #9
 8000a5a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000a5c:	4b2f      	ldr	r3, [pc, #188]	; (8000b1c <MX_LTDC_Init+0xfc>)
 8000a5e:	2235      	movs	r2, #53	; 0x35
 8000a60:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000a62:	4b2e      	ldr	r3, [pc, #184]	; (8000b1c <MX_LTDC_Init+0xfc>)
 8000a64:	220b      	movs	r2, #11
 8000a66:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000a68:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <MX_LTDC_Init+0xfc>)
 8000a6a:	f240 2215 	movw	r2, #533	; 0x215
 8000a6e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000a70:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <MX_LTDC_Init+0xfc>)
 8000a72:	f240 121b 	movw	r2, #283	; 0x11b
 8000a76:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000a78:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <MX_LTDC_Init+0xfc>)
 8000a7a:	f240 2235 	movw	r2, #565	; 0x235
 8000a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000a80:	4b26      	ldr	r3, [pc, #152]	; (8000b1c <MX_LTDC_Init+0xfc>)
 8000a82:	f240 121d 	movw	r2, #285	; 0x11d
 8000a86:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a88:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <MX_LTDC_Init+0xfc>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a90:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <MX_LTDC_Init+0xfc>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000a98:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <MX_LTDC_Init+0xfc>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000aa0:	481e      	ldr	r0, [pc, #120]	; (8000b1c <MX_LTDC_Init+0xfc>)
 8000aa2:	f003 faf5 	bl	8004090 <HAL_LTDC_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000aac:	f000 ff42 	bl	8001934 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000ab4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ab8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000abe:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000ac2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000ac8:	23ff      	movs	r3, #255	; 0xff
 8000aca:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000ad0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ad4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000ad6:	2307      	movs	r3, #7
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000ada:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000ae0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000ae6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000aea:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2200      	movs	r2, #0
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_LTDC_Init+0xfc>)
 8000b06:	f003 fc55 	bl	80043b4 <HAL_LTDC_ConfigLayer>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000b10:	f000 ff10 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	3738      	adds	r7, #56	; 0x38
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200001dc 	.word	0x200001dc
 8000b20:	40016800 	.word	0x40016800

08000b24 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b092      	sub	sp, #72	; 0x48
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]
 8000b3a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000b40:	463b      	mov	r3, r7
 8000b42:	222c      	movs	r2, #44	; 0x2c
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f009 f996 	bl	8009e78 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b4c:	4b46      	ldr	r3, [pc, #280]	; (8000c68 <MX_RTC_Init+0x144>)
 8000b4e:	4a47      	ldr	r2, [pc, #284]	; (8000c6c <MX_RTC_Init+0x148>)
 8000b50:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b52:	4b45      	ldr	r3, [pc, #276]	; (8000c68 <MX_RTC_Init+0x144>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b58:	4b43      	ldr	r3, [pc, #268]	; (8000c68 <MX_RTC_Init+0x144>)
 8000b5a:	227f      	movs	r2, #127	; 0x7f
 8000b5c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b5e:	4b42      	ldr	r3, [pc, #264]	; (8000c68 <MX_RTC_Init+0x144>)
 8000b60:	22ff      	movs	r2, #255	; 0xff
 8000b62:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b64:	4b40      	ldr	r3, [pc, #256]	; (8000c68 <MX_RTC_Init+0x144>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b6a:	4b3f      	ldr	r3, [pc, #252]	; (8000c68 <MX_RTC_Init+0x144>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b70:	4b3d      	ldr	r3, [pc, #244]	; (8000c68 <MX_RTC_Init+0x144>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b76:	483c      	ldr	r0, [pc, #240]	; (8000c68 <MX_RTC_Init+0x144>)
 8000b78:	f005 f844 	bl	8005c04 <HAL_RTC_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000b82:	f000 fed7 	bl	8001934 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ba0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	482f      	ldr	r0, [pc, #188]	; (8000c68 <MX_RTC_Init+0x144>)
 8000baa:	f005 f8bd 	bl	8005d28 <HAL_RTC_SetTime>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000bb4:	f000 febe 	bl	8001934 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000bd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4823      	ldr	r0, [pc, #140]	; (8000c68 <MX_RTC_Init+0x144>)
 8000bda:	f005 f963 	bl	8005ea4 <HAL_RTC_SetDate>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000be4:	f000 fea6 	bl	8001934 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4812      	ldr	r0, [pc, #72]	; (8000c68 <MX_RTC_Init+0x144>)
 8000c20:	f005 f9e8 	bl	8005ff4 <HAL_RTC_SetAlarm>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000c2a:	f000 fe83 	bl	8001934 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000c2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c34:	463b      	mov	r3, r7
 8000c36:	2201      	movs	r2, #1
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480b      	ldr	r0, [pc, #44]	; (8000c68 <MX_RTC_Init+0x144>)
 8000c3c:	f005 f9da 	bl	8005ff4 <HAL_RTC_SetAlarm>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000c46:	f000 fe75 	bl	8001934 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4806      	ldr	r0, [pc, #24]	; (8000c68 <MX_RTC_Init+0x144>)
 8000c50:	f005 fb5a 	bl	8006308 <HAL_RTCEx_SetTimeStamp>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000c5a:	f000 fe6b 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	3748      	adds	r7, #72	; 0x48
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000284 	.word	0x20000284
 8000c6c:	40002800 	.word	0x40002800

08000c70 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000c74:	4b4d      	ldr	r3, [pc, #308]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000c76:	4a4e      	ldr	r2, [pc, #312]	; (8000db0 <MX_SAI2_Init+0x140>)
 8000c78:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000c7a:	4b4c      	ldr	r3, [pc, #304]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000c80:	4b4a      	ldr	r3, [pc, #296]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000c86:	4b49      	ldr	r3, [pc, #292]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000c88:	2240      	movs	r2, #64	; 0x40
 8000c8a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000c8c:	4b47      	ldr	r3, [pc, #284]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000c92:	4b46      	ldr	r3, [pc, #280]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000c98:	4b44      	ldr	r3, [pc, #272]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c9e:	4b43      	ldr	r3, [pc, #268]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000ca4:	4b41      	ldr	r3, [pc, #260]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000caa:	4b40      	ldr	r3, [pc, #256]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000cb0:	4b3e      	ldr	r3, [pc, #248]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000cb2:	4a40      	ldr	r2, [pc, #256]	; (8000db4 <MX_SAI2_Init+0x144>)
 8000cb4:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000cb6:	4b3d      	ldr	r3, [pc, #244]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000cbc:	4b3b      	ldr	r3, [pc, #236]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000cc2:	4b3a      	ldr	r3, [pc, #232]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000cc8:	4b38      	ldr	r3, [pc, #224]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000cce:	4b37      	ldr	r3, [pc, #220]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000cd0:	2208      	movs	r2, #8
 8000cd2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000cd4:	4b35      	ldr	r3, [pc, #212]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000cda:	4b34      	ldr	r3, [pc, #208]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ce0:	4b32      	ldr	r3, [pc, #200]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000ce6:	4b31      	ldr	r3, [pc, #196]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000cec:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000cf2:	4b2e      	ldr	r3, [pc, #184]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000cf8:	4b2c      	ldr	r3, [pc, #176]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000cfe:	4b2b      	ldr	r3, [pc, #172]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000d04:	4829      	ldr	r0, [pc, #164]	; (8000dac <MX_SAI2_Init+0x13c>)
 8000d06:	f005 fb55 	bl	80063b4 <HAL_SAI_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000d10:	f000 fe10 	bl	8001934 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000d14:	4b28      	ldr	r3, [pc, #160]	; (8000db8 <MX_SAI2_Init+0x148>)
 8000d16:	4a29      	ldr	r2, [pc, #164]	; (8000dbc <MX_SAI2_Init+0x14c>)
 8000d18:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d1a:	4b27      	ldr	r3, [pc, #156]	; (8000db8 <MX_SAI2_Init+0x148>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000d20:	4b25      	ldr	r3, [pc, #148]	; (8000db8 <MX_SAI2_Init+0x148>)
 8000d22:	2203      	movs	r2, #3
 8000d24:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000d26:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <MX_SAI2_Init+0x148>)
 8000d28:	2240      	movs	r2, #64	; 0x40
 8000d2a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <MX_SAI2_Init+0x148>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d32:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <MX_SAI2_Init+0x148>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000d38:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <MX_SAI2_Init+0x148>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d3e:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <MX_SAI2_Init+0x148>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d44:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <MX_SAI2_Init+0x148>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d4a:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <MX_SAI2_Init+0x148>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d50:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <MX_SAI2_Init+0x148>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <MX_SAI2_Init+0x148>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <MX_SAI2_Init+0x148>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <MX_SAI2_Init+0x148>)
 8000d64:	2208      	movs	r2, #8
 8000d66:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <MX_SAI2_Init+0x148>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <MX_SAI2_Init+0x148>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d74:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <MX_SAI2_Init+0x148>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <MX_SAI2_Init+0x148>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <MX_SAI2_Init+0x148>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <MX_SAI2_Init+0x148>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <MX_SAI2_Init+0x148>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_SAI2_Init+0x148>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000d98:	4807      	ldr	r0, [pc, #28]	; (8000db8 <MX_SAI2_Init+0x148>)
 8000d9a:	f005 fb0b 	bl	80063b4 <HAL_SAI_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000da4:	f000 fdc6 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200002a4 	.word	0x200002a4
 8000db0:	40015c04 	.word	0x40015c04
 8000db4:	0002ee00 	.word	0x0002ee00
 8000db8:	20000328 	.word	0x20000328
 8000dbc:	40015c24 	.word	0x40015c24

08000dc0 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <MX_SPDIFRX_Init+0x5c>)
 8000dc6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000dca:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <MX_SPDIFRX_Init+0x5c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <MX_SPDIFRX_Init+0x5c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000dd8:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <MX_SPDIFRX_Init+0x5c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <MX_SPDIFRX_Init+0x5c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000de4:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <MX_SPDIFRX_Init+0x5c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <MX_SPDIFRX_Init+0x5c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <MX_SPDIFRX_Init+0x5c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <MX_SPDIFRX_Init+0x5c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <MX_SPDIFRX_Init+0x5c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <MX_SPDIFRX_Init+0x5c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000e08:	4804      	ldr	r0, [pc, #16]	; (8000e1c <MX_SPDIFRX_Init+0x5c>)
 8000e0a:	f005 fcbd 	bl	8006788 <HAL_SPDIFRX_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000e14:	f000 fd8e 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200003ac 	.word	0x200003ac

08000e20 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_SPI2_Init+0x74>)
 8000e26:	4a1c      	ldr	r2, [pc, #112]	; (8000e98 <MX_SPI2_Init+0x78>)
 8000e28:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <MX_SPI2_Init+0x74>)
 8000e2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e30:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_SPI2_Init+0x74>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_SPI2_Init+0x74>)
 8000e3a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e3e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e40:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <MX_SPI2_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e46:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <MX_SPI2_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_SPI2_Init+0x74>)
 8000e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e52:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_SPI2_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_SPI2_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <MX_SPI2_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <MX_SPI2_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_SPI2_Init+0x74>)
 8000e6e:	2207      	movs	r2, #7
 8000e70:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <MX_SPI2_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <MX_SPI2_Init+0x74>)
 8000e7a:	2208      	movs	r2, #8
 8000e7c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_SPI2_Init+0x74>)
 8000e80:	f005 fcde 	bl	8006840 <HAL_SPI_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000e8a:	f000 fd53 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200003f8 	.word	0x200003f8
 8000e98:	40003800 	.word	0x40003800

08000e9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eba:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <MX_TIM1_Init+0x9c>)
 8000ebc:	4a1f      	ldr	r2, [pc, #124]	; (8000f3c <MX_TIM1_Init+0xa0>)
 8000ebe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 199;
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <MX_TIM1_Init+0x9c>)
 8000ec2:	22c7      	movs	r2, #199	; 0xc7
 8000ec4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <MX_TIM1_Init+0x9c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_TIM1_Init+0x9c>)
 8000ece:	2263      	movs	r2, #99	; 0x63
 8000ed0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_TIM1_Init+0x9c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <MX_TIM1_Init+0x9c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_TIM1_Init+0x9c>)
 8000ee0:	2280      	movs	r2, #128	; 0x80
 8000ee2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ee4:	4814      	ldr	r0, [pc, #80]	; (8000f38 <MX_TIM1_Init+0x9c>)
 8000ee6:	f005 fd56 	bl	8006996 <HAL_TIM_Base_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ef0:	f000 fd20 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000efa:	f107 0310 	add.w	r3, r7, #16
 8000efe:	4619      	mov	r1, r3
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <MX_TIM1_Init+0x9c>)
 8000f02:	f006 f9f3 	bl	80072ec <HAL_TIM_ConfigClockSource>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000f0c:	f000 fd12 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f10:	2300      	movs	r3, #0
 8000f12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_TIM1_Init+0x9c>)
 8000f22:	f006 fe93 	bl	8007c4c <HAL_TIMEx_MasterConfigSynchronization>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000f2c:	f000 fd02 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	3720      	adds	r7, #32
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	2000045c 	.word	0x2000045c
 8000f3c:	40010000 	.word	0x40010000

08000f40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f46:	f107 0310 	add.w	r3, r7, #16
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <MX_TIM2_Init+0x98>)
 8000f60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <MX_TIM2_Init+0x98>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_TIM2_Init+0x98>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_TIM2_Init+0x98>)
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295
 8000f78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <MX_TIM2_Init+0x98>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <MX_TIM2_Init+0x98>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f86:	4814      	ldr	r0, [pc, #80]	; (8000fd8 <MX_TIM2_Init+0x98>)
 8000f88:	f005 fd05 	bl	8006996 <HAL_TIM_Base_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f92:	f000 fccf 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <MX_TIM2_Init+0x98>)
 8000fa4:	f006 f9a2 	bl	80072ec <HAL_TIM_ConfigClockSource>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000fae:	f000 fcc1 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <MX_TIM2_Init+0x98>)
 8000fc0:	f006 fe44 	bl	8007c4c <HAL_TIMEx_MasterConfigSynchronization>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000fca:	f000 fcb3 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	3720      	adds	r7, #32
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200004a8 	.word	0x200004a8

08000fdc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe2:	f107 0310 	add.w	r3, r7, #16
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <MX_TIM3_Init+0x94>)
 8000ffc:	4a1d      	ldr	r2, [pc, #116]	; (8001074 <MX_TIM3_Init+0x98>)
 8000ffe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001000:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <MX_TIM3_Init+0x94>)
 8001002:	2200      	movs	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_TIM3_Init+0x94>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <MX_TIM3_Init+0x94>)
 800100e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001012:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <MX_TIM3_Init+0x94>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <MX_TIM3_Init+0x94>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001020:	4813      	ldr	r0, [pc, #76]	; (8001070 <MX_TIM3_Init+0x94>)
 8001022:	f005 fcb8 	bl	8006996 <HAL_TIM_Base_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800102c:	f000 fc82 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001034:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	4619      	mov	r1, r3
 800103c:	480c      	ldr	r0, [pc, #48]	; (8001070 <MX_TIM3_Init+0x94>)
 800103e:	f006 f955 	bl	80072ec <HAL_TIM_ConfigClockSource>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001048:	f000 fc74 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	4619      	mov	r1, r3
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_TIM3_Init+0x94>)
 800105a:	f006 fdf7 	bl	8007c4c <HAL_TIMEx_MasterConfigSynchronization>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001064:	f000 fc66 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	3720      	adds	r7, #32
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200004f4 	.word	0x200004f4
 8001074:	40000400 	.word	0x40000400

08001078 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08e      	sub	sp, #56	; 0x38
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800107e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001098:	463b      	mov	r3, r7
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]
 80010a6:	615a      	str	r2, [r3, #20]
 80010a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010aa:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <MX_TIM5_Init+0xe8>)
 80010ac:	4a2d      	ldr	r2, [pc, #180]	; (8001164 <MX_TIM5_Init+0xec>)
 80010ae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80010b0:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <MX_TIM5_Init+0xe8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b6:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <MX_TIM5_Init+0xe8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80010bc:	4b28      	ldr	r3, [pc, #160]	; (8001160 <MX_TIM5_Init+0xe8>)
 80010be:	f04f 32ff 	mov.w	r2, #4294967295
 80010c2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c4:	4b26      	ldr	r3, [pc, #152]	; (8001160 <MX_TIM5_Init+0xe8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <MX_TIM5_Init+0xe8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80010d0:	4823      	ldr	r0, [pc, #140]	; (8001160 <MX_TIM5_Init+0xe8>)
 80010d2:	f005 fc60 	bl	8006996 <HAL_TIM_Base_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80010dc:	f000 fc2a 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80010e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ea:	4619      	mov	r1, r3
 80010ec:	481c      	ldr	r0, [pc, #112]	; (8001160 <MX_TIM5_Init+0xe8>)
 80010ee:	f006 f8fd 	bl	80072ec <HAL_TIM_ConfigClockSource>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80010f8:	f000 fc1c 	bl	8001934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80010fc:	4818      	ldr	r0, [pc, #96]	; (8001160 <MX_TIM5_Init+0xe8>)
 80010fe:	f005 fe61 	bl	8006dc4 <HAL_TIM_PWM_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001108:	f000 fc14 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	4811      	ldr	r0, [pc, #68]	; (8001160 <MX_TIM5_Init+0xe8>)
 800111c:	f006 fd96 	bl	8007c4c <HAL_TIMEx_MasterConfigSynchronization>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001126:	f000 fc05 	bl	8001934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112a:	2360      	movs	r3, #96	; 0x60
 800112c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800113a:	463b      	mov	r3, r7
 800113c:	220c      	movs	r2, #12
 800113e:	4619      	mov	r1, r3
 8001140:	4807      	ldr	r0, [pc, #28]	; (8001160 <MX_TIM5_Init+0xe8>)
 8001142:	f005 ffbf 	bl	80070c4 <HAL_TIM_PWM_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800114c:	f000 fbf2 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001150:	4803      	ldr	r0, [pc, #12]	; (8001160 <MX_TIM5_Init+0xe8>)
 8001152:	f001 f809 	bl	8002168 <HAL_TIM_MspPostInit>

}
 8001156:	bf00      	nop
 8001158:	3738      	adds	r7, #56	; 0x38
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000540 	.word	0x20000540
 8001164:	40000c00 	.word	0x40000c00

08001168 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001186:	4b20      	ldr	r3, [pc, #128]	; (8001208 <MX_TIM8_Init+0xa0>)
 8001188:	4a20      	ldr	r2, [pc, #128]	; (800120c <MX_TIM8_Init+0xa4>)
 800118a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800118c:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <MX_TIM8_Init+0xa0>)
 800118e:	2200      	movs	r2, #0
 8001190:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001192:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <MX_TIM8_Init+0xa0>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <MX_TIM8_Init+0xa0>)
 800119a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800119e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b19      	ldr	r3, [pc, #100]	; (8001208 <MX_TIM8_Init+0xa0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MX_TIM8_Init+0xa0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <MX_TIM8_Init+0xa0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80011b2:	4815      	ldr	r0, [pc, #84]	; (8001208 <MX_TIM8_Init+0xa0>)
 80011b4:	f005 fbef 	bl	8006996 <HAL_TIM_Base_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80011be:	f000 fbb9 	bl	8001934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	4619      	mov	r1, r3
 80011ce:	480e      	ldr	r0, [pc, #56]	; (8001208 <MX_TIM8_Init+0xa0>)
 80011d0:	f006 f88c 	bl	80072ec <HAL_TIM_ConfigClockSource>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80011da:	f000 fbab 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <MX_TIM8_Init+0xa0>)
 80011f0:	f006 fd2c 	bl	8007c4c <HAL_TIMEx_MasterConfigSynchronization>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80011fa:	f000 fb9b 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3720      	adds	r7, #32
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000058c 	.word	0x2000058c
 800120c:	40010400 	.word	0x40010400

08001210 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <MX_USART1_UART_Init+0x58>)
 8001216:	4a15      	ldr	r2, [pc, #84]	; (800126c <MX_USART1_UART_Init+0x5c>)
 8001218:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <MX_USART1_UART_Init+0x58>)
 800121c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001220:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_USART1_UART_Init+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_USART1_UART_Init+0x58>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_USART1_UART_Init+0x58>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_USART1_UART_Init+0x58>)
 8001236:	220c      	movs	r2, #12
 8001238:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_USART1_UART_Init+0x58>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_USART1_UART_Init+0x58>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_USART1_UART_Init+0x58>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_USART1_UART_Init+0x58>)
 800124e:	2200      	movs	r2, #0
 8001250:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_USART1_UART_Init+0x58>)
 8001254:	f006 fda6 	bl	8007da4 <HAL_UART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800125e:	f000 fb69 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200005d8 	.word	0x200005d8
 800126c:	40011000 	.word	0x40011000

08001270 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
 8001284:	615a      	str	r2, [r3, #20]
 8001286:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001288:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <MX_FMC_Init+0x98>)
 800128a:	4a20      	ldr	r2, [pc, #128]	; (800130c <MX_FMC_Init+0x9c>)
 800128c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800128e:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <MX_FMC_Init+0x98>)
 8001290:	2200      	movs	r2, #0
 8001292:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001294:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <MX_FMC_Init+0x98>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800129a:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <MX_FMC_Init+0x98>)
 800129c:	2204      	movs	r2, #4
 800129e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <MX_FMC_Init+0x98>)
 80012a2:	2210      	movs	r2, #16
 80012a4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <MX_FMC_Init+0x98>)
 80012a8:	2240      	movs	r2, #64	; 0x40
 80012aa:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <MX_FMC_Init+0x98>)
 80012ae:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80012b2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <MX_FMC_Init+0x98>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <MX_FMC_Init+0x98>)
 80012bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012c0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_FMC_Init+0x98>)
 80012c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012c8:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_FMC_Init+0x98>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80012d0:	2302      	movs	r3, #2
 80012d2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80012d4:	2307      	movs	r3, #7
 80012d6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80012d8:	2304      	movs	r3, #4
 80012da:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80012dc:	2307      	movs	r3, #7
 80012de:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80012e0:	2303      	movs	r3, #3
 80012e2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80012e8:	2302      	movs	r3, #2
 80012ea:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_FMC_Init+0x98>)
 80012f2:	f005 fa15 	bl	8006720 <HAL_SDRAM_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80012fc:	f000 fb1a 	bl	8001934 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001300:	bf00      	nop
 8001302:	3720      	adds	r7, #32
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	2000065c 	.word	0x2000065c
 800130c:	a0000140 	.word	0xa0000140

08001310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b090      	sub	sp, #64	; 0x40
 8001314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001326:	4baf      	ldr	r3, [pc, #700]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4aae      	ldr	r2, [pc, #696]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 800132c:	f043 0310 	orr.w	r3, r3, #16
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4bac      	ldr	r3, [pc, #688]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
 800133c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800133e:	4ba9      	ldr	r3, [pc, #676]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4aa8      	ldr	r2, [pc, #672]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 8001344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4ba6      	ldr	r3, [pc, #664]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	4ba3      	ldr	r3, [pc, #652]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4aa2      	ldr	r2, [pc, #648]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4ba0      	ldr	r3, [pc, #640]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	623b      	str	r3, [r7, #32]
 800136c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800136e:	4b9d      	ldr	r3, [pc, #628]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a9c      	ldr	r2, [pc, #624]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 8001374:	f043 0308 	orr.w	r3, r3, #8
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b9a      	ldr	r3, [pc, #616]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	61fb      	str	r3, [r7, #28]
 8001384:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001386:	4b97      	ldr	r3, [pc, #604]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a96      	ldr	r2, [pc, #600]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b94      	ldr	r3, [pc, #592]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	61bb      	str	r3, [r7, #24]
 800139c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	4b91      	ldr	r3, [pc, #580]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a90      	ldr	r2, [pc, #576]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b8e      	ldr	r3, [pc, #568]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013b6:	4b8b      	ldr	r3, [pc, #556]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a8a      	ldr	r2, [pc, #552]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 80013bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b88      	ldr	r3, [pc, #544]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80013ce:	4b85      	ldr	r3, [pc, #532]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a84      	ldr	r2, [pc, #528]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 80013d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b82      	ldr	r3, [pc, #520]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80013e6:	4b7f      	ldr	r3, [pc, #508]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a7e      	ldr	r2, [pc, #504]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 80013ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b7c      	ldr	r3, [pc, #496]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013fe:	4b79      	ldr	r3, [pc, #484]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a78      	ldr	r2, [pc, #480]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 8001404:	f043 0320 	orr.w	r3, r3, #32
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b76      	ldr	r3, [pc, #472]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0320 	and.w	r3, r3, #32
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001416:	4b73      	ldr	r3, [pc, #460]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a72      	ldr	r2, [pc, #456]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 800141c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b70      	ldr	r3, [pc, #448]	; (80015e4 <MX_GPIO_Init+0x2d4>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2110      	movs	r1, #16
 8001432:	486d      	ldr	r0, [pc, #436]	; (80015e8 <MX_GPIO_Init+0x2d8>)
 8001434:	f002 fcd2 	bl	8003ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 800143e:	486b      	ldr	r0, [pc, #428]	; (80015ec <MX_GPIO_Init+0x2dc>)
 8001440:	f002 fccc 	bl	8003ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001444:	2201      	movs	r2, #1
 8001446:	2120      	movs	r1, #32
 8001448:	4869      	ldr	r0, [pc, #420]	; (80015f0 <MX_GPIO_Init+0x2e0>)
 800144a:	f002 fcc7 	bl	8003ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800144e:	2201      	movs	r2, #1
 8001450:	2108      	movs	r1, #8
 8001452:	4868      	ldr	r0, [pc, #416]	; (80015f4 <MX_GPIO_Init+0x2e4>)
 8001454:	f002 fcc2 	bl	8003ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001458:	2201      	movs	r2, #1
 800145a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800145e:	4866      	ldr	r0, [pc, #408]	; (80015f8 <MX_GPIO_Init+0x2e8>)
 8001460:	f002 fcbc 	bl	8003ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 800146a:	4864      	ldr	r0, [pc, #400]	; (80015fc <MX_GPIO_Init+0x2ec>)
 800146c:	f002 fcb6 	bl	8003ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	2108      	movs	r1, #8
 8001474:	4862      	ldr	r0, [pc, #392]	; (8001600 <MX_GPIO_Init+0x2f0>)
 8001476:	f002 fcb1 	bl	8003ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800147a:	2308      	movs	r3, #8
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147e:	2300      	movs	r3, #0
 8001480:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001486:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800148a:	4619      	mov	r1, r3
 800148c:	485d      	ldr	r0, [pc, #372]	; (8001604 <MX_GPIO_Init+0x2f4>)
 800148e:	f002 faf9 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001492:	2304      	movs	r3, #4
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80014a2:	2309      	movs	r3, #9
 80014a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014aa:	4619      	mov	r1, r3
 80014ac:	4855      	ldr	r0, [pc, #340]	; (8001604 <MX_GPIO_Init+0x2f4>)
 80014ae:	f002 fae9 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80014b2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014c4:	230b      	movs	r3, #11
 80014c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014cc:	4619      	mov	r1, r3
 80014ce:	484c      	ldr	r0, [pc, #304]	; (8001600 <MX_GPIO_Init+0x2f0>)
 80014d0:	f002 fad8 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80014d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014da:	2312      	movs	r3, #18
 80014dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014de:	2301      	movs	r3, #1
 80014e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014e6:	2304      	movs	r3, #4
 80014e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ee:	4619      	mov	r1, r3
 80014f0:	483d      	ldr	r0, [pc, #244]	; (80015e8 <MX_GPIO_Init+0x2d8>)
 80014f2:	f002 fac7 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80014f6:	f643 4323 	movw	r3, #15395	; 0x3c23
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001504:	2303      	movs	r3, #3
 8001506:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001508:	230a      	movs	r3, #10
 800150a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001510:	4619      	mov	r1, r3
 8001512:	4835      	ldr	r0, [pc, #212]	; (80015e8 <MX_GPIO_Init+0x2d8>)
 8001514:	f002 fab6 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8001518:	2310      	movs	r3, #16
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151c:	2301      	movs	r3, #1
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8001528:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800152c:	4619      	mov	r1, r3
 800152e:	482e      	ldr	r0, [pc, #184]	; (80015e8 <MX_GPIO_Init+0x2d8>)
 8001530:	f002 faa8 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001534:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001546:	230c      	movs	r3, #12
 8001548:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800154e:	4619      	mov	r1, r3
 8001550:	482d      	ldr	r0, [pc, #180]	; (8001608 <MX_GPIO_Init+0x2f8>)
 8001552:	f002 fa97 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED2_Pin;
 8001556:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155c:	2301      	movs	r3, #1
 800155e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800156c:	4619      	mov	r1, r3
 800156e:	481f      	ldr	r0, [pc, #124]	; (80015ec <MX_GPIO_Init+0x2dc>)
 8001570:	f002 fa88 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001574:	2340      	movs	r3, #64	; 0x40
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001584:	230a      	movs	r3, #10
 8001586:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800158c:	4619      	mov	r1, r3
 800158e:	4816      	ldr	r0, [pc, #88]	; (80015e8 <MX_GPIO_Init+0x2d8>)
 8001590:	f002 fa78 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159a:	2300      	movs	r3, #0
 800159c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015a6:	4619      	mov	r1, r3
 80015a8:	4818      	ldr	r0, [pc, #96]	; (800160c <MX_GPIO_Init+0x2fc>)
 80015aa:	f002 fa6b 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80015ae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015c0:	230a      	movs	r3, #10
 80015c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c8:	4619      	mov	r1, r3
 80015ca:	4808      	ldr	r0, [pc, #32]	; (80015ec <MX_GPIO_Init+0x2dc>)
 80015cc:	f002 fa5a 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80015d0:	2320      	movs	r3, #32
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d4:	2301      	movs	r3, #1
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	63bb      	str	r3, [r7, #56]	; 0x38
 80015e0:	e016      	b.n	8001610 <MX_GPIO_Init+0x300>
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020400 	.word	0x40020400
 80015ec:	40020000 	.word	0x40020000
 80015f0:	40020c00 	.word	0x40020c00
 80015f4:	40022800 	.word	0x40022800
 80015f8:	40022000 	.word	0x40022000
 80015fc:	40021c00 	.word	0x40021c00
 8001600:	40021800 	.word	0x40021800
 8001604:	40021000 	.word	0x40021000
 8001608:	40020800 	.word	0x40020800
 800160c:	40022400 	.word	0x40022400
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001614:	4619      	mov	r1, r3
 8001616:	48a9      	ldr	r0, [pc, #676]	; (80018bc <MX_GPIO_Init+0x5ac>)
 8001618:	f002 fa34 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON0_Pin;
 800161c:	230c      	movs	r3, #12
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001620:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001624:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001626:	2301      	movs	r3, #1
 8001628:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800162a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800162e:	4619      	mov	r1, r3
 8001630:	48a3      	ldr	r0, [pc, #652]	; (80018c0 <MX_GPIO_Init+0x5b0>)
 8001632:	f002 fa27 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163c:	2300      	movs	r3, #0
 800163e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001648:	4619      	mov	r1, r3
 800164a:	489e      	ldr	r0, [pc, #632]	; (80018c4 <MX_GPIO_Init+0x5b4>)
 800164c:	f002 fa1a 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001650:	2308      	movs	r3, #8
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001664:	4619      	mov	r1, r3
 8001666:	4898      	ldr	r0, [pc, #608]	; (80018c8 <MX_GPIO_Init+0x5b8>)
 8001668:	f002 fa0c 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800166c:	2310      	movs	r3, #16
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001670:	2300      	movs	r3, #0
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800167c:	4619      	mov	r1, r3
 800167e:	488f      	ldr	r0, [pc, #572]	; (80018bc <MX_GPIO_Init+0x5ac>)
 8001680:	f002 fa00 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001684:	2304      	movs	r3, #4
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001694:	230c      	movs	r3, #12
 8001696:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800169c:	4619      	mov	r1, r3
 800169e:	4887      	ldr	r0, [pc, #540]	; (80018bc <MX_GPIO_Init+0x5ac>)
 80016a0:	f002 f9f0 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80016a4:	f248 0304 	movw	r3, #32772	; 0x8004
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016aa:	2300      	movs	r3, #0
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b6:	4619      	mov	r1, r3
 80016b8:	4884      	ldr	r0, [pc, #528]	; (80018cc <MX_GPIO_Init+0x5bc>)
 80016ba:	f002 f9e3 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 80016be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c4:	2301      	movs	r3, #1
 80016c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80016d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d4:	4619      	mov	r1, r3
 80016d6:	487a      	ldr	r0, [pc, #488]	; (80018c0 <MX_GPIO_Init+0x5b0>)
 80016d8:	f002 f9d4 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_PWR_EN_Pin LED1_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin|LED1_Pin;
 80016dc:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f2:	4619      	mov	r1, r3
 80016f4:	4875      	ldr	r0, [pc, #468]	; (80018cc <MX_GPIO_Init+0x5bc>)
 80016f6:	f002 f9c5 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80016fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001700:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001704:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800170a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800170e:	4619      	mov	r1, r3
 8001710:	486b      	ldr	r0, [pc, #428]	; (80018c0 <MX_GPIO_Init+0x5b0>)
 8001712:	f002 f9b7 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001716:	23c0      	movs	r3, #192	; 0xc0
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001722:	2303      	movs	r3, #3
 8001724:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001726:	2308      	movs	r3, #8
 8001728:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800172e:	4619      	mov	r1, r3
 8001730:	4864      	ldr	r0, [pc, #400]	; (80018c4 <MX_GPIO_Init+0x5b4>)
 8001732:	f002 f9a7 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001736:	2310      	movs	r3, #16
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001742:	2303      	movs	r3, #3
 8001744:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001746:	230a      	movs	r3, #10
 8001748:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800174a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800174e:	4619      	mov	r1, r3
 8001750:	485e      	ldr	r0, [pc, #376]	; (80018cc <MX_GPIO_Init+0x5bc>)
 8001752:	f002 f997 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 8001756:	23c0      	movs	r3, #192	; 0xc0
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800175a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800175e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001760:	2301      	movs	r3, #1
 8001762:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001764:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001768:	4619      	mov	r1, r3
 800176a:	4859      	ldr	r0, [pc, #356]	; (80018d0 <MX_GPIO_Init+0x5c0>)
 800176c:	f002 f98a 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001776:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800177a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001780:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001784:	4619      	mov	r1, r3
 8001786:	4853      	ldr	r0, [pc, #332]	; (80018d4 <MX_GPIO_Init+0x5c4>)
 8001788:	f002 f97c 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800178c:	2305      	movs	r3, #5
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800179c:	230a      	movs	r3, #10
 800179e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a4:	4619      	mov	r1, r3
 80017a6:	4847      	ldr	r0, [pc, #284]	; (80018c4 <MX_GPIO_Init+0x5b4>)
 80017a8:	f002 f96c 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80017ac:	2332      	movs	r3, #50	; 0x32
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b8:	2303      	movs	r3, #3
 80017ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017bc:	230b      	movs	r3, #11
 80017be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c4:	4619      	mov	r1, r3
 80017c6:	483f      	ldr	r0, [pc, #252]	; (80018c4 <MX_GPIO_Init+0x5b4>)
 80017c8:	f002 f95c 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017cc:	2304      	movs	r3, #4
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d8:	2303      	movs	r3, #3
 80017da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80017dc:	2309      	movs	r3, #9
 80017de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e4:	4619      	mov	r1, r3
 80017e6:	483c      	ldr	r0, [pc, #240]	; (80018d8 <MX_GPIO_Init+0x5c8>)
 80017e8:	f002 f94c 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80017ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fa:	2303      	movs	r3, #3
 80017fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80017fe:	2309      	movs	r3, #9
 8001800:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001802:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001806:	4619      	mov	r1, r3
 8001808:	482c      	ldr	r0, [pc, #176]	; (80018bc <MX_GPIO_Init+0x5ac>)
 800180a:	f002 f93b 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 800180e:	2308      	movs	r3, #8
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001812:	2301      	movs	r3, #1
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 800181e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001822:	4619      	mov	r1, r3
 8001824:	482a      	ldr	r0, [pc, #168]	; (80018d0 <MX_GPIO_Init+0x5c0>)
 8001826:	f002 f92d 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800182a:	2304      	movs	r3, #4
 800182c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182e:	2300      	movs	r3, #0
 8001830:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800183a:	4619      	mov	r1, r3
 800183c:	4824      	ldr	r0, [pc, #144]	; (80018d0 <MX_GPIO_Init+0x5c0>)
 800183e:	f002 f921 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001842:	2386      	movs	r3, #134	; 0x86
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184e:	2303      	movs	r3, #3
 8001850:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001852:	230b      	movs	r3, #11
 8001854:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001856:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800185a:	4619      	mov	r1, r3
 800185c:	481f      	ldr	r0, [pc, #124]	; (80018dc <MX_GPIO_Init+0x5cc>)
 800185e:	f002 f911 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001862:	2328      	movs	r3, #40	; 0x28
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186e:	2303      	movs	r3, #3
 8001870:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001872:	230a      	movs	r3, #10
 8001874:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800187a:	4619      	mov	r1, r3
 800187c:	4817      	ldr	r0, [pc, #92]	; (80018dc <MX_GPIO_Init+0x5cc>)
 800187e:	f002 f901 	bl	8003a84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	2008      	movs	r0, #8
 8001888:	f001 fd82 	bl	8003390 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800188c:	2008      	movs	r0, #8
 800188e:	f001 fd9b 	bl	80033c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	2009      	movs	r0, #9
 8001898:	f001 fd7a 	bl	8003390 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800189c:	2009      	movs	r0, #9
 800189e:	f001 fd93 	bl	80033c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	2017      	movs	r0, #23
 80018a8:	f001 fd72 	bl	8003390 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018ac:	2017      	movs	r0, #23
 80018ae:	f001 fd8b 	bl	80033c8 <HAL_NVIC_EnableIRQ>

}
 80018b2:	bf00      	nop
 80018b4:	3740      	adds	r7, #64	; 0x40
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40020c00 	.word	0x40020c00
 80018c0:	40022000 	.word	0x40022000
 80018c4:	40020800 	.word	0x40020800
 80018c8:	40022800 	.word	0x40022800
 80018cc:	40021c00 	.word	0x40021c00
 80018d0:	40021800 	.word	0x40021800
 80018d4:	40021400 	.word	0x40021400
 80018d8:	40020400 	.word	0x40020400
 80018dc:	40020000 	.word	0x40020000

080018e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a10      	ldr	r2, [pc, #64]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d101      	bne.n	80018f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018f2:	f000 ffcd 	bl	8002890 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
#if (PORT_IDF_STM32CUBE != 0)
    if (htim->Instance == TIM6)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d113      	bne.n	8001928 <HAL_TIM_PeriodElapsedCallback+0x48>
    {
        // STM32 HAL tick handler gets called every millisecond (is given by code
        // generated by STM32CubeIDE). Check which interval is needed by the
        // XF (typically slower) and call XF_tick() accordingly.
        if (XF_isRunning() &&
 8001900:	f008 f9ea 	bl	8009cd8 <XF_isRunning>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00e      	beq.n	8001928 <HAL_TIM_PeriodElapsedCallback+0x48>
            (HAL_GetTick() % XF_tickIntervalInMilliseconds()) == 0)
 800190a:	f000 ffd5 	bl	80028b8 <HAL_GetTick>
 800190e:	4604      	mov	r4, r0
 8001910:	f008 f9d5 	bl	8009cbe <XF_tickIntervalInMilliseconds>
 8001914:	4603      	mov	r3, r0
 8001916:	fbb4 f2f3 	udiv	r2, r4, r3
 800191a:	fb02 f303 	mul.w	r3, r2, r3
 800191e:	1ae3      	subs	r3, r4, r3
        if (XF_isRunning() &&
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_TIM_PeriodElapsedCallback+0x48>
        {
               XF_tick();
 8001924:	f008 f9b4 	bl	8009c90 <XF_tick>
        }
    }
#endif // PORT_IDF_STM32CUBE
  /* USER CODE END Callback 1 */
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bd90      	pop	{r4, r7, pc}
 8001930:	40001000 	.word	0x40001000

08001934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001938:	b672      	cpsid	i
}
 800193a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800193c:	e7fe      	b.n	800193c <Error_Handler+0x8>
	...

08001940 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <HAL_MspInit+0x44>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <HAL_MspInit+0x44>)
 800194c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <HAL_MspInit+0x44>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_MspInit+0x44>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a08      	ldr	r2, [pc, #32]	; (8001984 <HAL_MspInit+0x44>)
 8001964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_MspInit+0x44>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800

08001988 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <HAL_ADC_MspInit+0xb4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d144      	bne.n	8001a34 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80019aa:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <HAL_ADC_MspInit+0xb8>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	4a24      	ldr	r2, [pc, #144]	; (8001a40 <HAL_ADC_MspInit+0xb8>)
 80019b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019b4:	6453      	str	r3, [r2, #68]	; 0x44
 80019b6:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <HAL_ADC_MspInit+0xb8>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019c2:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <HAL_ADC_MspInit+0xb8>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a1e      	ldr	r2, [pc, #120]	; (8001a40 <HAL_ADC_MspInit+0xb8>)
 80019c8:	f043 0320 	orr.w	r3, r3, #32
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <HAL_ADC_MspInit+0xb8>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0320 	and.w	r3, r3, #32
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019da:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <HAL_ADC_MspInit+0xb8>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a18      	ldr	r2, [pc, #96]	; (8001a40 <HAL_ADC_MspInit+0xb8>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <HAL_ADC_MspInit+0xb8>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> ADC3_IN4
    PF10     ------> ADC3_IN8
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A3_Pin;
 80019f2:	f44f 63b8 	mov.w	r3, #1472	; 0x5c0
 80019f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f8:	2303      	movs	r3, #3
 80019fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4619      	mov	r1, r3
 8001a06:	480f      	ldr	r0, [pc, #60]	; (8001a44 <HAL_ADC_MspInit+0xbc>)
 8001a08:	f002 f83c 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a10:	2303      	movs	r3, #3
 8001a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480a      	ldr	r0, [pc, #40]	; (8001a48 <HAL_ADC_MspInit+0xc0>)
 8001a20:	f002 f830 	bl	8003a84 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2100      	movs	r1, #0
 8001a28:	2012      	movs	r0, #18
 8001a2a:	f001 fcb1 	bl	8003390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001a2e:	2012      	movs	r0, #18
 8001a30:	f001 fcca 	bl	80033c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a34:	bf00      	nop
 8001a36:	3728      	adds	r7, #40	; 0x28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40012200 	.word	0x40012200
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40021400 	.word	0x40021400
 8001a48:	40020000 	.word	0x40020000

08001a4c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <HAL_CRC_MspInit+0x38>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d10b      	bne.n	8001a76 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_CRC_MspInit+0x3c>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a09      	ldr	r2, [pc, #36]	; (8001a88 <HAL_CRC_MspInit+0x3c>)
 8001a64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <HAL_CRC_MspInit+0x3c>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40023000 	.word	0x40023000
 8001a88:	40023800 	.word	0x40023800

08001a8c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08e      	sub	sp, #56	; 0x38
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a50      	ldr	r2, [pc, #320]	; (8001bec <HAL_DCMI_MspInit+0x160>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	f040 809a 	bne.w	8001be4 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001ab0:	4b4f      	ldr	r3, [pc, #316]	; (8001bf0 <HAL_DCMI_MspInit+0x164>)
 8001ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab4:	4a4e      	ldr	r2, [pc, #312]	; (8001bf0 <HAL_DCMI_MspInit+0x164>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6353      	str	r3, [r2, #52]	; 0x34
 8001abc:	4b4c      	ldr	r3, [pc, #304]	; (8001bf0 <HAL_DCMI_MspInit+0x164>)
 8001abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	623b      	str	r3, [r7, #32]
 8001ac6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ac8:	4b49      	ldr	r3, [pc, #292]	; (8001bf0 <HAL_DCMI_MspInit+0x164>)
 8001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001acc:	4a48      	ldr	r2, [pc, #288]	; (8001bf0 <HAL_DCMI_MspInit+0x164>)
 8001ace:	f043 0310 	orr.w	r3, r3, #16
 8001ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad4:	4b46      	ldr	r3, [pc, #280]	; (8001bf0 <HAL_DCMI_MspInit+0x164>)
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	61fb      	str	r3, [r7, #28]
 8001ade:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae0:	4b43      	ldr	r3, [pc, #268]	; (8001bf0 <HAL_DCMI_MspInit+0x164>)
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	4a42      	ldr	r2, [pc, #264]	; (8001bf0 <HAL_DCMI_MspInit+0x164>)
 8001ae6:	f043 0308 	orr.w	r3, r3, #8
 8001aea:	6313      	str	r3, [r2, #48]	; 0x30
 8001aec:	4b40      	ldr	r3, [pc, #256]	; (8001bf0 <HAL_DCMI_MspInit+0x164>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001af8:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <HAL_DCMI_MspInit+0x164>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	4a3c      	ldr	r2, [pc, #240]	; (8001bf0 <HAL_DCMI_MspInit+0x164>)
 8001afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b02:	6313      	str	r3, [r2, #48]	; 0x30
 8001b04:	4b3a      	ldr	r3, [pc, #232]	; (8001bf0 <HAL_DCMI_MspInit+0x164>)
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b10:	4b37      	ldr	r3, [pc, #220]	; (8001bf0 <HAL_DCMI_MspInit+0x164>)
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	4a36      	ldr	r2, [pc, #216]	; (8001bf0 <HAL_DCMI_MspInit+0x164>)
 8001b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1c:	4b34      	ldr	r3, [pc, #208]	; (8001bf0 <HAL_DCMI_MspInit+0x164>)
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b28:	4b31      	ldr	r3, [pc, #196]	; (8001bf0 <HAL_DCMI_MspInit+0x164>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	4a30      	ldr	r2, [pc, #192]	; (8001bf0 <HAL_DCMI_MspInit+0x164>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6313      	str	r3, [r2, #48]	; 0x30
 8001b34:	4b2e      	ldr	r3, [pc, #184]	; (8001bf0 <HAL_DCMI_MspInit+0x164>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001b40:	2360      	movs	r3, #96	; 0x60
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b50:	230d      	movs	r3, #13
 8001b52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4826      	ldr	r0, [pc, #152]	; (8001bf4 <HAL_DCMI_MspInit+0x168>)
 8001b5c:	f001 ff92 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001b60:	2308      	movs	r3, #8
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b70:	230d      	movs	r3, #13
 8001b72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b78:	4619      	mov	r1, r3
 8001b7a:	481f      	ldr	r0, [pc, #124]	; (8001bf8 <HAL_DCMI_MspInit+0x16c>)
 8001b7c:	f001 ff82 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001b80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b92:	230d      	movs	r3, #13
 8001b94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4817      	ldr	r0, [pc, #92]	; (8001bfc <HAL_DCMI_MspInit+0x170>)
 8001b9e:	f001 ff71 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001ba2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001bb4:	230d      	movs	r3, #13
 8001bb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4810      	ldr	r0, [pc, #64]	; (8001c00 <HAL_DCMI_MspInit+0x174>)
 8001bc0:	f001 ff60 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001bc4:	2350      	movs	r3, #80	; 0x50
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001bd4:	230d      	movs	r3, #13
 8001bd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4809      	ldr	r0, [pc, #36]	; (8001c04 <HAL_DCMI_MspInit+0x178>)
 8001be0:	f001 ff50 	bl	8003a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001be4:	bf00      	nop
 8001be6:	3738      	adds	r7, #56	; 0x38
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	50050000 	.word	0x50050000
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40020c00 	.word	0x40020c00
 8001bfc:	40021800 	.word	0x40021800
 8001c00:	40021c00 	.word	0x40021c00
 8001c04:	40020000 	.word	0x40020000

08001c08 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <HAL_DMA2D_MspInit+0x44>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d113      	bne.n	8001c42 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <HAL_DMA2D_MspInit+0x48>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a0c      	ldr	r2, [pc, #48]	; (8001c50 <HAL_DMA2D_MspInit+0x48>)
 8001c20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <HAL_DMA2D_MspInit+0x48>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2100      	movs	r1, #0
 8001c36:	205a      	movs	r0, #90	; 0x5a
 8001c38:	f001 fbaa 	bl	8003390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001c3c:	205a      	movs	r0, #90	; 0x5a
 8001c3e:	f001 fbc3 	bl	80033c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	4002b000 	.word	0x4002b000
 8001c50:	40023800 	.word	0x40023800

08001c54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b0aa      	sub	sp, #168	; 0xa8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c6c:	f107 0310 	add.w	r3, r7, #16
 8001c70:	2284      	movs	r2, #132	; 0x84
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f008 f8ff 	bl	8009e78 <memset>
  if(hi2c->Instance==I2C3)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a22      	ldr	r2, [pc, #136]	; (8001d08 <HAL_I2C_MspInit+0xb4>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d13c      	bne.n	8001cfe <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001c84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c88:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c8e:	f107 0310 	add.w	r3, r7, #16
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 fa82 	bl	800519c <HAL_RCCEx_PeriphCLKConfig>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001c9e:	f7ff fe49 	bl	8001934 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <HAL_I2C_MspInit+0xb8>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a19      	ldr	r2, [pc, #100]	; (8001d0c <HAL_I2C_MspInit+0xb8>)
 8001ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <HAL_I2C_MspInit+0xb8>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001cba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001cbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cc2:	2312      	movs	r3, #18
 8001cc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cd4:	2304      	movs	r3, #4
 8001cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cda:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001cde:	4619      	mov	r1, r3
 8001ce0:	480b      	ldr	r0, [pc, #44]	; (8001d10 <HAL_I2C_MspInit+0xbc>)
 8001ce2:	f001 fecf 	bl	8003a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <HAL_I2C_MspInit+0xb8>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	4a08      	ldr	r2, [pc, #32]	; (8001d0c <HAL_I2C_MspInit+0xb8>)
 8001cec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_I2C_MspInit+0xb8>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001cfe:	bf00      	nop
 8001d00:	37a8      	adds	r7, #168	; 0xa8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40005c00 	.word	0x40005c00
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40021c00 	.word	0x40021c00

08001d14 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08e      	sub	sp, #56	; 0x38
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a55      	ldr	r2, [pc, #340]	; (8001e88 <HAL_LTDC_MspInit+0x174>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	f040 80a3 	bne.w	8001e7e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001d38:	4b54      	ldr	r3, [pc, #336]	; (8001e8c <HAL_LTDC_MspInit+0x178>)
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3c:	4a53      	ldr	r2, [pc, #332]	; (8001e8c <HAL_LTDC_MspInit+0x178>)
 8001d3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d42:	6453      	str	r3, [r2, #68]	; 0x44
 8001d44:	4b51      	ldr	r3, [pc, #324]	; (8001e8c <HAL_LTDC_MspInit+0x178>)
 8001d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d4c:	623b      	str	r3, [r7, #32]
 8001d4e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d50:	4b4e      	ldr	r3, [pc, #312]	; (8001e8c <HAL_LTDC_MspInit+0x178>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	4a4d      	ldr	r2, [pc, #308]	; (8001e8c <HAL_LTDC_MspInit+0x178>)
 8001d56:	f043 0310 	orr.w	r3, r3, #16
 8001d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5c:	4b4b      	ldr	r3, [pc, #300]	; (8001e8c <HAL_LTDC_MspInit+0x178>)
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d60:	f003 0310 	and.w	r3, r3, #16
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001d68:	4b48      	ldr	r3, [pc, #288]	; (8001e8c <HAL_LTDC_MspInit+0x178>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	4a47      	ldr	r2, [pc, #284]	; (8001e8c <HAL_LTDC_MspInit+0x178>)
 8001d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d72:	6313      	str	r3, [r2, #48]	; 0x30
 8001d74:	4b45      	ldr	r3, [pc, #276]	; (8001e8c <HAL_LTDC_MspInit+0x178>)
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d7c:	61bb      	str	r3, [r7, #24]
 8001d7e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001d80:	4b42      	ldr	r3, [pc, #264]	; (8001e8c <HAL_LTDC_MspInit+0x178>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	4a41      	ldr	r2, [pc, #260]	; (8001e8c <HAL_LTDC_MspInit+0x178>)
 8001d86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8c:	4b3f      	ldr	r3, [pc, #252]	; (8001e8c <HAL_LTDC_MspInit+0x178>)
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d98:	4b3c      	ldr	r3, [pc, #240]	; (8001e8c <HAL_LTDC_MspInit+0x178>)
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9c:	4a3b      	ldr	r2, [pc, #236]	; (8001e8c <HAL_LTDC_MspInit+0x178>)
 8001d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001da2:	6313      	str	r3, [r2, #48]	; 0x30
 8001da4:	4b39      	ldr	r3, [pc, #228]	; (8001e8c <HAL_LTDC_MspInit+0x178>)
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001db0:	4b36      	ldr	r3, [pc, #216]	; (8001e8c <HAL_LTDC_MspInit+0x178>)
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	4a35      	ldr	r2, [pc, #212]	; (8001e8c <HAL_LTDC_MspInit+0x178>)
 8001db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dba:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbc:	4b33      	ldr	r3, [pc, #204]	; (8001e8c <HAL_LTDC_MspInit+0x178>)
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001dc8:	2310      	movs	r3, #16
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dd8:	230e      	movs	r3, #14
 8001dda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de0:	4619      	mov	r1, r3
 8001de2:	482b      	ldr	r0, [pc, #172]	; (8001e90 <HAL_LTDC_MspInit+0x17c>)
 8001de4:	f001 fe4e 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001de8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dee:	2302      	movs	r3, #2
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df6:	2300      	movs	r3, #0
 8001df8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dfa:	230e      	movs	r3, #14
 8001dfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e02:	4619      	mov	r1, r3
 8001e04:	4823      	ldr	r0, [pc, #140]	; (8001e94 <HAL_LTDC_MspInit+0x180>)
 8001e06:	f001 fe3d 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001e0a:	23f7      	movs	r3, #247	; 0xf7
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e16:	2300      	movs	r3, #0
 8001e18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e1a:	230e      	movs	r3, #14
 8001e1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e22:	4619      	mov	r1, r3
 8001e24:	481c      	ldr	r0, [pc, #112]	; (8001e98 <HAL_LTDC_MspInit+0x184>)
 8001e26:	f001 fe2d 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e3c:	2309      	movs	r3, #9
 8001e3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e44:	4619      	mov	r1, r3
 8001e46:	4815      	ldr	r0, [pc, #84]	; (8001e9c <HAL_LTDC_MspInit+0x188>)
 8001e48:	f001 fe1c 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001e4c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e5e:	230e      	movs	r3, #14
 8001e60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e66:	4619      	mov	r1, r3
 8001e68:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <HAL_LTDC_MspInit+0x18c>)
 8001e6a:	f001 fe0b 	bl	8003a84 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	2058      	movs	r0, #88	; 0x58
 8001e74:	f001 fa8c 	bl	8003390 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001e78:	2058      	movs	r0, #88	; 0x58
 8001e7a:	f001 faa5 	bl	80033c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001e7e:	bf00      	nop
 8001e80:	3738      	adds	r7, #56	; 0x38
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40016800 	.word	0x40016800
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40022400 	.word	0x40022400
 8001e98:	40022800 	.word	0x40022800
 8001e9c:	40021800 	.word	0x40021800
 8001ea0:	40022000 	.word	0x40022000

08001ea4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b0a4      	sub	sp, #144	; 0x90
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eac:	f107 030c 	add.w	r3, r7, #12
 8001eb0:	2284      	movs	r2, #132	; 0x84
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f007 ffdf 	bl	8009e78 <memset>
  if(hrtc->Instance==RTC)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a0e      	ldr	r2, [pc, #56]	; (8001ef8 <HAL_RTC_MspInit+0x54>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d114      	bne.n	8001eee <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ec4:	2320      	movs	r3, #32
 8001ec6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ec8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ece:	f107 030c 	add.w	r3, r7, #12
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f003 f962 	bl	800519c <HAL_RCCEx_PeriphCLKConfig>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001ede:	f7ff fd29 	bl	8001934 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_RTC_MspInit+0x58>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee6:	4a05      	ldr	r2, [pc, #20]	; (8001efc <HAL_RTC_MspInit+0x58>)
 8001ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eec:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001eee:	bf00      	nop
 8001ef0:	3790      	adds	r7, #144	; 0x90
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40002800 	.word	0x40002800
 8001efc:	40023800 	.word	0x40023800

08001f00 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b0aa      	sub	sp, #168	; 0xa8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f18:	f107 0310 	add.w	r3, r7, #16
 8001f1c:	2284      	movs	r2, #132	; 0x84
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f007 ffa9 	bl	8009e78 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8001f2e:	d143      	bne.n	8001fb8 <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8001f30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f34:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8001f36:	2364      	movs	r3, #100	; 0x64
 8001f38:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001f42:	2302      	movs	r3, #2
 8001f44:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001f46:	2301      	movs	r3, #1
 8001f48:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f4a:	f107 0310 	add.w	r3, r7, #16
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f003 f924 	bl	800519c <HAL_RCCEx_PeriphCLKConfig>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8001f5a:	f7ff fceb 	bl	8001934 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8001f5e:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f68:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f76:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a11      	ldr	r2, [pc, #68]	; (8001fc0 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f7c:	f043 0308 	orr.w	r3, r3, #8
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <HAL_SPDIFRX_MspInit+0xc0>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001fac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4804      	ldr	r0, [pc, #16]	; (8001fc4 <HAL_SPDIFRX_MspInit+0xc4>)
 8001fb4:	f001 fd66 	bl	8003a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8001fb8:	bf00      	nop
 8001fba:	37a8      	adds	r7, #168	; 0xa8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020c00 	.word	0x40020c00

08001fc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	; 0x28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a25      	ldr	r2, [pc, #148]	; (800207c <HAL_SPI_MspInit+0xb4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d144      	bne.n	8002074 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fea:	4b25      	ldr	r3, [pc, #148]	; (8002080 <HAL_SPI_MspInit+0xb8>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	4a24      	ldr	r2, [pc, #144]	; (8002080 <HAL_SPI_MspInit+0xb8>)
 8001ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff6:	4b22      	ldr	r3, [pc, #136]	; (8002080 <HAL_SPI_MspInit+0xb8>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002002:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <HAL_SPI_MspInit+0xb8>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	4a1e      	ldr	r2, [pc, #120]	; (8002080 <HAL_SPI_MspInit+0xb8>)
 8002008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200c:	6313      	str	r3, [r2, #48]	; 0x30
 800200e:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <HAL_SPI_MspInit+0xb8>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201a:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_SPI_MspInit+0xb8>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a18      	ldr	r2, [pc, #96]	; (8002080 <HAL_SPI_MspInit+0xb8>)
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_SPI_MspInit+0xb8>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002032:	2302      	movs	r3, #2
 8002034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2300      	movs	r3, #0
 8002040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002042:	2305      	movs	r3, #5
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002046:	f107 0314 	add.w	r3, r7, #20
 800204a:	4619      	mov	r1, r3
 800204c:	480d      	ldr	r0, [pc, #52]	; (8002084 <HAL_SPI_MspInit+0xbc>)
 800204e:	f001 fd19 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002052:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002060:	2300      	movs	r3, #0
 8002062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002064:	2305      	movs	r3, #5
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	4619      	mov	r1, r3
 800206e:	4806      	ldr	r0, [pc, #24]	; (8002088 <HAL_SPI_MspInit+0xc0>)
 8002070:	f001 fd08 	bl	8003a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002074:	bf00      	nop
 8002076:	3728      	adds	r7, #40	; 0x28
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40003800 	.word	0x40003800
 8002080:	40023800 	.word	0x40023800
 8002084:	40022000 	.word	0x40022000
 8002088:	40020400 	.word	0x40020400

0800208c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	; 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a2e      	ldr	r2, [pc, #184]	; (8002154 <HAL_TIM_Base_MspInit+0xc8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d10c      	bne.n	80020b8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800209e:	4b2e      	ldr	r3, [pc, #184]	; (8002158 <HAL_TIM_Base_MspInit+0xcc>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	4a2d      	ldr	r2, [pc, #180]	; (8002158 <HAL_TIM_Base_MspInit+0xcc>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6453      	str	r3, [r2, #68]	; 0x44
 80020aa:	4b2b      	ldr	r3, [pc, #172]	; (8002158 <HAL_TIM_Base_MspInit+0xcc>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	61fb      	str	r3, [r7, #28]
 80020b4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80020b6:	e046      	b.n	8002146 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c0:	d10c      	bne.n	80020dc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020c2:	4b25      	ldr	r3, [pc, #148]	; (8002158 <HAL_TIM_Base_MspInit+0xcc>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	4a24      	ldr	r2, [pc, #144]	; (8002158 <HAL_TIM_Base_MspInit+0xcc>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6413      	str	r3, [r2, #64]	; 0x40
 80020ce:	4b22      	ldr	r3, [pc, #136]	; (8002158 <HAL_TIM_Base_MspInit+0xcc>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	61bb      	str	r3, [r7, #24]
 80020d8:	69bb      	ldr	r3, [r7, #24]
}
 80020da:	e034      	b.n	8002146 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a1e      	ldr	r2, [pc, #120]	; (800215c <HAL_TIM_Base_MspInit+0xd0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d10c      	bne.n	8002100 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020e6:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <HAL_TIM_Base_MspInit+0xcc>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	4a1b      	ldr	r2, [pc, #108]	; (8002158 <HAL_TIM_Base_MspInit+0xcc>)
 80020ec:	f043 0302 	orr.w	r3, r3, #2
 80020f0:	6413      	str	r3, [r2, #64]	; 0x40
 80020f2:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_TIM_Base_MspInit+0xcc>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	697b      	ldr	r3, [r7, #20]
}
 80020fe:	e022      	b.n	8002146 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a16      	ldr	r2, [pc, #88]	; (8002160 <HAL_TIM_Base_MspInit+0xd4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d10c      	bne.n	8002124 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800210a:	4b13      	ldr	r3, [pc, #76]	; (8002158 <HAL_TIM_Base_MspInit+0xcc>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	4a12      	ldr	r2, [pc, #72]	; (8002158 <HAL_TIM_Base_MspInit+0xcc>)
 8002110:	f043 0308 	orr.w	r3, r3, #8
 8002114:	6413      	str	r3, [r2, #64]	; 0x40
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <HAL_TIM_Base_MspInit+0xcc>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	693b      	ldr	r3, [r7, #16]
}
 8002122:	e010      	b.n	8002146 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0e      	ldr	r2, [pc, #56]	; (8002164 <HAL_TIM_Base_MspInit+0xd8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d10b      	bne.n	8002146 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_TIM_Base_MspInit+0xcc>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	4a09      	ldr	r2, [pc, #36]	; (8002158 <HAL_TIM_Base_MspInit+0xcc>)
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	6453      	str	r3, [r2, #68]	; 0x44
 800213a:	4b07      	ldr	r3, [pc, #28]	; (8002158 <HAL_TIM_Base_MspInit+0xcc>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
}
 8002146:	bf00      	nop
 8002148:	3724      	adds	r7, #36	; 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40010000 	.word	0x40010000
 8002158:	40023800 	.word	0x40023800
 800215c:	40000400 	.word	0x40000400
 8002160:	40000c00 	.word	0x40000c00
 8002164:	40010400 	.word	0x40010400

08002168 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a11      	ldr	r2, [pc, #68]	; (80021cc <HAL_TIM_MspPostInit+0x64>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d11b      	bne.n	80021c2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <HAL_TIM_MspPostInit+0x68>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a10      	ldr	r2, [pc, #64]	; (80021d0 <HAL_TIM_MspPostInit+0x68>)
 8002190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <HAL_TIM_MspPostInit+0x68>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PI0     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80021a2:	2301      	movs	r3, #1
 80021a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80021b2:	2302      	movs	r3, #2
 80021b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80021b6:	f107 030c 	add.w	r3, r7, #12
 80021ba:	4619      	mov	r1, r3
 80021bc:	4805      	ldr	r0, [pc, #20]	; (80021d4 <HAL_TIM_MspPostInit+0x6c>)
 80021be:	f001 fc61 	bl	8003a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80021c2:	bf00      	nop
 80021c4:	3720      	adds	r7, #32
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40000c00 	.word	0x40000c00
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40022000 	.word	0x40022000

080021d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b0ac      	sub	sp, #176	; 0xb0
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021f0:	f107 0318 	add.w	r3, r7, #24
 80021f4:	2284      	movs	r2, #132	; 0x84
 80021f6:	2100      	movs	r1, #0
 80021f8:	4618      	mov	r0, r3
 80021fa:	f007 fe3d 	bl	8009e78 <memset>
  if(huart->Instance==USART1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a32      	ldr	r2, [pc, #200]	; (80022cc <HAL_UART_MspInit+0xf4>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d15c      	bne.n	80022c2 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002208:	2340      	movs	r3, #64	; 0x40
 800220a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800220c:	2300      	movs	r3, #0
 800220e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002210:	f107 0318 	add.w	r3, r7, #24
 8002214:	4618      	mov	r0, r3
 8002216:	f002 ffc1 	bl	800519c <HAL_RCCEx_PeriphCLKConfig>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002220:	f7ff fb88 	bl	8001934 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002224:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <HAL_UART_MspInit+0xf8>)
 8002226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002228:	4a29      	ldr	r2, [pc, #164]	; (80022d0 <HAL_UART_MspInit+0xf8>)
 800222a:	f043 0310 	orr.w	r3, r3, #16
 800222e:	6453      	str	r3, [r2, #68]	; 0x44
 8002230:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <HAL_UART_MspInit+0xf8>)
 8002232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002234:	f003 0310 	and.w	r3, r3, #16
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800223c:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <HAL_UART_MspInit+0xf8>)
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	4a23      	ldr	r2, [pc, #140]	; (80022d0 <HAL_UART_MspInit+0xf8>)
 8002242:	f043 0302 	orr.w	r3, r3, #2
 8002246:	6313      	str	r3, [r2, #48]	; 0x30
 8002248:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <HAL_UART_MspInit+0xf8>)
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002254:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <HAL_UART_MspInit+0xf8>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <HAL_UART_MspInit+0xf8>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6313      	str	r3, [r2, #48]	; 0x30
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <HAL_UART_MspInit+0xf8>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	2300      	movs	r3, #0
 8002280:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002284:	2307      	movs	r3, #7
 8002286:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800228a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800228e:	4619      	mov	r1, r3
 8002290:	4810      	ldr	r0, [pc, #64]	; (80022d4 <HAL_UART_MspInit+0xfc>)
 8002292:	f001 fbf7 	bl	8003a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002296:	f44f 7300 	mov.w	r3, #512	; 0x200
 800229a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229e:	2302      	movs	r3, #2
 80022a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022b0:	2307      	movs	r3, #7
 80022b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80022b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022ba:	4619      	mov	r1, r3
 80022bc:	4806      	ldr	r0, [pc, #24]	; (80022d8 <HAL_UART_MspInit+0x100>)
 80022be:	f001 fbe1 	bl	8003a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022c2:	bf00      	nop
 80022c4:	37b0      	adds	r7, #176	; 0xb0
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40011000 	.word	0x40011000
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40020400 	.word	0x40020400
 80022d8:	40020000 	.word	0x40020000

080022dc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80022f0:	4b3a      	ldr	r3, [pc, #232]	; (80023dc <HAL_FMC_MspInit+0x100>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d16d      	bne.n	80023d4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80022f8:	4b38      	ldr	r3, [pc, #224]	; (80023dc <HAL_FMC_MspInit+0x100>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80022fe:	4b38      	ldr	r3, [pc, #224]	; (80023e0 <HAL_FMC_MspInit+0x104>)
 8002300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002302:	4a37      	ldr	r2, [pc, #220]	; (80023e0 <HAL_FMC_MspInit+0x104>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6393      	str	r3, [r2, #56]	; 0x38
 800230a:	4b35      	ldr	r3, [pc, #212]	; (80023e0 <HAL_FMC_MspInit+0x104>)
 800230c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002316:	f64f 7383 	movw	r3, #65411	; 0xff83
 800231a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	2302      	movs	r3, #2
 800231e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002324:	2303      	movs	r3, #3
 8002326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002328:	230c      	movs	r3, #12
 800232a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800232c:	1d3b      	adds	r3, r7, #4
 800232e:	4619      	mov	r1, r3
 8002330:	482c      	ldr	r0, [pc, #176]	; (80023e4 <HAL_FMC_MspInit+0x108>)
 8002332:	f001 fba7 	bl	8003a84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002336:	f248 1333 	movw	r3, #33075	; 0x8133
 800233a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002344:	2303      	movs	r3, #3
 8002346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002348:	230c      	movs	r3, #12
 800234a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800234c:	1d3b      	adds	r3, r7, #4
 800234e:	4619      	mov	r1, r3
 8002350:	4825      	ldr	r0, [pc, #148]	; (80023e8 <HAL_FMC_MspInit+0x10c>)
 8002352:	f001 fb97 	bl	8003a84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002356:	f24c 7303 	movw	r3, #50947	; 0xc703
 800235a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002364:	2303      	movs	r3, #3
 8002366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002368:	230c      	movs	r3, #12
 800236a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800236c:	1d3b      	adds	r3, r7, #4
 800236e:	4619      	mov	r1, r3
 8002370:	481e      	ldr	r0, [pc, #120]	; (80023ec <HAL_FMC_MspInit+0x110>)
 8002372:	f001 fb87 	bl	8003a84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002376:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800237a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237c:	2302      	movs	r3, #2
 800237e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002384:	2303      	movs	r3, #3
 8002386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002388:	230c      	movs	r3, #12
 800238a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	4619      	mov	r1, r3
 8002390:	4817      	ldr	r0, [pc, #92]	; (80023f0 <HAL_FMC_MspInit+0x114>)
 8002392:	f001 fb77 	bl	8003a84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002396:	2328      	movs	r3, #40	; 0x28
 8002398:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a2:	2303      	movs	r3, #3
 80023a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023a6:	230c      	movs	r3, #12
 80023a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	4619      	mov	r1, r3
 80023ae:	4811      	ldr	r0, [pc, #68]	; (80023f4 <HAL_FMC_MspInit+0x118>)
 80023b0:	f001 fb68 	bl	8003a84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80023b4:	2308      	movs	r3, #8
 80023b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	2302      	movs	r3, #2
 80023ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c0:	2303      	movs	r3, #3
 80023c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023c4:	230c      	movs	r3, #12
 80023c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	4619      	mov	r1, r3
 80023cc:	480a      	ldr	r0, [pc, #40]	; (80023f8 <HAL_FMC_MspInit+0x11c>)
 80023ce:	f001 fb59 	bl	8003a84 <HAL_GPIO_Init>
 80023d2:	e000      	b.n	80023d6 <HAL_FMC_MspInit+0xfa>
    return;
 80023d4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20000690 	.word	0x20000690
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40021800 	.word	0x40021800
 80023ec:	40020c00 	.word	0x40020c00
 80023f0:	40021400 	.word	0x40021400
 80023f4:	40021c00 	.word	0x40021c00
 80023f8:	40020800 	.word	0x40020800

080023fc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002404:	f7ff ff6a 	bl	80022dc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	; 0x28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a2b      	ldr	r2, [pc, #172]	; (80024cc <HAL_SAI_MspInit+0xbc>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d124      	bne.n	800246c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002422:	4b2b      	ldr	r3, [pc, #172]	; (80024d0 <HAL_SAI_MspInit+0xc0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10b      	bne.n	8002442 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800242a:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <HAL_SAI_MspInit+0xc4>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	4a29      	ldr	r2, [pc, #164]	; (80024d4 <HAL_SAI_MspInit+0xc4>)
 8002430:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002434:	6453      	str	r3, [r2, #68]	; 0x44
 8002436:	4b27      	ldr	r3, [pc, #156]	; (80024d4 <HAL_SAI_MspInit+0xc4>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002442:	4b23      	ldr	r3, [pc, #140]	; (80024d0 <HAL_SAI_MspInit+0xc0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	3301      	adds	r3, #1
 8002448:	4a21      	ldr	r2, [pc, #132]	; (80024d0 <HAL_SAI_MspInit+0xc0>)
 800244a:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800244c:	23f0      	movs	r3, #240	; 0xf0
 800244e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	2302      	movs	r3, #2
 8002452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002458:	2300      	movs	r3, #0
 800245a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800245c:	230a      	movs	r3, #10
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	4619      	mov	r1, r3
 8002466:	481c      	ldr	r0, [pc, #112]	; (80024d8 <HAL_SAI_MspInit+0xc8>)
 8002468:	f001 fb0c 	bl	8003a84 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a1a      	ldr	r2, [pc, #104]	; (80024dc <HAL_SAI_MspInit+0xcc>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d125      	bne.n	80024c2 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002476:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <HAL_SAI_MspInit+0xc0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10b      	bne.n	8002496 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800247e:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <HAL_SAI_MspInit+0xc4>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	4a14      	ldr	r2, [pc, #80]	; (80024d4 <HAL_SAI_MspInit+0xc4>)
 8002484:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002488:	6453      	str	r3, [r2, #68]	; 0x44
 800248a:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_SAI_MspInit+0xc4>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002496:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <HAL_SAI_MspInit+0xc0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3301      	adds	r3, #1
 800249c:	4a0c      	ldr	r2, [pc, #48]	; (80024d0 <HAL_SAI_MspInit+0xc0>)
 800249e:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80024a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80024b2:	230a      	movs	r3, #10
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80024b6:	f107 0314 	add.w	r3, r7, #20
 80024ba:	4619      	mov	r1, r3
 80024bc:	4808      	ldr	r0, [pc, #32]	; (80024e0 <HAL_SAI_MspInit+0xd0>)
 80024be:	f001 fae1 	bl	8003a84 <HAL_GPIO_Init>

    }
}
 80024c2:	bf00      	nop
 80024c4:	3728      	adds	r7, #40	; 0x28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40015c04 	.word	0x40015c04
 80024d0:	20000694 	.word	0x20000694
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40022000 	.word	0x40022000
 80024dc:	40015c24 	.word	0x40015c24
 80024e0:	40021800 	.word	0x40021800

080024e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08c      	sub	sp, #48	; 0x30
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80024f4:	2200      	movs	r2, #0
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	2036      	movs	r0, #54	; 0x36
 80024fa:	f000 ff49 	bl	8003390 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024fe:	2036      	movs	r0, #54	; 0x36
 8002500:	f000 ff62 	bl	80033c8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002504:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <HAL_InitTick+0xa0>)
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	4a1e      	ldr	r2, [pc, #120]	; (8002584 <HAL_InitTick+0xa0>)
 800250a:	f043 0310 	orr.w	r3, r3, #16
 800250e:	6413      	str	r3, [r2, #64]	; 0x40
 8002510:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <HAL_InitTick+0xa0>)
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800251c:	f107 0210 	add.w	r2, r7, #16
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	4611      	mov	r1, r2
 8002526:	4618      	mov	r0, r3
 8002528:	f002 fe06 	bl	8005138 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800252c:	f002 fddc 	bl	80050e8 <HAL_RCC_GetPCLK1Freq>
 8002530:	4603      	mov	r3, r0
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002538:	4a13      	ldr	r2, [pc, #76]	; (8002588 <HAL_InitTick+0xa4>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	0c9b      	lsrs	r3, r3, #18
 8002540:	3b01      	subs	r3, #1
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002544:	4b11      	ldr	r3, [pc, #68]	; (800258c <HAL_InitTick+0xa8>)
 8002546:	4a12      	ldr	r2, [pc, #72]	; (8002590 <HAL_InitTick+0xac>)
 8002548:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800254a:	4b10      	ldr	r3, [pc, #64]	; (800258c <HAL_InitTick+0xa8>)
 800254c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002550:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002552:	4a0e      	ldr	r2, [pc, #56]	; (800258c <HAL_InitTick+0xa8>)
 8002554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002556:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002558:	4b0c      	ldr	r3, [pc, #48]	; (800258c <HAL_InitTick+0xa8>)
 800255a:	2200      	movs	r2, #0
 800255c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255e:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_InitTick+0xa8>)
 8002560:	2200      	movs	r2, #0
 8002562:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002564:	4809      	ldr	r0, [pc, #36]	; (800258c <HAL_InitTick+0xa8>)
 8002566:	f004 fa16 	bl	8006996 <HAL_TIM_Base_Init>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d104      	bne.n	800257a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002570:	4806      	ldr	r0, [pc, #24]	; (800258c <HAL_InitTick+0xa8>)
 8002572:	f004 fa67 	bl	8006a44 <HAL_TIM_Base_Start_IT>
 8002576:	4603      	mov	r3, r0
 8002578:	e000      	b.n	800257c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
}
 800257c:	4618      	mov	r0, r3
 800257e:	3730      	adds	r7, #48	; 0x30
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40023800 	.word	0x40023800
 8002588:	431bde83 	.word	0x431bde83
 800258c:	20000698 	.word	0x20000698
 8002590:	40001000 	.word	0x40001000

08002594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002598:	e7fe      	b.n	8002598 <NMI_Handler+0x4>

0800259a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800259e:	e7fe      	b.n	800259e <HardFault_Handler+0x4>

080025a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025a4:	e7fe      	b.n	80025a4 <MemManage_Handler+0x4>

080025a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025a6:	b480      	push	{r7}
 80025a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025aa:	e7fe      	b.n	80025aa <BusFault_Handler+0x4>

080025ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025b0:	e7fe      	b.n	80025b0 <UsageFault_Handler+0x4>

080025b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025b2:	b480      	push	{r7}
 80025b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON0_Pin);
 80025ee:	2004      	movs	r0, #4
 80025f0:	f001 fc0e 	bl	8003e10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 80025fc:	2008      	movs	r0, #8
 80025fe:	f001 fc07 	bl	8003e10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800260c:	4802      	ldr	r0, [pc, #8]	; (8002618 <ADC_IRQHandler+0x10>)
 800260e:	f000 fa7b 	bl	8002b08 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000094 	.word	0x20000094

0800261c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 8002620:	2040      	movs	r0, #64	; 0x40
 8002622:	f001 fbf5 	bl	8003e10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 8002626:	2080      	movs	r0, #128	; 0x80
 8002628:	f001 fbf2 	bl	8003e10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800262c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002630:	f001 fbee 	bl	8003e10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}

08002638 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800263c:	4802      	ldr	r0, [pc, #8]	; (8002648 <TIM6_DAC_IRQHandler+0x10>)
 800263e:	f004 fc22 	bl	8006e86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000698 	.word	0x20000698

0800264c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002650:	4802      	ldr	r0, [pc, #8]	; (800265c <LTDC_IRQHandler+0x10>)
 8002652:	f001 fded 	bl	8004230 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	200001dc 	.word	0x200001dc

08002660 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <DMA2D_IRQHandler+0x10>)
 8002666:	f001 f86b 	bl	8003740 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000150 	.word	0x20000150

08002674 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
	return 1;
 8002678:	2301      	movs	r3, #1
}
 800267a:	4618      	mov	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <_kill>:

int _kill(int pid, int sig)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800268e:	f007 fba7 	bl	8009de0 <__errno>
 8002692:	4603      	mov	r3, r0
 8002694:	2216      	movs	r2, #22
 8002696:	601a      	str	r2, [r3, #0]
	return -1;
 8002698:	f04f 33ff 	mov.w	r3, #4294967295
}
 800269c:	4618      	mov	r0, r3
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <_exit>:

void _exit (int status)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026ac:	f04f 31ff 	mov.w	r1, #4294967295
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff ffe7 	bl	8002684 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026b6:	e7fe      	b.n	80026b6 <_exit+0x12>

080026b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	e00a      	b.n	80026e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026ca:	f3af 8000 	nop.w
 80026ce:	4601      	mov	r1, r0
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	60ba      	str	r2, [r7, #8]
 80026d6:	b2ca      	uxtb	r2, r1
 80026d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	3301      	adds	r3, #1
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	dbf0      	blt.n	80026ca <_read+0x12>
	}

return len;
 80026e8:	687b      	ldr	r3, [r7, #4]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b086      	sub	sp, #24
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	e009      	b.n	8002718 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	60ba      	str	r2, [r7, #8]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	3301      	adds	r3, #1
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	429a      	cmp	r2, r3
 800271e:	dbf1      	blt.n	8002704 <_write+0x12>
	}
	return len;
 8002720:	687b      	ldr	r3, [r7, #4]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <_close>:

int _close(int file)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
	return -1;
 8002732:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002752:	605a      	str	r2, [r3, #4]
	return 0;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <_isatty>:

int _isatty(int file)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
	return 1;
 800276a:	2301      	movs	r3, #1
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
	return 0;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800279c:	4a14      	ldr	r2, [pc, #80]	; (80027f0 <_sbrk+0x5c>)
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <_sbrk+0x60>)
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027a8:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <_sbrk+0x64>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d102      	bne.n	80027b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027b0:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <_sbrk+0x64>)
 80027b2:	4a12      	ldr	r2, [pc, #72]	; (80027fc <_sbrk+0x68>)
 80027b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027b6:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <_sbrk+0x64>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4413      	add	r3, r2
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d207      	bcs.n	80027d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027c4:	f007 fb0c 	bl	8009de0 <__errno>
 80027c8:	4603      	mov	r3, r0
 80027ca:	220c      	movs	r2, #12
 80027cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ce:	f04f 33ff 	mov.w	r3, #4294967295
 80027d2:	e009      	b.n	80027e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027d4:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <_sbrk+0x64>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027da:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <_sbrk+0x64>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	4a05      	ldr	r2, [pc, #20]	; (80027f8 <_sbrk+0x64>)
 80027e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027e6:	68fb      	ldr	r3, [r7, #12]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20050000 	.word	0x20050000
 80027f4:	00001000 	.word	0x00001000
 80027f8:	200006e4 	.word	0x200006e4
 80027fc:	20000858 	.word	0x20000858

08002800 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002804:	4b06      	ldr	r3, [pc, #24]	; (8002820 <SystemInit+0x20>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280a:	4a05      	ldr	r2, [pc, #20]	; (8002820 <SystemInit+0x20>)
 800280c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800285c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002828:	480d      	ldr	r0, [pc, #52]	; (8002860 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800282a:	490e      	ldr	r1, [pc, #56]	; (8002864 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800282c:	4a0e      	ldr	r2, [pc, #56]	; (8002868 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800282e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002830:	e002      	b.n	8002838 <LoopCopyDataInit>

08002832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002836:	3304      	adds	r3, #4

08002838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800283a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800283c:	d3f9      	bcc.n	8002832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800283e:	4a0b      	ldr	r2, [pc, #44]	; (800286c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002840:	4c0b      	ldr	r4, [pc, #44]	; (8002870 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002844:	e001      	b.n	800284a <LoopFillZerobss>

08002846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002848:	3204      	adds	r2, #4

0800284a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800284a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800284c:	d3fb      	bcc.n	8002846 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800284e:	f7ff ffd7 	bl	8002800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002852:	f007 fadd 	bl	8009e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002856:	f7fd fef3 	bl	8000640 <main>
  bx  lr    
 800285a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800285c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002864:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002868:	0800b370 	.word	0x0800b370
  ldr r2, =_sbss
 800286c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002870:	20000858 	.word	0x20000858

08002874 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002874:	e7fe      	b.n	8002874 <CAN1_RX0_IRQHandler>

08002876 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800287a:	2003      	movs	r0, #3
 800287c:	f000 fd7d 	bl	800337a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002880:	200f      	movs	r0, #15
 8002882:	f7ff fe2f 	bl	80024e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002886:	f7ff f85b 	bl	8001940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_IncTick+0x20>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <HAL_IncTick+0x24>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4413      	add	r3, r2
 80028a0:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <HAL_IncTick+0x24>)
 80028a2:	6013      	str	r3, [r2, #0]
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20000008 	.word	0x20000008
 80028b4:	200006e8 	.word	0x200006e8

080028b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return uwTick;
 80028bc:	4b03      	ldr	r3, [pc, #12]	; (80028cc <HAL_GetTick+0x14>)
 80028be:	681b      	ldr	r3, [r3, #0]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	200006e8 	.word	0x200006e8

080028d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e031      	b.n	800294a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d109      	bne.n	8002902 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff f84a 	bl	8001988 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	2b00      	cmp	r3, #0
 800290c:	d116      	bne.n	800293c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002912:	4b10      	ldr	r3, [pc, #64]	; (8002954 <HAL_ADC_Init+0x84>)
 8002914:	4013      	ands	r3, r2
 8002916:	f043 0202 	orr.w	r2, r3, #2
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fb7a 	bl	8003018 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f023 0303 	bic.w	r3, r3, #3
 8002932:	f043 0201 	orr.w	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	641a      	str	r2, [r3, #64]	; 0x40
 800293a:	e001      	b.n	8002940 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002948:	7bfb      	ldrb	r3, [r7, #15]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	ffffeefd 	.word	0xffffeefd

08002958 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_ADC_Start_IT+0x1a>
 800296e:	2302      	movs	r3, #2
 8002970:	e0b5      	b.n	8002ade <HAL_ADC_Start_IT+0x186>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b01      	cmp	r3, #1
 8002986:	d018      	beq.n	80029ba <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002998:	4b54      	ldr	r3, [pc, #336]	; (8002aec <HAL_ADC_Start_IT+0x194>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a54      	ldr	r2, [pc, #336]	; (8002af0 <HAL_ADC_Start_IT+0x198>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	0c9a      	lsrs	r2, r3, #18
 80029a4:	4613      	mov	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80029ac:	e002      	b.n	80029b4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f9      	bne.n	80029ae <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d17d      	bne.n	8002ac4 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029cc:	4b49      	ldr	r3, [pc, #292]	; (8002af4 <HAL_ADC_Start_IT+0x19c>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a02:	d106      	bne.n	8002a12 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a08:	f023 0206 	bic.w	r2, r3, #6
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	645a      	str	r2, [r3, #68]	; 0x44
 8002a10:	e002      	b.n	8002a18 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a28:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6859      	ldr	r1, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <HAL_ADC_Start_IT+0x1a0>)
 8002a36:	430b      	orrs	r3, r1
 8002a38:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002a3a:	4b30      	ldr	r3, [pc, #192]	; (8002afc <HAL_ADC_Start_IT+0x1a4>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 031f 	and.w	r3, r3, #31
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10f      	bne.n	8002a66 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d143      	bne.n	8002adc <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	e03a      	b.n	8002adc <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a25      	ldr	r2, [pc, #148]	; (8002b00 <HAL_ADC_Start_IT+0x1a8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d10e      	bne.n	8002a8e <HAL_ADC_Start_IT+0x136>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d107      	bne.n	8002a8e <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a8c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002a8e:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <HAL_ADC_Start_IT+0x1a4>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d120      	bne.n	8002adc <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a19      	ldr	r2, [pc, #100]	; (8002b04 <HAL_ADC_Start_IT+0x1ac>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d11b      	bne.n	8002adc <HAL_ADC_Start_IT+0x184>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d114      	bne.n	8002adc <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ac0:	609a      	str	r2, [r3, #8]
 8002ac2:	e00b      	b.n	8002adc <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	f043 0210 	orr.w	r2, r3, #16
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad4:	f043 0201 	orr.w	r2, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	20000000 	.word	0x20000000
 8002af0:	431bde83 	.word	0x431bde83
 8002af4:	fffff8fe 	.word	0xfffff8fe
 8002af8:	04000020 	.word	0x04000020
 8002afc:	40012300 	.word	0x40012300
 8002b00:	40012000 	.word	0x40012000
 8002b04:	40012200 	.word	0x40012200

08002b08 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	2300      	movs	r3, #0
 8002b16:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d049      	beq.n	8002bd2 <HAL_ADC_IRQHandler+0xca>
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d046      	beq.n	8002bd2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d105      	bne.n	8002b5c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d12b      	bne.n	8002bc2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d127      	bne.n	8002bc2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d006      	beq.n	8002b8e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d119      	bne.n	8002bc2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0220 	bic.w	r2, r2, #32
 8002b9c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d105      	bne.n	8002bc2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f043 0201 	orr.w	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7fd fd0e 	bl	80005e4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0212 	mvn.w	r2, #18
 8002bd0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d057      	beq.n	8002c98 <HAL_ADC_IRQHandler+0x190>
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d054      	beq.n	8002c98 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d105      	bne.n	8002c06 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d139      	bne.n	8002c88 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d006      	beq.n	8002c30 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d12b      	bne.n	8002c88 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d124      	bne.n	8002c88 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d11d      	bne.n	8002c88 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d119      	bne.n	8002c88 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c62:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d105      	bne.n	8002c88 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	f043 0201 	orr.w	r2, r3, #1
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fabf 	bl	800320c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f06f 020c 	mvn.w	r2, #12
 8002c96:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d017      	beq.n	8002cde <HAL_ADC_IRQHandler+0x1d6>
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d014      	beq.n	8002cde <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d10d      	bne.n	8002cde <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f837 	bl	8002d42 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0201 	mvn.w	r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f003 0320 	and.w	r3, r3, #32
 8002ce4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cec:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d015      	beq.n	8002d20 <HAL_ADC_IRQHandler+0x218>
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d012      	beq.n	8002d20 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	f043 0202 	orr.w	r2, r3, #2
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f06f 0220 	mvn.w	r2, #32
 8002d0e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f820 	bl	8002d56 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f06f 0220 	mvn.w	r2, #32
 8002d1e:	601a      	str	r2, [r3, #0]
  }
}
 8002d20:	bf00      	nop
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
	...

08002d6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x1c>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e136      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x28a>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b09      	cmp	r3, #9
 8002d96:	d93a      	bls.n	8002e0e <HAL_ADC_ConfigChannel+0xa2>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002da0:	d035      	beq.n	8002e0e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68d9      	ldr	r1, [r3, #12]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	4613      	mov	r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4413      	add	r3, r2
 8002db6:	3b1e      	subs	r3, #30
 8002db8:	2207      	movs	r2, #7
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43da      	mvns	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	400a      	ands	r2, r1
 8002dc6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a8d      	ldr	r2, [pc, #564]	; (8003004 <HAL_ADC_ConfigChannel+0x298>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d10a      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68d9      	ldr	r1, [r3, #12]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	061a      	lsls	r2, r3, #24
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002de6:	e035      	b.n	8002e54 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68d9      	ldr	r1, [r3, #12]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	4618      	mov	r0, r3
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	4403      	add	r3, r0
 8002e00:	3b1e      	subs	r3, #30
 8002e02:	409a      	lsls	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e0c:	e022      	b.n	8002e54 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6919      	ldr	r1, [r3, #16]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	4413      	add	r3, r2
 8002e22:	2207      	movs	r2, #7
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43da      	mvns	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	400a      	ands	r2, r1
 8002e30:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6919      	ldr	r1, [r3, #16]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	4618      	mov	r0, r3
 8002e44:	4603      	mov	r3, r0
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4403      	add	r3, r0
 8002e4a:	409a      	lsls	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b06      	cmp	r3, #6
 8002e5a:	d824      	bhi.n	8002ea6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3b05      	subs	r3, #5
 8002e6e:	221f      	movs	r2, #31
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43da      	mvns	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	400a      	ands	r2, r1
 8002e7c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	3b05      	subs	r3, #5
 8002e98:	fa00 f203 	lsl.w	r2, r0, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	635a      	str	r2, [r3, #52]	; 0x34
 8002ea4:	e04c      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b0c      	cmp	r3, #12
 8002eac:	d824      	bhi.n	8002ef8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3b23      	subs	r3, #35	; 0x23
 8002ec0:	221f      	movs	r2, #31
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	400a      	ands	r2, r1
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	4618      	mov	r0, r3
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3b23      	subs	r3, #35	; 0x23
 8002eea:	fa00 f203 	lsl.w	r2, r0, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ef6:	e023      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	3b41      	subs	r3, #65	; 0x41
 8002f0a:	221f      	movs	r2, #31
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43da      	mvns	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	400a      	ands	r2, r1
 8002f18:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	4618      	mov	r0, r3
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	3b41      	subs	r3, #65	; 0x41
 8002f34:	fa00 f203 	lsl.w	r2, r0, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a30      	ldr	r2, [pc, #192]	; (8003008 <HAL_ADC_ConfigChannel+0x29c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d10a      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x1f4>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f52:	d105      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002f54:	4b2d      	ldr	r3, [pc, #180]	; (800300c <HAL_ADC_ConfigChannel+0x2a0>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	4a2c      	ldr	r2, [pc, #176]	; (800300c <HAL_ADC_ConfigChannel+0x2a0>)
 8002f5a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002f5e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a28      	ldr	r2, [pc, #160]	; (8003008 <HAL_ADC_ConfigChannel+0x29c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d10f      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x21e>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b12      	cmp	r3, #18
 8002f70:	d10b      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002f72:	4b26      	ldr	r3, [pc, #152]	; (800300c <HAL_ADC_ConfigChannel+0x2a0>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	4a25      	ldr	r2, [pc, #148]	; (800300c <HAL_ADC_ConfigChannel+0x2a0>)
 8002f78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f7c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002f7e:	4b23      	ldr	r3, [pc, #140]	; (800300c <HAL_ADC_ConfigChannel+0x2a0>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4a22      	ldr	r2, [pc, #136]	; (800300c <HAL_ADC_ConfigChannel+0x2a0>)
 8002f84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f88:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1e      	ldr	r2, [pc, #120]	; (8003008 <HAL_ADC_ConfigChannel+0x29c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d12b      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x280>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a1a      	ldr	r2, [pc, #104]	; (8003004 <HAL_ADC_ConfigChannel+0x298>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d003      	beq.n	8002fa6 <HAL_ADC_ConfigChannel+0x23a>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b11      	cmp	r3, #17
 8002fa4:	d122      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002fa6:	4b19      	ldr	r3, [pc, #100]	; (800300c <HAL_ADC_ConfigChannel+0x2a0>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4a18      	ldr	r2, [pc, #96]	; (800300c <HAL_ADC_ConfigChannel+0x2a0>)
 8002fac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002fb0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002fb2:	4b16      	ldr	r3, [pc, #88]	; (800300c <HAL_ADC_ConfigChannel+0x2a0>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	4a15      	ldr	r2, [pc, #84]	; (800300c <HAL_ADC_ConfigChannel+0x2a0>)
 8002fb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fbc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a10      	ldr	r2, [pc, #64]	; (8003004 <HAL_ADC_ConfigChannel+0x298>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d111      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002fc8:	4b11      	ldr	r3, [pc, #68]	; (8003010 <HAL_ADC_ConfigChannel+0x2a4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a11      	ldr	r2, [pc, #68]	; (8003014 <HAL_ADC_ConfigChannel+0x2a8>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	0c9a      	lsrs	r2, r3, #18
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002fde:	e002      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f9      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	10000012 	.word	0x10000012
 8003008:	40012000 	.word	0x40012000
 800300c:	40012300 	.word	0x40012300
 8003010:	20000000 	.word	0x20000000
 8003014:	431bde83 	.word	0x431bde83

08003018 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003020:	4b78      	ldr	r3, [pc, #480]	; (8003204 <ADC_Init+0x1ec>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	4a77      	ldr	r2, [pc, #476]	; (8003204 <ADC_Init+0x1ec>)
 8003026:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800302a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800302c:	4b75      	ldr	r3, [pc, #468]	; (8003204 <ADC_Init+0x1ec>)
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	4973      	ldr	r1, [pc, #460]	; (8003204 <ADC_Init+0x1ec>)
 8003036:	4313      	orrs	r3, r2
 8003038:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003048:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6859      	ldr	r1, [r3, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	021a      	lsls	r2, r3, #8
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800306c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800308e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6899      	ldr	r1, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a6:	4a58      	ldr	r2, [pc, #352]	; (8003208 <ADC_Init+0x1f0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d022      	beq.n	80030f2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6899      	ldr	r1, [r3, #8]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6899      	ldr	r1, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	e00f      	b.n	8003112 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003100:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003110:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0202 	bic.w	r2, r2, #2
 8003120:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6899      	ldr	r1, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	005a      	lsls	r2, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3020 	ldrb.w	r3, [r3, #32]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d01b      	beq.n	8003178 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800314e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800315e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6859      	ldr	r1, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	3b01      	subs	r3, #1
 800316c:	035a      	lsls	r2, r3, #13
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	e007      	b.n	8003188 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003186:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003196:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	051a      	lsls	r2, r3, #20
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6899      	ldr	r1, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031ca:	025a      	lsls	r2, r3, #9
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6899      	ldr	r1, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	029a      	lsls	r2, r3, #10
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	609a      	str	r2, [r3, #8]
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	40012300 	.word	0x40012300
 8003208:	0f000001 	.word	0x0f000001

0800320c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <__NVIC_SetPriorityGrouping+0x40>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800323c:	4013      	ands	r3, r2
 800323e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003248:	4b06      	ldr	r3, [pc, #24]	; (8003264 <__NVIC_SetPriorityGrouping+0x44>)
 800324a:	4313      	orrs	r3, r2
 800324c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800324e:	4a04      	ldr	r2, [pc, #16]	; (8003260 <__NVIC_SetPriorityGrouping+0x40>)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	60d3      	str	r3, [r2, #12]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	e000ed00 	.word	0xe000ed00
 8003264:	05fa0000 	.word	0x05fa0000

08003268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800326c:	4b04      	ldr	r3, [pc, #16]	; (8003280 <__NVIC_GetPriorityGrouping+0x18>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	0a1b      	lsrs	r3, r3, #8
 8003272:	f003 0307 	and.w	r3, r3, #7
}
 8003276:	4618      	mov	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	e000ed00 	.word	0xe000ed00

08003284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	2b00      	cmp	r3, #0
 8003294:	db0b      	blt.n	80032ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	f003 021f 	and.w	r2, r3, #31
 800329c:	4907      	ldr	r1, [pc, #28]	; (80032bc <__NVIC_EnableIRQ+0x38>)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	2001      	movs	r0, #1
 80032a6:	fa00 f202 	lsl.w	r2, r0, r2
 80032aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	e000e100 	.word	0xe000e100

080032c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	6039      	str	r1, [r7, #0]
 80032ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	db0a      	blt.n	80032ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	490c      	ldr	r1, [pc, #48]	; (800330c <__NVIC_SetPriority+0x4c>)
 80032da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032de:	0112      	lsls	r2, r2, #4
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	440b      	add	r3, r1
 80032e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032e8:	e00a      	b.n	8003300 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	4908      	ldr	r1, [pc, #32]	; (8003310 <__NVIC_SetPriority+0x50>)
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	3b04      	subs	r3, #4
 80032f8:	0112      	lsls	r2, r2, #4
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	440b      	add	r3, r1
 80032fe:	761a      	strb	r2, [r3, #24]
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	e000e100 	.word	0xe000e100
 8003310:	e000ed00 	.word	0xe000ed00

08003314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003314:	b480      	push	{r7}
 8003316:	b089      	sub	sp, #36	; 0x24
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f1c3 0307 	rsb	r3, r3, #7
 800332e:	2b04      	cmp	r3, #4
 8003330:	bf28      	it	cs
 8003332:	2304      	movcs	r3, #4
 8003334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3304      	adds	r3, #4
 800333a:	2b06      	cmp	r3, #6
 800333c:	d902      	bls.n	8003344 <NVIC_EncodePriority+0x30>
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	3b03      	subs	r3, #3
 8003342:	e000      	b.n	8003346 <NVIC_EncodePriority+0x32>
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003348:	f04f 32ff 	mov.w	r2, #4294967295
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43da      	mvns	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	401a      	ands	r2, r3
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800335c:	f04f 31ff 	mov.w	r1, #4294967295
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	fa01 f303 	lsl.w	r3, r1, r3
 8003366:	43d9      	mvns	r1, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800336c:	4313      	orrs	r3, r2
         );
}
 800336e:	4618      	mov	r0, r3
 8003370:	3724      	adds	r7, #36	; 0x24
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff ff4c 	bl	8003220 <__NVIC_SetPriorityGrouping>
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033a2:	f7ff ff61 	bl	8003268 <__NVIC_GetPriorityGrouping>
 80033a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	68b9      	ldr	r1, [r7, #8]
 80033ac:	6978      	ldr	r0, [r7, #20]
 80033ae:	f7ff ffb1 	bl	8003314 <NVIC_EncodePriority>
 80033b2:	4602      	mov	r2, r0
 80033b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b8:	4611      	mov	r1, r2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff ff80 	bl	80032c0 <__NVIC_SetPriority>
}
 80033c0:	bf00      	nop
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff ff54 	bl	8003284 <__NVIC_EnableIRQ>
}
 80033dc:	bf00      	nop
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e054      	b.n	80034a0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	7f5b      	ldrb	r3, [r3, #29]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d105      	bne.n	800340c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fe fb20 	bl	8001a4c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	791b      	ldrb	r3, [r3, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10c      	bne.n	8003434 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a22      	ldr	r2, [pc, #136]	; (80034a8 <HAL_CRC_Init+0xc4>)
 8003420:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0218 	bic.w	r2, r2, #24
 8003430:	609a      	str	r2, [r3, #8]
 8003432:	e00c      	b.n	800344e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6899      	ldr	r1, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	461a      	mov	r2, r3
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f834 	bl	80034ac <HAL_CRCEx_Polynomial_Set>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e028      	b.n	80034a0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	795b      	ldrb	r3, [r3, #5]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d105      	bne.n	8003462 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f04f 32ff 	mov.w	r2, #4294967295
 800345e:	611a      	str	r2, [r3, #16]
 8003460:	e004      	b.n	800346c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6912      	ldr	r2, [r2, #16]
 800346a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699a      	ldr	r2, [r3, #24]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	04c11db7 	.word	0x04c11db7

080034ac <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80034bc:	231f      	movs	r3, #31
 80034be:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80034c0:	bf00      	nop
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1e5a      	subs	r2, r3, #1
 80034c6:	613a      	str	r2, [r7, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d009      	beq.n	80034e0 <HAL_CRCEx_Polynomial_Set+0x34>
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f003 031f 	and.w	r3, r3, #31
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	fa22 f303 	lsr.w	r3, r2, r3
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b18      	cmp	r3, #24
 80034e4:	d846      	bhi.n	8003574 <HAL_CRCEx_Polynomial_Set+0xc8>
 80034e6:	a201      	add	r2, pc, #4	; (adr r2, 80034ec <HAL_CRCEx_Polynomial_Set+0x40>)
 80034e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ec:	0800357b 	.word	0x0800357b
 80034f0:	08003575 	.word	0x08003575
 80034f4:	08003575 	.word	0x08003575
 80034f8:	08003575 	.word	0x08003575
 80034fc:	08003575 	.word	0x08003575
 8003500:	08003575 	.word	0x08003575
 8003504:	08003575 	.word	0x08003575
 8003508:	08003575 	.word	0x08003575
 800350c:	08003569 	.word	0x08003569
 8003510:	08003575 	.word	0x08003575
 8003514:	08003575 	.word	0x08003575
 8003518:	08003575 	.word	0x08003575
 800351c:	08003575 	.word	0x08003575
 8003520:	08003575 	.word	0x08003575
 8003524:	08003575 	.word	0x08003575
 8003528:	08003575 	.word	0x08003575
 800352c:	0800355d 	.word	0x0800355d
 8003530:	08003575 	.word	0x08003575
 8003534:	08003575 	.word	0x08003575
 8003538:	08003575 	.word	0x08003575
 800353c:	08003575 	.word	0x08003575
 8003540:	08003575 	.word	0x08003575
 8003544:	08003575 	.word	0x08003575
 8003548:	08003575 	.word	0x08003575
 800354c:	08003551 	.word	0x08003551
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	2b06      	cmp	r3, #6
 8003554:	d913      	bls.n	800357e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800355a:	e010      	b.n	800357e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	2b07      	cmp	r3, #7
 8003560:	d90f      	bls.n	8003582 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003566:	e00c      	b.n	8003582 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	2b0f      	cmp	r3, #15
 800356c:	d90b      	bls.n	8003586 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003572:	e008      	b.n	8003586 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	75fb      	strb	r3, [r7, #23]
      break;
 8003578:	e006      	b.n	8003588 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800357a:	bf00      	nop
 800357c:	e004      	b.n	8003588 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800357e:	bf00      	nop
 8003580:	e002      	b.n	8003588 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003582:	bf00      	nop
 8003584:	e000      	b.n	8003588 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003586:	bf00      	nop
  }
  if (status == HAL_OK)
 8003588:	7dfb      	ldrb	r3, [r7, #23]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10d      	bne.n	80035aa <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f023 0118 	bic.w	r1, r3, #24
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80035aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	371c      	adds	r7, #28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e069      	b.n	800369e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d102      	bne.n	80035dc <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fe fa58 	bl	8001a8c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6819      	ldr	r1, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	4b2a      	ldr	r3, [pc, #168]	; (80036a8 <HAL_DCMI_Init+0xf0>)
 80035fe:	400b      	ands	r3, r1
 8003600:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6819      	ldr	r1, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003616:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003622:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800362e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800363a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003640:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003646:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b10      	cmp	r3, #16
 8003656:	d112      	bne.n	800367e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	7f1b      	ldrb	r3, [r3, #28]
 800365c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	7f5b      	ldrb	r3, [r3, #29]
 8003662:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003664:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	7f9b      	ldrb	r3, [r3, #30]
 800366a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800366c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	7fdb      	ldrb	r3, [r3, #31]
 8003674:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800367a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800367c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 021e 	orr.w	r2, r2, #30
 800368c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	ffe0f007 	.word	0xffe0f007

080036ac <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e039      	b.n	8003732 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d106      	bne.n	80036d8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7fe fa98 	bl	8001c08 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fc:	f023 0107 	bic.w	r1, r3, #7
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003712:	4b0a      	ldr	r3, [pc, #40]	; (800373c <HAL_DMA2D_Init+0x90>)
 8003714:	4013      	ands	r3, r2
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	68d1      	ldr	r1, [r2, #12]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6812      	ldr	r2, [r2, #0]
 800371e:	430b      	orrs	r3, r1
 8003720:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	ffffc000 	.word	0xffffc000

08003740 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d026      	beq.n	80037b0 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003768:	2b00      	cmp	r3, #0
 800376a:	d021      	beq.n	80037b0 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800377a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003780:	f043 0201 	orr.w	r2, r3, #1
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2201      	movs	r2, #1
 800378e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2204      	movs	r2, #4
 8003794:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d026      	beq.n	8003808 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d021      	beq.n	8003808 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037d2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2220      	movs	r2, #32
 80037da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e0:	f043 0202 	orr.w	r2, r3, #2
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2204      	movs	r2, #4
 80037ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d026      	beq.n	8003860 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003818:	2b00      	cmp	r3, #0
 800381a:	d021      	beq.n	8003860 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800382a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2208      	movs	r2, #8
 8003832:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003838:	f043 0204 	orr.w	r2, r3, #4
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2204      	movs	r2, #4
 8003844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	2b00      	cmp	r3, #0
 8003868:	d013      	beq.n	8003892 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00e      	beq.n	8003892 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003882:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2204      	movs	r2, #4
 800388a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 f853 	bl	8003938 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d024      	beq.n	80038e6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d01f      	beq.n	80038e6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038b4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2202      	movs	r2, #2
 80038bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d01f      	beq.n	8003930 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d01a      	beq.n	8003930 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003908:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2210      	movs	r2, #16
 8003910:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f80e 	bl	800394c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_DMA2D_ConfigLayer+0x20>
 800397c:	2302      	movs	r3, #2
 800397e:	e079      	b.n	8003a74 <HAL_DMA2D_ConfigLayer+0x114>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	3318      	adds	r3, #24
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	4413      	add	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	041b      	lsls	r3, r3, #16
 80039a6:	4313      	orrs	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80039aa:	4b35      	ldr	r3, [pc, #212]	; (8003a80 <HAL_DMA2D_ConfigLayer+0x120>)
 80039ac:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b0a      	cmp	r3, #10
 80039b4:	d003      	beq.n	80039be <HAL_DMA2D_ConfigLayer+0x5e>
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b09      	cmp	r3, #9
 80039bc:	d107      	bne.n	80039ce <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	e005      	b.n	80039da <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	061b      	lsls	r3, r3, #24
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d120      	bne.n	8003a22 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	ea02 0103 	and.w	r1, r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b0a      	cmp	r3, #10
 8003a08:	d003      	beq.n	8003a12 <HAL_DMA2D_ConfigLayer+0xb2>
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b09      	cmp	r3, #9
 8003a10:	d127      	bne.n	8003a62 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003a1e:	629a      	str	r2, [r3, #40]	; 0x28
 8003a20:	e01f      	b.n	8003a62 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69da      	ldr	r2, [r3, #28]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	43db      	mvns	r3, r3
 8003a2c:	ea02 0103 	and.w	r1, r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b0a      	cmp	r3, #10
 8003a4a:	d003      	beq.n	8003a54 <HAL_DMA2D_ConfigLayer+0xf4>
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b09      	cmp	r3, #9
 8003a52:	d106      	bne.n	8003a62 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003a60:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	371c      	adds	r7, #28
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	ff03000f 	.word	0xff03000f

08003a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b089      	sub	sp, #36	; 0x24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
 8003aa2:	e175      	b.n	8003d90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	f040 8164 	bne.w	8003d8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d005      	beq.n	8003ada <HAL_GPIO_Init+0x56>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d130      	bne.n	8003b3c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	43db      	mvns	r3, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4013      	ands	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b10:	2201      	movs	r2, #1
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f003 0201 	and.w	r2, r3, #1
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f003 0303 	and.w	r3, r3, #3
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d017      	beq.n	8003b78 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	2203      	movs	r2, #3
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d123      	bne.n	8003bcc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	08da      	lsrs	r2, r3, #3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3208      	adds	r2, #8
 8003b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	220f      	movs	r2, #15
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	08da      	lsrs	r2, r3, #3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3208      	adds	r2, #8
 8003bc6:	69b9      	ldr	r1, [r7, #24]
 8003bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	2203      	movs	r2, #3
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4013      	ands	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 0203 	and.w	r2, r3, #3
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 80be 	beq.w	8003d8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c0e:	4b66      	ldr	r3, [pc, #408]	; (8003da8 <HAL_GPIO_Init+0x324>)
 8003c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c12:	4a65      	ldr	r2, [pc, #404]	; (8003da8 <HAL_GPIO_Init+0x324>)
 8003c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c18:	6453      	str	r3, [r2, #68]	; 0x44
 8003c1a:	4b63      	ldr	r3, [pc, #396]	; (8003da8 <HAL_GPIO_Init+0x324>)
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003c26:	4a61      	ldr	r2, [pc, #388]	; (8003dac <HAL_GPIO_Init+0x328>)
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	089b      	lsrs	r3, r3, #2
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	220f      	movs	r2, #15
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	43db      	mvns	r3, r3
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	4013      	ands	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a58      	ldr	r2, [pc, #352]	; (8003db0 <HAL_GPIO_Init+0x32c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d037      	beq.n	8003cc2 <HAL_GPIO_Init+0x23e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a57      	ldr	r2, [pc, #348]	; (8003db4 <HAL_GPIO_Init+0x330>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d031      	beq.n	8003cbe <HAL_GPIO_Init+0x23a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a56      	ldr	r2, [pc, #344]	; (8003db8 <HAL_GPIO_Init+0x334>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d02b      	beq.n	8003cba <HAL_GPIO_Init+0x236>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a55      	ldr	r2, [pc, #340]	; (8003dbc <HAL_GPIO_Init+0x338>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d025      	beq.n	8003cb6 <HAL_GPIO_Init+0x232>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a54      	ldr	r2, [pc, #336]	; (8003dc0 <HAL_GPIO_Init+0x33c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d01f      	beq.n	8003cb2 <HAL_GPIO_Init+0x22e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a53      	ldr	r2, [pc, #332]	; (8003dc4 <HAL_GPIO_Init+0x340>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d019      	beq.n	8003cae <HAL_GPIO_Init+0x22a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a52      	ldr	r2, [pc, #328]	; (8003dc8 <HAL_GPIO_Init+0x344>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d013      	beq.n	8003caa <HAL_GPIO_Init+0x226>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a51      	ldr	r2, [pc, #324]	; (8003dcc <HAL_GPIO_Init+0x348>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00d      	beq.n	8003ca6 <HAL_GPIO_Init+0x222>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a50      	ldr	r2, [pc, #320]	; (8003dd0 <HAL_GPIO_Init+0x34c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d007      	beq.n	8003ca2 <HAL_GPIO_Init+0x21e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a4f      	ldr	r2, [pc, #316]	; (8003dd4 <HAL_GPIO_Init+0x350>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d101      	bne.n	8003c9e <HAL_GPIO_Init+0x21a>
 8003c9a:	2309      	movs	r3, #9
 8003c9c:	e012      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003c9e:	230a      	movs	r3, #10
 8003ca0:	e010      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003ca2:	2308      	movs	r3, #8
 8003ca4:	e00e      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003ca6:	2307      	movs	r3, #7
 8003ca8:	e00c      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003caa:	2306      	movs	r3, #6
 8003cac:	e00a      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003cae:	2305      	movs	r3, #5
 8003cb0:	e008      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003cb2:	2304      	movs	r3, #4
 8003cb4:	e006      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e004      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e002      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <HAL_GPIO_Init+0x240>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	f002 0203 	and.w	r2, r2, #3
 8003cca:	0092      	lsls	r2, r2, #2
 8003ccc:	4093      	lsls	r3, r2
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003cd4:	4935      	ldr	r1, [pc, #212]	; (8003dac <HAL_GPIO_Init+0x328>)
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	089b      	lsrs	r3, r3, #2
 8003cda:	3302      	adds	r3, #2
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ce2:	4b3d      	ldr	r3, [pc, #244]	; (8003dd8 <HAL_GPIO_Init+0x354>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	43db      	mvns	r3, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d06:	4a34      	ldr	r2, [pc, #208]	; (8003dd8 <HAL_GPIO_Init+0x354>)
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d0c:	4b32      	ldr	r3, [pc, #200]	; (8003dd8 <HAL_GPIO_Init+0x354>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	43db      	mvns	r3, r3
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d30:	4a29      	ldr	r2, [pc, #164]	; (8003dd8 <HAL_GPIO_Init+0x354>)
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d36:	4b28      	ldr	r3, [pc, #160]	; (8003dd8 <HAL_GPIO_Init+0x354>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4013      	ands	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d5a:	4a1f      	ldr	r2, [pc, #124]	; (8003dd8 <HAL_GPIO_Init+0x354>)
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d60:	4b1d      	ldr	r3, [pc, #116]	; (8003dd8 <HAL_GPIO_Init+0x354>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d84:	4a14      	ldr	r2, [pc, #80]	; (8003dd8 <HAL_GPIO_Init+0x354>)
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	61fb      	str	r3, [r7, #28]
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	2b0f      	cmp	r3, #15
 8003d94:	f67f ae86 	bls.w	8003aa4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003d98:	bf00      	nop
 8003d9a:	bf00      	nop
 8003d9c:	3724      	adds	r7, #36	; 0x24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800
 8003dac:	40013800 	.word	0x40013800
 8003db0:	40020000 	.word	0x40020000
 8003db4:	40020400 	.word	0x40020400
 8003db8:	40020800 	.word	0x40020800
 8003dbc:	40020c00 	.word	0x40020c00
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40021400 	.word	0x40021400
 8003dc8:	40021800 	.word	0x40021800
 8003dcc:	40021c00 	.word	0x40021c00
 8003dd0:	40022000 	.word	0x40022000
 8003dd4:	40022400 	.word	0x40022400
 8003dd8:	40013c00 	.word	0x40013c00

08003ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	807b      	strh	r3, [r7, #2]
 8003de8:	4613      	mov	r3, r2
 8003dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dec:	787b      	ldrb	r3, [r7, #1]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003df2:	887a      	ldrh	r2, [r7, #2]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003df8:	e003      	b.n	8003e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003dfa:	887b      	ldrh	r3, [r7, #2]
 8003dfc:	041a      	lsls	r2, r3, #16
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	619a      	str	r2, [r3, #24]
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e1a:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e1c:	695a      	ldr	r2, [r3, #20]
 8003e1e:	88fb      	ldrh	r3, [r7, #6]
 8003e20:	4013      	ands	r3, r2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d006      	beq.n	8003e34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e26:	4a05      	ldr	r2, [pc, #20]	; (8003e3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e28:	88fb      	ldrh	r3, [r7, #6]
 8003e2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e2c:	88fb      	ldrh	r3, [r7, #6]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fc fbe5 	bl	80005fe <HAL_GPIO_EXTI_Callback>
  }
}
 8003e34:	bf00      	nop
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40013c00 	.word	0x40013c00

08003e40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e07f      	b.n	8003f52 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d106      	bne.n	8003e6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fd fef4 	bl	8001c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2224      	movs	r2, #36	; 0x24
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0201 	bic.w	r2, r2, #1
 8003e82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ea0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d107      	bne.n	8003eba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eb6:	609a      	str	r2, [r3, #8]
 8003eb8:	e006      	b.n	8003ec8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003ec6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d104      	bne.n	8003eda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ed8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6859      	ldr	r1, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	4b1d      	ldr	r3, [pc, #116]	; (8003f5c <HAL_I2C_Init+0x11c>)
 8003ee6:	430b      	orrs	r3, r1
 8003ee8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ef8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	69d9      	ldr	r1, [r3, #28]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1a      	ldr	r2, [r3, #32]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	02008000 	.word	0x02008000

08003f60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b20      	cmp	r3, #32
 8003f74:	d138      	bne.n	8003fe8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e032      	b.n	8003fea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2224      	movs	r2, #36	; 0x24
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0201 	bic.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6819      	ldr	r1, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	e000      	b.n	8003fea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fe8:	2302      	movs	r3, #2
  }
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b085      	sub	sp, #20
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b20      	cmp	r3, #32
 800400a:	d139      	bne.n	8004080 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004016:	2302      	movs	r3, #2
 8004018:	e033      	b.n	8004082 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2224      	movs	r2, #36	; 0x24
 8004026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0201 	bic.w	r2, r2, #1
 8004038:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004048:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	021b      	lsls	r3, r3, #8
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	e000      	b.n	8004082 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004080:	2302      	movs	r3, #2
  }
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
	...

08004090 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e0bf      	b.n	8004222 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d106      	bne.n	80040bc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7fd fe2c 	bl	8001d14 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80040d2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6999      	ldr	r1, [r3, #24]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80040e8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6899      	ldr	r1, [r3, #8]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	4b4a      	ldr	r3, [pc, #296]	; (800422c <HAL_LTDC_Init+0x19c>)
 8004104:	400b      	ands	r3, r1
 8004106:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	041b      	lsls	r3, r3, #16
 800410e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6899      	ldr	r1, [r3, #8]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699a      	ldr	r2, [r3, #24]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68d9      	ldr	r1, [r3, #12]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4b3e      	ldr	r3, [pc, #248]	; (800422c <HAL_LTDC_Init+0x19c>)
 8004132:	400b      	ands	r3, r1
 8004134:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	041b      	lsls	r3, r3, #16
 800413c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68d9      	ldr	r1, [r3, #12]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a1a      	ldr	r2, [r3, #32]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6919      	ldr	r1, [r3, #16]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	4b33      	ldr	r3, [pc, #204]	; (800422c <HAL_LTDC_Init+0x19c>)
 8004160:	400b      	ands	r3, r1
 8004162:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	041b      	lsls	r3, r3, #16
 800416a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6919      	ldr	r1, [r3, #16]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	431a      	orrs	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6959      	ldr	r1, [r3, #20]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	4b27      	ldr	r3, [pc, #156]	; (800422c <HAL_LTDC_Init+0x19c>)
 800418e:	400b      	ands	r3, r1
 8004190:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	041b      	lsls	r3, r3, #16
 8004198:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6959      	ldr	r1, [r3, #20]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041b6:	021b      	lsls	r3, r3, #8
 80041b8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80041c0:	041b      	lsls	r3, r3, #16
 80041c2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80041d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4313      	orrs	r3, r2
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0206 	orr.w	r2, r2, #6
 80041fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0201 	orr.w	r2, r2, #1
 800420e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	f000f800 	.word	0xf000f800

08004230 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004246:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d023      	beq.n	800429a <HAL_LTDC_IRQHandler+0x6a>
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d01e      	beq.n	800429a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0204 	bic.w	r2, r2, #4
 800426a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2204      	movs	r2, #4
 8004272:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800427a:	f043 0201 	orr.w	r2, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2204      	movs	r2, #4
 8004288:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f86f 	bl	8004378 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d023      	beq.n	80042ec <HAL_LTDC_IRQHandler+0xbc>
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d01e      	beq.n	80042ec <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0202 	bic.w	r2, r2, #2
 80042bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2202      	movs	r2, #2
 80042c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042cc:	f043 0202 	orr.w	r2, r3, #2
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2204      	movs	r2, #4
 80042da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f846 	bl	8004378 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d01b      	beq.n	800432e <HAL_LTDC_IRQHandler+0xfe>
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d016      	beq.n	800432e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0201 	bic.w	r2, r2, #1
 800430e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2201      	movs	r2, #1
 8004316:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f82f 	bl	800438c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f003 0308 	and.w	r3, r3, #8
 8004334:	2b00      	cmp	r3, #0
 8004336:	d01b      	beq.n	8004370 <HAL_LTDC_IRQHandler+0x140>
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b00      	cmp	r3, #0
 8004340:	d016      	beq.n	8004370 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0208 	bic.w	r2, r2, #8
 8004350:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2208      	movs	r2, #8
 8004358:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f818 	bl	80043a0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004370:	bf00      	nop
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80043b4:	b5b0      	push	{r4, r5, r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <HAL_LTDC_ConfigLayer+0x1a>
 80043ca:	2302      	movs	r3, #2
 80043cc:	e02c      	b.n	8004428 <HAL_LTDC_ConfigLayer+0x74>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2202      	movs	r2, #2
 80043da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2134      	movs	r1, #52	; 0x34
 80043e4:	fb01 f303 	mul.w	r3, r1, r3
 80043e8:	4413      	add	r3, r2
 80043ea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	4614      	mov	r4, r2
 80043f2:	461d      	mov	r5, r3
 80043f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004400:	682b      	ldr	r3, [r5, #0]
 8004402:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	68b9      	ldr	r1, [r7, #8]
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f811 	bl	8004430 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2201      	movs	r2, #1
 8004414:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bdb0      	pop	{r4, r5, r7, pc}

08004430 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004430:	b480      	push	{r7}
 8004432:	b089      	sub	sp, #36	; 0x24
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	0c1b      	lsrs	r3, r3, #16
 8004448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800444c:	4413      	add	r3, r2
 800444e:	041b      	lsls	r3, r3, #16
 8004450:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	461a      	mov	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	01db      	lsls	r3, r3, #7
 800445c:	4413      	add	r3, r2
 800445e:	3384      	adds	r3, #132	; 0x84
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	4611      	mov	r1, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	01d2      	lsls	r2, r2, #7
 800446c:	440a      	add	r2, r1
 800446e:	3284      	adds	r2, #132	; 0x84
 8004470:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004474:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	0c1b      	lsrs	r3, r3, #16
 8004482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004486:	4413      	add	r3, r2
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4619      	mov	r1, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	01db      	lsls	r3, r3, #7
 8004494:	440b      	add	r3, r1
 8004496:	3384      	adds	r3, #132	; 0x84
 8004498:	4619      	mov	r1, r3
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	4313      	orrs	r3, r2
 800449e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044ae:	4413      	add	r3, r2
 80044b0:	041b      	lsls	r3, r3, #16
 80044b2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	461a      	mov	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	01db      	lsls	r3, r3, #7
 80044be:	4413      	add	r3, r2
 80044c0:	3384      	adds	r3, #132	; 0x84
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	6812      	ldr	r2, [r2, #0]
 80044c8:	4611      	mov	r1, r2
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	01d2      	lsls	r2, r2, #7
 80044ce:	440a      	add	r2, r1
 80044d0:	3284      	adds	r2, #132	; 0x84
 80044d2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80044d6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044e6:	4413      	add	r3, r2
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4619      	mov	r1, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	01db      	lsls	r3, r3, #7
 80044f4:	440b      	add	r3, r1
 80044f6:	3384      	adds	r3, #132	; 0x84
 80044f8:	4619      	mov	r1, r3
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	461a      	mov	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	01db      	lsls	r3, r3, #7
 800450a:	4413      	add	r3, r2
 800450c:	3384      	adds	r3, #132	; 0x84
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	4611      	mov	r1, r2
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	01d2      	lsls	r2, r2, #7
 800451a:	440a      	add	r2, r1
 800451c:	3284      	adds	r2, #132	; 0x84
 800451e:	f023 0307 	bic.w	r3, r3, #7
 8004522:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	461a      	mov	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	01db      	lsls	r3, r3, #7
 800452e:	4413      	add	r3, r2
 8004530:	3384      	adds	r3, #132	; 0x84
 8004532:	461a      	mov	r2, r3
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004540:	021b      	lsls	r3, r3, #8
 8004542:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800454a:	041b      	lsls	r3, r3, #16
 800454c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	061b      	lsls	r3, r3, #24
 8004554:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	01db      	lsls	r3, r3, #7
 8004560:	4413      	add	r3, r2
 8004562:	3384      	adds	r3, #132	; 0x84
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	01db      	lsls	r3, r3, #7
 8004570:	4413      	add	r3, r2
 8004572:	3384      	adds	r3, #132	; 0x84
 8004574:	461a      	mov	r2, r3
 8004576:	2300      	movs	r3, #0
 8004578:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004580:	461a      	mov	r2, r3
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	431a      	orrs	r2, r3
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	431a      	orrs	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4619      	mov	r1, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	01db      	lsls	r3, r3, #7
 8004594:	440b      	add	r3, r1
 8004596:	3384      	adds	r3, #132	; 0x84
 8004598:	4619      	mov	r1, r3
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	4313      	orrs	r3, r2
 800459e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	461a      	mov	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	01db      	lsls	r3, r3, #7
 80045aa:	4413      	add	r3, r2
 80045ac:	3384      	adds	r3, #132	; 0x84
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	6812      	ldr	r2, [r2, #0]
 80045b4:	4611      	mov	r1, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	01d2      	lsls	r2, r2, #7
 80045ba:	440a      	add	r2, r1
 80045bc:	3284      	adds	r2, #132	; 0x84
 80045be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045c2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	01db      	lsls	r3, r3, #7
 80045ce:	4413      	add	r3, r2
 80045d0:	3384      	adds	r3, #132	; 0x84
 80045d2:	461a      	mov	r2, r3
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	01db      	lsls	r3, r3, #7
 80045e4:	4413      	add	r3, r2
 80045e6:	3384      	adds	r3, #132	; 0x84
 80045e8:	69da      	ldr	r2, [r3, #28]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4619      	mov	r1, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	01db      	lsls	r3, r3, #7
 80045f4:	440b      	add	r3, r1
 80045f6:	3384      	adds	r3, #132	; 0x84
 80045f8:	4619      	mov	r1, r3
 80045fa:	4b58      	ldr	r3, [pc, #352]	; (800475c <LTDC_SetConfig+0x32c>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	69da      	ldr	r2, [r3, #28]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	68f9      	ldr	r1, [r7, #12]
 800460a:	6809      	ldr	r1, [r1, #0]
 800460c:	4608      	mov	r0, r1
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	01c9      	lsls	r1, r1, #7
 8004612:	4401      	add	r1, r0
 8004614:	3184      	adds	r1, #132	; 0x84
 8004616:	4313      	orrs	r3, r2
 8004618:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	01db      	lsls	r3, r3, #7
 8004624:	4413      	add	r3, r2
 8004626:	3384      	adds	r3, #132	; 0x84
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	01db      	lsls	r3, r3, #7
 8004634:	4413      	add	r3, r2
 8004636:	3384      	adds	r3, #132	; 0x84
 8004638:	461a      	mov	r2, r3
 800463a:	2300      	movs	r3, #0
 800463c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	01db      	lsls	r3, r3, #7
 8004648:	4413      	add	r3, r2
 800464a:	3384      	adds	r3, #132	; 0x84
 800464c:	461a      	mov	r2, r3
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d102      	bne.n	8004662 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800465c:	2304      	movs	r3, #4
 800465e:	61fb      	str	r3, [r7, #28]
 8004660:	e01b      	b.n	800469a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d102      	bne.n	8004670 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800466a:	2303      	movs	r3, #3
 800466c:	61fb      	str	r3, [r7, #28]
 800466e:	e014      	b.n	800469a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	2b04      	cmp	r3, #4
 8004676:	d00b      	beq.n	8004690 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800467c:	2b02      	cmp	r3, #2
 800467e:	d007      	beq.n	8004690 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004684:	2b03      	cmp	r3, #3
 8004686:	d003      	beq.n	8004690 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800468c:	2b07      	cmp	r3, #7
 800468e:	d102      	bne.n	8004696 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004690:	2302      	movs	r3, #2
 8004692:	61fb      	str	r3, [r7, #28]
 8004694:	e001      	b.n	800469a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004696:	2301      	movs	r3, #1
 8004698:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	461a      	mov	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	01db      	lsls	r3, r3, #7
 80046a4:	4413      	add	r3, r2
 80046a6:	3384      	adds	r3, #132	; 0x84
 80046a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	4611      	mov	r1, r2
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	01d2      	lsls	r2, r2, #7
 80046b4:	440a      	add	r2, r1
 80046b6:	3284      	adds	r2, #132	; 0x84
 80046b8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80046bc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c2:	69fa      	ldr	r2, [r7, #28]
 80046c4:	fb02 f303 	mul.w	r3, r2, r3
 80046c8:	041a      	lsls	r2, r3, #16
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	6859      	ldr	r1, [r3, #4]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	1acb      	subs	r3, r1, r3
 80046d4:	69f9      	ldr	r1, [r7, #28]
 80046d6:	fb01 f303 	mul.w	r3, r1, r3
 80046da:	3303      	adds	r3, #3
 80046dc:	68f9      	ldr	r1, [r7, #12]
 80046de:	6809      	ldr	r1, [r1, #0]
 80046e0:	4608      	mov	r0, r1
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	01c9      	lsls	r1, r1, #7
 80046e6:	4401      	add	r1, r0
 80046e8:	3184      	adds	r1, #132	; 0x84
 80046ea:	4313      	orrs	r3, r2
 80046ec:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	01db      	lsls	r3, r3, #7
 80046f8:	4413      	add	r3, r2
 80046fa:	3384      	adds	r3, #132	; 0x84
 80046fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4619      	mov	r1, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	01db      	lsls	r3, r3, #7
 8004708:	440b      	add	r3, r1
 800470a:	3384      	adds	r3, #132	; 0x84
 800470c:	4619      	mov	r1, r3
 800470e:	4b14      	ldr	r3, [pc, #80]	; (8004760 <LTDC_SetConfig+0x330>)
 8004710:	4013      	ands	r3, r2
 8004712:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	461a      	mov	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	01db      	lsls	r3, r3, #7
 800471e:	4413      	add	r3, r2
 8004720:	3384      	adds	r3, #132	; 0x84
 8004722:	461a      	mov	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004728:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	01db      	lsls	r3, r3, #7
 8004734:	4413      	add	r3, r2
 8004736:	3384      	adds	r3, #132	; 0x84
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	4611      	mov	r1, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	01d2      	lsls	r2, r2, #7
 8004744:	440a      	add	r2, r1
 8004746:	3284      	adds	r2, #132	; 0x84
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	6013      	str	r3, [r2, #0]
}
 800474e:	bf00      	nop
 8004750:	3724      	adds	r7, #36	; 0x24
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	fffff8f8 	.word	0xfffff8f8
 8004760:	fffff800 	.word	0xfffff800

08004764 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004768:	4b05      	ldr	r3, [pc, #20]	; (8004780 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a04      	ldr	r2, [pc, #16]	; (8004780 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800476e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004772:	6013      	str	r3, [r2, #0]
}
 8004774:	bf00      	nop
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40007000 	.word	0x40007000

08004784 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800478a:	2300      	movs	r3, #0
 800478c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800478e:	4b23      	ldr	r3, [pc, #140]	; (800481c <HAL_PWREx_EnableOverDrive+0x98>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	4a22      	ldr	r2, [pc, #136]	; (800481c <HAL_PWREx_EnableOverDrive+0x98>)
 8004794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004798:	6413      	str	r3, [r2, #64]	; 0x40
 800479a:	4b20      	ldr	r3, [pc, #128]	; (800481c <HAL_PWREx_EnableOverDrive+0x98>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80047a6:	4b1e      	ldr	r3, [pc, #120]	; (8004820 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a1d      	ldr	r2, [pc, #116]	; (8004820 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047b2:	f7fe f881 	bl	80028b8 <HAL_GetTick>
 80047b6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80047b8:	e009      	b.n	80047ce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80047ba:	f7fe f87d 	bl	80028b8 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047c8:	d901      	bls.n	80047ce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e022      	b.n	8004814 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80047ce:	4b14      	ldr	r3, [pc, #80]	; (8004820 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047da:	d1ee      	bne.n	80047ba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80047dc:	4b10      	ldr	r3, [pc, #64]	; (8004820 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a0f      	ldr	r2, [pc, #60]	; (8004820 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047e8:	f7fe f866 	bl	80028b8 <HAL_GetTick>
 80047ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80047ee:	e009      	b.n	8004804 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80047f0:	f7fe f862 	bl	80028b8 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047fe:	d901      	bls.n	8004804 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e007      	b.n	8004814 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004804:	4b06      	ldr	r3, [pc, #24]	; (8004820 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004810:	d1ee      	bne.n	80047f0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40023800 	.word	0x40023800
 8004820:	40007000 	.word	0x40007000

08004824 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800482c:	2300      	movs	r3, #0
 800482e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e291      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 8087 	beq.w	8004956 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004848:	4b96      	ldr	r3, [pc, #600]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 030c 	and.w	r3, r3, #12
 8004850:	2b04      	cmp	r3, #4
 8004852:	d00c      	beq.n	800486e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004854:	4b93      	ldr	r3, [pc, #588]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 030c 	and.w	r3, r3, #12
 800485c:	2b08      	cmp	r3, #8
 800485e:	d112      	bne.n	8004886 <HAL_RCC_OscConfig+0x62>
 8004860:	4b90      	ldr	r3, [pc, #576]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800486c:	d10b      	bne.n	8004886 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800486e:	4b8d      	ldr	r3, [pc, #564]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d06c      	beq.n	8004954 <HAL_RCC_OscConfig+0x130>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d168      	bne.n	8004954 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e26b      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800488e:	d106      	bne.n	800489e <HAL_RCC_OscConfig+0x7a>
 8004890:	4b84      	ldr	r3, [pc, #528]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a83      	ldr	r2, [pc, #524]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	e02e      	b.n	80048fc <HAL_RCC_OscConfig+0xd8>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10c      	bne.n	80048c0 <HAL_RCC_OscConfig+0x9c>
 80048a6:	4b7f      	ldr	r3, [pc, #508]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a7e      	ldr	r2, [pc, #504]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80048ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	4b7c      	ldr	r3, [pc, #496]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a7b      	ldr	r2, [pc, #492]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80048b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	e01d      	b.n	80048fc <HAL_RCC_OscConfig+0xd8>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048c8:	d10c      	bne.n	80048e4 <HAL_RCC_OscConfig+0xc0>
 80048ca:	4b76      	ldr	r3, [pc, #472]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a75      	ldr	r2, [pc, #468]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80048d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	4b73      	ldr	r3, [pc, #460]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a72      	ldr	r2, [pc, #456]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80048dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	e00b      	b.n	80048fc <HAL_RCC_OscConfig+0xd8>
 80048e4:	4b6f      	ldr	r3, [pc, #444]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a6e      	ldr	r2, [pc, #440]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80048ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	4b6c      	ldr	r3, [pc, #432]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a6b      	ldr	r2, [pc, #428]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80048f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d013      	beq.n	800492c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004904:	f7fd ffd8 	bl	80028b8 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800490c:	f7fd ffd4 	bl	80028b8 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b64      	cmp	r3, #100	; 0x64
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e21f      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800491e:	4b61      	ldr	r3, [pc, #388]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0f0      	beq.n	800490c <HAL_RCC_OscConfig+0xe8>
 800492a:	e014      	b.n	8004956 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492c:	f7fd ffc4 	bl	80028b8 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004934:	f7fd ffc0 	bl	80028b8 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b64      	cmp	r3, #100	; 0x64
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e20b      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004946:	4b57      	ldr	r3, [pc, #348]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0x110>
 8004952:	e000      	b.n	8004956 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d069      	beq.n	8004a36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004962:	4b50      	ldr	r3, [pc, #320]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 030c 	and.w	r3, r3, #12
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00b      	beq.n	8004986 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800496e:	4b4d      	ldr	r3, [pc, #308]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 030c 	and.w	r3, r3, #12
 8004976:	2b08      	cmp	r3, #8
 8004978:	d11c      	bne.n	80049b4 <HAL_RCC_OscConfig+0x190>
 800497a:	4b4a      	ldr	r3, [pc, #296]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d116      	bne.n	80049b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004986:	4b47      	ldr	r3, [pc, #284]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d005      	beq.n	800499e <HAL_RCC_OscConfig+0x17a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d001      	beq.n	800499e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e1df      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800499e:	4b41      	ldr	r3, [pc, #260]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	493d      	ldr	r1, [pc, #244]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049b2:	e040      	b.n	8004a36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d023      	beq.n	8004a04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049bc:	4b39      	ldr	r3, [pc, #228]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a38      	ldr	r2, [pc, #224]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80049c2:	f043 0301 	orr.w	r3, r3, #1
 80049c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c8:	f7fd ff76 	bl	80028b8 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049d0:	f7fd ff72 	bl	80028b8 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e1bd      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e2:	4b30      	ldr	r3, [pc, #192]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0f0      	beq.n	80049d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ee:	4b2d      	ldr	r3, [pc, #180]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	4929      	ldr	r1, [pc, #164]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	600b      	str	r3, [r1, #0]
 8004a02:	e018      	b.n	8004a36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a04:	4b27      	ldr	r3, [pc, #156]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a26      	ldr	r2, [pc, #152]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004a0a:	f023 0301 	bic.w	r3, r3, #1
 8004a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a10:	f7fd ff52 	bl	80028b8 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a18:	f7fd ff4e 	bl	80028b8 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e199      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a2a:	4b1e      	ldr	r3, [pc, #120]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d038      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d019      	beq.n	8004a7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a4a:	4b16      	ldr	r3, [pc, #88]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a4e:	4a15      	ldr	r2, [pc, #84]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004a50:	f043 0301 	orr.w	r3, r3, #1
 8004a54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a56:	f7fd ff2f 	bl	80028b8 <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a5e:	f7fd ff2b 	bl	80028b8 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e176      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a70:	4b0c      	ldr	r3, [pc, #48]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0f0      	beq.n	8004a5e <HAL_RCC_OscConfig+0x23a>
 8004a7c:	e01a      	b.n	8004ab4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a7e:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a82:	4a08      	ldr	r2, [pc, #32]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004a84:	f023 0301 	bic.w	r3, r3, #1
 8004a88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8a:	f7fd ff15 	bl	80028b8 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a90:	e00a      	b.n	8004aa8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a92:	f7fd ff11 	bl	80028b8 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d903      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e15c      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
 8004aa4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aa8:	4b91      	ldr	r3, [pc, #580]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1ee      	bne.n	8004a92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 80a4 	beq.w	8004c0a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ac2:	4b8b      	ldr	r3, [pc, #556]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10d      	bne.n	8004aea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ace:	4b88      	ldr	r3, [pc, #544]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	4a87      	ldr	r2, [pc, #540]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8004ada:	4b85      	ldr	r3, [pc, #532]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae2:	60bb      	str	r3, [r7, #8]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aea:	4b82      	ldr	r3, [pc, #520]	; (8004cf4 <HAL_RCC_OscConfig+0x4d0>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d118      	bne.n	8004b28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004af6:	4b7f      	ldr	r3, [pc, #508]	; (8004cf4 <HAL_RCC_OscConfig+0x4d0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a7e      	ldr	r2, [pc, #504]	; (8004cf4 <HAL_RCC_OscConfig+0x4d0>)
 8004afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b02:	f7fd fed9 	bl	80028b8 <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b0a:	f7fd fed5 	bl	80028b8 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b64      	cmp	r3, #100	; 0x64
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e120      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b1c:	4b75      	ldr	r3, [pc, #468]	; (8004cf4 <HAL_RCC_OscConfig+0x4d0>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f0      	beq.n	8004b0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d106      	bne.n	8004b3e <HAL_RCC_OscConfig+0x31a>
 8004b30:	4b6f      	ldr	r3, [pc, #444]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b34:	4a6e      	ldr	r2, [pc, #440]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b3c:	e02d      	b.n	8004b9a <HAL_RCC_OscConfig+0x376>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10c      	bne.n	8004b60 <HAL_RCC_OscConfig+0x33c>
 8004b46:	4b6a      	ldr	r3, [pc, #424]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4a:	4a69      	ldr	r2, [pc, #420]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b4c:	f023 0301 	bic.w	r3, r3, #1
 8004b50:	6713      	str	r3, [r2, #112]	; 0x70
 8004b52:	4b67      	ldr	r3, [pc, #412]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b56:	4a66      	ldr	r2, [pc, #408]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b58:	f023 0304 	bic.w	r3, r3, #4
 8004b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b5e:	e01c      	b.n	8004b9a <HAL_RCC_OscConfig+0x376>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	2b05      	cmp	r3, #5
 8004b66:	d10c      	bne.n	8004b82 <HAL_RCC_OscConfig+0x35e>
 8004b68:	4b61      	ldr	r3, [pc, #388]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6c:	4a60      	ldr	r2, [pc, #384]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b6e:	f043 0304 	orr.w	r3, r3, #4
 8004b72:	6713      	str	r3, [r2, #112]	; 0x70
 8004b74:	4b5e      	ldr	r3, [pc, #376]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b78:	4a5d      	ldr	r2, [pc, #372]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b7a:	f043 0301 	orr.w	r3, r3, #1
 8004b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b80:	e00b      	b.n	8004b9a <HAL_RCC_OscConfig+0x376>
 8004b82:	4b5b      	ldr	r3, [pc, #364]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b86:	4a5a      	ldr	r2, [pc, #360]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b88:	f023 0301 	bic.w	r3, r3, #1
 8004b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b8e:	4b58      	ldr	r3, [pc, #352]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b92:	4a57      	ldr	r2, [pc, #348]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b94:	f023 0304 	bic.w	r3, r3, #4
 8004b98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d015      	beq.n	8004bce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba2:	f7fd fe89 	bl	80028b8 <HAL_GetTick>
 8004ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba8:	e00a      	b.n	8004bc0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004baa:	f7fd fe85 	bl	80028b8 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e0ce      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc0:	4b4b      	ldr	r3, [pc, #300]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0ee      	beq.n	8004baa <HAL_RCC_OscConfig+0x386>
 8004bcc:	e014      	b.n	8004bf8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bce:	f7fd fe73 	bl	80028b8 <HAL_GetTick>
 8004bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bd4:	e00a      	b.n	8004bec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bd6:	f7fd fe6f 	bl	80028b8 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e0b8      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bec:	4b40      	ldr	r3, [pc, #256]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1ee      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bf8:	7dfb      	ldrb	r3, [r7, #23]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d105      	bne.n	8004c0a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bfe:	4b3c      	ldr	r3, [pc, #240]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	4a3b      	ldr	r2, [pc, #236]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 80a4 	beq.w	8004d5c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c14:	4b36      	ldr	r3, [pc, #216]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f003 030c 	and.w	r3, r3, #12
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d06b      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d149      	bne.n	8004cbc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c28:	4b31      	ldr	r3, [pc, #196]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a30      	ldr	r2, [pc, #192]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004c2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c34:	f7fd fe40 	bl	80028b8 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c3c:	f7fd fe3c 	bl	80028b8 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e087      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c4e:	4b28      	ldr	r3, [pc, #160]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1f0      	bne.n	8004c3c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69da      	ldr	r2, [r3, #28]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	019b      	lsls	r3, r3, #6
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c70:	085b      	lsrs	r3, r3, #1
 8004c72:	3b01      	subs	r3, #1
 8004c74:	041b      	lsls	r3, r3, #16
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	061b      	lsls	r3, r3, #24
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004c82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c86:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c88:	4b19      	ldr	r3, [pc, #100]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a18      	ldr	r2, [pc, #96]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c94:	f7fd fe10 	bl	80028b8 <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c9c:	f7fd fe0c 	bl	80028b8 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e057      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cae:	4b10      	ldr	r3, [pc, #64]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0f0      	beq.n	8004c9c <HAL_RCC_OscConfig+0x478>
 8004cba:	e04f      	b.n	8004d5c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cbc:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a0b      	ldr	r2, [pc, #44]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc8:	f7fd fdf6 	bl	80028b8 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd0:	f7fd fdf2 	bl	80028b8 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e03d      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce2:	4b03      	ldr	r3, [pc, #12]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f0      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x4ac>
 8004cee:	e035      	b.n	8004d5c <HAL_RCC_OscConfig+0x538>
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004cf8:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <HAL_RCC_OscConfig+0x544>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d028      	beq.n	8004d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d121      	bne.n	8004d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d11a      	bne.n	8004d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d28:	4013      	ands	r3, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d111      	bne.n	8004d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3e:	085b      	lsrs	r3, r3, #1
 8004d40:	3b01      	subs	r3, #1
 8004d42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d107      	bne.n	8004d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d001      	beq.n	8004d5c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40023800 	.word	0x40023800

08004d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0d0      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d84:	4b6a      	ldr	r3, [pc, #424]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 030f 	and.w	r3, r3, #15
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d910      	bls.n	8004db4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d92:	4b67      	ldr	r3, [pc, #412]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f023 020f 	bic.w	r2, r3, #15
 8004d9a:	4965      	ldr	r1, [pc, #404]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da2:	4b63      	ldr	r3, [pc, #396]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d001      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0b8      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d020      	beq.n	8004e02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dcc:	4b59      	ldr	r3, [pc, #356]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	4a58      	ldr	r2, [pc, #352]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d005      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004de4:	4b53      	ldr	r3, [pc, #332]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	4a52      	ldr	r2, [pc, #328]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004dea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df0:	4b50      	ldr	r3, [pc, #320]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	494d      	ldr	r1, [pc, #308]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d040      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d107      	bne.n	8004e26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e16:	4b47      	ldr	r3, [pc, #284]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d115      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e07f      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d107      	bne.n	8004e3e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e2e:	4b41      	ldr	r3, [pc, #260]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d109      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e073      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e3e:	4b3d      	ldr	r3, [pc, #244]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e06b      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e4e:	4b39      	ldr	r3, [pc, #228]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f023 0203 	bic.w	r2, r3, #3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	4936      	ldr	r1, [pc, #216]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e60:	f7fd fd2a 	bl	80028b8 <HAL_GetTick>
 8004e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e66:	e00a      	b.n	8004e7e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e68:	f7fd fd26 	bl	80028b8 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e053      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7e:	4b2d      	ldr	r3, [pc, #180]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 020c 	and.w	r2, r3, #12
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d1eb      	bne.n	8004e68 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e90:	4b27      	ldr	r3, [pc, #156]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 030f 	and.w	r3, r3, #15
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d210      	bcs.n	8004ec0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9e:	4b24      	ldr	r3, [pc, #144]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f023 020f 	bic.w	r2, r3, #15
 8004ea6:	4922      	ldr	r1, [pc, #136]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eae:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d001      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e032      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d008      	beq.n	8004ede <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ecc:	4b19      	ldr	r3, [pc, #100]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	4916      	ldr	r1, [pc, #88]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d009      	beq.n	8004efe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004eea:	4b12      	ldr	r3, [pc, #72]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	490e      	ldr	r1, [pc, #56]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004efe:	f000 f821 	bl	8004f44 <HAL_RCC_GetSysClockFreq>
 8004f02:	4602      	mov	r2, r0
 8004f04:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	091b      	lsrs	r3, r3, #4
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	490a      	ldr	r1, [pc, #40]	; (8004f38 <HAL_RCC_ClockConfig+0x1cc>)
 8004f10:	5ccb      	ldrb	r3, [r1, r3]
 8004f12:	fa22 f303 	lsr.w	r3, r2, r3
 8004f16:	4a09      	ldr	r2, [pc, #36]	; (8004f3c <HAL_RCC_ClockConfig+0x1d0>)
 8004f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f1a:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <HAL_RCC_ClockConfig+0x1d4>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fd fae0 	bl	80024e4 <HAL_InitTick>

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	40023c00 	.word	0x40023c00
 8004f34:	40023800 	.word	0x40023800
 8004f38:	0800b1a4 	.word	0x0800b1a4
 8004f3c:	20000000 	.word	0x20000000
 8004f40:	20000004 	.word	0x20000004

08004f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f48:	b090      	sub	sp, #64	; 0x40
 8004f4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f50:	2300      	movs	r3, #0
 8004f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f54:	2300      	movs	r3, #0
 8004f56:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f5c:	4b59      	ldr	r3, [pc, #356]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 030c 	and.w	r3, r3, #12
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d00d      	beq.n	8004f84 <HAL_RCC_GetSysClockFreq+0x40>
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	f200 80a1 	bhi.w	80050b0 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <HAL_RCC_GetSysClockFreq+0x34>
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d003      	beq.n	8004f7e <HAL_RCC_GetSysClockFreq+0x3a>
 8004f76:	e09b      	b.n	80050b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f78:	4b53      	ldr	r3, [pc, #332]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f7a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f7c:	e09b      	b.n	80050b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f7e:	4b53      	ldr	r3, [pc, #332]	; (80050cc <HAL_RCC_GetSysClockFreq+0x188>)
 8004f80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f82:	e098      	b.n	80050b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f84:	4b4f      	ldr	r3, [pc, #316]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f8c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004f8e:	4b4d      	ldr	r3, [pc, #308]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d028      	beq.n	8004fec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f9a:	4b4a      	ldr	r3, [pc, #296]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	099b      	lsrs	r3, r3, #6
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	623b      	str	r3, [r7, #32]
 8004fa4:	627a      	str	r2, [r7, #36]	; 0x24
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004fac:	2100      	movs	r1, #0
 8004fae:	4b47      	ldr	r3, [pc, #284]	; (80050cc <HAL_RCC_GetSysClockFreq+0x188>)
 8004fb0:	fb03 f201 	mul.w	r2, r3, r1
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	fb00 f303 	mul.w	r3, r0, r3
 8004fba:	4413      	add	r3, r2
 8004fbc:	4a43      	ldr	r2, [pc, #268]	; (80050cc <HAL_RCC_GetSysClockFreq+0x188>)
 8004fbe:	fba0 1202 	umull	r1, r2, r0, r2
 8004fc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fc4:	460a      	mov	r2, r1
 8004fc6:	62ba      	str	r2, [r7, #40]	; 0x28
 8004fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fca:	4413      	add	r3, r2
 8004fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	61bb      	str	r3, [r7, #24]
 8004fd4:	61fa      	str	r2, [r7, #28]
 8004fd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004fde:	f7fb f967 	bl	80002b0 <__aeabi_uldivmod>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fea:	e053      	b.n	8005094 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fec:	4b35      	ldr	r3, [pc, #212]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	099b      	lsrs	r3, r3, #6
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	613b      	str	r3, [r7, #16]
 8004ff6:	617a      	str	r2, [r7, #20]
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ffe:	f04f 0b00 	mov.w	fp, #0
 8005002:	4652      	mov	r2, sl
 8005004:	465b      	mov	r3, fp
 8005006:	f04f 0000 	mov.w	r0, #0
 800500a:	f04f 0100 	mov.w	r1, #0
 800500e:	0159      	lsls	r1, r3, #5
 8005010:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005014:	0150      	lsls	r0, r2, #5
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	ebb2 080a 	subs.w	r8, r2, sl
 800501e:	eb63 090b 	sbc.w	r9, r3, fp
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800502e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005032:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005036:	ebb2 0408 	subs.w	r4, r2, r8
 800503a:	eb63 0509 	sbc.w	r5, r3, r9
 800503e:	f04f 0200 	mov.w	r2, #0
 8005042:	f04f 0300 	mov.w	r3, #0
 8005046:	00eb      	lsls	r3, r5, #3
 8005048:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800504c:	00e2      	lsls	r2, r4, #3
 800504e:	4614      	mov	r4, r2
 8005050:	461d      	mov	r5, r3
 8005052:	eb14 030a 	adds.w	r3, r4, sl
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	eb45 030b 	adc.w	r3, r5, fp
 800505c:	607b      	str	r3, [r7, #4]
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	e9d7 4500 	ldrd	r4, r5, [r7]
 800506a:	4629      	mov	r1, r5
 800506c:	028b      	lsls	r3, r1, #10
 800506e:	4621      	mov	r1, r4
 8005070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005074:	4621      	mov	r1, r4
 8005076:	028a      	lsls	r2, r1, #10
 8005078:	4610      	mov	r0, r2
 800507a:	4619      	mov	r1, r3
 800507c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507e:	2200      	movs	r2, #0
 8005080:	60bb      	str	r3, [r7, #8]
 8005082:	60fa      	str	r2, [r7, #12]
 8005084:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005088:	f7fb f912 	bl	80002b0 <__aeabi_uldivmod>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4613      	mov	r3, r2
 8005092:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005094:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	0c1b      	lsrs	r3, r3, #16
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	3301      	adds	r3, #1
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80050a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050ae:	e002      	b.n	80050b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80050b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3740      	adds	r7, #64	; 0x40
 80050bc:	46bd      	mov	sp, r7
 80050be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050c2:	bf00      	nop
 80050c4:	40023800 	.word	0x40023800
 80050c8:	00f42400 	.word	0x00f42400
 80050cc:	017d7840 	.word	0x017d7840

080050d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050d4:	4b03      	ldr	r3, [pc, #12]	; (80050e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050d6:	681b      	ldr	r3, [r3, #0]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	20000000 	.word	0x20000000

080050e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050ec:	f7ff fff0 	bl	80050d0 <HAL_RCC_GetHCLKFreq>
 80050f0:	4602      	mov	r2, r0
 80050f2:	4b05      	ldr	r3, [pc, #20]	; (8005108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	0a9b      	lsrs	r3, r3, #10
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	4903      	ldr	r1, [pc, #12]	; (800510c <HAL_RCC_GetPCLK1Freq+0x24>)
 80050fe:	5ccb      	ldrb	r3, [r1, r3]
 8005100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005104:	4618      	mov	r0, r3
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40023800 	.word	0x40023800
 800510c:	0800b1b4 	.word	0x0800b1b4

08005110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005114:	f7ff ffdc 	bl	80050d0 <HAL_RCC_GetHCLKFreq>
 8005118:	4602      	mov	r2, r0
 800511a:	4b05      	ldr	r3, [pc, #20]	; (8005130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	0b5b      	lsrs	r3, r3, #13
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	4903      	ldr	r1, [pc, #12]	; (8005134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005126:	5ccb      	ldrb	r3, [r1, r3]
 8005128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800512c:	4618      	mov	r0, r3
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40023800 	.word	0x40023800
 8005134:	0800b1b4 	.word	0x0800b1b4

08005138 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	220f      	movs	r2, #15
 8005146:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005148:	4b12      	ldr	r3, [pc, #72]	; (8005194 <HAL_RCC_GetClockConfig+0x5c>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 0203 	and.w	r2, r3, #3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005154:	4b0f      	ldr	r3, [pc, #60]	; (8005194 <HAL_RCC_GetClockConfig+0x5c>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005160:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <HAL_RCC_GetClockConfig+0x5c>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800516c:	4b09      	ldr	r3, [pc, #36]	; (8005194 <HAL_RCC_GetClockConfig+0x5c>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	08db      	lsrs	r3, r3, #3
 8005172:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800517a:	4b07      	ldr	r3, [pc, #28]	; (8005198 <HAL_RCC_GetClockConfig+0x60>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 020f 	and.w	r2, r3, #15
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	601a      	str	r2, [r3, #0]
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	40023800 	.word	0x40023800
 8005198:	40023c00 	.word	0x40023c00

0800519c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b088      	sub	sp, #32
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80051a4:	2300      	movs	r3, #0
 80051a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80051a8:	2300      	movs	r3, #0
 80051aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80051ac:	2300      	movs	r3, #0
 80051ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80051b0:	2300      	movs	r3, #0
 80051b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80051b4:	2300      	movs	r3, #0
 80051b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d012      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80051c4:	4b69      	ldr	r3, [pc, #420]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	4a68      	ldr	r2, [pc, #416]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80051ce:	6093      	str	r3, [r2, #8]
 80051d0:	4b66      	ldr	r3, [pc, #408]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d8:	4964      	ldr	r1, [pc, #400]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80051e6:	2301      	movs	r3, #1
 80051e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d017      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051f6:	4b5d      	ldr	r3, [pc, #372]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005204:	4959      	ldr	r1, [pc, #356]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005210:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005214:	d101      	bne.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005216:	2301      	movs	r3, #1
 8005218:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005222:	2301      	movs	r3, #1
 8005224:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d017      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005232:	4b4e      	ldr	r3, [pc, #312]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005238:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	494a      	ldr	r1, [pc, #296]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005250:	d101      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005252:	2301      	movs	r3, #1
 8005254:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800525e:	2301      	movs	r3, #1
 8005260:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800526e:	2301      	movs	r3, #1
 8005270:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 808b 	beq.w	8005396 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005280:	4b3a      	ldr	r3, [pc, #232]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	4a39      	ldr	r2, [pc, #228]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800528a:	6413      	str	r3, [r2, #64]	; 0x40
 800528c:	4b37      	ldr	r3, [pc, #220]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005294:	60bb      	str	r3, [r7, #8]
 8005296:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005298:	4b35      	ldr	r3, [pc, #212]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a34      	ldr	r2, [pc, #208]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800529e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052a4:	f7fd fb08 	bl	80028b8 <HAL_GetTick>
 80052a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80052aa:	e008      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ac:	f7fd fb04 	bl	80028b8 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b64      	cmp	r3, #100	; 0x64
 80052b8:	d901      	bls.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e357      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80052be:	4b2c      	ldr	r3, [pc, #176]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0f0      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052ca:	4b28      	ldr	r3, [pc, #160]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d035      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d02e      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052e8:	4b20      	ldr	r3, [pc, #128]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052f2:	4b1e      	ldr	r3, [pc, #120]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f6:	4a1d      	ldr	r2, [pc, #116]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052fe:	4b1b      	ldr	r3, [pc, #108]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005302:	4a1a      	ldr	r2, [pc, #104]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005308:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800530a:	4a18      	ldr	r2, [pc, #96]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005310:	4b16      	ldr	r3, [pc, #88]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b01      	cmp	r3, #1
 800531a:	d114      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531c:	f7fd facc 	bl	80028b8 <HAL_GetTick>
 8005320:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005322:	e00a      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005324:	f7fd fac8 	bl	80028b8 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005332:	4293      	cmp	r3, r2
 8005334:	d901      	bls.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e319      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800533a:	4b0c      	ldr	r3, [pc, #48]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800533c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0ee      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800534e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005352:	d111      	bne.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005354:	4b05      	ldr	r3, [pc, #20]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005360:	4b04      	ldr	r3, [pc, #16]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005362:	400b      	ands	r3, r1
 8005364:	4901      	ldr	r1, [pc, #4]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005366:	4313      	orrs	r3, r2
 8005368:	608b      	str	r3, [r1, #8]
 800536a:	e00b      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800536c:	40023800 	.word	0x40023800
 8005370:	40007000 	.word	0x40007000
 8005374:	0ffffcff 	.word	0x0ffffcff
 8005378:	4baa      	ldr	r3, [pc, #680]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	4aa9      	ldr	r2, [pc, #676]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800537e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005382:	6093      	str	r3, [r2, #8]
 8005384:	4ba7      	ldr	r3, [pc, #668]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005386:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005390:	49a4      	ldr	r1, [pc, #656]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005392:	4313      	orrs	r3, r2
 8005394:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0310 	and.w	r3, r3, #16
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d010      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053a2:	4ba0      	ldr	r3, [pc, #640]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053a8:	4a9e      	ldr	r2, [pc, #632]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80053b2:	4b9c      	ldr	r3, [pc, #624]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	4999      	ldr	r1, [pc, #612]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053d0:	4b94      	ldr	r3, [pc, #592]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053de:	4991      	ldr	r1, [pc, #580]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053f2:	4b8c      	ldr	r3, [pc, #560]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005400:	4988      	ldr	r1, [pc, #544]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005402:	4313      	orrs	r3, r2
 8005404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005414:	4b83      	ldr	r3, [pc, #524]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005422:	4980      	ldr	r1, [pc, #512]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005424:	4313      	orrs	r3, r2
 8005426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005436:	4b7b      	ldr	r3, [pc, #492]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005444:	4977      	ldr	r1, [pc, #476]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005446:	4313      	orrs	r3, r2
 8005448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005458:	4b72      	ldr	r3, [pc, #456]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800545a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545e:	f023 0203 	bic.w	r2, r3, #3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005466:	496f      	ldr	r1, [pc, #444]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800547a:	4b6a      	ldr	r3, [pc, #424]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800547c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005480:	f023 020c 	bic.w	r2, r3, #12
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005488:	4966      	ldr	r1, [pc, #408]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800548a:	4313      	orrs	r3, r2
 800548c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00a      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800549c:	4b61      	ldr	r3, [pc, #388]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800549e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054aa:	495e      	ldr	r1, [pc, #376]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00a      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054be:	4b59      	ldr	r3, [pc, #356]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054cc:	4955      	ldr	r1, [pc, #340]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00a      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054e0:	4b50      	ldr	r3, [pc, #320]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ee:	494d      	ldr	r1, [pc, #308]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00a      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005502:	4b48      	ldr	r3, [pc, #288]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005508:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005510:	4944      	ldr	r1, [pc, #272]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005512:	4313      	orrs	r3, r2
 8005514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00a      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005524:	4b3f      	ldr	r3, [pc, #252]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005532:	493c      	ldr	r1, [pc, #240]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005534:	4313      	orrs	r3, r2
 8005536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00a      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005546:	4b37      	ldr	r3, [pc, #220]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005554:	4933      	ldr	r1, [pc, #204]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005556:	4313      	orrs	r3, r2
 8005558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00a      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005568:	4b2e      	ldr	r3, [pc, #184]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800556a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800556e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005576:	492b      	ldr	r1, [pc, #172]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005578:	4313      	orrs	r3, r2
 800557a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d011      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800558a:	4b26      	ldr	r3, [pc, #152]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800558c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005590:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005598:	4922      	ldr	r1, [pc, #136]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800559a:	4313      	orrs	r3, r2
 800559c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055a8:	d101      	bne.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80055aa:	2301      	movs	r3, #1
 80055ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80055ba:	2301      	movs	r3, #1
 80055bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055ca:	4b16      	ldr	r3, [pc, #88]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055d8:	4912      	ldr	r1, [pc, #72]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00b      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055ec:	4b0d      	ldr	r3, [pc, #52]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055fc:	4909      	ldr	r1, [pc, #36]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d006      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 80d9 	beq.w	80057ca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005618:	4b02      	ldr	r3, [pc, #8]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a01      	ldr	r2, [pc, #4]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800561e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005622:	e001      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005624:	40023800 	.word	0x40023800
 8005628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800562a:	f7fd f945 	bl	80028b8 <HAL_GetTick>
 800562e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005630:	e008      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005632:	f7fd f941 	bl	80028b8 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b64      	cmp	r3, #100	; 0x64
 800563e:	d901      	bls.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e194      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005644:	4b6c      	ldr	r3, [pc, #432]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1f0      	bne.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d021      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005660:	2b00      	cmp	r3, #0
 8005662:	d11d      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005664:	4b64      	ldr	r3, [pc, #400]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800566a:	0c1b      	lsrs	r3, r3, #16
 800566c:	f003 0303 	and.w	r3, r3, #3
 8005670:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005672:	4b61      	ldr	r3, [pc, #388]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005678:	0e1b      	lsrs	r3, r3, #24
 800567a:	f003 030f 	and.w	r3, r3, #15
 800567e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	019a      	lsls	r2, r3, #6
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	041b      	lsls	r3, r3, #16
 800568a:	431a      	orrs	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	061b      	lsls	r3, r3, #24
 8005690:	431a      	orrs	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	071b      	lsls	r3, r3, #28
 8005698:	4957      	ldr	r1, [pc, #348]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800569a:	4313      	orrs	r3, r2
 800569c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d004      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056b4:	d00a      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d02e      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056ca:	d129      	bne.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80056cc:	4b4a      	ldr	r3, [pc, #296]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056d2:	0c1b      	lsrs	r3, r3, #16
 80056d4:	f003 0303 	and.w	r3, r3, #3
 80056d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056da:	4b47      	ldr	r3, [pc, #284]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056e0:	0f1b      	lsrs	r3, r3, #28
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	019a      	lsls	r2, r3, #6
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	041b      	lsls	r3, r3, #16
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	061b      	lsls	r3, r3, #24
 80056fa:	431a      	orrs	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	071b      	lsls	r3, r3, #28
 8005700:	493d      	ldr	r1, [pc, #244]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005702:	4313      	orrs	r3, r2
 8005704:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005708:	4b3b      	ldr	r3, [pc, #236]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800570a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800570e:	f023 021f 	bic.w	r2, r3, #31
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	3b01      	subs	r3, #1
 8005718:	4937      	ldr	r1, [pc, #220]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800571a:	4313      	orrs	r3, r2
 800571c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d01d      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800572c:	4b32      	ldr	r3, [pc, #200]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800572e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005732:	0e1b      	lsrs	r3, r3, #24
 8005734:	f003 030f 	and.w	r3, r3, #15
 8005738:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800573a:	4b2f      	ldr	r3, [pc, #188]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800573c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005740:	0f1b      	lsrs	r3, r3, #28
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	019a      	lsls	r2, r3, #6
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	041b      	lsls	r3, r3, #16
 8005754:	431a      	orrs	r2, r3
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	061b      	lsls	r3, r3, #24
 800575a:	431a      	orrs	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	071b      	lsls	r3, r3, #28
 8005760:	4925      	ldr	r1, [pc, #148]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005762:	4313      	orrs	r3, r2
 8005764:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d011      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	019a      	lsls	r2, r3, #6
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	041b      	lsls	r3, r3, #16
 8005780:	431a      	orrs	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	061b      	lsls	r3, r3, #24
 8005788:	431a      	orrs	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	071b      	lsls	r3, r3, #28
 8005790:	4919      	ldr	r1, [pc, #100]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005798:	4b17      	ldr	r3, [pc, #92]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a16      	ldr	r2, [pc, #88]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800579e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057a4:	f7fd f888 	bl	80028b8 <HAL_GetTick>
 80057a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057aa:	e008      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80057ac:	f7fd f884 	bl	80028b8 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b64      	cmp	r3, #100	; 0x64
 80057b8:	d901      	bls.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e0d7      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057be:	4b0e      	ldr	r3, [pc, #56]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0f0      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	f040 80cd 	bne.w	800596c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80057d2:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a08      	ldr	r2, [pc, #32]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057de:	f7fd f86b 	bl	80028b8 <HAL_GetTick>
 80057e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057e4:	e00a      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80057e6:	f7fd f867 	bl	80028b8 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b64      	cmp	r3, #100	; 0x64
 80057f2:	d903      	bls.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e0ba      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80057f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057fc:	4b5e      	ldr	r3, [pc, #376]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005808:	d0ed      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581a:	2b00      	cmp	r3, #0
 800581c:	d009      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005826:	2b00      	cmp	r3, #0
 8005828:	d02e      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	2b00      	cmp	r3, #0
 8005830:	d12a      	bne.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005832:	4b51      	ldr	r3, [pc, #324]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005838:	0c1b      	lsrs	r3, r3, #16
 800583a:	f003 0303 	and.w	r3, r3, #3
 800583e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005840:	4b4d      	ldr	r3, [pc, #308]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005846:	0f1b      	lsrs	r3, r3, #28
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	019a      	lsls	r2, r3, #6
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	041b      	lsls	r3, r3, #16
 8005858:	431a      	orrs	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	061b      	lsls	r3, r3, #24
 8005860:	431a      	orrs	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	071b      	lsls	r3, r3, #28
 8005866:	4944      	ldr	r1, [pc, #272]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005868:	4313      	orrs	r3, r2
 800586a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800586e:	4b42      	ldr	r3, [pc, #264]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005874:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587c:	3b01      	subs	r3, #1
 800587e:	021b      	lsls	r3, r3, #8
 8005880:	493d      	ldr	r1, [pc, #244]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005882:	4313      	orrs	r3, r2
 8005884:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d022      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005898:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800589c:	d11d      	bne.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800589e:	4b36      	ldr	r3, [pc, #216]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a4:	0e1b      	lsrs	r3, r3, #24
 80058a6:	f003 030f 	and.w	r3, r3, #15
 80058aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058ac:	4b32      	ldr	r3, [pc, #200]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b2:	0f1b      	lsrs	r3, r3, #28
 80058b4:	f003 0307 	and.w	r3, r3, #7
 80058b8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	019a      	lsls	r2, r3, #6
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	041b      	lsls	r3, r3, #16
 80058c6:	431a      	orrs	r2, r3
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	061b      	lsls	r3, r3, #24
 80058cc:	431a      	orrs	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	071b      	lsls	r3, r3, #28
 80058d2:	4929      	ldr	r1, [pc, #164]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0308 	and.w	r3, r3, #8
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d028      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80058e6:	4b24      	ldr	r3, [pc, #144]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ec:	0e1b      	lsrs	r3, r3, #24
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80058f4:	4b20      	ldr	r3, [pc, #128]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fa:	0c1b      	lsrs	r3, r3, #16
 80058fc:	f003 0303 	and.w	r3, r3, #3
 8005900:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	019a      	lsls	r2, r3, #6
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	041b      	lsls	r3, r3, #16
 800590c:	431a      	orrs	r2, r3
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	061b      	lsls	r3, r3, #24
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	071b      	lsls	r3, r3, #28
 800591a:	4917      	ldr	r1, [pc, #92]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800591c:	4313      	orrs	r3, r2
 800591e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005922:	4b15      	ldr	r3, [pc, #84]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005928:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005930:	4911      	ldr	r1, [pc, #68]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005932:	4313      	orrs	r3, r2
 8005934:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005938:	4b0f      	ldr	r3, [pc, #60]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a0e      	ldr	r2, [pc, #56]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800593e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005942:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005944:	f7fc ffb8 	bl	80028b8 <HAL_GetTick>
 8005948:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800594a:	e008      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800594c:	f7fc ffb4 	bl	80028b8 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b64      	cmp	r3, #100	; 0x64
 8005958:	d901      	bls.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e007      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800595e:	4b06      	ldr	r3, [pc, #24]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005966:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800596a:	d1ef      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3720      	adds	r7, #32
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	40023800 	.word	0x40023800

0800597c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005984:	2300      	movs	r3, #0
 8005986:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8005988:	2300      	movs	r3, #0
 800598a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800598c:	2300      	movs	r3, #0
 800598e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8005990:	2300      	movs	r3, #0
 8005992:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800599a:	f040 808c 	bne.w	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800599e:	4b95      	ldr	r3, [pc, #596]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059a4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80059ac:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059b4:	d07c      	beq.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059bc:	d87d      	bhi.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d004      	beq.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ca:	d039      	beq.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80059cc:	e075      	b.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80059ce:	4b89      	ldr	r3, [pc, #548]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d108      	bne.n	80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80059da:	4b86      	ldr	r3, [pc, #536]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059e2:	4a85      	ldr	r2, [pc, #532]	; (8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80059e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e8:	613b      	str	r3, [r7, #16]
 80059ea:	e007      	b.n	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80059ec:	4b81      	ldr	r3, [pc, #516]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059f4:	4a81      	ldr	r2, [pc, #516]	; (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80059f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fa:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80059fc:	4b7d      	ldr	r3, [pc, #500]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80059fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a02:	0e1b      	lsrs	r3, r3, #24
 8005a04:	f003 030f 	and.w	r3, r3, #15
 8005a08:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005a0a:	4b7a      	ldr	r3, [pc, #488]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a10:	099b      	lsrs	r3, r3, #6
 8005a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	fb03 f202 	mul.w	r2, r3, r2
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a22:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005a24:	4b73      	ldr	r3, [pc, #460]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a2a:	0a1b      	lsrs	r3, r3, #8
 8005a2c:	f003 031f 	and.w	r3, r3, #31
 8005a30:	3301      	adds	r3, #1
 8005a32:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3c:	617b      	str	r3, [r7, #20]
        break;
 8005a3e:	e03d      	b.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005a40:	4b6c      	ldr	r3, [pc, #432]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d108      	bne.n	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a4c:	4b69      	ldr	r3, [pc, #420]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a54:	4a68      	ldr	r2, [pc, #416]	; (8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5a:	613b      	str	r3, [r7, #16]
 8005a5c:	e007      	b.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005a5e:	4b65      	ldr	r3, [pc, #404]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a66:	4a65      	ldr	r2, [pc, #404]	; (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005a6e:	4b61      	ldr	r3, [pc, #388]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a74:	0e1b      	lsrs	r3, r3, #24
 8005a76:	f003 030f 	and.w	r3, r3, #15
 8005a7a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005a7c:	4b5d      	ldr	r3, [pc, #372]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a82:	099b      	lsrs	r3, r3, #6
 8005a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	fb03 f202 	mul.w	r2, r3, r2
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a94:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005a96:	4b57      	ldr	r3, [pc, #348]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a9c:	f003 031f 	and.w	r3, r3, #31
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aac:	617b      	str	r3, [r7, #20]
        break;
 8005aae:	e005      	b.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005ab0:	4b53      	ldr	r3, [pc, #332]	; (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005ab2:	617b      	str	r3, [r7, #20]
        break;
 8005ab4:	e002      	b.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 8005ab6:	bf00      	nop
 8005ab8:	e000      	b.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 8005aba:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ac2:	f040 808c 	bne.w	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005ac6:	4b4b      	ldr	r3, [pc, #300]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005acc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005ad4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005adc:	d07c      	beq.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ae4:	d87d      	bhi.n	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d004      	beq.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005af2:	d039      	beq.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005af4:	e075      	b.n	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005af6:	4b3f      	ldr	r3, [pc, #252]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d108      	bne.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b02:	4b3c      	ldr	r3, [pc, #240]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b0a:	4a3b      	ldr	r2, [pc, #236]	; (8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	e007      	b.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005b14:	4b37      	ldr	r3, [pc, #220]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b1c:	4a37      	ldr	r2, [pc, #220]	; (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b22:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005b24:	4b33      	ldr	r3, [pc, #204]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2a:	0e1b      	lsrs	r3, r3, #24
 8005b2c:	f003 030f 	and.w	r3, r3, #15
 8005b30:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005b32:	4b30      	ldr	r3, [pc, #192]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b38:	099b      	lsrs	r3, r3, #6
 8005b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	fb03 f202 	mul.w	r2, r3, r2
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005b4c:	4b29      	ldr	r3, [pc, #164]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b52:	0a1b      	lsrs	r3, r3, #8
 8005b54:	f003 031f 	and.w	r3, r3, #31
 8005b58:	3301      	adds	r3, #1
 8005b5a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b64:	617b      	str	r3, [r7, #20]
        break;
 8005b66:	e03d      	b.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005b68:	4b22      	ldr	r3, [pc, #136]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d108      	bne.n	8005b86 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b74:	4b1f      	ldr	r3, [pc, #124]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b7c:	4a1e      	ldr	r2, [pc, #120]	; (8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b82:	613b      	str	r3, [r7, #16]
 8005b84:	e007      	b.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005b86:	4b1b      	ldr	r3, [pc, #108]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b8e:	4a1b      	ldr	r2, [pc, #108]	; (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b94:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005b96:	4b17      	ldr	r3, [pc, #92]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b9c:	0e1b      	lsrs	r3, r3, #24
 8005b9e:	f003 030f 	and.w	r3, r3, #15
 8005ba2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005ba4:	4b13      	ldr	r3, [pc, #76]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005baa:	099b      	lsrs	r3, r3, #6
 8005bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	fb03 f202 	mul.w	r2, r3, r2
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bbc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005bbe:	4b0d      	ldr	r3, [pc, #52]	; (8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bc4:	f003 031f 	and.w	r3, r3, #31
 8005bc8:	3301      	adds	r3, #1
 8005bca:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd4:	617b      	str	r3, [r7, #20]
        break;
 8005bd6:	e005      	b.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005bd8:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005bda:	617b      	str	r3, [r7, #20]
        break;
 8005bdc:	e002      	b.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 8005bde:	bf00      	nop
 8005be0:	e000      	b.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 8005be2:	bf00      	nop

  return frequency;
 8005be4:	697b      	ldr	r3, [r7, #20]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	371c      	adds	r7, #28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	00f42400 	.word	0x00f42400
 8005bfc:	017d7840 	.word	0x017d7840
 8005c00:	00bb8000 	.word	0x00bb8000

08005c04 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e081      	b.n	8005d1a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	7f5b      	ldrb	r3, [r3, #29]
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d105      	bne.n	8005c2c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7fc f93c 	bl	8001ea4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	22ca      	movs	r2, #202	; 0xca
 8005c38:	625a      	str	r2, [r3, #36]	; 0x24
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2253      	movs	r2, #83	; 0x53
 8005c40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fb16 	bl	8006274 <RTC_EnterInitMode>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d008      	beq.n	8005c60 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	22ff      	movs	r2, #255	; 0xff
 8005c54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2204      	movs	r2, #4
 8005c5a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e05c      	b.n	8005d1a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6899      	ldr	r1, [r3, #8]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	4b2e      	ldr	r3, [pc, #184]	; (8005d24 <HAL_RTC_Init+0x120>)
 8005c6c:	400b      	ands	r3, r1
 8005c6e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6899      	ldr	r1, [r3, #8]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	431a      	orrs	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	68d2      	ldr	r2, [r2, #12]
 8005c96:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6919      	ldr	r1, [r3, #16]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	041a      	lsls	r2, r3, #16
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cba:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10e      	bne.n	8005ce8 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 faaa 	bl	8006224 <HAL_RTC_WaitForSynchro>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d008      	beq.n	8005ce8 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	22ff      	movs	r2, #255	; 0xff
 8005cdc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2204      	movs	r2, #4
 8005ce2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e018      	b.n	8005d1a <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 0208 	bic.w	r2, r2, #8
 8005cf6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	699a      	ldr	r2, [r3, #24]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	22ff      	movs	r2, #255	; 0xff
 8005d10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005d18:	2300      	movs	r3, #0
  }
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	ff8fffbf 	.word	0xff8fffbf

08005d28 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d28:	b590      	push	{r4, r7, lr}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	7f1b      	ldrb	r3, [r3, #28]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <HAL_RTC_SetTime+0x1c>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e0a8      	b.n	8005e96 <HAL_RTC_SetTime+0x16e>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2201      	movs	r2, #1
 8005d48:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d126      	bne.n	8005da4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d102      	bne.n	8005d6a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2200      	movs	r2, #0
 8005d68:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 faac 	bl	80062cc <RTC_ByteToBcd2>
 8005d74:	4603      	mov	r3, r0
 8005d76:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	785b      	ldrb	r3, [r3, #1]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 faa5 	bl	80062cc <RTC_ByteToBcd2>
 8005d82:	4603      	mov	r3, r0
 8005d84:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005d86:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	789b      	ldrb	r3, [r3, #2]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 fa9d 	bl	80062cc <RTC_ByteToBcd2>
 8005d92:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005d94:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	7b1b      	ldrb	r3, [r3, #12]
 8005d9c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	617b      	str	r3, [r7, #20]
 8005da2:	e018      	b.n	8005dd6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d102      	bne.n	8005db8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	2200      	movs	r2, #0
 8005db6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	785b      	ldrb	r3, [r3, #1]
 8005dc2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005dc4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005dca:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	7b1b      	ldrb	r3, [r3, #12]
 8005dd0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	22ca      	movs	r2, #202	; 0xca
 8005ddc:	625a      	str	r2, [r3, #36]	; 0x24
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2253      	movs	r2, #83	; 0x53
 8005de4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 fa44 	bl	8006274 <RTC_EnterInitMode>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00b      	beq.n	8005e0a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	22ff      	movs	r2, #255	; 0xff
 8005df8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2204      	movs	r2, #4
 8005dfe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e045      	b.n	8005e96 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	6979      	ldr	r1, [r7, #20]
 8005e10:	4b23      	ldr	r3, [pc, #140]	; (8005ea0 <HAL_RTC_SetTime+0x178>)
 8005e12:	400b      	ands	r3, r1
 8005e14:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e24:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6899      	ldr	r1, [r3, #8]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	691a      	ldr	r2, [r3, #16]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	431a      	orrs	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68da      	ldr	r2, [r3, #12]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e4c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f003 0320 	and.w	r3, r3, #32
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d111      	bne.n	8005e80 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 f9e1 	bl	8006224 <HAL_RTC_WaitForSynchro>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00b      	beq.n	8005e80 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	22ff      	movs	r2, #255	; 0xff
 8005e6e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2204      	movs	r2, #4
 8005e74:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e00a      	b.n	8005e96 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	22ff      	movs	r2, #255	; 0xff
 8005e86:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005e94:	2300      	movs	r3, #0
  }
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	371c      	adds	r7, #28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd90      	pop	{r4, r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	007f7f7f 	.word	0x007f7f7f

08005ea4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ea4:	b590      	push	{r4, r7, lr}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	7f1b      	ldrb	r3, [r3, #28]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d101      	bne.n	8005ec0 <HAL_RTC_SetDate+0x1c>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	e092      	b.n	8005fe6 <HAL_RTC_SetDate+0x142>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2202      	movs	r2, #2
 8005eca:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10e      	bne.n	8005ef0 <HAL_RTC_SetDate+0x4c>
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	785b      	ldrb	r3, [r3, #1]
 8005ed6:	f003 0310 	and.w	r3, r3, #16
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d008      	beq.n	8005ef0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	785b      	ldrb	r3, [r3, #1]
 8005ee2:	f023 0310 	bic.w	r3, r3, #16
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	330a      	adds	r3, #10
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d11c      	bne.n	8005f30 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	78db      	ldrb	r3, [r3, #3]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 f9e6 	bl	80062cc <RTC_ByteToBcd2>
 8005f00:	4603      	mov	r3, r0
 8005f02:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	785b      	ldrb	r3, [r3, #1]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 f9df 	bl	80062cc <RTC_ByteToBcd2>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005f12:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	789b      	ldrb	r3, [r3, #2]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 f9d7 	bl	80062cc <RTC_ByteToBcd2>
 8005f1e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005f20:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	617b      	str	r3, [r7, #20]
 8005f2e:	e00e      	b.n	8005f4e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	78db      	ldrb	r3, [r3, #3]
 8005f34:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	785b      	ldrb	r3, [r3, #1]
 8005f3a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005f3c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8005f42:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	22ca      	movs	r2, #202	; 0xca
 8005f54:	625a      	str	r2, [r3, #36]	; 0x24
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2253      	movs	r2, #83	; 0x53
 8005f5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 f988 	bl	8006274 <RTC_EnterInitMode>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00b      	beq.n	8005f82 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	22ff      	movs	r2, #255	; 0xff
 8005f70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2204      	movs	r2, #4
 8005f76:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e031      	b.n	8005fe6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	6979      	ldr	r1, [r7, #20]
 8005f88:	4b19      	ldr	r3, [pc, #100]	; (8005ff0 <HAL_RTC_SetDate+0x14c>)
 8005f8a:	400b      	ands	r3, r1
 8005f8c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68da      	ldr	r2, [r3, #12]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f9c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f003 0320 	and.w	r3, r3, #32
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d111      	bne.n	8005fd0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 f939 	bl	8006224 <HAL_RTC_WaitForSynchro>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00b      	beq.n	8005fd0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	22ff      	movs	r2, #255	; 0xff
 8005fbe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2204      	movs	r2, #4
 8005fc4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e00a      	b.n	8005fe6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	22ff      	movs	r2, #255	; 0xff
 8005fd6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
  }
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	371c      	adds	r7, #28
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd90      	pop	{r4, r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	00ffff3f 	.word	0x00ffff3f

08005ff4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005ff4:	b590      	push	{r4, r7, lr}
 8005ff6:	b089      	sub	sp, #36	; 0x24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8006000:	2300      	movs	r3, #0
 8006002:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8006004:	2300      	movs	r3, #0
 8006006:	61fb      	str	r3, [r7, #28]
 8006008:	2300      	movs	r3, #0
 800600a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	7f1b      	ldrb	r3, [r3, #28]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <HAL_RTC_SetAlarm+0x24>
 8006014:	2302      	movs	r3, #2
 8006016:	e101      	b.n	800621c <HAL_RTC_SetAlarm+0x228>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2201      	movs	r2, #1
 800601c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2202      	movs	r2, #2
 8006022:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d137      	bne.n	800609a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006034:	2b00      	cmp	r3, #0
 8006036:	d102      	bne.n	800603e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2200      	movs	r2, #0
 800603c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	4618      	mov	r0, r3
 8006044:	f000 f942 	bl	80062cc <RTC_ByteToBcd2>
 8006048:	4603      	mov	r3, r0
 800604a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	785b      	ldrb	r3, [r3, #1]
 8006050:	4618      	mov	r0, r3
 8006052:	f000 f93b 	bl	80062cc <RTC_ByteToBcd2>
 8006056:	4603      	mov	r3, r0
 8006058:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800605a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	789b      	ldrb	r3, [r3, #2]
 8006060:	4618      	mov	r0, r3
 8006062:	f000 f933 	bl	80062cc <RTC_ByteToBcd2>
 8006066:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8006068:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	7b1b      	ldrb	r3, [r3, #12]
 8006070:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006072:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800607c:	4618      	mov	r0, r3
 800607e:	f000 f925 	bl	80062cc <RTC_ByteToBcd2>
 8006082:	4603      	mov	r3, r0
 8006084:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006086:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800608e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006094:	4313      	orrs	r3, r2
 8006096:	61fb      	str	r3, [r7, #28]
 8006098:	e023      	b.n	80060e2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d102      	bne.n	80060ae <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	2200      	movs	r2, #0
 80060ac:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	785b      	ldrb	r3, [r3, #1]
 80060b8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80060ba:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80060c0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	7b1b      	ldrb	r3, [r3, #12]
 80060c6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80060c8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80060d0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80060d2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80060d8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80060de:	4313      	orrs	r3, r2
 80060e0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	22ca      	movs	r2, #202	; 0xca
 80060f4:	625a      	str	r2, [r3, #36]	; 0x24
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2253      	movs	r2, #83	; 0x53
 80060fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006106:	d13f      	bne.n	8006188 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689a      	ldr	r2, [r3, #8]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006116:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689a      	ldr	r2, [r3, #8]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006126:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006128:	f7fc fbc6 	bl	80028b8 <HAL_GetTick>
 800612c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800612e:	e013      	b.n	8006158 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006130:	f7fc fbc2 	bl	80028b8 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800613e:	d90b      	bls.n	8006158 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	22ff      	movs	r2, #255	; 0xff
 8006146:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2203      	movs	r2, #3
 800614c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e061      	b.n	800621c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d0e4      	beq.n	8006130 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006184:	609a      	str	r2, [r3, #8]
 8006186:	e03e      	b.n	8006206 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006196:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689a      	ldr	r2, [r3, #8]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061a6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061a8:	f7fc fb86 	bl	80028b8 <HAL_GetTick>
 80061ac:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80061ae:	e013      	b.n	80061d8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80061b0:	f7fc fb82 	bl	80028b8 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061be:	d90b      	bls.n	80061d8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	22ff      	movs	r2, #255	; 0xff
 80061c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2203      	movs	r2, #3
 80061cc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e021      	b.n	800621c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d0e4      	beq.n	80061b0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	69fa      	ldr	r2, [r7, #28]
 80061ec:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006204:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	22ff      	movs	r2, #255	; 0xff
 800620c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2201      	movs	r2, #1
 8006212:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3724      	adds	r7, #36	; 0x24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd90      	pop	{r4, r7, pc}

08006224 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800622c:	2300      	movs	r3, #0
 800622e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800623e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006240:	f7fc fb3a 	bl	80028b8 <HAL_GetTick>
 8006244:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006246:	e009      	b.n	800625c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006248:	f7fc fb36 	bl	80028b8 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006256:	d901      	bls.n	800625c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e007      	b.n	800626c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f003 0320 	and.w	r3, r3, #32
 8006266:	2b00      	cmp	r3, #0
 8006268:	d0ee      	beq.n	8006248 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800627c:	2300      	movs	r3, #0
 800627e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628a:	2b00      	cmp	r3, #0
 800628c:	d119      	bne.n	80062c2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f04f 32ff 	mov.w	r2, #4294967295
 8006296:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006298:	f7fc fb0e 	bl	80028b8 <HAL_GetTick>
 800629c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800629e:	e009      	b.n	80062b4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80062a0:	f7fc fb0a 	bl	80028b8 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062ae:	d901      	bls.n	80062b4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e007      	b.n	80062c4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d0ee      	beq.n	80062a0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	4603      	mov	r3, r0
 80062d4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80062d6:	2300      	movs	r3, #0
 80062d8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80062da:	e005      	b.n	80062e8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3301      	adds	r3, #1
 80062e0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80062e2:	79fb      	ldrb	r3, [r7, #7]
 80062e4:	3b0a      	subs	r3, #10
 80062e6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80062e8:	79fb      	ldrb	r3, [r7, #7]
 80062ea:	2b09      	cmp	r3, #9
 80062ec:	d8f6      	bhi.n	80062dc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	011b      	lsls	r3, r3, #4
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	79fb      	ldrb	r3, [r7, #7]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	b2db      	uxtb	r3, r3
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006314:	2300      	movs	r3, #0
 8006316:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	7f1b      	ldrb	r3, [r3, #28]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d101      	bne.n	8006324 <HAL_RTCEx_SetTimeStamp+0x1c>
 8006320:	2302      	movs	r3, #2
 8006322:	e03e      	b.n	80063a2 <HAL_RTCEx_SetTimeStamp+0x9a>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2201      	movs	r2, #1
 8006328:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2202      	movs	r2, #2
 800632e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	4b1e      	ldr	r3, [pc, #120]	; (80063b0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8006338:	4013      	ands	r3, r2
 800633a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	4313      	orrs	r3, r2
 8006342:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	22ca      	movs	r2, #202	; 0xca
 800634a:	625a      	str	r2, [r3, #36]	; 0x24
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2253      	movs	r2, #83	; 0x53
 8006352:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f022 0206 	bic.w	r2, r2, #6
 8006362:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	430a      	orrs	r2, r1
 8006372:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689a      	ldr	r2, [r3, #8]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800638a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	22ff      	movs	r2, #255	; 0xff
 8006392:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2201      	movs	r2, #1
 8006398:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	371c      	adds	r7, #28
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	fffff7f7 	.word	0xfffff7f7

080063b4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80063bc:	2300      	movs	r3, #0
 80063be:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80063c0:	2300      	movs	r3, #0
 80063c2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80063c4:	2300      	movs	r3, #0
 80063c6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e156      	b.n	8006680 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d106      	bne.n	80063ec <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7fc f812 	bl	8002410 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2202      	movs	r2, #2
 80063f0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f95b 	bl	80066b0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d00c      	beq.n	800641c <HAL_SAI_Init+0x68>
 8006402:	2b02      	cmp	r3, #2
 8006404:	d80d      	bhi.n	8006422 <HAL_SAI_Init+0x6e>
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <HAL_SAI_Init+0x5c>
 800640a:	2b01      	cmp	r3, #1
 800640c:	d003      	beq.n	8006416 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800640e:	e008      	b.n	8006422 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8006410:	2300      	movs	r3, #0
 8006412:	61fb      	str	r3, [r7, #28]
      break;
 8006414:	e006      	b.n	8006424 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006416:	2310      	movs	r3, #16
 8006418:	61fb      	str	r3, [r7, #28]
      break;
 800641a:	e003      	b.n	8006424 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800641c:	2320      	movs	r3, #32
 800641e:	61fb      	str	r3, [r7, #28]
      break;
 8006420:	e000      	b.n	8006424 <HAL_SAI_Init+0x70>
      break;
 8006422:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	2b03      	cmp	r3, #3
 800642a:	d81e      	bhi.n	800646a <HAL_SAI_Init+0xb6>
 800642c:	a201      	add	r2, pc, #4	; (adr r2, 8006434 <HAL_SAI_Init+0x80>)
 800642e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006432:	bf00      	nop
 8006434:	08006445 	.word	0x08006445
 8006438:	0800644b 	.word	0x0800644b
 800643c:	08006453 	.word	0x08006453
 8006440:	0800645b 	.word	0x0800645b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8006444:	2300      	movs	r3, #0
 8006446:	617b      	str	r3, [r7, #20]
    }
    break;
 8006448:	e010      	b.n	800646c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800644a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800644e:	617b      	str	r3, [r7, #20]
    }
    break;
 8006450:	e00c      	b.n	800646c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006452:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006456:	617b      	str	r3, [r7, #20]
    }
    break;
 8006458:	e008      	b.n	800646c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800645a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800645e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	f043 0301 	orr.w	r3, r3, #1
 8006466:	61fb      	str	r3, [r7, #28]
    }
    break;
 8006468:	e000      	b.n	800646c <HAL_SAI_Init+0xb8>
    default:
      break;
 800646a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a85      	ldr	r2, [pc, #532]	; (8006688 <HAL_SAI_Init+0x2d4>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d004      	beq.n	8006480 <HAL_SAI_Init+0xcc>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a84      	ldr	r2, [pc, #528]	; (800668c <HAL_SAI_Init+0x2d8>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d103      	bne.n	8006488 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8006480:	4a83      	ldr	r2, [pc, #524]	; (8006690 <HAL_SAI_Init+0x2dc>)
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	6013      	str	r3, [r2, #0]
 8006486:	e002      	b.n	800648e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006488:	4a82      	ldr	r2, [pc, #520]	; (8006694 <HAL_SAI_Init+0x2e0>)
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d04c      	beq.n	8006530 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8006496:	2300      	movs	r3, #0
 8006498:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a7a      	ldr	r2, [pc, #488]	; (8006688 <HAL_SAI_Init+0x2d4>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d004      	beq.n	80064ae <HAL_SAI_Init+0xfa>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a78      	ldr	r2, [pc, #480]	; (800668c <HAL_SAI_Init+0x2d8>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d104      	bne.n	80064b8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80064ae:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80064b2:	f7ff fa63 	bl	800597c <HAL_RCCEx_GetPeriphCLKFreq>
 80064b6:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a76      	ldr	r2, [pc, #472]	; (8006698 <HAL_SAI_Init+0x2e4>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d004      	beq.n	80064cc <HAL_SAI_Init+0x118>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a75      	ldr	r2, [pc, #468]	; (800669c <HAL_SAI_Init+0x2e8>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d104      	bne.n	80064d6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80064cc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80064d0:	f7ff fa54 	bl	800597c <HAL_RCCEx_GetPeriphCLKFreq>
 80064d4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	4613      	mov	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	461a      	mov	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	025b      	lsls	r3, r3, #9
 80064e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ec:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4a6b      	ldr	r2, [pc, #428]	; (80066a0 <HAL_SAI_Init+0x2ec>)
 80064f2:	fba2 2303 	umull	r2, r3, r2, r3
 80064f6:	08da      	lsrs	r2, r3, #3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80064fc:	68f9      	ldr	r1, [r7, #12]
 80064fe:	4b68      	ldr	r3, [pc, #416]	; (80066a0 <HAL_SAI_Init+0x2ec>)
 8006500:	fba3 2301 	umull	r2, r3, r3, r1
 8006504:	08da      	lsrs	r2, r3, #3
 8006506:	4613      	mov	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4413      	add	r3, r2
 800650c:	005b      	lsls	r3, r3, #1
 800650e:	1aca      	subs	r2, r1, r3
 8006510:	2a08      	cmp	r2, #8
 8006512:	d904      	bls.n	800651e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006522:	2b04      	cmp	r3, #4
 8006524:	d104      	bne.n	8006530 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	085a      	lsrs	r2, r3, #1
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <HAL_SAI_Init+0x18c>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	2b02      	cmp	r3, #2
 800653e:	d109      	bne.n	8006554 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006544:	2b01      	cmp	r3, #1
 8006546:	d101      	bne.n	800654c <HAL_SAI_Init+0x198>
 8006548:	2300      	movs	r3, #0
 800654a:	e001      	b.n	8006550 <HAL_SAI_Init+0x19c>
 800654c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006550:	61bb      	str	r3, [r7, #24]
 8006552:	e008      	b.n	8006566 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006558:	2b01      	cmp	r3, #1
 800655a:	d102      	bne.n	8006562 <HAL_SAI_Init+0x1ae>
 800655c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006560:	e000      	b.n	8006564 <HAL_SAI_Init+0x1b0>
 8006562:	2300      	movs	r3, #0
 8006564:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6819      	ldr	r1, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	4b4c      	ldr	r3, [pc, #304]	; (80066a4 <HAL_SAI_Init+0x2f0>)
 8006572:	400b      	ands	r3, r1
 8006574:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6819      	ldr	r1, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006584:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800658a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006590:	431a      	orrs	r2, r3
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800659e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80065aa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	051b      	lsls	r3, r3, #20
 80065b2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6859      	ldr	r1, [r3, #4]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	4b38      	ldr	r3, [pc, #224]	; (80066a8 <HAL_SAI_Init+0x2f4>)
 80065c8:	400b      	ands	r3, r1
 80065ca:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6859      	ldr	r1, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	699a      	ldr	r2, [r3, #24]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065da:	431a      	orrs	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e0:	431a      	orrs	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	6899      	ldr	r1, [r3, #8]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	4b2d      	ldr	r3, [pc, #180]	; (80066ac <HAL_SAI_Init+0x2f8>)
 80065f6:	400b      	ands	r3, r1
 80065f8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6899      	ldr	r1, [r3, #8]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006604:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800660a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8006610:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8006616:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661c:	3b01      	subs	r3, #1
 800661e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006620:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68d9      	ldr	r1, [r3, #12]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006638:	400b      	ands	r3, r1
 800663a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68d9      	ldr	r1, [r3, #12]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800664a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006650:	041b      	lsls	r3, r3, #16
 8006652:	431a      	orrs	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006658:	3b01      	subs	r3, #1
 800665a:	021b      	lsls	r3, r3, #8
 800665c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3720      	adds	r7, #32
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	40015804 	.word	0x40015804
 800668c:	40015824 	.word	0x40015824
 8006690:	40015800 	.word	0x40015800
 8006694:	40015c00 	.word	0x40015c00
 8006698:	40015c04 	.word	0x40015c04
 800669c:	40015c24 	.word	0x40015c24
 80066a0:	cccccccd 	.word	0xcccccccd
 80066a4:	ff05c010 	.word	0xff05c010
 80066a8:	ffff1ff0 	.word	0xffff1ff0
 80066ac:	fff88000 	.word	0xfff88000

080066b0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80066b8:	4b17      	ldr	r3, [pc, #92]	; (8006718 <SAI_Disable+0x68>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a17      	ldr	r2, [pc, #92]	; (800671c <SAI_Disable+0x6c>)
 80066be:	fba2 2303 	umull	r2, r3, r2, r3
 80066c2:	0b1b      	lsrs	r3, r3, #12
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80066da:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	1e5a      	subs	r2, r3, #1
 80066e0:	60fa      	str	r2, [r7, #12]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10a      	bne.n	80066fc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	72fb      	strb	r3, [r7, #11]
      break;
 80066fa:	e006      	b.n	800670a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1e8      	bne.n	80066dc <SAI_Disable+0x2c>

  return status;
 800670a:	7afb      	ldrb	r3, [r7, #11]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	20000000 	.word	0x20000000
 800671c:	95cbec1b 	.word	0x95cbec1b

08006720 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e025      	b.n	8006780 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	d106      	bne.n	800674e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7fb fe57 	bl	80023fc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2202      	movs	r2, #2
 8006752:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3304      	adds	r3, #4
 800675e:	4619      	mov	r1, r3
 8006760:	4610      	mov	r0, r2
 8006762:	f001 ff6b 	bl	800863c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6818      	ldr	r0, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	461a      	mov	r2, r3
 8006770:	6839      	ldr	r1, [r7, #0]
 8006772:	f001 ffbf 	bl	80086f4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e04c      	b.n	8006834 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d106      	bne.n	80067b4 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7fb fba6 	bl	8001f00 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 0203 	bic.w	r2, r2, #3
 80067ca:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	4b19      	ldr	r3, [pc, #100]	; (800683c <HAL_SPDIFRX_Init+0xb4>)
 80067d8:	4013      	ands	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 80067e4:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 80067ea:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 80067f0:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 80067f6:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 80067fc:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8006802:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8006808:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800680e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8006814:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	4313      	orrs	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	fff88407 	.word	0xfff88407

08006840 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e09d      	b.n	800698e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	2b00      	cmp	r3, #0
 8006858:	d108      	bne.n	800686c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006862:	d009      	beq.n	8006878 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	61da      	str	r2, [r3, #28]
 800686a:	e005      	b.n	8006878 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d106      	bne.n	8006898 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7fb fb98 	bl	8001fc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068b8:	d902      	bls.n	80068c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80068ba:	2300      	movs	r3, #0
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	e002      	b.n	80068c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80068c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80068ce:	d007      	beq.n	80068e0 <HAL_SPI_Init+0xa0>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068d8:	d002      	beq.n	80068e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80068f0:	431a      	orrs	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	431a      	orrs	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	431a      	orrs	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006918:	431a      	orrs	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006922:	ea42 0103 	orr.w	r1, r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	0c1b      	lsrs	r3, r3, #16
 800693c:	f003 0204 	and.w	r2, r3, #4
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	f003 0310 	and.w	r3, r3, #16
 8006948:	431a      	orrs	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800694e:	f003 0308 	and.w	r3, r3, #8
 8006952:	431a      	orrs	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800695c:	ea42 0103 	orr.w	r1, r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	69da      	ldr	r2, [r3, #28]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800697c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b082      	sub	sp, #8
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e049      	b.n	8006a3c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d106      	bne.n	80069c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7fb fb65 	bl	800208c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2202      	movs	r2, #2
 80069c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	3304      	adds	r3, #4
 80069d2:	4619      	mov	r1, r3
 80069d4:	4610      	mov	r0, r2
 80069d6:	f000 fd7b 	bl	80074d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d001      	beq.n	8006a5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e054      	b.n	8006b06 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68da      	ldr	r2, [r3, #12]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0201 	orr.w	r2, r2, #1
 8006a72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a26      	ldr	r2, [pc, #152]	; (8006b14 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d022      	beq.n	8006ac4 <HAL_TIM_Base_Start_IT+0x80>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a86:	d01d      	beq.n	8006ac4 <HAL_TIM_Base_Start_IT+0x80>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a22      	ldr	r2, [pc, #136]	; (8006b18 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d018      	beq.n	8006ac4 <HAL_TIM_Base_Start_IT+0x80>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a21      	ldr	r2, [pc, #132]	; (8006b1c <HAL_TIM_Base_Start_IT+0xd8>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d013      	beq.n	8006ac4 <HAL_TIM_Base_Start_IT+0x80>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a1f      	ldr	r2, [pc, #124]	; (8006b20 <HAL_TIM_Base_Start_IT+0xdc>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d00e      	beq.n	8006ac4 <HAL_TIM_Base_Start_IT+0x80>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a1e      	ldr	r2, [pc, #120]	; (8006b24 <HAL_TIM_Base_Start_IT+0xe0>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d009      	beq.n	8006ac4 <HAL_TIM_Base_Start_IT+0x80>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a1c      	ldr	r2, [pc, #112]	; (8006b28 <HAL_TIM_Base_Start_IT+0xe4>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d004      	beq.n	8006ac4 <HAL_TIM_Base_Start_IT+0x80>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a1b      	ldr	r2, [pc, #108]	; (8006b2c <HAL_TIM_Base_Start_IT+0xe8>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d115      	bne.n	8006af0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689a      	ldr	r2, [r3, #8]
 8006aca:	4b19      	ldr	r3, [pc, #100]	; (8006b30 <HAL_TIM_Base_Start_IT+0xec>)
 8006acc:	4013      	ands	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2b06      	cmp	r3, #6
 8006ad4:	d015      	beq.n	8006b02 <HAL_TIM_Base_Start_IT+0xbe>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006adc:	d011      	beq.n	8006b02 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f042 0201 	orr.w	r2, r2, #1
 8006aec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aee:	e008      	b.n	8006b02 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f042 0201 	orr.w	r2, r2, #1
 8006afe:	601a      	str	r2, [r3, #0]
 8006b00:	e000      	b.n	8006b04 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	40010000 	.word	0x40010000
 8006b18:	40000400 	.word	0x40000400
 8006b1c:	40000800 	.word	0x40000800
 8006b20:	40000c00 	.word	0x40000c00
 8006b24:	40010400 	.word	0x40010400
 8006b28:	40014000 	.word	0x40014000
 8006b2c:	40001800 	.word	0x40001800
 8006b30:	00010007 	.word	0x00010007

08006b34 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d109      	bne.n	8006b5c <HAL_TIM_OC_Start_IT+0x28>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	bf14      	ite	ne
 8006b54:	2301      	movne	r3, #1
 8006b56:	2300      	moveq	r3, #0
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	e03c      	b.n	8006bd6 <HAL_TIM_OC_Start_IT+0xa2>
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	d109      	bne.n	8006b76 <HAL_TIM_OC_Start_IT+0x42>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	bf14      	ite	ne
 8006b6e:	2301      	movne	r3, #1
 8006b70:	2300      	moveq	r3, #0
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	e02f      	b.n	8006bd6 <HAL_TIM_OC_Start_IT+0xa2>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b08      	cmp	r3, #8
 8006b7a:	d109      	bne.n	8006b90 <HAL_TIM_OC_Start_IT+0x5c>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	bf14      	ite	ne
 8006b88:	2301      	movne	r3, #1
 8006b8a:	2300      	moveq	r3, #0
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	e022      	b.n	8006bd6 <HAL_TIM_OC_Start_IT+0xa2>
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	2b0c      	cmp	r3, #12
 8006b94:	d109      	bne.n	8006baa <HAL_TIM_OC_Start_IT+0x76>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	bf14      	ite	ne
 8006ba2:	2301      	movne	r3, #1
 8006ba4:	2300      	moveq	r3, #0
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	e015      	b.n	8006bd6 <HAL_TIM_OC_Start_IT+0xa2>
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b10      	cmp	r3, #16
 8006bae:	d109      	bne.n	8006bc4 <HAL_TIM_OC_Start_IT+0x90>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	bf14      	ite	ne
 8006bbc:	2301      	movne	r3, #1
 8006bbe:	2300      	moveq	r3, #0
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	e008      	b.n	8006bd6 <HAL_TIM_OC_Start_IT+0xa2>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	bf14      	ite	ne
 8006bd0:	2301      	movne	r3, #1
 8006bd2:	2300      	moveq	r3, #0
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e0dd      	b.n	8006d9a <HAL_TIM_OC_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d104      	bne.n	8006bee <HAL_TIM_OC_Start_IT+0xba>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bec:	e023      	b.n	8006c36 <HAL_TIM_OC_Start_IT+0x102>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b04      	cmp	r3, #4
 8006bf2:	d104      	bne.n	8006bfe <HAL_TIM_OC_Start_IT+0xca>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bfc:	e01b      	b.n	8006c36 <HAL_TIM_OC_Start_IT+0x102>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	d104      	bne.n	8006c0e <HAL_TIM_OC_Start_IT+0xda>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c0c:	e013      	b.n	8006c36 <HAL_TIM_OC_Start_IT+0x102>
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b0c      	cmp	r3, #12
 8006c12:	d104      	bne.n	8006c1e <HAL_TIM_OC_Start_IT+0xea>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c1c:	e00b      	b.n	8006c36 <HAL_TIM_OC_Start_IT+0x102>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b10      	cmp	r3, #16
 8006c22:	d104      	bne.n	8006c2e <HAL_TIM_OC_Start_IT+0xfa>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2202      	movs	r2, #2
 8006c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c2c:	e003      	b.n	8006c36 <HAL_TIM_OC_Start_IT+0x102>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2202      	movs	r2, #2
 8006c32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b0c      	cmp	r3, #12
 8006c3a:	d841      	bhi.n	8006cc0 <HAL_TIM_OC_Start_IT+0x18c>
 8006c3c:	a201      	add	r2, pc, #4	; (adr r2, 8006c44 <HAL_TIM_OC_Start_IT+0x110>)
 8006c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c42:	bf00      	nop
 8006c44:	08006c79 	.word	0x08006c79
 8006c48:	08006cc1 	.word	0x08006cc1
 8006c4c:	08006cc1 	.word	0x08006cc1
 8006c50:	08006cc1 	.word	0x08006cc1
 8006c54:	08006c8b 	.word	0x08006c8b
 8006c58:	08006cc1 	.word	0x08006cc1
 8006c5c:	08006cc1 	.word	0x08006cc1
 8006c60:	08006cc1 	.word	0x08006cc1
 8006c64:	08006c9d 	.word	0x08006c9d
 8006c68:	08006cc1 	.word	0x08006cc1
 8006c6c:	08006cc1 	.word	0x08006cc1
 8006c70:	08006cc1 	.word	0x08006cc1
 8006c74:	08006caf 	.word	0x08006caf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68da      	ldr	r2, [r3, #12]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0202 	orr.w	r2, r2, #2
 8006c86:	60da      	str	r2, [r3, #12]
      break;
 8006c88:	e01d      	b.n	8006cc6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68da      	ldr	r2, [r3, #12]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f042 0204 	orr.w	r2, r2, #4
 8006c98:	60da      	str	r2, [r3, #12]
      break;
 8006c9a:	e014      	b.n	8006cc6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0208 	orr.w	r2, r2, #8
 8006caa:	60da      	str	r2, [r3, #12]
      break;
 8006cac:	e00b      	b.n	8006cc6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68da      	ldr	r2, [r3, #12]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f042 0210 	orr.w	r2, r2, #16
 8006cbc:	60da      	str	r2, [r3, #12]
      break;
 8006cbe:	e002      	b.n	8006cc6 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006cc4:	bf00      	nop
  }

  if (status == HAL_OK)
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d165      	bne.n	8006d98 <HAL_TIM_OC_Start_IT+0x264>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 ff93 	bl	8007c00 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a31      	ldr	r2, [pc, #196]	; (8006da4 <HAL_TIM_OC_Start_IT+0x270>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d004      	beq.n	8006cee <HAL_TIM_OC_Start_IT+0x1ba>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a2f      	ldr	r2, [pc, #188]	; (8006da8 <HAL_TIM_OC_Start_IT+0x274>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d101      	bne.n	8006cf2 <HAL_TIM_OC_Start_IT+0x1be>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e000      	b.n	8006cf4 <HAL_TIM_OC_Start_IT+0x1c0>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d007      	beq.n	8006d08 <HAL_TIM_OC_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d06:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a25      	ldr	r2, [pc, #148]	; (8006da4 <HAL_TIM_OC_Start_IT+0x270>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d022      	beq.n	8006d58 <HAL_TIM_OC_Start_IT+0x224>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d1a:	d01d      	beq.n	8006d58 <HAL_TIM_OC_Start_IT+0x224>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a22      	ldr	r2, [pc, #136]	; (8006dac <HAL_TIM_OC_Start_IT+0x278>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d018      	beq.n	8006d58 <HAL_TIM_OC_Start_IT+0x224>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a21      	ldr	r2, [pc, #132]	; (8006db0 <HAL_TIM_OC_Start_IT+0x27c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d013      	beq.n	8006d58 <HAL_TIM_OC_Start_IT+0x224>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a1f      	ldr	r2, [pc, #124]	; (8006db4 <HAL_TIM_OC_Start_IT+0x280>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d00e      	beq.n	8006d58 <HAL_TIM_OC_Start_IT+0x224>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a1a      	ldr	r2, [pc, #104]	; (8006da8 <HAL_TIM_OC_Start_IT+0x274>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d009      	beq.n	8006d58 <HAL_TIM_OC_Start_IT+0x224>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a1b      	ldr	r2, [pc, #108]	; (8006db8 <HAL_TIM_OC_Start_IT+0x284>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d004      	beq.n	8006d58 <HAL_TIM_OC_Start_IT+0x224>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a1a      	ldr	r2, [pc, #104]	; (8006dbc <HAL_TIM_OC_Start_IT+0x288>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d115      	bne.n	8006d84 <HAL_TIM_OC_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689a      	ldr	r2, [r3, #8]
 8006d5e:	4b18      	ldr	r3, [pc, #96]	; (8006dc0 <HAL_TIM_OC_Start_IT+0x28c>)
 8006d60:	4013      	ands	r3, r2
 8006d62:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2b06      	cmp	r3, #6
 8006d68:	d015      	beq.n	8006d96 <HAL_TIM_OC_Start_IT+0x262>
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d70:	d011      	beq.n	8006d96 <HAL_TIM_OC_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f042 0201 	orr.w	r2, r2, #1
 8006d80:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d82:	e008      	b.n	8006d96 <HAL_TIM_OC_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f042 0201 	orr.w	r2, r2, #1
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	e000      	b.n	8006d98 <HAL_TIM_OC_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d96:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	40010000 	.word	0x40010000
 8006da8:	40010400 	.word	0x40010400
 8006dac:	40000400 	.word	0x40000400
 8006db0:	40000800 	.word	0x40000800
 8006db4:	40000c00 	.word	0x40000c00
 8006db8:	40014000 	.word	0x40014000
 8006dbc:	40001800 	.word	0x40001800
 8006dc0:	00010007 	.word	0x00010007

08006dc4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e049      	b.n	8006e6a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d106      	bne.n	8006df0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f841 	bl	8006e72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	3304      	adds	r3, #4
 8006e00:	4619      	mov	r1, r3
 8006e02:	4610      	mov	r0, r2
 8006e04:	f000 fb64 	bl	80074d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b083      	sub	sp, #12
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e7a:	bf00      	nop
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b082      	sub	sp, #8
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	f003 0302 	and.w	r3, r3, #2
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d122      	bne.n	8006ee2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f003 0302 	and.w	r3, r3, #2
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d11b      	bne.n	8006ee2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f06f 0202 	mvn.w	r2, #2
 8006eb2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	f003 0303 	and.w	r3, r3, #3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d003      	beq.n	8006ed0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fae3 	bl	8007494 <HAL_TIM_IC_CaptureCallback>
 8006ece:	e005      	b.n	8006edc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fad5 	bl	8007480 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fae6 	bl	80074a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	f003 0304 	and.w	r3, r3, #4
 8006eec:	2b04      	cmp	r3, #4
 8006eee:	d122      	bne.n	8006f36 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f003 0304 	and.w	r3, r3, #4
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	d11b      	bne.n	8006f36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f06f 0204 	mvn.w	r2, #4
 8006f06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d003      	beq.n	8006f24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 fab9 	bl	8007494 <HAL_TIM_IC_CaptureCallback>
 8006f22:	e005      	b.n	8006f30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 faab 	bl	8007480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fabc 	bl	80074a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	f003 0308 	and.w	r3, r3, #8
 8006f40:	2b08      	cmp	r3, #8
 8006f42:	d122      	bne.n	8006f8a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	f003 0308 	and.w	r3, r3, #8
 8006f4e:	2b08      	cmp	r3, #8
 8006f50:	d11b      	bne.n	8006f8a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f06f 0208 	mvn.w	r2, #8
 8006f5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2204      	movs	r2, #4
 8006f60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	69db      	ldr	r3, [r3, #28]
 8006f68:	f003 0303 	and.w	r3, r3, #3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d003      	beq.n	8006f78 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fa8f 	bl	8007494 <HAL_TIM_IC_CaptureCallback>
 8006f76:	e005      	b.n	8006f84 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fa81 	bl	8007480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fa92 	bl	80074a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	f003 0310 	and.w	r3, r3, #16
 8006f94:	2b10      	cmp	r3, #16
 8006f96:	d122      	bne.n	8006fde <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	f003 0310 	and.w	r3, r3, #16
 8006fa2:	2b10      	cmp	r3, #16
 8006fa4:	d11b      	bne.n	8006fde <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f06f 0210 	mvn.w	r2, #16
 8006fae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2208      	movs	r2, #8
 8006fb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	69db      	ldr	r3, [r3, #28]
 8006fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d003      	beq.n	8006fcc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fa65 	bl	8007494 <HAL_TIM_IC_CaptureCallback>
 8006fca:	e005      	b.n	8006fd8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fa57 	bl	8007480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fa68 	bl	80074a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d10e      	bne.n	800700a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d107      	bne.n	800700a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f06f 0201 	mvn.w	r2, #1
 8007002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7fa fc6b 	bl	80018e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007014:	2b80      	cmp	r3, #128	; 0x80
 8007016:	d10e      	bne.n	8007036 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007022:	2b80      	cmp	r3, #128	; 0x80
 8007024:	d107      	bne.n	8007036 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800702e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fea3 	bl	8007d7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007044:	d10e      	bne.n	8007064 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007050:	2b80      	cmp	r3, #128	; 0x80
 8007052:	d107      	bne.n	8007064 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800705c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fe96 	bl	8007d90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706e:	2b40      	cmp	r3, #64	; 0x40
 8007070:	d10e      	bne.n	8007090 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707c:	2b40      	cmp	r3, #64	; 0x40
 800707e:	d107      	bne.n	8007090 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fa16 	bl	80074bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	f003 0320 	and.w	r3, r3, #32
 800709a:	2b20      	cmp	r3, #32
 800709c:	d10e      	bne.n	80070bc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	f003 0320 	and.w	r3, r3, #32
 80070a8:	2b20      	cmp	r3, #32
 80070aa:	d107      	bne.n	80070bc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f06f 0220 	mvn.w	r2, #32
 80070b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fe56 	bl	8007d68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070bc:	bf00      	nop
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d101      	bne.n	80070e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070de:	2302      	movs	r3, #2
 80070e0:	e0ff      	b.n	80072e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b14      	cmp	r3, #20
 80070ee:	f200 80f0 	bhi.w	80072d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80070f2:	a201      	add	r2, pc, #4	; (adr r2, 80070f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80070f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f8:	0800714d 	.word	0x0800714d
 80070fc:	080072d3 	.word	0x080072d3
 8007100:	080072d3 	.word	0x080072d3
 8007104:	080072d3 	.word	0x080072d3
 8007108:	0800718d 	.word	0x0800718d
 800710c:	080072d3 	.word	0x080072d3
 8007110:	080072d3 	.word	0x080072d3
 8007114:	080072d3 	.word	0x080072d3
 8007118:	080071cf 	.word	0x080071cf
 800711c:	080072d3 	.word	0x080072d3
 8007120:	080072d3 	.word	0x080072d3
 8007124:	080072d3 	.word	0x080072d3
 8007128:	0800720f 	.word	0x0800720f
 800712c:	080072d3 	.word	0x080072d3
 8007130:	080072d3 	.word	0x080072d3
 8007134:	080072d3 	.word	0x080072d3
 8007138:	08007251 	.word	0x08007251
 800713c:	080072d3 	.word	0x080072d3
 8007140:	080072d3 	.word	0x080072d3
 8007144:	080072d3 	.word	0x080072d3
 8007148:	08007291 	.word	0x08007291
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68b9      	ldr	r1, [r7, #8]
 8007152:	4618      	mov	r0, r3
 8007154:	f000 fa5c 	bl	8007610 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	699a      	ldr	r2, [r3, #24]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f042 0208 	orr.w	r2, r2, #8
 8007166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	699a      	ldr	r2, [r3, #24]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 0204 	bic.w	r2, r2, #4
 8007176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6999      	ldr	r1, [r3, #24]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	691a      	ldr	r2, [r3, #16]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	619a      	str	r2, [r3, #24]
      break;
 800718a:	e0a5      	b.n	80072d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68b9      	ldr	r1, [r7, #8]
 8007192:	4618      	mov	r0, r3
 8007194:	f000 faae 	bl	80076f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699a      	ldr	r2, [r3, #24]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	699a      	ldr	r2, [r3, #24]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6999      	ldr	r1, [r3, #24]
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	021a      	lsls	r2, r3, #8
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	619a      	str	r2, [r3, #24]
      break;
 80071cc:	e084      	b.n	80072d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68b9      	ldr	r1, [r7, #8]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 fb05 	bl	80077e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	69da      	ldr	r2, [r3, #28]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f042 0208 	orr.w	r2, r2, #8
 80071e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	69da      	ldr	r2, [r3, #28]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 0204 	bic.w	r2, r2, #4
 80071f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	69d9      	ldr	r1, [r3, #28]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	691a      	ldr	r2, [r3, #16]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	430a      	orrs	r2, r1
 800720a:	61da      	str	r2, [r3, #28]
      break;
 800720c:	e064      	b.n	80072d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68b9      	ldr	r1, [r7, #8]
 8007214:	4618      	mov	r0, r3
 8007216:	f000 fb5b 	bl	80078d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	69da      	ldr	r2, [r3, #28]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69da      	ldr	r2, [r3, #28]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	69d9      	ldr	r1, [r3, #28]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	021a      	lsls	r2, r3, #8
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	61da      	str	r2, [r3, #28]
      break;
 800724e:	e043      	b.n	80072d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68b9      	ldr	r1, [r7, #8]
 8007256:	4618      	mov	r0, r3
 8007258:	f000 fb92 	bl	8007980 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f042 0208 	orr.w	r2, r2, #8
 800726a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0204 	bic.w	r2, r2, #4
 800727a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	691a      	ldr	r2, [r3, #16]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800728e:	e023      	b.n	80072d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68b9      	ldr	r1, [r7, #8]
 8007296:	4618      	mov	r0, r3
 8007298:	f000 fbc4 	bl	8007a24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	021a      	lsls	r2, r3, #8
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80072d0:	e002      	b.n	80072d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	75fb      	strb	r3, [r7, #23]
      break;
 80072d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3718      	adds	r7, #24
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop

080072ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072f6:	2300      	movs	r3, #0
 80072f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007300:	2b01      	cmp	r3, #1
 8007302:	d101      	bne.n	8007308 <HAL_TIM_ConfigClockSource+0x1c>
 8007304:	2302      	movs	r3, #2
 8007306:	e0b4      	b.n	8007472 <HAL_TIM_ConfigClockSource+0x186>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2202      	movs	r2, #2
 8007314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	4b56      	ldr	r3, [pc, #344]	; (800747c <HAL_TIM_ConfigClockSource+0x190>)
 8007324:	4013      	ands	r3, r2
 8007326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800732e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007340:	d03e      	beq.n	80073c0 <HAL_TIM_ConfigClockSource+0xd4>
 8007342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007346:	f200 8087 	bhi.w	8007458 <HAL_TIM_ConfigClockSource+0x16c>
 800734a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800734e:	f000 8086 	beq.w	800745e <HAL_TIM_ConfigClockSource+0x172>
 8007352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007356:	d87f      	bhi.n	8007458 <HAL_TIM_ConfigClockSource+0x16c>
 8007358:	2b70      	cmp	r3, #112	; 0x70
 800735a:	d01a      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0xa6>
 800735c:	2b70      	cmp	r3, #112	; 0x70
 800735e:	d87b      	bhi.n	8007458 <HAL_TIM_ConfigClockSource+0x16c>
 8007360:	2b60      	cmp	r3, #96	; 0x60
 8007362:	d050      	beq.n	8007406 <HAL_TIM_ConfigClockSource+0x11a>
 8007364:	2b60      	cmp	r3, #96	; 0x60
 8007366:	d877      	bhi.n	8007458 <HAL_TIM_ConfigClockSource+0x16c>
 8007368:	2b50      	cmp	r3, #80	; 0x50
 800736a:	d03c      	beq.n	80073e6 <HAL_TIM_ConfigClockSource+0xfa>
 800736c:	2b50      	cmp	r3, #80	; 0x50
 800736e:	d873      	bhi.n	8007458 <HAL_TIM_ConfigClockSource+0x16c>
 8007370:	2b40      	cmp	r3, #64	; 0x40
 8007372:	d058      	beq.n	8007426 <HAL_TIM_ConfigClockSource+0x13a>
 8007374:	2b40      	cmp	r3, #64	; 0x40
 8007376:	d86f      	bhi.n	8007458 <HAL_TIM_ConfigClockSource+0x16c>
 8007378:	2b30      	cmp	r3, #48	; 0x30
 800737a:	d064      	beq.n	8007446 <HAL_TIM_ConfigClockSource+0x15a>
 800737c:	2b30      	cmp	r3, #48	; 0x30
 800737e:	d86b      	bhi.n	8007458 <HAL_TIM_ConfigClockSource+0x16c>
 8007380:	2b20      	cmp	r3, #32
 8007382:	d060      	beq.n	8007446 <HAL_TIM_ConfigClockSource+0x15a>
 8007384:	2b20      	cmp	r3, #32
 8007386:	d867      	bhi.n	8007458 <HAL_TIM_ConfigClockSource+0x16c>
 8007388:	2b00      	cmp	r3, #0
 800738a:	d05c      	beq.n	8007446 <HAL_TIM_ConfigClockSource+0x15a>
 800738c:	2b10      	cmp	r3, #16
 800738e:	d05a      	beq.n	8007446 <HAL_TIM_ConfigClockSource+0x15a>
 8007390:	e062      	b.n	8007458 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6818      	ldr	r0, [r3, #0]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	6899      	ldr	r1, [r3, #8]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	f000 fc0d 	bl	8007bc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	609a      	str	r2, [r3, #8]
      break;
 80073be:	e04f      	b.n	8007460 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6818      	ldr	r0, [r3, #0]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	6899      	ldr	r1, [r3, #8]
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	f000 fbf6 	bl	8007bc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689a      	ldr	r2, [r3, #8]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073e2:	609a      	str	r2, [r3, #8]
      break;
 80073e4:	e03c      	b.n	8007460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6818      	ldr	r0, [r3, #0]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	6859      	ldr	r1, [r3, #4]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	461a      	mov	r2, r3
 80073f4:	f000 fb6a 	bl	8007acc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2150      	movs	r1, #80	; 0x50
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 fbc3 	bl	8007b8a <TIM_ITRx_SetConfig>
      break;
 8007404:	e02c      	b.n	8007460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	6859      	ldr	r1, [r3, #4]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	461a      	mov	r2, r3
 8007414:	f000 fb89 	bl	8007b2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2160      	movs	r1, #96	; 0x60
 800741e:	4618      	mov	r0, r3
 8007420:	f000 fbb3 	bl	8007b8a <TIM_ITRx_SetConfig>
      break;
 8007424:	e01c      	b.n	8007460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6818      	ldr	r0, [r3, #0]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	6859      	ldr	r1, [r3, #4]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	461a      	mov	r2, r3
 8007434:	f000 fb4a 	bl	8007acc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2140      	movs	r1, #64	; 0x40
 800743e:	4618      	mov	r0, r3
 8007440:	f000 fba3 	bl	8007b8a <TIM_ITRx_SetConfig>
      break;
 8007444:	e00c      	b.n	8007460 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4619      	mov	r1, r3
 8007450:	4610      	mov	r0, r2
 8007452:	f000 fb9a 	bl	8007b8a <TIM_ITRx_SetConfig>
      break;
 8007456:	e003      	b.n	8007460 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	73fb      	strb	r3, [r7, #15]
      break;
 800745c:	e000      	b.n	8007460 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800745e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007470:	7bfb      	ldrb	r3, [r7, #15]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	fffeff88 	.word	0xfffeff88

08007480 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a40      	ldr	r2, [pc, #256]	; (80075e4 <TIM_Base_SetConfig+0x114>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d013      	beq.n	8007510 <TIM_Base_SetConfig+0x40>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ee:	d00f      	beq.n	8007510 <TIM_Base_SetConfig+0x40>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a3d      	ldr	r2, [pc, #244]	; (80075e8 <TIM_Base_SetConfig+0x118>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d00b      	beq.n	8007510 <TIM_Base_SetConfig+0x40>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a3c      	ldr	r2, [pc, #240]	; (80075ec <TIM_Base_SetConfig+0x11c>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d007      	beq.n	8007510 <TIM_Base_SetConfig+0x40>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a3b      	ldr	r2, [pc, #236]	; (80075f0 <TIM_Base_SetConfig+0x120>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d003      	beq.n	8007510 <TIM_Base_SetConfig+0x40>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a3a      	ldr	r2, [pc, #232]	; (80075f4 <TIM_Base_SetConfig+0x124>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d108      	bne.n	8007522 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	4313      	orrs	r3, r2
 8007520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a2f      	ldr	r2, [pc, #188]	; (80075e4 <TIM_Base_SetConfig+0x114>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d02b      	beq.n	8007582 <TIM_Base_SetConfig+0xb2>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007530:	d027      	beq.n	8007582 <TIM_Base_SetConfig+0xb2>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a2c      	ldr	r2, [pc, #176]	; (80075e8 <TIM_Base_SetConfig+0x118>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d023      	beq.n	8007582 <TIM_Base_SetConfig+0xb2>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a2b      	ldr	r2, [pc, #172]	; (80075ec <TIM_Base_SetConfig+0x11c>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d01f      	beq.n	8007582 <TIM_Base_SetConfig+0xb2>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a2a      	ldr	r2, [pc, #168]	; (80075f0 <TIM_Base_SetConfig+0x120>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d01b      	beq.n	8007582 <TIM_Base_SetConfig+0xb2>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a29      	ldr	r2, [pc, #164]	; (80075f4 <TIM_Base_SetConfig+0x124>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d017      	beq.n	8007582 <TIM_Base_SetConfig+0xb2>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a28      	ldr	r2, [pc, #160]	; (80075f8 <TIM_Base_SetConfig+0x128>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d013      	beq.n	8007582 <TIM_Base_SetConfig+0xb2>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a27      	ldr	r2, [pc, #156]	; (80075fc <TIM_Base_SetConfig+0x12c>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d00f      	beq.n	8007582 <TIM_Base_SetConfig+0xb2>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a26      	ldr	r2, [pc, #152]	; (8007600 <TIM_Base_SetConfig+0x130>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d00b      	beq.n	8007582 <TIM_Base_SetConfig+0xb2>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a25      	ldr	r2, [pc, #148]	; (8007604 <TIM_Base_SetConfig+0x134>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d007      	beq.n	8007582 <TIM_Base_SetConfig+0xb2>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a24      	ldr	r2, [pc, #144]	; (8007608 <TIM_Base_SetConfig+0x138>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d003      	beq.n	8007582 <TIM_Base_SetConfig+0xb2>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a23      	ldr	r2, [pc, #140]	; (800760c <TIM_Base_SetConfig+0x13c>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d108      	bne.n	8007594 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	4313      	orrs	r3, r2
 8007592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	4313      	orrs	r3, r2
 80075a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	689a      	ldr	r2, [r3, #8]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a0a      	ldr	r2, [pc, #40]	; (80075e4 <TIM_Base_SetConfig+0x114>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d003      	beq.n	80075c8 <TIM_Base_SetConfig+0xf8>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a0c      	ldr	r2, [pc, #48]	; (80075f4 <TIM_Base_SetConfig+0x124>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d103      	bne.n	80075d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	691a      	ldr	r2, [r3, #16]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	615a      	str	r2, [r3, #20]
}
 80075d6:	bf00      	nop
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	40010000 	.word	0x40010000
 80075e8:	40000400 	.word	0x40000400
 80075ec:	40000800 	.word	0x40000800
 80075f0:	40000c00 	.word	0x40000c00
 80075f4:	40010400 	.word	0x40010400
 80075f8:	40014000 	.word	0x40014000
 80075fc:	40014400 	.word	0x40014400
 8007600:	40014800 	.word	0x40014800
 8007604:	40001800 	.word	0x40001800
 8007608:	40001c00 	.word	0x40001c00
 800760c:	40002000 	.word	0x40002000

08007610 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	f023 0201 	bic.w	r2, r3, #1
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	4b2b      	ldr	r3, [pc, #172]	; (80076e8 <TIM_OC1_SetConfig+0xd8>)
 800763c:	4013      	ands	r3, r2
 800763e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f023 0303 	bic.w	r3, r3, #3
 8007646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	4313      	orrs	r3, r2
 8007650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	f023 0302 	bic.w	r3, r3, #2
 8007658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	4313      	orrs	r3, r2
 8007662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a21      	ldr	r2, [pc, #132]	; (80076ec <TIM_OC1_SetConfig+0xdc>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d003      	beq.n	8007674 <TIM_OC1_SetConfig+0x64>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a20      	ldr	r2, [pc, #128]	; (80076f0 <TIM_OC1_SetConfig+0xe0>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d10c      	bne.n	800768e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f023 0308 	bic.w	r3, r3, #8
 800767a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	4313      	orrs	r3, r2
 8007684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	f023 0304 	bic.w	r3, r3, #4
 800768c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a16      	ldr	r2, [pc, #88]	; (80076ec <TIM_OC1_SetConfig+0xdc>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d003      	beq.n	800769e <TIM_OC1_SetConfig+0x8e>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a15      	ldr	r2, [pc, #84]	; (80076f0 <TIM_OC1_SetConfig+0xe0>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d111      	bne.n	80076c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	4313      	orrs	r3, r2
 80076c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	685a      	ldr	r2, [r3, #4]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	621a      	str	r2, [r3, #32]
}
 80076dc:	bf00      	nop
 80076de:	371c      	adds	r7, #28
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr
 80076e8:	fffeff8f 	.word	0xfffeff8f
 80076ec:	40010000 	.word	0x40010000
 80076f0:	40010400 	.word	0x40010400

080076f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	f023 0210 	bic.w	r2, r3, #16
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	4b2e      	ldr	r3, [pc, #184]	; (80077d8 <TIM_OC2_SetConfig+0xe4>)
 8007720:	4013      	ands	r3, r2
 8007722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800772a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	021b      	lsls	r3, r3, #8
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	4313      	orrs	r3, r2
 8007736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	f023 0320 	bic.w	r3, r3, #32
 800773e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	011b      	lsls	r3, r3, #4
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	4313      	orrs	r3, r2
 800774a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a23      	ldr	r2, [pc, #140]	; (80077dc <TIM_OC2_SetConfig+0xe8>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d003      	beq.n	800775c <TIM_OC2_SetConfig+0x68>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a22      	ldr	r2, [pc, #136]	; (80077e0 <TIM_OC2_SetConfig+0xec>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d10d      	bne.n	8007778 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	011b      	lsls	r3, r3, #4
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	4313      	orrs	r3, r2
 800776e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007776:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a18      	ldr	r2, [pc, #96]	; (80077dc <TIM_OC2_SetConfig+0xe8>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d003      	beq.n	8007788 <TIM_OC2_SetConfig+0x94>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a17      	ldr	r2, [pc, #92]	; (80077e0 <TIM_OC2_SetConfig+0xec>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d113      	bne.n	80077b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800778e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007796:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	621a      	str	r2, [r3, #32]
}
 80077ca:	bf00      	nop
 80077cc:	371c      	adds	r7, #28
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	feff8fff 	.word	0xfeff8fff
 80077dc:	40010000 	.word	0x40010000
 80077e0:	40010400 	.word	0x40010400

080077e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b087      	sub	sp, #28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	4b2d      	ldr	r3, [pc, #180]	; (80078c4 <TIM_OC3_SetConfig+0xe0>)
 8007810:	4013      	ands	r3, r2
 8007812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f023 0303 	bic.w	r3, r3, #3
 800781a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	4313      	orrs	r3, r2
 8007824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800782c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	021b      	lsls	r3, r3, #8
 8007834:	697a      	ldr	r2, [r7, #20]
 8007836:	4313      	orrs	r3, r2
 8007838:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a22      	ldr	r2, [pc, #136]	; (80078c8 <TIM_OC3_SetConfig+0xe4>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d003      	beq.n	800784a <TIM_OC3_SetConfig+0x66>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a21      	ldr	r2, [pc, #132]	; (80078cc <TIM_OC3_SetConfig+0xe8>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d10d      	bne.n	8007866 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007850:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	021b      	lsls	r3, r3, #8
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	4313      	orrs	r3, r2
 800785c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007864:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a17      	ldr	r2, [pc, #92]	; (80078c8 <TIM_OC3_SetConfig+0xe4>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d003      	beq.n	8007876 <TIM_OC3_SetConfig+0x92>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a16      	ldr	r2, [pc, #88]	; (80078cc <TIM_OC3_SetConfig+0xe8>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d113      	bne.n	800789e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800787c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007884:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	011b      	lsls	r3, r3, #4
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	4313      	orrs	r3, r2
 8007890:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	011b      	lsls	r3, r3, #4
 8007898:	693a      	ldr	r2, [r7, #16]
 800789a:	4313      	orrs	r3, r2
 800789c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	685a      	ldr	r2, [r3, #4]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	697a      	ldr	r2, [r7, #20]
 80078b6:	621a      	str	r2, [r3, #32]
}
 80078b8:	bf00      	nop
 80078ba:	371c      	adds	r7, #28
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	fffeff8f 	.word	0xfffeff8f
 80078c8:	40010000 	.word	0x40010000
 80078cc:	40010400 	.word	0x40010400

080078d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b087      	sub	sp, #28
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	4b1e      	ldr	r3, [pc, #120]	; (8007974 <TIM_OC4_SetConfig+0xa4>)
 80078fc:	4013      	ands	r3, r2
 80078fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	021b      	lsls	r3, r3, #8
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	4313      	orrs	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800791a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	031b      	lsls	r3, r3, #12
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	4313      	orrs	r3, r2
 8007926:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a13      	ldr	r2, [pc, #76]	; (8007978 <TIM_OC4_SetConfig+0xa8>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d003      	beq.n	8007938 <TIM_OC4_SetConfig+0x68>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a12      	ldr	r2, [pc, #72]	; (800797c <TIM_OC4_SetConfig+0xac>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d109      	bne.n	800794c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800793e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	019b      	lsls	r3, r3, #6
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	4313      	orrs	r3, r2
 800794a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	621a      	str	r2, [r3, #32]
}
 8007966:	bf00      	nop
 8007968:	371c      	adds	r7, #28
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	feff8fff 	.word	0xfeff8fff
 8007978:	40010000 	.word	0x40010000
 800797c:	40010400 	.word	0x40010400

08007980 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	4b1b      	ldr	r3, [pc, #108]	; (8007a18 <TIM_OC5_SetConfig+0x98>)
 80079ac:	4013      	ands	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80079c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	041b      	lsls	r3, r3, #16
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a12      	ldr	r2, [pc, #72]	; (8007a1c <TIM_OC5_SetConfig+0x9c>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d003      	beq.n	80079de <TIM_OC5_SetConfig+0x5e>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a11      	ldr	r2, [pc, #68]	; (8007a20 <TIM_OC5_SetConfig+0xa0>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d109      	bne.n	80079f2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	021b      	lsls	r3, r3, #8
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	685a      	ldr	r2, [r3, #4]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	621a      	str	r2, [r3, #32]
}
 8007a0c:	bf00      	nop
 8007a0e:	371c      	adds	r7, #28
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	fffeff8f 	.word	0xfffeff8f
 8007a1c:	40010000 	.word	0x40010000
 8007a20:	40010400 	.word	0x40010400

08007a24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b087      	sub	sp, #28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	4b1c      	ldr	r3, [pc, #112]	; (8007ac0 <TIM_OC6_SetConfig+0x9c>)
 8007a50:	4013      	ands	r3, r2
 8007a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	021b      	lsls	r3, r3, #8
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	051b      	lsls	r3, r3, #20
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a13      	ldr	r2, [pc, #76]	; (8007ac4 <TIM_OC6_SetConfig+0xa0>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d003      	beq.n	8007a84 <TIM_OC6_SetConfig+0x60>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a12      	ldr	r2, [pc, #72]	; (8007ac8 <TIM_OC6_SetConfig+0xa4>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d109      	bne.n	8007a98 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	695b      	ldr	r3, [r3, #20]
 8007a90:	029b      	lsls	r3, r3, #10
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	685a      	ldr	r2, [r3, #4]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	621a      	str	r2, [r3, #32]
}
 8007ab2:	bf00      	nop
 8007ab4:	371c      	adds	r7, #28
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	feff8fff 	.word	0xfeff8fff
 8007ac4:	40010000 	.word	0x40010000
 8007ac8:	40010400 	.word	0x40010400

08007acc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	f023 0201 	bic.w	r2, r3, #1
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	011b      	lsls	r3, r3, #4
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f023 030a 	bic.w	r3, r3, #10
 8007b08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	621a      	str	r2, [r3, #32]
}
 8007b1e:	bf00      	nop
 8007b20:	371c      	adds	r7, #28
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b087      	sub	sp, #28
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	60f8      	str	r0, [r7, #12]
 8007b32:	60b9      	str	r1, [r7, #8]
 8007b34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	f023 0210 	bic.w	r2, r3, #16
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	031b      	lsls	r3, r3, #12
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	011b      	lsls	r3, r3, #4
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	621a      	str	r2, [r3, #32]
}
 8007b7e:	bf00      	nop
 8007b80:	371c      	adds	r7, #28
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr

08007b8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b085      	sub	sp, #20
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	f043 0307 	orr.w	r3, r3, #7
 8007bac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	609a      	str	r2, [r3, #8]
}
 8007bb4:	bf00      	nop
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b087      	sub	sp, #28
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
 8007bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	021a      	lsls	r2, r3, #8
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	431a      	orrs	r2, r3
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	609a      	str	r2, [r3, #8]
}
 8007bf4:	bf00      	nop
 8007bf6:	371c      	adds	r7, #28
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	f003 031f 	and.w	r3, r3, #31
 8007c12:	2201      	movs	r2, #1
 8007c14:	fa02 f303 	lsl.w	r3, r2, r3
 8007c18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6a1a      	ldr	r2, [r3, #32]
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	43db      	mvns	r3, r3
 8007c22:	401a      	ands	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6a1a      	ldr	r2, [r3, #32]
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	f003 031f 	and.w	r3, r3, #31
 8007c32:	6879      	ldr	r1, [r7, #4]
 8007c34:	fa01 f303 	lsl.w	r3, r1, r3
 8007c38:	431a      	orrs	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	621a      	str	r2, [r3, #32]
}
 8007c3e:	bf00      	nop
 8007c40:	371c      	adds	r7, #28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
	...

08007c4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d101      	bne.n	8007c64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c60:	2302      	movs	r3, #2
 8007c62:	e06d      	b.n	8007d40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2202      	movs	r2, #2
 8007c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a30      	ldr	r2, [pc, #192]	; (8007d4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d004      	beq.n	8007c98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a2f      	ldr	r2, [pc, #188]	; (8007d50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d108      	bne.n	8007caa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007c9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a20      	ldr	r2, [pc, #128]	; (8007d4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d022      	beq.n	8007d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cd6:	d01d      	beq.n	8007d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a1d      	ldr	r2, [pc, #116]	; (8007d54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d018      	beq.n	8007d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a1c      	ldr	r2, [pc, #112]	; (8007d58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d013      	beq.n	8007d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a1a      	ldr	r2, [pc, #104]	; (8007d5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d00e      	beq.n	8007d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a15      	ldr	r2, [pc, #84]	; (8007d50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d009      	beq.n	8007d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a16      	ldr	r2, [pc, #88]	; (8007d60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d004      	beq.n	8007d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a15      	ldr	r2, [pc, #84]	; (8007d64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d10c      	bne.n	8007d2e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3714      	adds	r7, #20
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	40010000 	.word	0x40010000
 8007d50:	40010400 	.word	0x40010400
 8007d54:	40000400 	.word	0x40000400
 8007d58:	40000800 	.word	0x40000800
 8007d5c:	40000c00 	.word	0x40000c00
 8007d60:	40014000 	.word	0x40014000
 8007d64:	40001800 	.word	0x40001800

08007d68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e040      	b.n	8007e38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d106      	bne.n	8007dcc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7fa fa06 	bl	80021d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2224      	movs	r2, #36	; 0x24
 8007dd0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 0201 	bic.w	r2, r2, #1
 8007de0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f82c 	bl	8007e40 <UART_SetConfig>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d101      	bne.n	8007df2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e022      	b.n	8007e38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d002      	beq.n	8007e00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fa84 	bl	8008308 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	685a      	ldr	r2, [r3, #4]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689a      	ldr	r2, [r3, #8]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f042 0201 	orr.w	r2, r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fb0b 	bl	800844c <UART_CheckIdleState>
 8007e36:	4603      	mov	r3, r0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b088      	sub	sp, #32
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	689a      	ldr	r2, [r3, #8]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	431a      	orrs	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	431a      	orrs	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	69db      	ldr	r3, [r3, #28]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	4ba6      	ldr	r3, [pc, #664]	; (8008104 <UART_SetConfig+0x2c4>)
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	6812      	ldr	r2, [r2, #0]
 8007e72:	6979      	ldr	r1, [r7, #20]
 8007e74:	430b      	orrs	r3, r1
 8007e76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a94      	ldr	r2, [pc, #592]	; (8008108 <UART_SetConfig+0x2c8>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d120      	bne.n	8007efe <UART_SetConfig+0xbe>
 8007ebc:	4b93      	ldr	r3, [pc, #588]	; (800810c <UART_SetConfig+0x2cc>)
 8007ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ec2:	f003 0303 	and.w	r3, r3, #3
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d816      	bhi.n	8007ef8 <UART_SetConfig+0xb8>
 8007eca:	a201      	add	r2, pc, #4	; (adr r2, 8007ed0 <UART_SetConfig+0x90>)
 8007ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed0:	08007ee1 	.word	0x08007ee1
 8007ed4:	08007eed 	.word	0x08007eed
 8007ed8:	08007ee7 	.word	0x08007ee7
 8007edc:	08007ef3 	.word	0x08007ef3
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	77fb      	strb	r3, [r7, #31]
 8007ee4:	e150      	b.n	8008188 <UART_SetConfig+0x348>
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	77fb      	strb	r3, [r7, #31]
 8007eea:	e14d      	b.n	8008188 <UART_SetConfig+0x348>
 8007eec:	2304      	movs	r3, #4
 8007eee:	77fb      	strb	r3, [r7, #31]
 8007ef0:	e14a      	b.n	8008188 <UART_SetConfig+0x348>
 8007ef2:	2308      	movs	r3, #8
 8007ef4:	77fb      	strb	r3, [r7, #31]
 8007ef6:	e147      	b.n	8008188 <UART_SetConfig+0x348>
 8007ef8:	2310      	movs	r3, #16
 8007efa:	77fb      	strb	r3, [r7, #31]
 8007efc:	e144      	b.n	8008188 <UART_SetConfig+0x348>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a83      	ldr	r2, [pc, #524]	; (8008110 <UART_SetConfig+0x2d0>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d132      	bne.n	8007f6e <UART_SetConfig+0x12e>
 8007f08:	4b80      	ldr	r3, [pc, #512]	; (800810c <UART_SetConfig+0x2cc>)
 8007f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f0e:	f003 030c 	and.w	r3, r3, #12
 8007f12:	2b0c      	cmp	r3, #12
 8007f14:	d828      	bhi.n	8007f68 <UART_SetConfig+0x128>
 8007f16:	a201      	add	r2, pc, #4	; (adr r2, 8007f1c <UART_SetConfig+0xdc>)
 8007f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1c:	08007f51 	.word	0x08007f51
 8007f20:	08007f69 	.word	0x08007f69
 8007f24:	08007f69 	.word	0x08007f69
 8007f28:	08007f69 	.word	0x08007f69
 8007f2c:	08007f5d 	.word	0x08007f5d
 8007f30:	08007f69 	.word	0x08007f69
 8007f34:	08007f69 	.word	0x08007f69
 8007f38:	08007f69 	.word	0x08007f69
 8007f3c:	08007f57 	.word	0x08007f57
 8007f40:	08007f69 	.word	0x08007f69
 8007f44:	08007f69 	.word	0x08007f69
 8007f48:	08007f69 	.word	0x08007f69
 8007f4c:	08007f63 	.word	0x08007f63
 8007f50:	2300      	movs	r3, #0
 8007f52:	77fb      	strb	r3, [r7, #31]
 8007f54:	e118      	b.n	8008188 <UART_SetConfig+0x348>
 8007f56:	2302      	movs	r3, #2
 8007f58:	77fb      	strb	r3, [r7, #31]
 8007f5a:	e115      	b.n	8008188 <UART_SetConfig+0x348>
 8007f5c:	2304      	movs	r3, #4
 8007f5e:	77fb      	strb	r3, [r7, #31]
 8007f60:	e112      	b.n	8008188 <UART_SetConfig+0x348>
 8007f62:	2308      	movs	r3, #8
 8007f64:	77fb      	strb	r3, [r7, #31]
 8007f66:	e10f      	b.n	8008188 <UART_SetConfig+0x348>
 8007f68:	2310      	movs	r3, #16
 8007f6a:	77fb      	strb	r3, [r7, #31]
 8007f6c:	e10c      	b.n	8008188 <UART_SetConfig+0x348>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a68      	ldr	r2, [pc, #416]	; (8008114 <UART_SetConfig+0x2d4>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d120      	bne.n	8007fba <UART_SetConfig+0x17a>
 8007f78:	4b64      	ldr	r3, [pc, #400]	; (800810c <UART_SetConfig+0x2cc>)
 8007f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007f82:	2b30      	cmp	r3, #48	; 0x30
 8007f84:	d013      	beq.n	8007fae <UART_SetConfig+0x16e>
 8007f86:	2b30      	cmp	r3, #48	; 0x30
 8007f88:	d814      	bhi.n	8007fb4 <UART_SetConfig+0x174>
 8007f8a:	2b20      	cmp	r3, #32
 8007f8c:	d009      	beq.n	8007fa2 <UART_SetConfig+0x162>
 8007f8e:	2b20      	cmp	r3, #32
 8007f90:	d810      	bhi.n	8007fb4 <UART_SetConfig+0x174>
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d002      	beq.n	8007f9c <UART_SetConfig+0x15c>
 8007f96:	2b10      	cmp	r3, #16
 8007f98:	d006      	beq.n	8007fa8 <UART_SetConfig+0x168>
 8007f9a:	e00b      	b.n	8007fb4 <UART_SetConfig+0x174>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	77fb      	strb	r3, [r7, #31]
 8007fa0:	e0f2      	b.n	8008188 <UART_SetConfig+0x348>
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	77fb      	strb	r3, [r7, #31]
 8007fa6:	e0ef      	b.n	8008188 <UART_SetConfig+0x348>
 8007fa8:	2304      	movs	r3, #4
 8007faa:	77fb      	strb	r3, [r7, #31]
 8007fac:	e0ec      	b.n	8008188 <UART_SetConfig+0x348>
 8007fae:	2308      	movs	r3, #8
 8007fb0:	77fb      	strb	r3, [r7, #31]
 8007fb2:	e0e9      	b.n	8008188 <UART_SetConfig+0x348>
 8007fb4:	2310      	movs	r3, #16
 8007fb6:	77fb      	strb	r3, [r7, #31]
 8007fb8:	e0e6      	b.n	8008188 <UART_SetConfig+0x348>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a56      	ldr	r2, [pc, #344]	; (8008118 <UART_SetConfig+0x2d8>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d120      	bne.n	8008006 <UART_SetConfig+0x1c6>
 8007fc4:	4b51      	ldr	r3, [pc, #324]	; (800810c <UART_SetConfig+0x2cc>)
 8007fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007fce:	2bc0      	cmp	r3, #192	; 0xc0
 8007fd0:	d013      	beq.n	8007ffa <UART_SetConfig+0x1ba>
 8007fd2:	2bc0      	cmp	r3, #192	; 0xc0
 8007fd4:	d814      	bhi.n	8008000 <UART_SetConfig+0x1c0>
 8007fd6:	2b80      	cmp	r3, #128	; 0x80
 8007fd8:	d009      	beq.n	8007fee <UART_SetConfig+0x1ae>
 8007fda:	2b80      	cmp	r3, #128	; 0x80
 8007fdc:	d810      	bhi.n	8008000 <UART_SetConfig+0x1c0>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d002      	beq.n	8007fe8 <UART_SetConfig+0x1a8>
 8007fe2:	2b40      	cmp	r3, #64	; 0x40
 8007fe4:	d006      	beq.n	8007ff4 <UART_SetConfig+0x1b4>
 8007fe6:	e00b      	b.n	8008000 <UART_SetConfig+0x1c0>
 8007fe8:	2300      	movs	r3, #0
 8007fea:	77fb      	strb	r3, [r7, #31]
 8007fec:	e0cc      	b.n	8008188 <UART_SetConfig+0x348>
 8007fee:	2302      	movs	r3, #2
 8007ff0:	77fb      	strb	r3, [r7, #31]
 8007ff2:	e0c9      	b.n	8008188 <UART_SetConfig+0x348>
 8007ff4:	2304      	movs	r3, #4
 8007ff6:	77fb      	strb	r3, [r7, #31]
 8007ff8:	e0c6      	b.n	8008188 <UART_SetConfig+0x348>
 8007ffa:	2308      	movs	r3, #8
 8007ffc:	77fb      	strb	r3, [r7, #31]
 8007ffe:	e0c3      	b.n	8008188 <UART_SetConfig+0x348>
 8008000:	2310      	movs	r3, #16
 8008002:	77fb      	strb	r3, [r7, #31]
 8008004:	e0c0      	b.n	8008188 <UART_SetConfig+0x348>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a44      	ldr	r2, [pc, #272]	; (800811c <UART_SetConfig+0x2dc>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d125      	bne.n	800805c <UART_SetConfig+0x21c>
 8008010:	4b3e      	ldr	r3, [pc, #248]	; (800810c <UART_SetConfig+0x2cc>)
 8008012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800801a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800801e:	d017      	beq.n	8008050 <UART_SetConfig+0x210>
 8008020:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008024:	d817      	bhi.n	8008056 <UART_SetConfig+0x216>
 8008026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800802a:	d00b      	beq.n	8008044 <UART_SetConfig+0x204>
 800802c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008030:	d811      	bhi.n	8008056 <UART_SetConfig+0x216>
 8008032:	2b00      	cmp	r3, #0
 8008034:	d003      	beq.n	800803e <UART_SetConfig+0x1fe>
 8008036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800803a:	d006      	beq.n	800804a <UART_SetConfig+0x20a>
 800803c:	e00b      	b.n	8008056 <UART_SetConfig+0x216>
 800803e:	2300      	movs	r3, #0
 8008040:	77fb      	strb	r3, [r7, #31]
 8008042:	e0a1      	b.n	8008188 <UART_SetConfig+0x348>
 8008044:	2302      	movs	r3, #2
 8008046:	77fb      	strb	r3, [r7, #31]
 8008048:	e09e      	b.n	8008188 <UART_SetConfig+0x348>
 800804a:	2304      	movs	r3, #4
 800804c:	77fb      	strb	r3, [r7, #31]
 800804e:	e09b      	b.n	8008188 <UART_SetConfig+0x348>
 8008050:	2308      	movs	r3, #8
 8008052:	77fb      	strb	r3, [r7, #31]
 8008054:	e098      	b.n	8008188 <UART_SetConfig+0x348>
 8008056:	2310      	movs	r3, #16
 8008058:	77fb      	strb	r3, [r7, #31]
 800805a:	e095      	b.n	8008188 <UART_SetConfig+0x348>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a2f      	ldr	r2, [pc, #188]	; (8008120 <UART_SetConfig+0x2e0>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d125      	bne.n	80080b2 <UART_SetConfig+0x272>
 8008066:	4b29      	ldr	r3, [pc, #164]	; (800810c <UART_SetConfig+0x2cc>)
 8008068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800806c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008070:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008074:	d017      	beq.n	80080a6 <UART_SetConfig+0x266>
 8008076:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800807a:	d817      	bhi.n	80080ac <UART_SetConfig+0x26c>
 800807c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008080:	d00b      	beq.n	800809a <UART_SetConfig+0x25a>
 8008082:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008086:	d811      	bhi.n	80080ac <UART_SetConfig+0x26c>
 8008088:	2b00      	cmp	r3, #0
 800808a:	d003      	beq.n	8008094 <UART_SetConfig+0x254>
 800808c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008090:	d006      	beq.n	80080a0 <UART_SetConfig+0x260>
 8008092:	e00b      	b.n	80080ac <UART_SetConfig+0x26c>
 8008094:	2301      	movs	r3, #1
 8008096:	77fb      	strb	r3, [r7, #31]
 8008098:	e076      	b.n	8008188 <UART_SetConfig+0x348>
 800809a:	2302      	movs	r3, #2
 800809c:	77fb      	strb	r3, [r7, #31]
 800809e:	e073      	b.n	8008188 <UART_SetConfig+0x348>
 80080a0:	2304      	movs	r3, #4
 80080a2:	77fb      	strb	r3, [r7, #31]
 80080a4:	e070      	b.n	8008188 <UART_SetConfig+0x348>
 80080a6:	2308      	movs	r3, #8
 80080a8:	77fb      	strb	r3, [r7, #31]
 80080aa:	e06d      	b.n	8008188 <UART_SetConfig+0x348>
 80080ac:	2310      	movs	r3, #16
 80080ae:	77fb      	strb	r3, [r7, #31]
 80080b0:	e06a      	b.n	8008188 <UART_SetConfig+0x348>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a1b      	ldr	r2, [pc, #108]	; (8008124 <UART_SetConfig+0x2e4>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d138      	bne.n	800812e <UART_SetConfig+0x2ee>
 80080bc:	4b13      	ldr	r3, [pc, #76]	; (800810c <UART_SetConfig+0x2cc>)
 80080be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80080c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080ca:	d017      	beq.n	80080fc <UART_SetConfig+0x2bc>
 80080cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080d0:	d82a      	bhi.n	8008128 <UART_SetConfig+0x2e8>
 80080d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080d6:	d00b      	beq.n	80080f0 <UART_SetConfig+0x2b0>
 80080d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080dc:	d824      	bhi.n	8008128 <UART_SetConfig+0x2e8>
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d003      	beq.n	80080ea <UART_SetConfig+0x2aa>
 80080e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080e6:	d006      	beq.n	80080f6 <UART_SetConfig+0x2b6>
 80080e8:	e01e      	b.n	8008128 <UART_SetConfig+0x2e8>
 80080ea:	2300      	movs	r3, #0
 80080ec:	77fb      	strb	r3, [r7, #31]
 80080ee:	e04b      	b.n	8008188 <UART_SetConfig+0x348>
 80080f0:	2302      	movs	r3, #2
 80080f2:	77fb      	strb	r3, [r7, #31]
 80080f4:	e048      	b.n	8008188 <UART_SetConfig+0x348>
 80080f6:	2304      	movs	r3, #4
 80080f8:	77fb      	strb	r3, [r7, #31]
 80080fa:	e045      	b.n	8008188 <UART_SetConfig+0x348>
 80080fc:	2308      	movs	r3, #8
 80080fe:	77fb      	strb	r3, [r7, #31]
 8008100:	e042      	b.n	8008188 <UART_SetConfig+0x348>
 8008102:	bf00      	nop
 8008104:	efff69f3 	.word	0xefff69f3
 8008108:	40011000 	.word	0x40011000
 800810c:	40023800 	.word	0x40023800
 8008110:	40004400 	.word	0x40004400
 8008114:	40004800 	.word	0x40004800
 8008118:	40004c00 	.word	0x40004c00
 800811c:	40005000 	.word	0x40005000
 8008120:	40011400 	.word	0x40011400
 8008124:	40007800 	.word	0x40007800
 8008128:	2310      	movs	r3, #16
 800812a:	77fb      	strb	r3, [r7, #31]
 800812c:	e02c      	b.n	8008188 <UART_SetConfig+0x348>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a72      	ldr	r2, [pc, #456]	; (80082fc <UART_SetConfig+0x4bc>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d125      	bne.n	8008184 <UART_SetConfig+0x344>
 8008138:	4b71      	ldr	r3, [pc, #452]	; (8008300 <UART_SetConfig+0x4c0>)
 800813a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800813e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008142:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008146:	d017      	beq.n	8008178 <UART_SetConfig+0x338>
 8008148:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800814c:	d817      	bhi.n	800817e <UART_SetConfig+0x33e>
 800814e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008152:	d00b      	beq.n	800816c <UART_SetConfig+0x32c>
 8008154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008158:	d811      	bhi.n	800817e <UART_SetConfig+0x33e>
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <UART_SetConfig+0x326>
 800815e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008162:	d006      	beq.n	8008172 <UART_SetConfig+0x332>
 8008164:	e00b      	b.n	800817e <UART_SetConfig+0x33e>
 8008166:	2300      	movs	r3, #0
 8008168:	77fb      	strb	r3, [r7, #31]
 800816a:	e00d      	b.n	8008188 <UART_SetConfig+0x348>
 800816c:	2302      	movs	r3, #2
 800816e:	77fb      	strb	r3, [r7, #31]
 8008170:	e00a      	b.n	8008188 <UART_SetConfig+0x348>
 8008172:	2304      	movs	r3, #4
 8008174:	77fb      	strb	r3, [r7, #31]
 8008176:	e007      	b.n	8008188 <UART_SetConfig+0x348>
 8008178:	2308      	movs	r3, #8
 800817a:	77fb      	strb	r3, [r7, #31]
 800817c:	e004      	b.n	8008188 <UART_SetConfig+0x348>
 800817e:	2310      	movs	r3, #16
 8008180:	77fb      	strb	r3, [r7, #31]
 8008182:	e001      	b.n	8008188 <UART_SetConfig+0x348>
 8008184:	2310      	movs	r3, #16
 8008186:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	69db      	ldr	r3, [r3, #28]
 800818c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008190:	d15b      	bne.n	800824a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008192:	7ffb      	ldrb	r3, [r7, #31]
 8008194:	2b08      	cmp	r3, #8
 8008196:	d828      	bhi.n	80081ea <UART_SetConfig+0x3aa>
 8008198:	a201      	add	r2, pc, #4	; (adr r2, 80081a0 <UART_SetConfig+0x360>)
 800819a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819e:	bf00      	nop
 80081a0:	080081c5 	.word	0x080081c5
 80081a4:	080081cd 	.word	0x080081cd
 80081a8:	080081d5 	.word	0x080081d5
 80081ac:	080081eb 	.word	0x080081eb
 80081b0:	080081db 	.word	0x080081db
 80081b4:	080081eb 	.word	0x080081eb
 80081b8:	080081eb 	.word	0x080081eb
 80081bc:	080081eb 	.word	0x080081eb
 80081c0:	080081e3 	.word	0x080081e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081c4:	f7fc ff90 	bl	80050e8 <HAL_RCC_GetPCLK1Freq>
 80081c8:	61b8      	str	r0, [r7, #24]
        break;
 80081ca:	e013      	b.n	80081f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081cc:	f7fc ffa0 	bl	8005110 <HAL_RCC_GetPCLK2Freq>
 80081d0:	61b8      	str	r0, [r7, #24]
        break;
 80081d2:	e00f      	b.n	80081f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081d4:	4b4b      	ldr	r3, [pc, #300]	; (8008304 <UART_SetConfig+0x4c4>)
 80081d6:	61bb      	str	r3, [r7, #24]
        break;
 80081d8:	e00c      	b.n	80081f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081da:	f7fc feb3 	bl	8004f44 <HAL_RCC_GetSysClockFreq>
 80081de:	61b8      	str	r0, [r7, #24]
        break;
 80081e0:	e008      	b.n	80081f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081e6:	61bb      	str	r3, [r7, #24]
        break;
 80081e8:	e004      	b.n	80081f4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80081ea:	2300      	movs	r3, #0
 80081ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	77bb      	strb	r3, [r7, #30]
        break;
 80081f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d074      	beq.n	80082e4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	005a      	lsls	r2, r3, #1
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	085b      	lsrs	r3, r3, #1
 8008204:	441a      	add	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	fbb2 f3f3 	udiv	r3, r2, r3
 800820e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	2b0f      	cmp	r3, #15
 8008214:	d916      	bls.n	8008244 <UART_SetConfig+0x404>
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800821c:	d212      	bcs.n	8008244 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	b29b      	uxth	r3, r3
 8008222:	f023 030f 	bic.w	r3, r3, #15
 8008226:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	085b      	lsrs	r3, r3, #1
 800822c:	b29b      	uxth	r3, r3
 800822e:	f003 0307 	and.w	r3, r3, #7
 8008232:	b29a      	uxth	r2, r3
 8008234:	89fb      	ldrh	r3, [r7, #14]
 8008236:	4313      	orrs	r3, r2
 8008238:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	89fa      	ldrh	r2, [r7, #14]
 8008240:	60da      	str	r2, [r3, #12]
 8008242:	e04f      	b.n	80082e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	77bb      	strb	r3, [r7, #30]
 8008248:	e04c      	b.n	80082e4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800824a:	7ffb      	ldrb	r3, [r7, #31]
 800824c:	2b08      	cmp	r3, #8
 800824e:	d828      	bhi.n	80082a2 <UART_SetConfig+0x462>
 8008250:	a201      	add	r2, pc, #4	; (adr r2, 8008258 <UART_SetConfig+0x418>)
 8008252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008256:	bf00      	nop
 8008258:	0800827d 	.word	0x0800827d
 800825c:	08008285 	.word	0x08008285
 8008260:	0800828d 	.word	0x0800828d
 8008264:	080082a3 	.word	0x080082a3
 8008268:	08008293 	.word	0x08008293
 800826c:	080082a3 	.word	0x080082a3
 8008270:	080082a3 	.word	0x080082a3
 8008274:	080082a3 	.word	0x080082a3
 8008278:	0800829b 	.word	0x0800829b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800827c:	f7fc ff34 	bl	80050e8 <HAL_RCC_GetPCLK1Freq>
 8008280:	61b8      	str	r0, [r7, #24]
        break;
 8008282:	e013      	b.n	80082ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008284:	f7fc ff44 	bl	8005110 <HAL_RCC_GetPCLK2Freq>
 8008288:	61b8      	str	r0, [r7, #24]
        break;
 800828a:	e00f      	b.n	80082ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800828c:	4b1d      	ldr	r3, [pc, #116]	; (8008304 <UART_SetConfig+0x4c4>)
 800828e:	61bb      	str	r3, [r7, #24]
        break;
 8008290:	e00c      	b.n	80082ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008292:	f7fc fe57 	bl	8004f44 <HAL_RCC_GetSysClockFreq>
 8008296:	61b8      	str	r0, [r7, #24]
        break;
 8008298:	e008      	b.n	80082ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800829a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800829e:	61bb      	str	r3, [r7, #24]
        break;
 80082a0:	e004      	b.n	80082ac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80082a2:	2300      	movs	r3, #0
 80082a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	77bb      	strb	r3, [r7, #30]
        break;
 80082aa:	bf00      	nop
    }

    if (pclk != 0U)
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d018      	beq.n	80082e4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	085a      	lsrs	r2, r3, #1
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	441a      	add	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	2b0f      	cmp	r3, #15
 80082ca:	d909      	bls.n	80082e0 <UART_SetConfig+0x4a0>
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082d2:	d205      	bcs.n	80082e0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	60da      	str	r2, [r3, #12]
 80082de:	e001      	b.n	80082e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80082f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3720      	adds	r7, #32
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	40007c00 	.word	0x40007c00
 8008300:	40023800 	.word	0x40023800
 8008304:	00f42400 	.word	0x00f42400

08008308 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008314:	f003 0301 	and.w	r3, r3, #1
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00a      	beq.n	8008332 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	430a      	orrs	r2, r1
 8008330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	f003 0302 	and.w	r3, r3, #2
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00a      	beq.n	8008354 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	430a      	orrs	r2, r1
 8008352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	f003 0304 	and.w	r3, r3, #4
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00a      	beq.n	8008376 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	430a      	orrs	r2, r1
 8008374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837a:	f003 0308 	and.w	r3, r3, #8
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00a      	beq.n	8008398 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	430a      	orrs	r2, r1
 8008396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839c:	f003 0310 	and.w	r3, r3, #16
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00a      	beq.n	80083ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	430a      	orrs	r2, r1
 80083b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083be:	f003 0320 	and.w	r3, r3, #32
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00a      	beq.n	80083dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	430a      	orrs	r2, r1
 80083da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d01a      	beq.n	800841e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008406:	d10a      	bne.n	800841e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	430a      	orrs	r2, r1
 800841c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	430a      	orrs	r2, r1
 800843e:	605a      	str	r2, [r3, #4]
  }
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af02      	add	r7, sp, #8
 8008452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800845c:	f7fa fa2c 	bl	80028b8 <HAL_GetTick>
 8008460:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0308 	and.w	r3, r3, #8
 800846c:	2b08      	cmp	r3, #8
 800846e:	d10e      	bne.n	800848e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008470:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f817 	bl	80084b2 <UART_WaitOnFlagUntilTimeout>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d001      	beq.n	800848e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e00d      	b.n	80084aa <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2220      	movs	r2, #32
 8008492:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2220      	movs	r2, #32
 8008498:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b09c      	sub	sp, #112	; 0x70
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	60f8      	str	r0, [r7, #12]
 80084ba:	60b9      	str	r1, [r7, #8]
 80084bc:	603b      	str	r3, [r7, #0]
 80084be:	4613      	mov	r3, r2
 80084c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084c2:	e0a5      	b.n	8008610 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ca:	f000 80a1 	beq.w	8008610 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084ce:	f7fa f9f3 	bl	80028b8 <HAL_GetTick>
 80084d2:	4602      	mov	r2, r0
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80084da:	429a      	cmp	r2, r3
 80084dc:	d302      	bcc.n	80084e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80084de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d13e      	bne.n	8008562 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084ec:	e853 3f00 	ldrex	r3, [r3]
 80084f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80084f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80084f8:	667b      	str	r3, [r7, #100]	; 0x64
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	461a      	mov	r2, r3
 8008500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008502:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008504:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008506:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008508:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800850a:	e841 2300 	strex	r3, r2, [r1]
 800850e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008512:	2b00      	cmp	r3, #0
 8008514:	d1e6      	bne.n	80084e4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	3308      	adds	r3, #8
 800851c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008520:	e853 3f00 	ldrex	r3, [r3]
 8008524:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008528:	f023 0301 	bic.w	r3, r3, #1
 800852c:	663b      	str	r3, [r7, #96]	; 0x60
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3308      	adds	r3, #8
 8008534:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008536:	64ba      	str	r2, [r7, #72]	; 0x48
 8008538:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800853c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800853e:	e841 2300 	strex	r3, r2, [r1]
 8008542:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1e5      	bne.n	8008516 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2220      	movs	r2, #32
 800854e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2220      	movs	r2, #32
 8008554:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800855e:	2303      	movs	r3, #3
 8008560:	e067      	b.n	8008632 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 0304 	and.w	r3, r3, #4
 800856c:	2b00      	cmp	r3, #0
 800856e:	d04f      	beq.n	8008610 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	69db      	ldr	r3, [r3, #28]
 8008576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800857a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800857e:	d147      	bne.n	8008610 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008588:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008592:	e853 3f00 	ldrex	r3, [r3]
 8008596:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800859e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	461a      	mov	r2, r3
 80085a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085a8:	637b      	str	r3, [r7, #52]	; 0x34
 80085aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085b0:	e841 2300 	strex	r3, r2, [r1]
 80085b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1e6      	bne.n	800858a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	3308      	adds	r3, #8
 80085c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	e853 3f00 	ldrex	r3, [r3]
 80085ca:	613b      	str	r3, [r7, #16]
   return(result);
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	f023 0301 	bic.w	r3, r3, #1
 80085d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	3308      	adds	r3, #8
 80085da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80085dc:	623a      	str	r2, [r7, #32]
 80085de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e0:	69f9      	ldr	r1, [r7, #28]
 80085e2:	6a3a      	ldr	r2, [r7, #32]
 80085e4:	e841 2300 	strex	r3, r2, [r1]
 80085e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1e5      	bne.n	80085bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2220      	movs	r2, #32
 80085f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2220      	movs	r2, #32
 80085fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2220      	movs	r2, #32
 8008600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800860c:	2303      	movs	r3, #3
 800860e:	e010      	b.n	8008632 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	69da      	ldr	r2, [r3, #28]
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	4013      	ands	r3, r2
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	429a      	cmp	r2, r3
 800861e:	bf0c      	ite	eq
 8008620:	2301      	moveq	r3, #1
 8008622:	2300      	movne	r3, #0
 8008624:	b2db      	uxtb	r3, r3
 8008626:	461a      	mov	r2, r3
 8008628:	79fb      	ldrb	r3, [r7, #7]
 800862a:	429a      	cmp	r2, r3
 800862c:	f43f af4a 	beq.w	80084c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3770      	adds	r7, #112	; 0x70
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
	...

0800863c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d121      	bne.n	8008692 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	4b27      	ldr	r3, [pc, #156]	; (80086f0 <FMC_SDRAM_Init+0xb4>)
 8008654:	4013      	ands	r3, r2
 8008656:	683a      	ldr	r2, [r7, #0]
 8008658:	6851      	ldr	r1, [r2, #4]
 800865a:	683a      	ldr	r2, [r7, #0]
 800865c:	6892      	ldr	r2, [r2, #8]
 800865e:	4311      	orrs	r1, r2
 8008660:	683a      	ldr	r2, [r7, #0]
 8008662:	68d2      	ldr	r2, [r2, #12]
 8008664:	4311      	orrs	r1, r2
 8008666:	683a      	ldr	r2, [r7, #0]
 8008668:	6912      	ldr	r2, [r2, #16]
 800866a:	4311      	orrs	r1, r2
 800866c:	683a      	ldr	r2, [r7, #0]
 800866e:	6952      	ldr	r2, [r2, #20]
 8008670:	4311      	orrs	r1, r2
 8008672:	683a      	ldr	r2, [r7, #0]
 8008674:	6992      	ldr	r2, [r2, #24]
 8008676:	4311      	orrs	r1, r2
 8008678:	683a      	ldr	r2, [r7, #0]
 800867a:	69d2      	ldr	r2, [r2, #28]
 800867c:	4311      	orrs	r1, r2
 800867e:	683a      	ldr	r2, [r7, #0]
 8008680:	6a12      	ldr	r2, [r2, #32]
 8008682:	4311      	orrs	r1, r2
 8008684:	683a      	ldr	r2, [r7, #0]
 8008686:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008688:	430a      	orrs	r2, r1
 800868a:	431a      	orrs	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	601a      	str	r2, [r3, #0]
 8008690:	e026      	b.n	80086e0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	69d9      	ldr	r1, [r3, #28]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	4319      	orrs	r1, r3
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a8:	430b      	orrs	r3, r1
 80086aa:	431a      	orrs	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	685a      	ldr	r2, [r3, #4]
 80086b4:	4b0e      	ldr	r3, [pc, #56]	; (80086f0 <FMC_SDRAM_Init+0xb4>)
 80086b6:	4013      	ands	r3, r2
 80086b8:	683a      	ldr	r2, [r7, #0]
 80086ba:	6851      	ldr	r1, [r2, #4]
 80086bc:	683a      	ldr	r2, [r7, #0]
 80086be:	6892      	ldr	r2, [r2, #8]
 80086c0:	4311      	orrs	r1, r2
 80086c2:	683a      	ldr	r2, [r7, #0]
 80086c4:	68d2      	ldr	r2, [r2, #12]
 80086c6:	4311      	orrs	r1, r2
 80086c8:	683a      	ldr	r2, [r7, #0]
 80086ca:	6912      	ldr	r2, [r2, #16]
 80086cc:	4311      	orrs	r1, r2
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	6952      	ldr	r2, [r2, #20]
 80086d2:	4311      	orrs	r1, r2
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	6992      	ldr	r2, [r2, #24]
 80086d8:	430a      	orrs	r2, r1
 80086da:	431a      	orrs	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	ffff8000 	.word	0xffff8000

080086f4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d128      	bne.n	8008758 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	1e59      	subs	r1, r3, #1
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	3b01      	subs	r3, #1
 800871a:	011b      	lsls	r3, r3, #4
 800871c:	4319      	orrs	r1, r3
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	3b01      	subs	r3, #1
 8008724:	021b      	lsls	r3, r3, #8
 8008726:	4319      	orrs	r1, r3
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	3b01      	subs	r3, #1
 800872e:	031b      	lsls	r3, r3, #12
 8008730:	4319      	orrs	r1, r3
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	3b01      	subs	r3, #1
 8008738:	041b      	lsls	r3, r3, #16
 800873a:	4319      	orrs	r1, r3
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	3b01      	subs	r3, #1
 8008742:	051b      	lsls	r3, r3, #20
 8008744:	4319      	orrs	r1, r3
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	3b01      	subs	r3, #1
 800874c:	061b      	lsls	r3, r3, #24
 800874e:	430b      	orrs	r3, r1
 8008750:	431a      	orrs	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	609a      	str	r2, [r3, #8]
 8008756:	e02d      	b.n	80087b4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	689a      	ldr	r2, [r3, #8]
 800875c:	4b19      	ldr	r3, [pc, #100]	; (80087c4 <FMC_SDRAM_Timing_Init+0xd0>)
 800875e:	4013      	ands	r3, r2
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	68d2      	ldr	r2, [r2, #12]
 8008764:	3a01      	subs	r2, #1
 8008766:	0311      	lsls	r1, r2, #12
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	6952      	ldr	r2, [r2, #20]
 800876c:	3a01      	subs	r2, #1
 800876e:	0512      	lsls	r2, r2, #20
 8008770:	430a      	orrs	r2, r1
 8008772:	431a      	orrs	r2, r3
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	1e59      	subs	r1, r3, #1
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	3b01      	subs	r3, #1
 800878c:	011b      	lsls	r3, r3, #4
 800878e:	4319      	orrs	r1, r3
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	3b01      	subs	r3, #1
 8008796:	021b      	lsls	r3, r3, #8
 8008798:	4319      	orrs	r1, r3
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	3b01      	subs	r3, #1
 80087a0:	041b      	lsls	r3, r3, #16
 80087a2:	4319      	orrs	r1, r3
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	699b      	ldr	r3, [r3, #24]
 80087a8:	3b01      	subs	r3, #1
 80087aa:	061b      	lsls	r3, r3, #24
 80087ac:	430b      	orrs	r3, r1
 80087ae:	431a      	orrs	r2, r3
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3714      	adds	r7, #20
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	ff0f0fff 	.word	0xff0f0fff

080087c8 <_ZN7XFEventD1Ev>:
public :
    /**
     * Default class constructor
     */
    XFEvent(XFEventType eventType, int id, interface::XFReactive * pBehavior) : eventType_(eventType), id_(id), pBehavior_(pBehavior) {}
    virtual ~XFEvent() {}		///< Class destructor
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	4a04      	ldr	r2, [pc, #16]	; (80087e4 <_ZN7XFEventD1Ev+0x1c>)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	601a      	str	r2, [r3, #0]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4618      	mov	r0, r3
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr
 80087e4:	0800b1c4 	.word	0x0800b1c4

080087e8 <_ZN7XFEventD0Ev>:
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f7ff ffe9 	bl	80087c8 <_ZN7XFEventD1Ev>
 80087f6:	2110      	movs	r1, #16
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f001 fa74 	bl	8009ce6 <_ZdlPvj>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4618      	mov	r0, r3
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <_ZNK7XFEvent5getIdEv>:
    /** \brief Sets pointer to behavioral class (see #_pBehavior).
     * Sets the behavior in which the event should be executed.
     */
    inline void setBehavior(interface::XFReactive * pBehavior) { pBehavior_ = pBehavior; }

    inline int getId() const { return id_; }		///< Returns #_id identifying the event in the behaviors context.
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	4618      	mov	r0, r3
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <_ZNK7XFEvent18deleteAfterConsumeEv>:

    virtual bool deleteAfterConsume() const { return false; }	///< Tells the dispatcher if the event must be deleted or not.
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	2300      	movs	r3, #0
 800882a:	4618      	mov	r0, r3
 800882c:	370c      	adds	r7, #12
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
	...

08008838 <_Z41__static_initialization_and_destruction_0ii>:

//static
void Trace::unlock()
{
    traceMutexUnlock();
}
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d10a      	bne.n	800885e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800884e:	4293      	cmp	r3, r2
 8008850:	d105      	bne.n	800885e <_Z41__static_initialization_and_destruction_0ii+0x26>
static Uart traceUart(TRACE_UART_CONSTRUCTOR_PARAMETERS);
 8008852:	2300      	movs	r3, #0
 8008854:	4a09      	ldr	r2, [pc, #36]	; (800887c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8008856:	2100      	movs	r1, #0
 8008858:	4809      	ldr	r0, [pc, #36]	; (8008880 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800885a:	f000 f87f 	bl	800895c <_ZN4UartC1EhP20__UART_HandleTypeDefb>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d107      	bne.n	8008874 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800886a:	4293      	cmp	r3, r2
 800886c:	d102      	bne.n	8008874 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800886e:	4804      	ldr	r0, [pc, #16]	; (8008880 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8008870:	f000 f8c0 	bl	80089f4 <_ZN4UartD1Ev>
}
 8008874:	bf00      	nop
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	200005d8 	.word	0x200005d8
 8008880:	200006f0 	.word	0x200006f0

08008884 <_GLOBAL__sub_I_trace_initialize>:
 8008884:	b580      	push	{r7, lr}
 8008886:	af00      	add	r7, sp, #0
 8008888:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800888c:	2001      	movs	r0, #1
 800888e:	f7ff ffd3 	bl	8008838 <_Z41__static_initialization_and_destruction_0ii>
 8008892:	bd80      	pop	{r7, pc}

08008894 <_GLOBAL__sub_D_trace_initialize>:
 8008894:	b580      	push	{r7, lr}
 8008896:	af00      	add	r7, sp, #0
 8008898:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800889c:	2000      	movs	r0, #0
 800889e:	f7ff ffcb 	bl	8008838 <_Z41__static_initialization_and_destruction_0ii>
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <critical_enter>:

static volatile int inIsr_ = 0;
static volatile int enterCriticalNested_ = 0;

void critical_enter()
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	af00      	add	r7, sp, #0
	// Only disable interrupts when not calling from an ISR
	if (!critical_inIsr())
 80088a8:	f000 f83c 	bl	8008924 <critical_inIsr>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	bf0c      	ite	eq
 80088b2:	2301      	moveq	r3, #1
 80088b4:	2300      	movne	r3, #0
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00f      	beq.n	80088dc <critical_enter+0x38>
	{
		if (!enterCriticalNested_)
 80088bc:	4b08      	ldr	r3, [pc, #32]	; (80088e0 <critical_enter+0x3c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	bf0c      	ite	eq
 80088c4:	2301      	moveq	r3, #1
 80088c6:	2300      	movne	r3, #0
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d001      	beq.n	80088d2 <critical_enter+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 80088ce:	b672      	cpsid	i
}
 80088d0:	bf00      	nop
		{
			// Turn off the priority configurable interrupts
		    __disable_irq();
		}
		enterCriticalNested_++;
 80088d2:	4b03      	ldr	r3, [pc, #12]	; (80088e0 <critical_enter+0x3c>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	3301      	adds	r3, #1
 80088d8:	4a01      	ldr	r2, [pc, #4]	; (80088e0 <critical_enter+0x3c>)
 80088da:	6013      	str	r3, [r2, #0]
	}
}
 80088dc:	bf00      	nop
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	20000784 	.word	0x20000784

080088e4 <critical_exit>:

void critical_exit()
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	af00      	add	r7, sp, #0
	// Only enable interrupts when not calling from an ISR
	if (!critical_inIsr())
 80088e8:	f000 f81c 	bl	8008924 <critical_inIsr>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	bf0c      	ite	eq
 80088f2:	2301      	moveq	r3, #1
 80088f4:	2300      	movne	r3, #0
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00f      	beq.n	800891c <critical_exit+0x38>
	{
		enterCriticalNested_--;
 80088fc:	4b08      	ldr	r3, [pc, #32]	; (8008920 <critical_exit+0x3c>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	3b01      	subs	r3, #1
 8008902:	4a07      	ldr	r2, [pc, #28]	; (8008920 <critical_exit+0x3c>)
 8008904:	6013      	str	r3, [r2, #0]

		if (!enterCriticalNested_)
 8008906:	4b06      	ldr	r3, [pc, #24]	; (8008920 <critical_exit+0x3c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	bf0c      	ite	eq
 800890e:	2301      	moveq	r3, #1
 8008910:	2300      	movne	r3, #0
 8008912:	b2db      	uxtb	r3, r3
 8008914:	2b00      	cmp	r3, #0
 8008916:	d001      	beq.n	800891c <critical_exit+0x38>
  __ASM volatile ("cpsie i" : : : "memory");
 8008918:	b662      	cpsie	i
}
 800891a:	bf00      	nop
		{
			// Turn on the interrupts with configurable priority
		    __enable_irq();
		}
	}
}
 800891c:	bf00      	nop
 800891e:	bd80      	pop	{r7, pc}
 8008920:	20000784 	.word	0x20000784

08008924 <critical_inIsr>:

int critical_inIsr()
{
 8008924:	b480      	push	{r7}
 8008926:	af00      	add	r7, sp, #0
    // Variable must be put to TRUE in every ISR to indicate execution
    // of an ISR and need to put back to FALSE before leaving ISR.
    return inIsr_;
 8008928:	4b03      	ldr	r3, [pc, #12]	; (8008938 <critical_inIsr+0x14>)
 800892a:	681b      	ldr	r3, [r3, #0]
}
 800892c:	4618      	mov	r0, r3
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	20000780 	.word	0x20000780

0800893c <critical_setInIsr>:

void critical_setInIsr(bool inIsr)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	4603      	mov	r3, r0
 8008944:	71fb      	strb	r3, [r7, #7]
    inIsr_ = inIsr;
 8008946:	79fb      	ldrb	r3, [r7, #7]
 8008948:	4a03      	ldr	r2, [pc, #12]	; (8008958 <critical_setInIsr+0x1c>)
 800894a:	6013      	str	r3, [r2, #0]
}
 800894c:	bf00      	nop
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	20000780 	.word	0x20000780

0800895c <_ZN4UartC1EhP20__UART_HandleTypeDefb>:
#endif

Uart * Uart::_sUart[Uart::UART_COUNT];				// Comment: Startup script should initialize pointers to zero (.bss section)
bool Uart::_sInitialized[Uart::UART_COUNT];			// Same for other arrays

Uart::Uart(const unsigned char uartNbr, UART_HandleTypeDef * uartHandle, bool bTxDMA /* = false */)
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	607a      	str	r2, [r7, #4]
 8008966:	461a      	mov	r2, r3
 8008968:	460b      	mov	r3, r1
 800896a:	72fb      	strb	r3, [r7, #11]
 800896c:	4613      	mov	r3, r2
 800896e:	72bb      	strb	r3, [r7, #10]
 : _uartNbr(-1),
   _pUartHandle(NULL),
   _bTxDMA(bTxDMA)
 8008970:	4a1a      	ldr	r2, [pc, #104]	; (80089dc <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x80>)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	601a      	str	r2, [r3, #0]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	22ff      	movs	r2, #255	; 0xff
 800897a:	711a      	strb	r2, [r3, #4]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	609a      	str	r2, [r3, #8]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	7aba      	ldrb	r2, [r7, #10]
 8008986:	731a      	strb	r2, [r3, #12]
{
	assert(uartNbr < UART_COUNT);
 8008988:	7afb      	ldrb	r3, [r7, #11]
 800898a:	2b02      	cmp	r3, #2
 800898c:	d905      	bls.n	800899a <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x3e>
 800898e:	4b14      	ldr	r3, [pc, #80]	; (80089e0 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x84>)
 8008990:	4a14      	ldr	r2, [pc, #80]	; (80089e4 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x88>)
 8008992:	2111      	movs	r1, #17
 8008994:	4814      	ldr	r0, [pc, #80]	; (80089e8 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x8c>)
 8008996:	f001 f9ff 	bl	8009d98 <__assert_func>

	if (uartNbr < UART_COUNT)
 800899a:	7afb      	ldrb	r3, [r7, #11]
 800899c:	2b02      	cmp	r3, #2
 800899e:	d817      	bhi.n	80089d0 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x74>
    {
        if (!_sUart[uartNbr])
 80089a0:	7afb      	ldrb	r3, [r7, #11]
 80089a2:	4a12      	ldr	r2, [pc, #72]	; (80089ec <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x90>)
 80089a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10b      	bne.n	80089c4 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x68>
        {
            // Register instance
            _sUart[uartNbr] = this;
 80089ac:	7afb      	ldrb	r3, [r7, #11]
 80089ae:	490f      	ldr	r1, [pc, #60]	; (80089ec <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x90>)
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            _uartNbr = uartNbr;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	7afa      	ldrb	r2, [r7, #11]
 80089ba:	711a      	strb	r2, [r3, #4]

            _pUartHandle = uartHandle;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	609a      	str	r2, [r3, #8]
 80089c2:	e005      	b.n	80089d0 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x74>
        }
        else
        {
            assert(false);  // Error: Instance for specified UART already exists.
 80089c4:	4b0a      	ldr	r3, [pc, #40]	; (80089f0 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x94>)
 80089c6:	4a07      	ldr	r2, [pc, #28]	; (80089e4 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x88>)
 80089c8:	211f      	movs	r1, #31
 80089ca:	4807      	ldr	r0, [pc, #28]	; (80089e8 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x8c>)
 80089cc:	f001 f9e4 	bl	8009d98 <__assert_func>
        }
    }
}
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	0800b1d8 	.word	0x0800b1d8
 80089e0:	0800af98 	.word	0x0800af98
 80089e4:	0800afb0 	.word	0x0800afb0
 80089e8:	0800afe8 	.word	0x0800afe8
 80089ec:	20000788 	.word	0x20000788
 80089f0:	0800b058 	.word	0x0800b058

080089f4 <_ZN4UartD1Ev>:

Uart::~Uart()
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	4a04      	ldr	r2, [pc, #16]	; (8008a10 <_ZN4UartD1Ev+0x1c>)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	601a      	str	r2, [r3, #0]
{

}
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4618      	mov	r0, r3
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr
 8008a10:	0800b1d8 	.word	0x0800b1d8

08008a14 <_ZN4UartD0Ev>:
Uart::~Uart()
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
}
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f7ff ffe9 	bl	80089f4 <_ZN4UartD1Ev>
 8008a22:	2190      	movs	r1, #144	; 0x90
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f001 f95e 	bl	8009ce6 <_ZdlPvj>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>:
    XFEvent(XFEventType eventType, int id, interface::XFReactive * pBehavior) : eventType_(eventType), id_(id), pBehavior_(pBehavior) {}
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	607a      	str	r2, [r7, #4]
 8008a3e:	603b      	str	r3, [r7, #0]
 8008a40:	460b      	mov	r3, r1
 8008a42:	72fb      	strb	r3, [r7, #11]
 8008a44:	4a09      	ldr	r2, [pc, #36]	; (8008a6c <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE+0x38>)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	601a      	str	r2, [r3, #0]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	7afa      	ldrb	r2, [r7, #11]
 8008a4e:	711a      	strb	r2, [r3, #4]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	609a      	str	r2, [r3, #8]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	60da      	str	r2, [r3, #12]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	0800b1c4 	.word	0x0800b1c4

08008a70 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>:
#include "xf/timeout.h"

XFTimeout::XFTimeout(int id, int interval, interface::XFReactive * pBehavior)
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
 8008a7c:	603b      	str	r3, [r7, #0]
 : XFEvent(XFEvent::Timeout, id, pBehavior),
   interval_(interval),
   relTicks_(interval)
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	2104      	movs	r1, #4
 8008a86:	f7ff ffd5 	bl	8008a34 <_ZN7XFEventC1ENS_11XFEventTypeEiPN9interface10XFReactiveE>
 8008a8a:	4a07      	ldr	r2, [pc, #28]	; (8008aa8 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE+0x38>)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	601a      	str	r2, [r3, #0]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	611a      	str	r2, [r3, #16]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	615a      	str	r2, [r3, #20]
{
}
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	0800b1e8 	.word	0x0800b1e8

08008aac <_ZNK9XFTimeouteqERKS_>:

bool XFTimeout::operator ==(const XFTimeout & timeout) const
{
 8008aac:	b590      	push	{r4, r7, lr}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
    // Check behavior and timeout id attributes, if there are equal
    return (pBehavior_ == timeout.pBehavior_ && getId() == timeout.getId()) ? true : false;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	68da      	ldr	r2, [r3, #12]
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d10d      	bne.n	8008ade <_ZNK9XFTimeouteqERKS_+0x32>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7ff fe9f 	bl	8008808 <_ZNK7XFEvent5getIdEv>
 8008aca:	4604      	mov	r4, r0
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7ff fe9a 	bl	8008808 <_ZNK7XFEvent5getIdEv>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	429c      	cmp	r4, r3
 8008ad8:	d101      	bne.n	8008ade <_ZNK9XFTimeouteqERKS_+0x32>
 8008ada:	2301      	movs	r3, #1
 8008adc:	e000      	b.n	8008ae0 <_ZNK9XFTimeouteqERKS_+0x34>
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd90      	pop	{r4, r7, pc}

08008ae8 <_ZNK9XFTimeout18deleteAfterConsumeEv>:

bool XFTimeout::deleteAfterConsume() const
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
    return true;
 8008af0:	2301      	movs	r3, #1
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
	...

08008b00 <_ZN9XFTimeoutD1Ev>:
 * the `getEventType()` method.
 *
 * XFTimeout is inheriting from XFEvent, so every timeout is
 * also an event.
 */
class XFTimeout : public XFEvent
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	4a05      	ldr	r2, [pc, #20]	; (8008b20 <_ZN9XFTimeoutD1Ev+0x20>)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	601a      	str	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7ff fe59 	bl	80087c8 <_ZN7XFEventD1Ev>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	0800b1e8 	.word	0x0800b1e8

08008b24 <_ZN9XFTimeoutD0Ev>:
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7ff ffe7 	bl	8008b00 <_ZN9XFTimeoutD1Ev>
 8008b32:	2118      	movs	r1, #24
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f001 f8d6 	bl	8009ce6 <_ZdlPvj>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <_ZNK7XFEvent11getBehaviorEv>:
    inline interface::XFReactive * getBehavior() const { return pBehavior_; }
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	4618      	mov	r0, r3
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <_ZNSt8__detail17_List_node_headerC1Ev>:
    {
#if _GLIBCXX_USE_CXX11_ABI
      std::size_t _M_size;
#endif

      _List_node_header() _GLIBCXX_NOEXCEPT
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f805 	bl	8008b8c <_ZNSt8__detail17_List_node_header7_M_initEv>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4618      	mov	r0, r3
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <_ZNSt8__detail17_List_node_header7_M_initEv>:
	  }
      }
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
      {
	this->_M_next = this->_M_prev = this;
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	605a      	str	r2, [r3, #4]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	685a      	ldr	r2, [r3, #4]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	601a      	str	r2, [r3, #0]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	609a      	str	r2, [r3, #8]
#endif
      }
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <_ZN9interface16XFTimeoutManager10initializeEl>:

    /**
     * Sets the time interval in milliseconds in which the timeout manager
     * should handle the timeouts.
     */
    virtual void initialize(int32_t tickInterval)
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
    {
        tickInterval_ = tickInterval;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	683a      	ldr	r2, [r7, #0]
 8008bc2:	605a      	str	r2, [r3, #4]
    }
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <_ZNK9interface16XFTimeoutManager15getTickIntervalEv>:

    /**
     * @brief Returns tick interval in milliseconds.
     */
    virtual int32_t getTickInterval() const
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
    {
        return tickInterval_;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
    }
 8008bdc:	4618      	mov	r0, r3
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <_ZN9interface16XFTimeoutManagerC1Ev>:
     * belongs.
     */
    virtual void tick() = 0;

protected:
    XFTimeoutManager() :
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
        tickInterval_(0)
 8008bf0:	4a06      	ldr	r2, [pc, #24]	; (8008c0c <_ZN9interface16XFTimeoutManagerC1Ev+0x24>)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	601a      	str	r2, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	605a      	str	r2, [r3, #4]
    {}
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	370c      	adds	r7, #12
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	0800b228 	.word	0x0800b228

08008c10 <_ZNK9XFTimeout11getRelTicksEv>:
    bool operator ==(const XFTimeout & timeout) const;

    bool deleteAfterConsume() const override;                                                       ///< Tells the dispatcher if the event must be deleted or not.

    inline void setRelTicks(int relTicks) { relTicks_ = relTicks; }                                 ///< Sets remaining ticks.
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	695b      	ldr	r3, [r3, #20]
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <_ZN9XFTimeout21substractFromRelTicksEi>:
    inline void substractFromRelTicks(int ticksToSubstract) { relTicks_ -= ticksToSubstract; }      ///< Substracts `ticksToSubstract` from remaining ticks.
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	695a      	ldr	r2, [r3, #20]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	1ad2      	subs	r2, r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	615a      	str	r2, [r3, #20]
 8008c3e:	bf00      	nop
 8008c40:	370c      	adds	r7, #12
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <_ZN9XFTimeout13addToRelTicksEi>:
    inline void addToRelTicks(int ticksToAdd) { relTicks_ += ticksToAdd; }                          ///< Adds `ticksToAdd` to remaining ticks.
 8008c4a:	b480      	push	{r7}
 8008c4c:	b083      	sub	sp, #12
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	6039      	str	r1, [r7, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	695a      	ldr	r2, [r3, #20]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	441a      	add	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	615a      	str	r2, [r3, #20]
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <_ZN9interface16XFTimeoutManager11getInstanceEv>:
#include "timeoutmanager-default.h"

using interface::XFMutex;

interface::XFTimeoutManager * interface::XFTimeoutManager::getInstance()
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	af00      	add	r7, sp, #0
    return XFTimeoutManagerDefault::getInstance();
 8008c70:	f000 f80c 	bl	8008c8c <_ZN23XFTimeoutManagerDefault11getInstanceEv>
 8008c74:	4603      	mov	r3, r0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	bd80      	pop	{r7, pc}
	...

08008c7c <__tcf_0>:

interface::XFTimeoutManager * XFTimeoutManagerDefault::getInstance()
{
    static XFTimeoutManagerDefault timeoutManager;
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	4801      	ldr	r0, [pc, #4]	; (8008c88 <__tcf_0+0xc>)
 8008c82:	f000 f8b5 	bl	8008df0 <_ZN23XFTimeoutManagerDefaultD1Ev>
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	20000794 	.word	0x20000794

08008c8c <_ZN23XFTimeoutManagerDefault11getInstanceEv>:
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	af00      	add	r7, sp, #0
    static XFTimeoutManagerDefault timeoutManager;
 8008c90:	4b12      	ldr	r3, [pc, #72]	; (8008cdc <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x50>)
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	f3bf 8f5b 	dmb	ish
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	bf0c      	ite	eq
 8008ca2:	2301      	moveq	r3, #1
 8008ca4:	2300      	movne	r3, #0
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d013      	beq.n	8008cd4 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x48>
 8008cac:	480b      	ldr	r0, [pc, #44]	; (8008cdc <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x50>)
 8008cae:	f001 f81c 	bl	8009cea <__cxa_guard_acquire>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	bf14      	ite	ne
 8008cb8:	2301      	movne	r3, #1
 8008cba:	2300      	moveq	r3, #0
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d008      	beq.n	8008cd4 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x48>
 8008cc2:	4807      	ldr	r0, [pc, #28]	; (8008ce0 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x54>)
 8008cc4:	f000 f864 	bl	8008d90 <_ZN23XFTimeoutManagerDefaultC1Ev>
 8008cc8:	4806      	ldr	r0, [pc, #24]	; (8008ce4 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x58>)
 8008cca:	f001 f883 	bl	8009dd4 <atexit>
 8008cce:	4803      	ldr	r0, [pc, #12]	; (8008cdc <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x50>)
 8008cd0:	f001 f817 	bl	8009d02 <__cxa_guard_release>
    return &timeoutManager;
 8008cd4:	4b02      	ldr	r3, [pc, #8]	; (8008ce0 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x54>)
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	200007ac 	.word	0x200007ac
 8008ce0:	20000794 	.word	0x20000794
 8008ce4:	08008c7d 	.word	0x08008c7d

08008ce8 <_ZN9interface16XFTimeoutManagerD1Ev>:
    virtual ~XFTimeoutManager() = default;
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	4a04      	ldr	r2, [pc, #16]	; (8008d04 <_ZN9interface16XFTimeoutManagerD1Ev+0x1c>)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	601a      	str	r2, [r3, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr
 8008d04:	0800b228 	.word	0x0800b228

08008d08 <_ZN9interface16XFTimeoutManagerD0Ev>:
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7ff ffe9 	bl	8008ce8 <_ZN9interface16XFTimeoutManagerD1Ev>
 8008d16:	2108      	movs	r1, #8
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 ffe4 	bl	8009ce6 <_ZdlPvj>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4618      	mov	r0, r3
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implD1Ev>:
	  }
	return __n;
      }
#endif

      struct _List_impl
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fb88 	bl	8009446 <_ZNSaISt10_List_nodeIP9XFTimeoutEED1Ev>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EEC1Ev>:
      const _Node_alloc_type&
      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
      { return _M_impl; }

#if __cplusplus >= 201103L
      _List_base() = default;
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f000 fb6b 	bl	8009426 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implC1Ev>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4618      	mov	r0, r3
 8008d54:	3708      	adds	r7, #8
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EEC1Ev>:

      /**
       *  @brief  Creates a %list with no elements.
       */
#if __cplusplus >= 201103L
      list() = default;
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b082      	sub	sp, #8
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7ff ffeb 	bl	8008d40 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EEC1Ev>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f000 fb6d 	bl	800945e <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EED1Ev>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4618      	mov	r0, r3
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
	...

08008d90 <_ZN23XFTimeoutManagerDefaultC1Ev>:

XFTimeoutManagerDefault::XFTimeoutManagerDefault() :
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
    pMutex_(nullptr)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7ff ff24 	bl	8008be8 <_ZN9interface16XFTimeoutManagerC1Ev>
 8008da0:	4a0f      	ldr	r2, [pc, #60]	; (8008de0 <_ZN23XFTimeoutManagerDefaultC1Ev+0x50>)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	601a      	str	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	3308      	adds	r3, #8
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7ff ffd5 	bl	8008d5a <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EEC1Ev>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	615a      	str	r2, [r3, #20]
{
    pMutex_ = XFMutex::create();
 8008db6:	f000 fecf 	bl	8009b58 <_ZN9interface7XFMutex6createEv>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	615a      	str	r2, [r3, #20]
    assert(pMutex_);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	695b      	ldr	r3, [r3, #20]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d105      	bne.n	8008dd4 <_ZN23XFTimeoutManagerDefaultC1Ev+0x44>
 8008dc8:	4b06      	ldr	r3, [pc, #24]	; (8008de4 <_ZN23XFTimeoutManagerDefaultC1Ev+0x54>)
 8008dca:	4a07      	ldr	r2, [pc, #28]	; (8008de8 <_ZN23XFTimeoutManagerDefaultC1Ev+0x58>)
 8008dcc:	211d      	movs	r1, #29
 8008dce:	4807      	ldr	r0, [pc, #28]	; (8008dec <_ZN23XFTimeoutManagerDefaultC1Ev+0x5c>)
 8008dd0:	f000 ffe2 	bl	8009d98 <__assert_func>
}
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	0800b1fc 	.word	0x0800b1fc
 8008de4:	0800b0b4 	.word	0x0800b0b4
 8008de8:	0800b0bc 	.word	0x0800b0bc
 8008dec:	0800b0f0 	.word	0x0800b0f0

08008df0 <_ZN23XFTimeoutManagerDefaultD1Ev>:

XFTimeoutManagerDefault::~XFTimeoutManagerDefault()
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	4a08      	ldr	r2, [pc, #32]	; (8008e1c <_ZN23XFTimeoutManagerDefaultD1Ev+0x2c>)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	601a      	str	r2, [r3, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	3308      	adds	r3, #8
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7ff ffb6 	bl	8008d74 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EED1Ev>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7ff ff6c 	bl	8008ce8 <_ZN9interface16XFTimeoutManagerD1Ev>
{
}
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4618      	mov	r0, r3
 8008e14:	3708      	adds	r7, #8
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	0800b1fc 	.word	0x0800b1fc

08008e20 <_ZN23XFTimeoutManagerDefaultD0Ev>:
XFTimeoutManagerDefault::~XFTimeoutManagerDefault()
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
}
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f7ff ffe1 	bl	8008df0 <_ZN23XFTimeoutManagerDefaultD1Ev>
 8008e2e:	2118      	movs	r1, #24
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 ff58 	bl	8009ce6 <_ZdlPvj>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <_ZN23XFTimeoutManagerDefault5startEv>:

void XFTimeoutManagerDefault::start()
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
    // Check tickInterval. Set default value if not set
    if (tickInterval_ == 0)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d102      	bne.n	8008e56 <_ZN23XFTimeoutManagerDefault5startEv+0x16>
    {
        tickInterval_ = 10;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	220a      	movs	r2, #10
 8008e54:	605a      	str	r2, [r3, #4]
    }

    XF_startTimeoutManagerTimer(uint32_t(tickInterval_));
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 ff0e 	bl	8009c7c <XF_startTimeoutManagerTimer>
}
 8008e60:	bf00      	nop
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <_ZN23XFTimeoutManagerDefault15scheduleTimeoutEllPN9interface10XFReactiveE>:

void XFTimeoutManagerDefault::scheduleTimeout(int32_t timeoutId, int32_t interval, interface::XFReactive * pReactive)
{
 8008e68:	b590      	push	{r4, r7, lr}
 8008e6a:	b087      	sub	sp, #28
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
 8008e74:	603b      	str	r3, [r7, #0]
    XFTimeout * pTimeout = new XFTimeout(timeoutId, interval, pReactive);
 8008e76:	2018      	movs	r0, #24
 8008e78:	f000 ff46 	bl	8009d08 <_Znwj>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	461c      	mov	r4, r3
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	68b9      	ldr	r1, [r7, #8]
 8008e86:	4620      	mov	r0, r4
 8008e88:	f7ff fdf2 	bl	8008a70 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>
 8008e8c:	617c      	str	r4, [r7, #20]

    if (pTimeout)
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d006      	beq.n	8008ea2 <_ZN23XFTimeoutManagerDefault15scheduleTimeoutEllPN9interface10XFReactiveE+0x3a>
    {
        addTimeout(pTimeout);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	3320      	adds	r3, #32
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6979      	ldr	r1, [r7, #20]
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	4798      	blx	r3
    }
}
 8008ea2:	bf00      	nop
 8008ea4:	371c      	adds	r7, #28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd90      	pop	{r4, r7, pc}

08008eaa <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE>:

void XFTimeoutManagerDefault::unscheduleTimeout(int32_t timeoutId, interface::XFReactive * pReactive)
{
 8008eaa:	b590      	push	{r4, r7, lr}
 8008eac:	b091      	sub	sp, #68	; 0x44
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	60f8      	str	r0, [r7, #12]
 8008eb2:	60b9      	str	r1, [r7, #8]
 8008eb4:	607a      	str	r2, [r7, #4]
    const XFTimeout timeout(timeoutId, 0, pReactive);
 8008eb6:	f107 0018 	add.w	r0, r7, #24
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	68b9      	ldr	r1, [r7, #8]
 8008ec0:	f7ff fdd6 	bl	8008a70 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>
    XFTimeout * pTimeout;

    pMutex_->lock();
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	695a      	ldr	r2, [r3, #20]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	695b      	ldr	r3, [r3, #20]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3308      	adds	r3, #8
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	4798      	blx	r3
    {
        for (TimeoutList::iterator i = timeouts_.begin();
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	3308      	adds	r3, #8
 8008eda:	4618      	mov	r0, r3
 8008edc:	f000 facf 	bl	800947e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	617b      	str	r3, [r7, #20]
             i != timeouts_.end(); /*Do not increment here!*/)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	3308      	adds	r3, #8
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f000 fad9 	bl	80094a0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	633b      	str	r3, [r7, #48]	; 0x30
 8008ef2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008ef6:	f107 0314 	add.w	r3, r7, #20
 8008efa:	4611      	mov	r1, r2
 8008efc:	4618      	mov	r0, r3
 8008efe:	f000 fadf 	bl	80094c0 <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d058      	beq.n	8008fba <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x110>
        {
            pTimeout = *i;
 8008f08:	f107 0314 	add.w	r3, r7, #20
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f000 faeb 	bl	80094e8 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8008f12:	4603      	mov	r3, r0
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	63fb      	str	r3, [r7, #60]	; 0x3c

            // Check if behavior and timeout id are equal
            if (*pTimeout == timeout)
 8008f18:	f107 0318 	add.w	r3, r7, #24
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008f20:	f7ff fdc4 	bl	8008aac <_ZNK9XFTimeouteqERKS_>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d040      	beq.n	8008fac <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x102>
            {
                TimeoutList::iterator next = i;
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	613b      	str	r3, [r7, #16]

                // Check if remaining ticks can be given further
                if (++next != timeouts_.end())
 8008f2e:	f107 0310 	add.w	r3, r7, #16
 8008f32:	4618      	mov	r0, r3
 8008f34:	f000 fae6 	bl	8009504 <_ZNSt14_List_iteratorIP9XFTimeoutEppEv>
 8008f38:	4604      	mov	r4, r0
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	3308      	adds	r3, #8
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f000 faae 	bl	80094a0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8008f44:	4603      	mov	r3, r0
 8008f46:	637b      	str	r3, [r7, #52]	; 0x34
 8008f48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f000 fab6 	bl	80094c0 <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00e      	beq.n	8008f78 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0xce>
                {
                    // Add (remaining) ticks to next timeout in list
                    (*next)->addToRelTicks(pTimeout->getRelTicks());
 8008f5a:	f107 0310 	add.w	r3, r7, #16
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 fac2 	bl	80094e8 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8008f64:	4603      	mov	r3, r0
 8008f66:	681c      	ldr	r4, [r3, #0]
 8008f68:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008f6a:	f7ff fe51 	bl	8008c10 <_ZNK9XFTimeout11getRelTicksEv>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	4619      	mov	r1, r3
 8008f72:	4620      	mov	r0, r4
 8008f74:	f7ff fe69 	bl	8008c4a <_ZN9XFTimeout13addToRelTicksEi>
                }

                i = timeouts_.erase(i);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f103 0408 	add.w	r4, r3, #8
 8008f7e:	f107 0214 	add.w	r2, r7, #20
 8008f82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008f86:	4611      	mov	r1, r2
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f000 facb 	bl	8009524 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 8008f8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008f90:	4620      	mov	r0, r4
 8008f92:	f000 fad7 	bl	8009544 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
 8008f96:	4603      	mov	r3, r0
 8008f98:	617b      	str	r3, [r7, #20]
                // Iterator now points to the next element

                delete pTimeout;
 8008f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d0a1      	beq.n	8008ee4 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x3a>
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	3204      	adds	r2, #4
 8008fa4:	6812      	ldr	r2, [r2, #0]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	4790      	blx	r2
 8008faa:	e79b      	b.n	8008ee4 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x3a>
            }
            else
            {
                i++;
 8008fac:	f107 0314 	add.w	r3, r7, #20
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 fae1 	bl	800957a <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
        for (TimeoutList::iterator i = timeouts_.begin();
 8008fb8:	e794      	b.n	8008ee4 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x3a>
            }
        }
    }
    pMutex_->unlock();
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	695a      	ldr	r2, [r3, #20]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	695b      	ldr	r3, [r3, #20]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	330c      	adds	r3, #12
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4610      	mov	r0, r2
 8008fca:	4798      	blx	r3
    const XFTimeout timeout(timeoutId, 0, pReactive);
 8008fcc:	f107 0318 	add.w	r3, r7, #24
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7ff fd95 	bl	8008b00 <_ZN9XFTimeoutD1Ev>
}
 8008fd6:	bf00      	nop
 8008fd8:	3744      	adds	r7, #68	; 0x44
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd90      	pop	{r4, r7, pc}
	...

08008fe0 <_ZN23XFTimeoutManagerDefault4tickEv>:

void XFTimeoutManagerDefault::tick()
{
 8008fe0:	b590      	push	{r4, r7, lr}
 8008fe2:	b089      	sub	sp, #36	; 0x24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
    assert(tickInterval_);      // Did you call start()?!
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d105      	bne.n	8008ffc <_ZN23XFTimeoutManagerDefault4tickEv+0x1c>
 8008ff0:	4b66      	ldr	r3, [pc, #408]	; (800918c <_ZN23XFTimeoutManagerDefault4tickEv+0x1ac>)
 8008ff2:	4a67      	ldr	r2, [pc, #412]	; (8009190 <_ZN23XFTimeoutManagerDefault4tickEv+0x1b0>)
 8008ff4:	2161      	movs	r1, #97	; 0x61
 8008ff6:	4867      	ldr	r0, [pc, #412]	; (8009194 <_ZN23XFTimeoutManagerDefault4tickEv+0x1b4>)
 8008ff8:	f000 fece 	bl	8009d98 <__assert_func>
    int32_t intervalToSubtract = tickInterval_;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	61fb      	str	r3, [r7, #28]

    while (!timeouts_.empty())
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	3308      	adds	r3, #8
 8009006:	4618      	mov	r0, r3
 8009008:	f000 facb 	bl	80095a2 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>
 800900c:	4603      	mov	r3, r0
 800900e:	f083 0301 	eor.w	r3, r3, #1
 8009012:	b2db      	uxtb	r3, r3
 8009014:	2b00      	cmp	r3, #0
 8009016:	f000 80b5 	beq.w	8009184 <_ZN23XFTimeoutManagerDefault4tickEv+0x1a4>
    {
        pMutex_->lock();
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	695a      	ldr	r2, [r3, #20]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	695b      	ldr	r3, [r3, #20]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	3308      	adds	r3, #8
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4610      	mov	r0, r2
 800902a:	4798      	blx	r3
        {
            XFTimeout * pFirstTimeout = timeouts_.front();
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	3308      	adds	r3, #8
 8009030:	4618      	mov	r0, r3
 8009032:	f000 fac8 	bl	80095c6 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5frontEv>
 8009036:	4603      	mov	r3, r0
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	61bb      	str	r3, [r7, #24]

            // Subtract time elapsed
            pFirstTimeout->substractFromRelTicks(intervalToSubtract);
 800903c:	69f9      	ldr	r1, [r7, #28]
 800903e:	69b8      	ldr	r0, [r7, #24]
 8009040:	f7ff fdf2 	bl	8008c28 <_ZN9XFTimeout21substractFromRelTicksEi>

            // From now on set it to zero.
            intervalToSubtract = 0;
 8009044:	2300      	movs	r3, #0
 8009046:	61fb      	str	r3, [r7, #28]

            // Check timeout timed out
            if (pFirstTimeout->getRelTicks() <= 0)
 8009048:	69b8      	ldr	r0, [r7, #24]
 800904a:	f7ff fde1 	bl	8008c10 <_ZNK9XFTimeout11getRelTicksEv>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	bfd4      	ite	le
 8009054:	2301      	movle	r3, #1
 8009056:	2300      	movgt	r3, #0
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b00      	cmp	r3, #0
 800905c:	d07c      	beq.n	8009158 <_ZN23XFTimeoutManagerDefault4tickEv+0x178>
            {
                // Check remaining ticks can be given further
                if (timeouts_.size() > 1)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	3308      	adds	r3, #8
 8009062:	4618      	mov	r0, r3
 8009064:	f000 fac2 	bl	80095ec <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE4sizeEv>
 8009068:	4603      	mov	r3, r0
 800906a:	2b01      	cmp	r3, #1
 800906c:	bf8c      	ite	hi
 800906e:	2301      	movhi	r3, #1
 8009070:	2300      	movls	r3, #0
 8009072:	b2db      	uxtb	r3, r3
 8009074:	2b00      	cmp	r3, #0
 8009076:	d01e      	beq.n	80090b6 <_ZN23XFTimeoutManagerDefault4tickEv+0xd6>
                {
                    TimeoutList::iterator i = timeouts_.begin();
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	3308      	adds	r3, #8
 800907c:	4618      	mov	r0, r3
 800907e:	f000 f9fe 	bl	800947e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8009082:	4603      	mov	r3, r0
 8009084:	60fb      	str	r3, [r7, #12]

                    // Add ticks overrun to next timeout
                    i++;
 8009086:	f107 030c 	add.w	r3, r7, #12
 800908a:	2100      	movs	r1, #0
 800908c:	4618      	mov	r0, r3
 800908e:	f000 fa74 	bl	800957a <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
                    (*i)->substractFromRelTicks(abs(pFirstTimeout->getRelTicks()));
 8009092:	f107 030c 	add.w	r3, r7, #12
 8009096:	4618      	mov	r0, r3
 8009098:	f000 fa26 	bl	80094e8 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 800909c:	4603      	mov	r3, r0
 800909e:	681c      	ldr	r4, [r3, #0]
 80090a0:	69b8      	ldr	r0, [r7, #24]
 80090a2:	f7ff fdb5 	bl	8008c10 <_ZNK9XFTimeout11getRelTicksEv>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	bfb8      	it	lt
 80090ac:	425b      	neglt	r3, r3
 80090ae:	4619      	mov	r1, r3
 80090b0:	4620      	mov	r0, r4
 80090b2:	f7ff fdb9 	bl	8008c28 <_ZN9XFTimeout21substractFromRelTicksEi>
                }

                // Inject the timeout back to the behavioral class
                returnTimeout(pFirstTimeout);
 80090b6:	69b9      	ldr	r1, [r7, #24]
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 f99f 	bl	80093fc <_ZN23XFTimeoutManagerDefault13returnTimeoutEP9XFTimeout>

                // Remove timeout
                timeouts_.pop_front();
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	3308      	adds	r3, #8
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 fa9e 	bl	8009604 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9pop_frontEv>

                // Check if timeouts with same timeout value are present
                for (TimeoutList::iterator it = timeouts_.begin(); it != timeouts_.end(); /*Do not increment here!*/)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	3308      	adds	r3, #8
 80090cc:	4618      	mov	r0, r3
 80090ce:	f000 f9d6 	bl	800947e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 80090d2:	4603      	mov	r3, r0
 80090d4:	60bb      	str	r3, [r7, #8]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	3308      	adds	r3, #8
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 f9e0 	bl	80094a0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 80090e0:	4603      	mov	r3, r0
 80090e2:	613b      	str	r3, [r7, #16]
 80090e4:	f107 0210 	add.w	r2, r7, #16
 80090e8:	f107 0308 	add.w	r3, r7, #8
 80090ec:	4611      	mov	r1, r2
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 f9e6 	bl	80094c0 <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d03a      	beq.n	8009170 <_ZN23XFTimeoutManagerDefault4tickEv+0x190>
                {
                    if ((*it)->getRelTicks() == 0)
 80090fa:	f107 0308 	add.w	r3, r7, #8
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 f9f2 	bl	80094e8 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8009104:	4603      	mov	r3, r0
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4618      	mov	r0, r3
 800910a:	f7ff fd81 	bl	8008c10 <_ZNK9XFTimeout11getRelTicksEv>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	bf0c      	ite	eq
 8009114:	2301      	moveq	r3, #1
 8009116:	2300      	movne	r3, #0
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b00      	cmp	r3, #0
 800911c:	d027      	beq.n	800916e <_ZN23XFTimeoutManagerDefault4tickEv+0x18e>
                    {
                        returnTimeout(*it);			// Return them true
 800911e:	f107 0308 	add.w	r3, r7, #8
 8009122:	4618      	mov	r0, r3
 8009124:	f000 f9e0 	bl	80094e8 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8009128:	4603      	mov	r3, r0
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f964 	bl	80093fc <_ZN23XFTimeoutManagerDefault13returnTimeoutEP9XFTimeout>
                        it = timeouts_.erase(it);	// Remove timeout and adjust iterator to next element
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f103 0408 	add.w	r4, r3, #8
 800913a:	f107 0208 	add.w	r2, r7, #8
 800913e:	f107 0314 	add.w	r3, r7, #20
 8009142:	4611      	mov	r1, r2
 8009144:	4618      	mov	r0, r3
 8009146:	f000 f9ed 	bl	8009524 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 800914a:	6979      	ldr	r1, [r7, #20]
 800914c:	4620      	mov	r0, r4
 800914e:	f000 f9f9 	bl	8009544 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
 8009152:	4603      	mov	r3, r0
 8009154:	60bb      	str	r3, [r7, #8]
                for (TimeoutList::iterator it = timeouts_.begin(); it != timeouts_.end(); /*Do not increment here!*/)
 8009156:	e7be      	b.n	80090d6 <_ZN23XFTimeoutManagerDefault4tickEv+0xf6>
                    }
                }
            }
            else
            {
                pMutex_->unlock();
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	695a      	ldr	r2, [r3, #20]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	695b      	ldr	r3, [r3, #20]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	330c      	adds	r3, #12
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4610      	mov	r0, r2
 8009168:	4798      	blx	r3
                // Done. Exit while loop
                break;
 800916a:	bf00      	nop
            }
        }
        pMutex_->unlock();
    }
}
 800916c:	e00a      	b.n	8009184 <_ZN23XFTimeoutManagerDefault4tickEv+0x1a4>
                        break;
 800916e:	bf00      	nop
        pMutex_->unlock();
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	695a      	ldr	r2, [r3, #20]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	695b      	ldr	r3, [r3, #20]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	330c      	adds	r3, #12
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4610      	mov	r0, r2
 8009180:	4798      	blx	r3
    while (!timeouts_.empty())
 8009182:	e73e      	b.n	8009002 <_ZN23XFTimeoutManagerDefault4tickEv+0x22>
}
 8009184:	bf00      	nop
 8009186:	3724      	adds	r7, #36	; 0x24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd90      	pop	{r4, r7, pc}
 800918c:	0800b164 	.word	0x0800b164
 8009190:	0800b174 	.word	0x0800b174
 8009194:	0800b0f0 	.word	0x0800b0f0

08009198 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout>:

void XFTimeoutManagerDefault::addTimeout(XFTimeout * pNewTimeout)
{
 8009198:	b590      	push	{r4, r7, lr}
 800919a:	b08d      	sub	sp, #52	; 0x34
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
    if (!timeouts_.empty())
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	3308      	adds	r3, #8
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 f9fb 	bl	80095a2 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>
 80091ac:	4603      	mov	r3, r0
 80091ae:	f083 0301 	eor.w	r3, r3, #1
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f000 8116 	beq.w	80093e6 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x24e>
    {
        pMutex_->lock();
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	695a      	ldr	r2, [r3, #20]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	3308      	adds	r3, #8
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4610      	mov	r0, r2
 80091ca:	4798      	blx	r3
        {
            // Insert timeout before timeout(s) triggering later
            TimeoutList::iterator i = timeouts_.begin();
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	3308      	adds	r3, #8
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 f954 	bl	800947e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 80091d6:	4603      	mov	r3, r0
 80091d8:	60bb      	str	r3, [r7, #8]

            unsigned int index = 0;
 80091da:	2300      	movs	r3, #0
 80091dc:	62fb      	str	r3, [r7, #44]	; 0x2c

            // Find the right place to insert new timeout
            while (i != timeouts_.end() &&
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	3308      	adds	r3, #8
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 f95c 	bl	80094a0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 80091e8:	4603      	mov	r3, r0
 80091ea:	60fb      	str	r3, [r7, #12]
 80091ec:	f107 020c 	add.w	r2, r7, #12
 80091f0:	f107 0308 	add.w	r3, r7, #8
 80091f4:	4611      	mov	r1, r2
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 f962 	bl	80094c0 <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d013      	beq.n	800922a <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x92>
                   (*i)->getRelTicks() < pNewTimeout->getRelTicks())
 8009202:	f107 0308 	add.w	r3, r7, #8
 8009206:	4618      	mov	r0, r3
 8009208:	f000 f96e 	bl	80094e8 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 800920c:	4603      	mov	r3, r0
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4618      	mov	r0, r3
 8009212:	f7ff fcfd 	bl	8008c10 <_ZNK9XFTimeout11getRelTicksEv>
 8009216:	4604      	mov	r4, r0
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	4618      	mov	r0, r3
 800921c:	f7ff fcf8 	bl	8008c10 <_ZNK9XFTimeout11getRelTicksEv>
 8009220:	4603      	mov	r3, r0
            while (i != timeouts_.end() &&
 8009222:	429c      	cmp	r4, r3
 8009224:	da01      	bge.n	800922a <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x92>
 8009226:	2301      	movs	r3, #1
 8009228:	e000      	b.n	800922c <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x94>
 800922a:	2300      	movs	r3, #0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d019      	beq.n	8009264 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0xcc>
            {	// -> by: test4, test5
                pNewTimeout->substractFromRelTicks((*i)->getRelTicks());
 8009230:	683c      	ldr	r4, [r7, #0]
 8009232:	f107 0308 	add.w	r3, r7, #8
 8009236:	4618      	mov	r0, r3
 8009238:	f000 f956 	bl	80094e8 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 800923c:	4603      	mov	r3, r0
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4618      	mov	r0, r3
 8009242:	f7ff fce5 	bl	8008c10 <_ZNK9XFTimeout11getRelTicksEv>
 8009246:	4603      	mov	r3, r0
 8009248:	4619      	mov	r1, r3
 800924a:	4620      	mov	r0, r4
 800924c:	f7ff fcec 	bl	8008c28 <_ZN9XFTimeout21substractFromRelTicksEi>
                i++; index++;
 8009250:	f107 0308 	add.w	r3, r7, #8
 8009254:	2100      	movs	r1, #0
 8009256:	4618      	mov	r0, r3
 8009258:	f000 f98f 	bl	800957a <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
 800925c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800925e:	3301      	adds	r3, #1
 8009260:	62fb      	str	r3, [r7, #44]	; 0x2c
            while (i != timeouts_.end() &&
 8009262:	e7bc      	b.n	80091de <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x46>
            }

            if (i != timeouts_.end())
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	3308      	adds	r3, #8
 8009268:	4618      	mov	r0, r3
 800926a:	f000 f919 	bl	80094a0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 800926e:	4603      	mov	r3, r0
 8009270:	613b      	str	r3, [r7, #16]
 8009272:	f107 0210 	add.w	r2, r7, #16
 8009276:	f107 0308 	add.w	r3, r7, #8
 800927a:	4611      	mov	r1, r2
 800927c:	4618      	mov	r0, r3
 800927e:	f000 f91f 	bl	80094c0 <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 808c 	beq.w	80093a2 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x20a>
            {
                if ((*i)->getRelTicks() != pNewTimeout->getRelTicks())
 800928a:	f107 0308 	add.w	r3, r7, #8
 800928e:	4618      	mov	r0, r3
 8009290:	f000 f92a 	bl	80094e8 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8009294:	4603      	mov	r3, r0
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4618      	mov	r0, r3
 800929a:	f7ff fcb9 	bl	8008c10 <_ZNK9XFTimeout11getRelTicksEv>
 800929e:	4604      	mov	r4, r0
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7ff fcb4 	bl	8008c10 <_ZNK9XFTimeout11getRelTicksEv>
 80092a8:	4603      	mov	r3, r0
 80092aa:	429c      	cmp	r4, r3
 80092ac:	bf14      	ite	ne
 80092ae:	2301      	movne	r3, #1
 80092b0:	2300      	moveq	r3, #0
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d021      	beq.n	80092fc <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x164>
                {	// -> by: test1, test4, test5
                    // Timeout are going to timeout at different times

                    // Insert new timeout before
                    timeouts_.insert(i, pNewTimeout);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f103 0408 	add.w	r4, r3, #8
 80092be:	f107 0208 	add.w	r2, r7, #8
 80092c2:	f107 0314 	add.w	r3, r7, #20
 80092c6:	4611      	mov	r1, r2
 80092c8:	4618      	mov	r0, r3
 80092ca:	f000 f92b 	bl	8009524 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 80092ce:	463b      	mov	r3, r7
 80092d0:	461a      	mov	r2, r3
 80092d2:	6979      	ldr	r1, [r7, #20]
 80092d4:	4620      	mov	r0, r4
 80092d6:	f000 f9a5 	bl	8009624 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>

                    // Remove time from following timeout
                    (*i)->substractFromRelTicks(pNewTimeout->getRelTicks());
 80092da:	f107 0308 	add.w	r3, r7, #8
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 f902 	bl	80094e8 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 80092e4:	4603      	mov	r3, r0
 80092e6:	681c      	ldr	r4, [r3, #0]
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7ff fc90 	bl	8008c10 <_ZNK9XFTimeout11getRelTicksEv>
 80092f0:	4603      	mov	r3, r0
 80092f2:	4619      	mov	r1, r3
 80092f4:	4620      	mov	r0, r4
 80092f6:	f7ff fc97 	bl	8008c28 <_ZN9XFTimeout21substractFromRelTicksEi>
 80092fa:	e06a      	b.n	80093d2 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x23a>

                }
                else
                {	// -> by: test1, test5
                    const int32_t relTicks = (*i)->getRelTicks();
 80092fc:	f107 0308 	add.w	r3, r7, #8
 8009300:	4618      	mov	r0, r3
 8009302:	f000 f8f1 	bl	80094e8 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 8009306:	4603      	mov	r3, r0
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4618      	mov	r0, r3
 800930c:	f7ff fc80 	bl	8008c10 <_ZNK9XFTimeout11getRelTicksEv>
 8009310:	62b8      	str	r0, [r7, #40]	; 0x28
                    // Timeouts timeout at the same time. Put
                    // the new one behind the actual.
                    i++;
 8009312:	f107 0308 	add.w	r3, r7, #8
 8009316:	2100      	movs	r1, #0
 8009318:	4618      	mov	r0, r3
 800931a:	f000 f92e 	bl	800957a <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>

                    // Check if even more timeouts with the same timeout
                    while(i != timeouts_.end() && (*i)->getRelTicks() == 0)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	3308      	adds	r3, #8
 8009322:	4618      	mov	r0, r3
 8009324:	f000 f8bc 	bl	80094a0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 8009328:	4603      	mov	r3, r0
 800932a:	61bb      	str	r3, [r7, #24]
 800932c:	f107 0218 	add.w	r2, r7, #24
 8009330:	f107 0308 	add.w	r3, r7, #8
 8009334:	4611      	mov	r1, r2
 8009336:	4618      	mov	r0, r3
 8009338:	f000 f8c2 	bl	80094c0 <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00e      	beq.n	8009360 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x1c8>
 8009342:	f107 0308 	add.w	r3, r7, #8
 8009346:	4618      	mov	r0, r3
 8009348:	f000 f8ce 	bl	80094e8 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 800934c:	4603      	mov	r3, r0
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4618      	mov	r0, r3
 8009352:	f7ff fc5d 	bl	8008c10 <_ZNK9XFTimeout11getRelTicksEv>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d101      	bne.n	8009360 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x1c8>
 800935c:	2301      	movs	r3, #1
 800935e:	e000      	b.n	8009362 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x1ca>
 8009360:	2300      	movs	r3, #0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d006      	beq.n	8009374 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x1dc>
                    {	// -> by: test5
                        i++;
 8009366:	f107 0308 	add.w	r3, r7, #8
 800936a:	2100      	movs	r1, #0
 800936c:	4618      	mov	r0, r3
 800936e:	f000 f904 	bl	800957a <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>
                    while(i != timeouts_.end() && (*i)->getRelTicks() == 0)
 8009372:	e7d4      	b.n	800931e <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x186>
                    }

                    // Insert new timeout behind actual
                    timeouts_.insert(i, pNewTimeout);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f103 0408 	add.w	r4, r3, #8
 800937a:	f107 0208 	add.w	r2, r7, #8
 800937e:	f107 031c 	add.w	r3, r7, #28
 8009382:	4611      	mov	r1, r2
 8009384:	4618      	mov	r0, r3
 8009386:	f000 f8cd 	bl	8009524 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 800938a:	463b      	mov	r3, r7
 800938c:	461a      	mov	r2, r3
 800938e:	69f9      	ldr	r1, [r7, #28]
 8009390:	4620      	mov	r0, r4
 8009392:	f000 f947 	bl	8009624 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
                    // Remove time from actual timeout
                    pNewTimeout->substractFromRelTicks(relTicks);
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800939a:	4618      	mov	r0, r3
 800939c:	f7ff fc44 	bl	8008c28 <_ZN9XFTimeout21substractFromRelTicksEi>
 80093a0:	e017      	b.n	80093d2 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x23a>
                }
            }
            else
            {	// -> by: test4, test5
                // Add timeout at the end of the list
                timeouts_.insert(timeouts_.end(), pNewTimeout);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f103 0408 	add.w	r4, r3, #8
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	3308      	adds	r3, #8
 80093ac:	4618      	mov	r0, r3
 80093ae:	f000 f877 	bl	80094a0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>
 80093b2:	4603      	mov	r3, r0
 80093b4:	627b      	str	r3, [r7, #36]	; 0x24
 80093b6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80093ba:	f107 0320 	add.w	r3, r7, #32
 80093be:	4611      	mov	r1, r2
 80093c0:	4618      	mov	r0, r3
 80093c2:	f000 f8af 	bl	8009524 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>
 80093c6:	463b      	mov	r3, r7
 80093c8:	461a      	mov	r2, r3
 80093ca:	6a39      	ldr	r1, [r7, #32]
 80093cc:	4620      	mov	r0, r4
 80093ce:	f000 f929 	bl	8009624 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
            }
        }
        pMutex_->unlock();
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	695a      	ldr	r2, [r3, #20]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	330c      	adds	r3, #12
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4610      	mov	r0, r2
 80093e2:	4798      	blx	r3
    }
    else
    {	// -> by: test1, test2, test3, test4, test5
        timeouts_.push_front(pNewTimeout);
    }
}
 80093e4:	e006      	b.n	80093f4 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x25c>
        timeouts_.push_front(pNewTimeout);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	3308      	adds	r3, #8
 80093ea:	463a      	mov	r2, r7
 80093ec:	4611      	mov	r1, r2
 80093ee:	4618      	mov	r0, r3
 80093f0:	f000 f93e 	bl	8009670 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE10push_frontERKS2_>
}
 80093f4:	bf00      	nop
 80093f6:	3734      	adds	r7, #52	; 0x34
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd90      	pop	{r4, r7, pc}

080093fc <_ZN23XFTimeoutManagerDefault13returnTimeoutEP9XFTimeout>:

void XFTimeoutManagerDefault::returnTimeout(XFTimeout * pTimeout)
{
 80093fc:	b590      	push	{r4, r7, lr}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
    pTimeout->getBehavior()->pushEvent(pTimeout);
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	4618      	mov	r0, r3
 800940a:	f7ff fb9b 	bl	8008b44 <_ZNK7XFEvent11getBehaviorEv>
 800940e:	4603      	mov	r3, r0
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	320c      	adds	r2, #12
 8009414:	6814      	ldr	r4, [r2, #0]
 8009416:	2200      	movs	r2, #0
 8009418:	6839      	ldr	r1, [r7, #0]
 800941a:	4618      	mov	r0, r3
 800941c:	47a0      	blx	r4
}
 800941e:	bf00      	nop
 8009420:	370c      	adds	r7, #12
 8009422:	46bd      	mov	sp, r7
 8009424:	bd90      	pop	{r4, r7, pc}

08009426 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 8009426:	b580      	push	{r7, lr}
 8009428:	b082      	sub	sp, #8
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f930 	bl	8009694 <_ZNSaISt10_List_nodeIP9XFTimeoutEEC1Ev>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4618      	mov	r0, r3
 8009438:	f7ff fb9c 	bl	8008b74 <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4618      	mov	r0, r3
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <_ZNSaISt10_List_nodeIP9XFTimeoutEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8009446:	b580      	push	{r7, lr}
 8009448:	b082      	sub	sp, #8
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 f92c 	bl	80096ac <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED1Ev>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4618      	mov	r0, r3
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 800945e:	b580      	push	{r7, lr}
 8009460:	b082      	sub	sp, #8
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f92b 	bl	80096c2 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4618      	mov	r0, r3
 8009470:	f7ff fc5a 	bl	8008d28 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE10_List_implD1Ev>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4618      	mov	r0, r3
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %list.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 800947e:	b580      	push	{r7, lr}
 8009480:	b084      	sub	sp, #16
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_node._M_next); }
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	f107 030c 	add.w	r3, r7, #12
 800948e:	4611      	mov	r1, r2
 8009490:	4618      	mov	r0, r3
 8009492:	f000 f93b 	bl	800970c <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	4618      	mov	r0, r3
 800949a:	3710      	adds	r7, #16
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %list.  Iteration is done in ordinary element
       *  order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_node); }
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	f107 030c 	add.w	r3, r7, #12
 80094ae:	4611      	mov	r1, r2
 80094b0:	4618      	mov	r0, r3
 80094b2:	f000 f92b 	bl	800970c <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	4618      	mov	r0, r3
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <_ZStneRKSt14_List_iteratorIP9XFTimeoutES4_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	bf14      	ite	ne
 80094d6:	2301      	movne	r3, #1
 80094d8:	2300      	moveq	r3, #0
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	4618      	mov	r0, r3
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Node*>(_M_node)->_M_valptr(); }
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4618      	mov	r0, r3
 80094f6:	f000 f918 	bl	800972a <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 80094fa:	4603      	mov	r3, r0
 80094fc:	4618      	mov	r0, r3
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <_ZNSt14_List_iteratorIP9XFTimeoutEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
	_M_node = _M_node->_M_next;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	601a      	str	r2, [r3, #0]
	return *this;
 8009516:	687b      	ldr	r3, [r7, #4]
      }
 8009518:	4618      	mov	r0, r3
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <_ZNSt20_List_const_iteratorIP9XFTimeoutEC1ERKSt14_List_iteratorIS1_E>:
      _List_const_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
      : _M_node(__x._M_node) { }
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	601a      	str	r2, [r3, #0]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4618      	mov	r0, r3
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>:
      }
#endif

  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
    erase(const_iterator __position) noexcept
#else
    erase(iterator __position)
#endif
    {
      iterator __ret = iterator(__position._M_node->_M_next);
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	f107 030c 	add.w	r3, r7, #12
 8009556:	4611      	mov	r1, r2
 8009558:	4618      	mov	r0, r3
 800955a:	f000 f8d7 	bl	800970c <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
      _M_erase(__position._M_const_cast());
 800955e:	463b      	mov	r3, r7
 8009560:	4618      	mov	r0, r3
 8009562:	f000 f916 	bl	8009792 <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>
 8009566:	4603      	mov	r3, r0
 8009568:	4619      	mov	r1, r3
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f8eb 	bl	8009746 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>
      return __ret;
 8009570:	68fb      	ldr	r3, [r7, #12]
    }
 8009572:	4618      	mov	r0, r3
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <_ZNSt14_List_iteratorIP9XFTimeoutEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 800957a:	b480      	push	{r7}
 800957c:	b085      	sub	sp, #20
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
 8009582:	6039      	str	r1, [r7, #0]
	_Self __tmp = *this;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	60fb      	str	r3, [r7, #12]
	_M_node = _M_node->_M_next;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	601a      	str	r2, [r3, #0]
	return __tmp;
 8009594:	68fb      	ldr	r3, [r7, #12]
      }
 8009596:	4618      	mov	r0, r3
 8009598:	3714      	adds	r7, #20
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr

080095a2 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE5emptyEv>:
      /**
       *  Returns true if the %list is empty.  (Thus begin() would equal
       *  end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 80095a2:	b480      	push	{r7}
 80095a4:	b083      	sub	sp, #12
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	bf0c      	ite	eq
 80095b4:	2301      	moveq	r3, #1
 80095b6:	2300      	movne	r3, #0
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	4618      	mov	r0, r3
 80095bc:	370c      	adds	r7, #12
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr

080095c6 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %list.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b084      	sub	sp, #16
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
      { return *begin(); }
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f7ff ff55 	bl	800947e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 80095d4:	4603      	mov	r3, r0
 80095d6:	60fb      	str	r3, [r7, #12]
 80095d8:	f107 030c 	add.w	r3, r7, #12
 80095dc:	4618      	mov	r0, r3
 80095de:	f7ff ff83 	bl	80094e8 <_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv>
 80095e2:	4603      	mov	r3, r0
 80095e4:	4618      	mov	r0, r3
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
      { return _M_node_count(); }
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 f8dd 	bl	80097b4 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE13_M_node_countEv>
 80095fa:	4603      	mov	r3, r0
 80095fc:	4618      	mov	r0, r3
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9pop_frontEv>:
       *  Note that no data is returned, and if the first element's data
       *  is needed, it should be retrieved before pop_front() is
       *  called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
      { this->_M_erase(begin()); }
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f7ff ff36 	bl	800947e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8009612:	4603      	mov	r3, r0
 8009614:	4619      	mov	r1, r3
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f895 	bl	8009746 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>
 800961c:	bf00      	nop
 800961e:	3708      	adds	r7, #8
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>:
    list<_Tp, _Alloc>::
 8009624:	b590      	push	{r4, r7, lr}
 8009626:	b087      	sub	sp, #28
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
      _Node* __tmp = _M_create_node(__x);
 8009630:	6879      	ldr	r1, [r7, #4]
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f000 f8cb 	bl	80097ce <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>
 8009638:	6178      	str	r0, [r7, #20]
      __tmp->_M_hook(__position._M_const_cast()._M_node);
 800963a:	697c      	ldr	r4, [r7, #20]
 800963c:	f107 0308 	add.w	r3, r7, #8
 8009640:	4618      	mov	r0, r3
 8009642:	f000 f8a6 	bl	8009792 <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>
 8009646:	4603      	mov	r3, r0
 8009648:	4619      	mov	r1, r3
 800964a:	4620      	mov	r0, r4
 800964c:	f000 fb70 	bl	8009d30 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      this->_M_inc_size(1);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2101      	movs	r1, #1
 8009654:	4618      	mov	r0, r3
 8009656:	f000 f8ee 	bl	8009836 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>
      return iterator(__tmp);
 800965a:	f107 0310 	add.w	r3, r7, #16
 800965e:	6979      	ldr	r1, [r7, #20]
 8009660:	4618      	mov	r0, r3
 8009662:	f000 f853 	bl	800970c <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 8009666:	693b      	ldr	r3, [r7, #16]
    }
 8009668:	4618      	mov	r0, r3
 800966a:	371c      	adds	r7, #28
 800966c:	46bd      	mov	sp, r7
 800966e:	bd90      	pop	{r4, r7, pc}

08009670 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE10push_frontERKS2_>:
      push_front(const value_type& __x)
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
      { this->_M_insert(begin(), __x); }
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f7ff feff 	bl	800947e <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5beginEv>
 8009680:	4603      	mov	r3, r0
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	4619      	mov	r1, r3
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 f8e6 	bl	8009858 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>
 800968c:	bf00      	nop
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <_ZNSaISt10_List_nodeIP9XFTimeoutEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 f8f9 	bl	8009894 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC1Ev>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4618      	mov	r0, r3
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4618      	mov	r0, r3
 80096b8:	370c      	adds	r7, #12
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr

080096c2 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b086      	sub	sp, #24
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	697a      	ldr	r2, [r7, #20]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d015      	beq.n	8009704 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0x42>
	  _Node* __tmp = static_cast<_Node*>(__cur);
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 80096e2:	6938      	ldr	r0, [r7, #16]
 80096e4:	f000 f821 	bl	800972a <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 80096e8:	60f8      	str	r0, [r7, #12]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 f8dd 	bl	80098aa <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 80096f0:	4603      	mov	r3, r0
 80096f2:	68f9      	ldr	r1, [r7, #12]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f000 f8e3 	bl	80098c0 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>
	  _M_put_node(__tmp);
 80096fa:	6939      	ldr	r1, [r7, #16]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 f8ec 	bl	80098da <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      while (__cur != &_M_impl._M_node)
 8009702:	e7e5      	b.n	80096d0 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0xe>
    }
 8009704:	bf00      	nop
 8009706:	3718      	adds	r7, #24
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>:
      _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	683a      	ldr	r2, [r7, #0]
 800971a:	601a      	str	r2, [r3, #0]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4618      	mov	r0, r3
 8009720:	370c      	adds	r7, #12
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr

0800972a <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 800972a:	b580      	push	{r7, lr}
 800972c:	b082      	sub	sp, #8
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	3308      	adds	r3, #8
 8009736:	4618      	mov	r0, r3
 8009738:	f000 f8de 	bl	80098f8 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE6_M_ptrEv>
 800973c:	4603      	mov	r3, r0
 800973e:	4618      	mov	r0, r3
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE8_M_eraseESt14_List_iteratorIS2_E>:
       }
#endif

      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
 8009746:	b590      	push	{r4, r7, lr}
 8009748:	b085      	sub	sp, #20
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	6039      	str	r1, [r7, #0]
      {
	this->_M_dec_size(1);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2101      	movs	r1, #1
 8009754:	4618      	mov	r0, r3
 8009756:	f000 f8db 	bl	8009910 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_dec_sizeEj>
	__position._M_node->_M_unhook();
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	4618      	mov	r0, r3
 800975e:	f000 faee 	bl	8009d3e <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	_Node* __n = static_cast<_Node*>(__position._M_node);
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	60fb      	str	r3, [r7, #12]
#if __cplusplus >= 201103L
	_Node_alloc_traits::destroy(_M_get_Node_allocator(), __n->_M_valptr());
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4618      	mov	r0, r3
 800976a:	f000 f89e 	bl	80098aa <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 800976e:	4604      	mov	r4, r0
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f7ff ffda 	bl	800972a <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 8009776:	4603      	mov	r3, r0
 8009778:	4619      	mov	r1, r3
 800977a:	4620      	mov	r0, r4
 800977c:	f000 f8a0 	bl	80098c0 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>
#else
	_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n->_M_valptr());
#endif

	_M_put_node(__n);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	68f9      	ldr	r1, [r7, #12]
 8009784:	4618      	mov	r0, r3
 8009786:	f000 f8a8 	bl	80098da <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      }
 800978a:	bf00      	nop
 800978c:	3714      	adds	r7, #20
 800978e:	46bd      	mov	sp, r7
 8009790:	bd90      	pop	{r4, r7, pc}

08009792 <_ZNKSt20_List_const_iteratorIP9XFTimeoutE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8009792:	b580      	push	{r7, lr}
 8009794:	b084      	sub	sp, #16
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	f107 030c 	add.w	r3, r7, #12
 80097a2:	4611      	mov	r1, r2
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7ff ffb1 	bl	800970c <_ZNSt14_List_iteratorIP9XFTimeoutEC1EPNSt8__detail15_List_node_baseE>
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	4618      	mov	r0, r3
 80097ae:	3710      	adds	r7, #16
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <_ZNKSt7__cxx114listIP9XFTimeoutSaIS2_EE13_M_node_countEv>:
      _M_node_count() const
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
      { return this->_M_get_size(); }
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 f8b7 	bl	8009932 <_ZNKSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_sizeEv>
 80097c4:	4603      	mov	r3, r0
 80097c6:	4618      	mov	r0, r3
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80097ce:	b590      	push	{r4, r7, lr}
 80097d0:	b087      	sub	sp, #28
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
 80097d6:	6039      	str	r1, [r7, #0]
	  auto __p = this->_M_get_node();
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 f8b5 	bl	800994a <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_nodeEv>
 80097e0:	6178      	str	r0, [r7, #20]
	  auto& __alloc = _M_get_Node_allocator();
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4618      	mov	r0, r3
 80097e6:	f000 f860 	bl	80098aa <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>
 80097ea:	6138      	str	r0, [r7, #16]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 80097ec:	f107 0308 	add.w	r3, r7, #8
 80097f0:	697a      	ldr	r2, [r7, #20]
 80097f2:	6939      	ldr	r1, [r7, #16]
 80097f4:	4618      	mov	r0, r3
 80097f6:	f000 f8b6 	bl	8009966 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEC1ERS4_PS3_>
	  _Node_alloc_traits::construct(__alloc, __p->_M_valptr(),
 80097fa:	6978      	ldr	r0, [r7, #20]
 80097fc:	f7ff ff95 	bl	800972a <_ZNSt10_List_nodeIP9XFTimeoutE9_M_valptrEv>
 8009800:	4604      	mov	r4, r0
 8009802:	6838      	ldr	r0, [r7, #0]
 8009804:	f000 f8d8 	bl	80099b8 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 8009808:	4603      	mov	r3, r0
 800980a:	461a      	mov	r2, r3
 800980c:	4621      	mov	r1, r4
 800980e:	6938      	ldr	r0, [r7, #16]
 8009810:	f000 f8dd 	bl	80099ce <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>
	  __guard = nullptr;
 8009814:	f107 0308 	add.w	r3, r7, #8
 8009818:	2100      	movs	r1, #0
 800981a:	4618      	mov	r0, r3
 800981c:	f000 f8ea 	bl	80099f4 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEaSEDn>
	  return __p;
 8009820:	697c      	ldr	r4, [r7, #20]
	  __allocated_ptr<_Node_alloc_type> __guard{__alloc, __p};
 8009822:	f107 0308 	add.w	r3, r7, #8
 8009826:	4618      	mov	r0, r3
 8009828:	f000 f8b1 	bl	800998e <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev>
	  return __p;
 800982c:	4623      	mov	r3, r4
	}
 800982e:	4618      	mov	r0, r3
 8009830:	371c      	adds	r7, #28
 8009832:	46bd      	mov	sp, r7
 8009834:	bd90      	pop	{r4, r7, pc}

08009836 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>:
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8009836:	b480      	push	{r7}
 8009838:	b083      	sub	sp, #12
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
 800983e:	6039      	str	r1, [r7, #0]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	689a      	ldr	r2, [r3, #8]
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	441a      	add	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	609a      	str	r2, [r3, #8]
 800984c:	bf00      	nop
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE9_M_insertIJRKS2_EEEvSt14_List_iteratorIS2_EDpOT_>:
       _M_insert(iterator __position, _Args&&... __args)
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 f8a7 	bl	80099b8 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 800986a:	4603      	mov	r3, r0
 800986c:	4619      	mov	r1, r3
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f7ff ffad 	bl	80097ce <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE14_M_create_nodeIJRKS2_EEEPSt10_List_nodeIS2_EDpOT_>
 8009874:	6178      	str	r0, [r7, #20]
	 __tmp->_M_hook(__position._M_node);
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	68ba      	ldr	r2, [r7, #8]
 800987a:	4611      	mov	r1, r2
 800987c:	4618      	mov	r0, r3
 800987e:	f000 fa57 	bl	8009d30 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
	 this->_M_inc_size(1);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2101      	movs	r1, #1
 8009886:	4618      	mov	r0, r3
 8009888:	f7ff ffd5 	bl	8009836 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_inc_sizeEj>
       }
 800988c:	bf00      	nop
 800988e:	3718      	adds	r7, #24
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4618      	mov	r0, r3
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80098aa:	b480      	push	{r7}
 80098ac:	b083      	sub	sp, #12
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4618      	mov	r0, r3
 80098b6:	370c      	adds	r7, #12
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE7destroyIS2_EEvRS4_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 80098ca:	6839      	ldr	r1, [r7, #0]
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f8a0 	bl	8009a12 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE7destroyIS3_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 80098d2:	bf00      	nop
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 80098da:	b580      	push	{r7, lr}
 80098dc:	b082      	sub	sp, #8
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	6839      	ldr	r1, [r7, #0]
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 f89c 	bl	8009a28 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>
 80098f0:	bf00      	nop
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f8a0 	bl	8009a46 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE7_M_addrEv>
 8009906:	4603      	mov	r3, r0
 8009908:	4618      	mov	r0, r3
 800990a:	3708      	adds	r7, #8
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_dec_sizeEj>:
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	689a      	ldr	r2, [r3, #8]
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	1ad2      	subs	r2, r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	609a      	str	r2, [r3, #8]
 8009926:	bf00      	nop
 8009928:	370c      	adds	r7, #12
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr

08009932 <_ZNKSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_sizeEv>:
      size_t _M_get_size() const { return _M_impl._M_node._M_size; }
 8009932:	b480      	push	{r7}
 8009934:	b083      	sub	sp, #12
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	4618      	mov	r0, r3
 8009940:	370c      	adds	r7, #12
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr

0800994a <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE11_M_get_nodeEv>:
      _M_get_node()
 800994a:	b580      	push	{r7, lr}
 800994c:	b082      	sub	sp, #8
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
      { return _Node_alloc_traits::allocate(_M_impl, 1); }
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2101      	movs	r1, #1
 8009956:	4618      	mov	r0, r3
 8009958:	f000 f880 	bl	8009a5c <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE8allocateERS4_j>
 800995c:	4603      	mov	r3, r0
 800995e:	4618      	mov	r0, r3
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEC1ERS4_PS3_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8009966:	b580      	push	{r7, lr}
 8009968:	b084      	sub	sp, #16
 800996a:	af00      	add	r7, sp, #0
 800996c:	60f8      	str	r0, [r7, #12]
 800996e:	60b9      	str	r1, [r7, #8]
 8009970:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8009972:	68b8      	ldr	r0, [r7, #8]
 8009974:	f000 f881 	bl	8009a7a <_ZSt11__addressofISaISt10_List_nodeIP9XFTimeoutEEEPT_RS5_>
 8009978:	4602      	mov	r2, r0
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	601a      	str	r2, [r3, #0]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	605a      	str	r2, [r3, #4]
      { }
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 800998e:	b580      	push	{r7, lr}
 8009990:	b082      	sub	sp, #8
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d007      	beq.n	80099ae <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6818      	ldr	r0, [r3, #0]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	4619      	mov	r1, r3
 80099aa:	f000 f83d 	bl	8009a28 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>
      }
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4618      	mov	r0, r3
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4618      	mov	r0, r3
 80099c4:	370c      	adds	r7, #12
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr

080099ce <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE9constructIS2_JRKS2_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b084      	sub	sp, #16
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	60f8      	str	r0, [r7, #12]
 80099d6:	60b9      	str	r1, [r7, #8]
 80099d8:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f7ff ffec 	bl	80099b8 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 80099e0:	4603      	mov	r3, r0
 80099e2:	461a      	mov	r2, r3
 80099e4:	68b9      	ldr	r1, [r7, #8]
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f000 f852 	bl	8009a90 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE9constructIS3_JRKS3_EEEvPT_DpOT0_>
	}
 80099ec:	bf00      	nop
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <_ZNSt15__allocated_ptrISaISt10_List_nodeIP9XFTimeoutEEEaSEDn>:

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
      {
	_M_ptr = nullptr;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	605a      	str	r2, [r3, #4]
	return *this;
 8009a04:	687b      	ldr	r3, [r7, #4]
      }
 8009a06:	4618      	mov	r0, r3
 8009a08:	370c      	adds	r7, #12
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr

08009a12 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE7destroyIS3_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8009a12:	b480      	push	{r7}
 8009a14:	b083      	sub	sp, #12
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
 8009a1a:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	68b9      	ldr	r1, [r7, #8]
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f000 f83f 	bl	8009abc <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j>
 8009a3e:	bf00      	nop
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <_ZN9__gnu_cxx16__aligned_membufIP9XFTimeoutE7_M_addrEv>:
      _M_addr() noexcept
 8009a46:	b480      	push	{r7}
 8009a48:	b083      	sub	sp, #12
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4618      	mov	r0, r3
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <_ZNSt16allocator_traitsISaISt10_List_nodeIP9XFTimeoutEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8009a66:	2200      	movs	r2, #0
 8009a68:	6839      	ldr	r1, [r7, #0]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f839 	bl	8009ae2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv>
 8009a70:	4603      	mov	r3, r0
 8009a72:	4618      	mov	r0, r3
 8009a74:	3708      	adds	r7, #8
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <_ZSt11__addressofISaISt10_List_nodeIP9XFTimeoutEEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8009a7a:	b480      	push	{r7}
 8009a7c:	b083      	sub	sp, #12
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4618      	mov	r0, r3
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE9constructIS3_JRKS3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8009a90:	b590      	push	{r4, r7, lr}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f7ff ff8b 	bl	80099b8 <_ZSt7forwardIRKP9XFTimeoutEOT_RNSt16remove_referenceIS4_E4typeE>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	681c      	ldr	r4, [r3, #0]
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	2004      	movs	r0, #4
 8009aac:	f7ff f856 	bl	8008b5c <_ZnwjPv>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	601c      	str	r4, [r3, #0]
 8009ab4:	bf00      	nop
 8009ab6:	3714      	adds	r7, #20
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd90      	pop	{r4, r7, pc}

08009abc <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j>:
      deallocate(_Tp* __p, size_type __t)
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	4613      	mov	r3, r2
 8009acc:	005b      	lsls	r3, r3, #1
 8009ace:	4413      	add	r3, r2
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	68b8      	ldr	r0, [r7, #8]
 8009ad6:	f000 f906 	bl	8009ce6 <_ZdlPvj>
      }
 8009ada:	bf00      	nop
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b084      	sub	sp, #16
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	60f8      	str	r0, [r7, #12]
 8009aea:	60b9      	str	r1, [r7, #8]
 8009aec:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f000 f818 	bl	8009b24 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE11_M_max_sizeEv>
 8009af4:	4602      	mov	r2, r0
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	4293      	cmp	r3, r2
 8009afa:	bf8c      	ite	hi
 8009afc:	2301      	movhi	r3, #1
 8009afe:	2300      	movls	r3, #0
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d001      	beq.n	8009b0a <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8009b06:	f000 f91f 	bl	8009d48 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009b0a:	68ba      	ldr	r2, [r7, #8]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	005b      	lsls	r3, r3, #1
 8009b10:	4413      	add	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4618      	mov	r0, r3
 8009b16:	f000 f8f7 	bl	8009d08 <_Znwj>
 8009b1a:	4603      	mov	r3, r0
      }
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3710      	adds	r7, #16
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8009b2c:	4b03      	ldr	r3, [pc, #12]	; (8009b3c <_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8009b2e:	4618      	mov	r0, r3
 8009b30:	370c      	adds	r7, #12
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	0aaaaaaa 	.word	0x0aaaaaaa

08009b40 <_ZN2XF9isRunningEv>:
    // Execute once the default dispatcher
    return XFResourceFactory::getInstance()->getDefaultDispatcher()->executeOnce();
}

bool XF::isRunning()
{
 8009b40:	b480      	push	{r7}
 8009b42:	af00      	add	r7, sp, #0
    return isRunning_;
 8009b44:	4b03      	ldr	r3, [pc, #12]	; (8009b54 <_ZN2XF9isRunningEv+0x14>)
 8009b46:	781b      	ldrb	r3, [r3, #0]
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr
 8009b52:	bf00      	nop
 8009b54:	200007b0 	.word	0x200007b0

08009b58 <_ZN9interface7XFMutex6createEv>:

/**
 * @brief Implementation of interface::XFMutex::create method.
 */
interface::XFMutex * interface::XFMutex::create()
{
 8009b58:	b598      	push	{r3, r4, r7, lr}
 8009b5a:	af00      	add	r7, sp, #0
    return new XFMutexDefault;
 8009b5c:	2004      	movs	r0, #4
 8009b5e:	f000 f8d3 	bl	8009d08 <_Znwj>
 8009b62:	4603      	mov	r3, r0
 8009b64:	461c      	mov	r4, r3
 8009b66:	4620      	mov	r0, r4
 8009b68:	f000 f834 	bl	8009bd4 <_ZN14XFMutexDefaultC1Ev>
 8009b6c:	4623      	mov	r3, r4
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	bd98      	pop	{r3, r4, r7, pc}
	...

08009b74 <_ZN9interface7XFMutexC1Ev>:
     *   You cannot instanciate an object of an abstract class!
     */
    static XFMutex * create();

protected:
    XFMutex() = default;
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	4a04      	ldr	r2, [pc, #16]	; (8009b90 <_ZN9interface7XFMutexC1Ev+0x1c>)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	601a      	str	r2, [r3, #0]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4618      	mov	r0, r3
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr
 8009b90:	0800b270 	.word	0x0800b270

08009b94 <_ZN9interface7XFMutexD1Ev>:
    virtual ~XFMutex() = default;
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	4a04      	ldr	r2, [pc, #16]	; (8009bb0 <_ZN9interface7XFMutexD1Ev+0x1c>)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr
 8009bb0:	0800b270 	.word	0x0800b270

08009bb4 <_ZN9interface7XFMutexD0Ev>:
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7ff ffe9 	bl	8009b94 <_ZN9interface7XFMutexD1Ev>
 8009bc2:	2104      	movs	r1, #4
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 f88e 	bl	8009ce6 <_ZdlPvj>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <_ZN14XFMutexDefaultC1Ev>:

XFMutexDefault::XFMutexDefault()
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7ff ffc8 	bl	8009b74 <_ZN9interface7XFMutexC1Ev>
 8009be4:	4a03      	ldr	r2, [pc, #12]	; (8009bf4 <_ZN14XFMutexDefaultC1Ev+0x20>)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	601a      	str	r2, [r3, #0]
{
}
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4618      	mov	r0, r3
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	0800b254 	.word	0x0800b254

08009bf8 <_ZN14XFMutexDefaultD1Ev>:

XFMutexDefault::~XFMutexDefault()
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	4a05      	ldr	r2, [pc, #20]	; (8009c18 <_ZN14XFMutexDefaultD1Ev+0x20>)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	601a      	str	r2, [r3, #0]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7ff ffc3 	bl	8009b94 <_ZN9interface7XFMutexD1Ev>
{
}
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4618      	mov	r0, r3
 8009c12:	3708      	adds	r7, #8
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	0800b254 	.word	0x0800b254

08009c1c <_ZN14XFMutexDefaultD0Ev>:
XFMutexDefault::~XFMutexDefault()
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
}
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f7ff ffe7 	bl	8009bf8 <_ZN14XFMutexDefaultD1Ev>
 8009c2a:	2104      	movs	r1, #4
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 f85a 	bl	8009ce6 <_ZdlPvj>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4618      	mov	r0, r3
 8009c36:	3708      	adds	r7, #8
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <_ZN14XFMutexDefault4lockEv>:

void XFMutexDefault::lock()
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
	critical_enter();
 8009c44:	f7fe fe2e 	bl	80088a4 <critical_enter>
}
 8009c48:	bf00      	nop
 8009c4a:	3708      	adds	r7, #8
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <_ZN14XFMutexDefault6unlockEv>:


void XFMutexDefault::unlock()
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
	critical_exit();
 8009c58:	f7fe fe44 	bl	80088e4 <critical_exit>
}
 8009c5c:	bf00      	nop
 8009c5e:	3708      	adds	r7, #8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <_ZN14XFMutexDefault7tryLockEl>:

bool XFMutexDefault::tryLock(int32_t timeout /* = 0 */)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
	return true;	// Always allow
 8009c6e:	2301      	movs	r3, #1
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <XF_startTimeoutManagerTimer>:
 * This means that changes in 'tickInterval' needs to be handled elsewhere
 * using the XF_tickIntervalInMilliseconds() function.
 */

void XF_startTimeoutManagerTimer(uint32_t tickInterval)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
    (void)tickInterval;

    // SysTick gets already started by the STM32CubeMX HAL.
    // So nothing to do here.
}
 8009c84:	bf00      	nop
 8009c86:	370c      	adds	r7, #12
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <XF_tick>:
 * SysTick_Handler() function is already implemented in the STM32CubeMX generated
 * code (see Src/stm32fxxx_it.c file). Therefore, we must provide here a function
 * which can be explicitly called in SysTick_Handler() to tick the XF.
 */
void XF_tick()
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	af00      	add	r7, sp, #0
    critical_setInIsr(true);                        // Tell critical section we are in an ISR
 8009c94:	2001      	movs	r0, #1
 8009c96:	f7fe fe51 	bl	800893c <critical_setInIsr>
	if (XF::isRunning())                            // Call tick only if XF is running
 8009c9a:	f7ff ff51 	bl	8009b40 <_ZN2XF9isRunningEv>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d007      	beq.n	8009cb4 <XF_tick+0x24>
	{
	    XFTimeoutManager::getInstance()->tick();    // Call framework hook tick function
 8009ca4:	f7fe ffe2 	bl	8008c6c <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	321c      	adds	r2, #28
 8009cae:	6812      	ldr	r2, [r2, #0]
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	4790      	blx	r2
	}
	critical_setInIsr(false);                       // Tell critical section we are leaving the ISR
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	f7fe fe41 	bl	800893c <critical_setInIsr>
}
 8009cba:	bf00      	nop
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <XF_tickIntervalInMilliseconds>:

/**
 * C function wrapping getTickInterval() method of XFTimeoutManager.
 */
int32_t XF_tickIntervalInMilliseconds()
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	af00      	add	r7, sp, #0
    return XFTimeoutManager::getInstance()->getTickInterval();
 8009cc2:	f7fe ffd3 	bl	8008c6c <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	320c      	adds	r2, #12
 8009ccc:	6812      	ldr	r2, [r2, #0]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	4790      	blx	r2
 8009cd2:	4603      	mov	r3, r0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <XF_isRunning>:

bool XF_isRunning()
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	af00      	add	r7, sp, #0
    return XF::isRunning();
 8009cdc:	f7ff ff30 	bl	8009b40 <_ZN2XF9isRunningEv>
 8009ce0:	4603      	mov	r3, r0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <_ZdlPvj>:
 8009ce6:	f000 b832 	b.w	8009d4e <_ZdlPv>

08009cea <__cxa_guard_acquire>:
 8009cea:	6803      	ldr	r3, [r0, #0]
 8009cec:	07db      	lsls	r3, r3, #31
 8009cee:	d406      	bmi.n	8009cfe <__cxa_guard_acquire+0x14>
 8009cf0:	7843      	ldrb	r3, [r0, #1]
 8009cf2:	b103      	cbz	r3, 8009cf6 <__cxa_guard_acquire+0xc>
 8009cf4:	deff      	udf	#255	; 0xff
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	7043      	strb	r3, [r0, #1]
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	4770      	bx	lr
 8009cfe:	2000      	movs	r0, #0
 8009d00:	4770      	bx	lr

08009d02 <__cxa_guard_release>:
 8009d02:	2301      	movs	r3, #1
 8009d04:	6003      	str	r3, [r0, #0]
 8009d06:	4770      	bx	lr

08009d08 <_Znwj>:
 8009d08:	2801      	cmp	r0, #1
 8009d0a:	bf38      	it	cc
 8009d0c:	2001      	movcc	r0, #1
 8009d0e:	b510      	push	{r4, lr}
 8009d10:	4604      	mov	r4, r0
 8009d12:	4620      	mov	r0, r4
 8009d14:	f000 f8a0 	bl	8009e58 <malloc>
 8009d18:	b930      	cbnz	r0, 8009d28 <_Znwj+0x20>
 8009d1a:	f000 f82d 	bl	8009d78 <_ZSt15get_new_handlerv>
 8009d1e:	b908      	cbnz	r0, 8009d24 <_Znwj+0x1c>
 8009d20:	f000 f832 	bl	8009d88 <abort>
 8009d24:	4780      	blx	r0
 8009d26:	e7f4      	b.n	8009d12 <_Znwj+0xa>
 8009d28:	bd10      	pop	{r4, pc}

08009d2a <__cxa_pure_virtual>:
 8009d2a:	b508      	push	{r3, lr}
 8009d2c:	f000 f81e 	bl	8009d6c <_ZSt9terminatev>

08009d30 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 8009d30:	684b      	ldr	r3, [r1, #4]
 8009d32:	6043      	str	r3, [r0, #4]
 8009d34:	684b      	ldr	r3, [r1, #4]
 8009d36:	6001      	str	r1, [r0, #0]
 8009d38:	6018      	str	r0, [r3, #0]
 8009d3a:	6048      	str	r0, [r1, #4]
 8009d3c:	4770      	bx	lr

08009d3e <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 8009d3e:	e9d0 3200 	ldrd	r3, r2, [r0]
 8009d42:	6013      	str	r3, [r2, #0]
 8009d44:	605a      	str	r2, [r3, #4]
 8009d46:	4770      	bx	lr

08009d48 <_ZSt17__throw_bad_allocv>:
 8009d48:	b508      	push	{r3, lr}
 8009d4a:	f000 f81d 	bl	8009d88 <abort>

08009d4e <_ZdlPv>:
 8009d4e:	f000 b88b 	b.w	8009e68 <free>

08009d52 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009d52:	b508      	push	{r3, lr}
 8009d54:	4780      	blx	r0
 8009d56:	f000 f817 	bl	8009d88 <abort>
	...

08009d5c <_ZSt13get_terminatev>:
 8009d5c:	4b02      	ldr	r3, [pc, #8]	; (8009d68 <_ZSt13get_terminatev+0xc>)
 8009d5e:	6818      	ldr	r0, [r3, #0]
 8009d60:	f3bf 8f5b 	dmb	ish
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	2000000c 	.word	0x2000000c

08009d6c <_ZSt9terminatev>:
 8009d6c:	b508      	push	{r3, lr}
 8009d6e:	f7ff fff5 	bl	8009d5c <_ZSt13get_terminatev>
 8009d72:	f7ff ffee 	bl	8009d52 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08009d78 <_ZSt15get_new_handlerv>:
 8009d78:	4b02      	ldr	r3, [pc, #8]	; (8009d84 <_ZSt15get_new_handlerv+0xc>)
 8009d7a:	6818      	ldr	r0, [r3, #0]
 8009d7c:	f3bf 8f5b 	dmb	ish
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	200007b4 	.word	0x200007b4

08009d88 <abort>:
 8009d88:	b508      	push	{r3, lr}
 8009d8a:	2006      	movs	r0, #6
 8009d8c:	f000 fc82 	bl	800a694 <raise>
 8009d90:	2001      	movs	r0, #1
 8009d92:	f7f8 fc87 	bl	80026a4 <_exit>
	...

08009d98 <__assert_func>:
 8009d98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d9a:	4614      	mov	r4, r2
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	4b09      	ldr	r3, [pc, #36]	; (8009dc4 <__assert_func+0x2c>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4605      	mov	r5, r0
 8009da4:	68d8      	ldr	r0, [r3, #12]
 8009da6:	b14c      	cbz	r4, 8009dbc <__assert_func+0x24>
 8009da8:	4b07      	ldr	r3, [pc, #28]	; (8009dc8 <__assert_func+0x30>)
 8009daa:	9100      	str	r1, [sp, #0]
 8009dac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009db0:	4906      	ldr	r1, [pc, #24]	; (8009dcc <__assert_func+0x34>)
 8009db2:	462b      	mov	r3, r5
 8009db4:	f000 f81a 	bl	8009dec <fiprintf>
 8009db8:	f7ff ffe6 	bl	8009d88 <abort>
 8009dbc:	4b04      	ldr	r3, [pc, #16]	; (8009dd0 <__assert_func+0x38>)
 8009dbe:	461c      	mov	r4, r3
 8009dc0:	e7f3      	b.n	8009daa <__assert_func+0x12>
 8009dc2:	bf00      	nop
 8009dc4:	20000010 	.word	0x20000010
 8009dc8:	0800b284 	.word	0x0800b284
 8009dcc:	0800b291 	.word	0x0800b291
 8009dd0:	0800b2bf 	.word	0x0800b2bf

08009dd4 <atexit>:
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	4601      	mov	r1, r0
 8009dd8:	461a      	mov	r2, r3
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f000 bd36 	b.w	800a84c <__register_exitproc>

08009de0 <__errno>:
 8009de0:	4b01      	ldr	r3, [pc, #4]	; (8009de8 <__errno+0x8>)
 8009de2:	6818      	ldr	r0, [r3, #0]
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	20000010 	.word	0x20000010

08009dec <fiprintf>:
 8009dec:	b40e      	push	{r1, r2, r3}
 8009dee:	b503      	push	{r0, r1, lr}
 8009df0:	4601      	mov	r1, r0
 8009df2:	ab03      	add	r3, sp, #12
 8009df4:	4805      	ldr	r0, [pc, #20]	; (8009e0c <fiprintf+0x20>)
 8009df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dfa:	6800      	ldr	r0, [r0, #0]
 8009dfc:	9301      	str	r3, [sp, #4]
 8009dfe:	f000 f94d 	bl	800a09c <_vfiprintf_r>
 8009e02:	b002      	add	sp, #8
 8009e04:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e08:	b003      	add	sp, #12
 8009e0a:	4770      	bx	lr
 8009e0c:	20000010 	.word	0x20000010

08009e10 <__libc_init_array>:
 8009e10:	b570      	push	{r4, r5, r6, lr}
 8009e12:	4d0d      	ldr	r5, [pc, #52]	; (8009e48 <__libc_init_array+0x38>)
 8009e14:	4c0d      	ldr	r4, [pc, #52]	; (8009e4c <__libc_init_array+0x3c>)
 8009e16:	1b64      	subs	r4, r4, r5
 8009e18:	10a4      	asrs	r4, r4, #2
 8009e1a:	2600      	movs	r6, #0
 8009e1c:	42a6      	cmp	r6, r4
 8009e1e:	d109      	bne.n	8009e34 <__libc_init_array+0x24>
 8009e20:	4d0b      	ldr	r5, [pc, #44]	; (8009e50 <__libc_init_array+0x40>)
 8009e22:	4c0c      	ldr	r4, [pc, #48]	; (8009e54 <__libc_init_array+0x44>)
 8009e24:	f001 f84c 	bl	800aec0 <_init>
 8009e28:	1b64      	subs	r4, r4, r5
 8009e2a:	10a4      	asrs	r4, r4, #2
 8009e2c:	2600      	movs	r6, #0
 8009e2e:	42a6      	cmp	r6, r4
 8009e30:	d105      	bne.n	8009e3e <__libc_init_array+0x2e>
 8009e32:	bd70      	pop	{r4, r5, r6, pc}
 8009e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e38:	4798      	blx	r3
 8009e3a:	3601      	adds	r6, #1
 8009e3c:	e7ee      	b.n	8009e1c <__libc_init_array+0xc>
 8009e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e42:	4798      	blx	r3
 8009e44:	3601      	adds	r6, #1
 8009e46:	e7f2      	b.n	8009e2e <__libc_init_array+0x1e>
 8009e48:	0800b360 	.word	0x0800b360
 8009e4c:	0800b360 	.word	0x0800b360
 8009e50:	0800b360 	.word	0x0800b360
 8009e54:	0800b368 	.word	0x0800b368

08009e58 <malloc>:
 8009e58:	4b02      	ldr	r3, [pc, #8]	; (8009e64 <malloc+0xc>)
 8009e5a:	4601      	mov	r1, r0
 8009e5c:	6818      	ldr	r0, [r3, #0]
 8009e5e:	f000 b87f 	b.w	8009f60 <_malloc_r>
 8009e62:	bf00      	nop
 8009e64:	20000010 	.word	0x20000010

08009e68 <free>:
 8009e68:	4b02      	ldr	r3, [pc, #8]	; (8009e74 <free+0xc>)
 8009e6a:	4601      	mov	r1, r0
 8009e6c:	6818      	ldr	r0, [r3, #0]
 8009e6e:	f000 b80b 	b.w	8009e88 <_free_r>
 8009e72:	bf00      	nop
 8009e74:	20000010 	.word	0x20000010

08009e78 <memset>:
 8009e78:	4402      	add	r2, r0
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d100      	bne.n	8009e82 <memset+0xa>
 8009e80:	4770      	bx	lr
 8009e82:	f803 1b01 	strb.w	r1, [r3], #1
 8009e86:	e7f9      	b.n	8009e7c <memset+0x4>

08009e88 <_free_r>:
 8009e88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e8a:	2900      	cmp	r1, #0
 8009e8c:	d044      	beq.n	8009f18 <_free_r+0x90>
 8009e8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e92:	9001      	str	r0, [sp, #4]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f1a1 0404 	sub.w	r4, r1, #4
 8009e9a:	bfb8      	it	lt
 8009e9c:	18e4      	addlt	r4, r4, r3
 8009e9e:	f000 ff57 	bl	800ad50 <__malloc_lock>
 8009ea2:	4a1e      	ldr	r2, [pc, #120]	; (8009f1c <_free_r+0x94>)
 8009ea4:	9801      	ldr	r0, [sp, #4]
 8009ea6:	6813      	ldr	r3, [r2, #0]
 8009ea8:	b933      	cbnz	r3, 8009eb8 <_free_r+0x30>
 8009eaa:	6063      	str	r3, [r4, #4]
 8009eac:	6014      	str	r4, [r2, #0]
 8009eae:	b003      	add	sp, #12
 8009eb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009eb4:	f000 bf52 	b.w	800ad5c <__malloc_unlock>
 8009eb8:	42a3      	cmp	r3, r4
 8009eba:	d908      	bls.n	8009ece <_free_r+0x46>
 8009ebc:	6825      	ldr	r5, [r4, #0]
 8009ebe:	1961      	adds	r1, r4, r5
 8009ec0:	428b      	cmp	r3, r1
 8009ec2:	bf01      	itttt	eq
 8009ec4:	6819      	ldreq	r1, [r3, #0]
 8009ec6:	685b      	ldreq	r3, [r3, #4]
 8009ec8:	1949      	addeq	r1, r1, r5
 8009eca:	6021      	streq	r1, [r4, #0]
 8009ecc:	e7ed      	b.n	8009eaa <_free_r+0x22>
 8009ece:	461a      	mov	r2, r3
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	b10b      	cbz	r3, 8009ed8 <_free_r+0x50>
 8009ed4:	42a3      	cmp	r3, r4
 8009ed6:	d9fa      	bls.n	8009ece <_free_r+0x46>
 8009ed8:	6811      	ldr	r1, [r2, #0]
 8009eda:	1855      	adds	r5, r2, r1
 8009edc:	42a5      	cmp	r5, r4
 8009ede:	d10b      	bne.n	8009ef8 <_free_r+0x70>
 8009ee0:	6824      	ldr	r4, [r4, #0]
 8009ee2:	4421      	add	r1, r4
 8009ee4:	1854      	adds	r4, r2, r1
 8009ee6:	42a3      	cmp	r3, r4
 8009ee8:	6011      	str	r1, [r2, #0]
 8009eea:	d1e0      	bne.n	8009eae <_free_r+0x26>
 8009eec:	681c      	ldr	r4, [r3, #0]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	6053      	str	r3, [r2, #4]
 8009ef2:	4421      	add	r1, r4
 8009ef4:	6011      	str	r1, [r2, #0]
 8009ef6:	e7da      	b.n	8009eae <_free_r+0x26>
 8009ef8:	d902      	bls.n	8009f00 <_free_r+0x78>
 8009efa:	230c      	movs	r3, #12
 8009efc:	6003      	str	r3, [r0, #0]
 8009efe:	e7d6      	b.n	8009eae <_free_r+0x26>
 8009f00:	6825      	ldr	r5, [r4, #0]
 8009f02:	1961      	adds	r1, r4, r5
 8009f04:	428b      	cmp	r3, r1
 8009f06:	bf04      	itt	eq
 8009f08:	6819      	ldreq	r1, [r3, #0]
 8009f0a:	685b      	ldreq	r3, [r3, #4]
 8009f0c:	6063      	str	r3, [r4, #4]
 8009f0e:	bf04      	itt	eq
 8009f10:	1949      	addeq	r1, r1, r5
 8009f12:	6021      	streq	r1, [r4, #0]
 8009f14:	6054      	str	r4, [r2, #4]
 8009f16:	e7ca      	b.n	8009eae <_free_r+0x26>
 8009f18:	b003      	add	sp, #12
 8009f1a:	bd30      	pop	{r4, r5, pc}
 8009f1c:	200007b8 	.word	0x200007b8

08009f20 <sbrk_aligned>:
 8009f20:	b570      	push	{r4, r5, r6, lr}
 8009f22:	4e0e      	ldr	r6, [pc, #56]	; (8009f5c <sbrk_aligned+0x3c>)
 8009f24:	460c      	mov	r4, r1
 8009f26:	6831      	ldr	r1, [r6, #0]
 8009f28:	4605      	mov	r5, r0
 8009f2a:	b911      	cbnz	r1, 8009f32 <sbrk_aligned+0x12>
 8009f2c:	f000 fb7a 	bl	800a624 <_sbrk_r>
 8009f30:	6030      	str	r0, [r6, #0]
 8009f32:	4621      	mov	r1, r4
 8009f34:	4628      	mov	r0, r5
 8009f36:	f000 fb75 	bl	800a624 <_sbrk_r>
 8009f3a:	1c43      	adds	r3, r0, #1
 8009f3c:	d00a      	beq.n	8009f54 <sbrk_aligned+0x34>
 8009f3e:	1cc4      	adds	r4, r0, #3
 8009f40:	f024 0403 	bic.w	r4, r4, #3
 8009f44:	42a0      	cmp	r0, r4
 8009f46:	d007      	beq.n	8009f58 <sbrk_aligned+0x38>
 8009f48:	1a21      	subs	r1, r4, r0
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	f000 fb6a 	bl	800a624 <_sbrk_r>
 8009f50:	3001      	adds	r0, #1
 8009f52:	d101      	bne.n	8009f58 <sbrk_aligned+0x38>
 8009f54:	f04f 34ff 	mov.w	r4, #4294967295
 8009f58:	4620      	mov	r0, r4
 8009f5a:	bd70      	pop	{r4, r5, r6, pc}
 8009f5c:	200007bc 	.word	0x200007bc

08009f60 <_malloc_r>:
 8009f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f64:	1ccd      	adds	r5, r1, #3
 8009f66:	f025 0503 	bic.w	r5, r5, #3
 8009f6a:	3508      	adds	r5, #8
 8009f6c:	2d0c      	cmp	r5, #12
 8009f6e:	bf38      	it	cc
 8009f70:	250c      	movcc	r5, #12
 8009f72:	2d00      	cmp	r5, #0
 8009f74:	4607      	mov	r7, r0
 8009f76:	db01      	blt.n	8009f7c <_malloc_r+0x1c>
 8009f78:	42a9      	cmp	r1, r5
 8009f7a:	d905      	bls.n	8009f88 <_malloc_r+0x28>
 8009f7c:	230c      	movs	r3, #12
 8009f7e:	603b      	str	r3, [r7, #0]
 8009f80:	2600      	movs	r6, #0
 8009f82:	4630      	mov	r0, r6
 8009f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f88:	4e2e      	ldr	r6, [pc, #184]	; (800a044 <_malloc_r+0xe4>)
 8009f8a:	f000 fee1 	bl	800ad50 <__malloc_lock>
 8009f8e:	6833      	ldr	r3, [r6, #0]
 8009f90:	461c      	mov	r4, r3
 8009f92:	bb34      	cbnz	r4, 8009fe2 <_malloc_r+0x82>
 8009f94:	4629      	mov	r1, r5
 8009f96:	4638      	mov	r0, r7
 8009f98:	f7ff ffc2 	bl	8009f20 <sbrk_aligned>
 8009f9c:	1c43      	adds	r3, r0, #1
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	d14d      	bne.n	800a03e <_malloc_r+0xde>
 8009fa2:	6834      	ldr	r4, [r6, #0]
 8009fa4:	4626      	mov	r6, r4
 8009fa6:	2e00      	cmp	r6, #0
 8009fa8:	d140      	bne.n	800a02c <_malloc_r+0xcc>
 8009faa:	6823      	ldr	r3, [r4, #0]
 8009fac:	4631      	mov	r1, r6
 8009fae:	4638      	mov	r0, r7
 8009fb0:	eb04 0803 	add.w	r8, r4, r3
 8009fb4:	f000 fb36 	bl	800a624 <_sbrk_r>
 8009fb8:	4580      	cmp	r8, r0
 8009fba:	d13a      	bne.n	800a032 <_malloc_r+0xd2>
 8009fbc:	6821      	ldr	r1, [r4, #0]
 8009fbe:	3503      	adds	r5, #3
 8009fc0:	1a6d      	subs	r5, r5, r1
 8009fc2:	f025 0503 	bic.w	r5, r5, #3
 8009fc6:	3508      	adds	r5, #8
 8009fc8:	2d0c      	cmp	r5, #12
 8009fca:	bf38      	it	cc
 8009fcc:	250c      	movcc	r5, #12
 8009fce:	4629      	mov	r1, r5
 8009fd0:	4638      	mov	r0, r7
 8009fd2:	f7ff ffa5 	bl	8009f20 <sbrk_aligned>
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	d02b      	beq.n	800a032 <_malloc_r+0xd2>
 8009fda:	6823      	ldr	r3, [r4, #0]
 8009fdc:	442b      	add	r3, r5
 8009fde:	6023      	str	r3, [r4, #0]
 8009fe0:	e00e      	b.n	800a000 <_malloc_r+0xa0>
 8009fe2:	6822      	ldr	r2, [r4, #0]
 8009fe4:	1b52      	subs	r2, r2, r5
 8009fe6:	d41e      	bmi.n	800a026 <_malloc_r+0xc6>
 8009fe8:	2a0b      	cmp	r2, #11
 8009fea:	d916      	bls.n	800a01a <_malloc_r+0xba>
 8009fec:	1961      	adds	r1, r4, r5
 8009fee:	42a3      	cmp	r3, r4
 8009ff0:	6025      	str	r5, [r4, #0]
 8009ff2:	bf18      	it	ne
 8009ff4:	6059      	strne	r1, [r3, #4]
 8009ff6:	6863      	ldr	r3, [r4, #4]
 8009ff8:	bf08      	it	eq
 8009ffa:	6031      	streq	r1, [r6, #0]
 8009ffc:	5162      	str	r2, [r4, r5]
 8009ffe:	604b      	str	r3, [r1, #4]
 800a000:	4638      	mov	r0, r7
 800a002:	f104 060b 	add.w	r6, r4, #11
 800a006:	f000 fea9 	bl	800ad5c <__malloc_unlock>
 800a00a:	f026 0607 	bic.w	r6, r6, #7
 800a00e:	1d23      	adds	r3, r4, #4
 800a010:	1af2      	subs	r2, r6, r3
 800a012:	d0b6      	beq.n	8009f82 <_malloc_r+0x22>
 800a014:	1b9b      	subs	r3, r3, r6
 800a016:	50a3      	str	r3, [r4, r2]
 800a018:	e7b3      	b.n	8009f82 <_malloc_r+0x22>
 800a01a:	6862      	ldr	r2, [r4, #4]
 800a01c:	42a3      	cmp	r3, r4
 800a01e:	bf0c      	ite	eq
 800a020:	6032      	streq	r2, [r6, #0]
 800a022:	605a      	strne	r2, [r3, #4]
 800a024:	e7ec      	b.n	800a000 <_malloc_r+0xa0>
 800a026:	4623      	mov	r3, r4
 800a028:	6864      	ldr	r4, [r4, #4]
 800a02a:	e7b2      	b.n	8009f92 <_malloc_r+0x32>
 800a02c:	4634      	mov	r4, r6
 800a02e:	6876      	ldr	r6, [r6, #4]
 800a030:	e7b9      	b.n	8009fa6 <_malloc_r+0x46>
 800a032:	230c      	movs	r3, #12
 800a034:	603b      	str	r3, [r7, #0]
 800a036:	4638      	mov	r0, r7
 800a038:	f000 fe90 	bl	800ad5c <__malloc_unlock>
 800a03c:	e7a1      	b.n	8009f82 <_malloc_r+0x22>
 800a03e:	6025      	str	r5, [r4, #0]
 800a040:	e7de      	b.n	800a000 <_malloc_r+0xa0>
 800a042:	bf00      	nop
 800a044:	200007b8 	.word	0x200007b8

0800a048 <__sfputc_r>:
 800a048:	6893      	ldr	r3, [r2, #8]
 800a04a:	3b01      	subs	r3, #1
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	b410      	push	{r4}
 800a050:	6093      	str	r3, [r2, #8]
 800a052:	da08      	bge.n	800a066 <__sfputc_r+0x1e>
 800a054:	6994      	ldr	r4, [r2, #24]
 800a056:	42a3      	cmp	r3, r4
 800a058:	db01      	blt.n	800a05e <__sfputc_r+0x16>
 800a05a:	290a      	cmp	r1, #10
 800a05c:	d103      	bne.n	800a066 <__sfputc_r+0x1e>
 800a05e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a062:	f000 bb33 	b.w	800a6cc <__swbuf_r>
 800a066:	6813      	ldr	r3, [r2, #0]
 800a068:	1c58      	adds	r0, r3, #1
 800a06a:	6010      	str	r0, [r2, #0]
 800a06c:	7019      	strb	r1, [r3, #0]
 800a06e:	4608      	mov	r0, r1
 800a070:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <__sfputs_r>:
 800a076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a078:	4606      	mov	r6, r0
 800a07a:	460f      	mov	r7, r1
 800a07c:	4614      	mov	r4, r2
 800a07e:	18d5      	adds	r5, r2, r3
 800a080:	42ac      	cmp	r4, r5
 800a082:	d101      	bne.n	800a088 <__sfputs_r+0x12>
 800a084:	2000      	movs	r0, #0
 800a086:	e007      	b.n	800a098 <__sfputs_r+0x22>
 800a088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a08c:	463a      	mov	r2, r7
 800a08e:	4630      	mov	r0, r6
 800a090:	f7ff ffda 	bl	800a048 <__sfputc_r>
 800a094:	1c43      	adds	r3, r0, #1
 800a096:	d1f3      	bne.n	800a080 <__sfputs_r+0xa>
 800a098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a09c <_vfiprintf_r>:
 800a09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a0:	460d      	mov	r5, r1
 800a0a2:	b09d      	sub	sp, #116	; 0x74
 800a0a4:	4614      	mov	r4, r2
 800a0a6:	4698      	mov	r8, r3
 800a0a8:	4606      	mov	r6, r0
 800a0aa:	b118      	cbz	r0, 800a0b4 <_vfiprintf_r+0x18>
 800a0ac:	6983      	ldr	r3, [r0, #24]
 800a0ae:	b90b      	cbnz	r3, 800a0b4 <_vfiprintf_r+0x18>
 800a0b0:	f000 fd48 	bl	800ab44 <__sinit>
 800a0b4:	4b89      	ldr	r3, [pc, #548]	; (800a2dc <_vfiprintf_r+0x240>)
 800a0b6:	429d      	cmp	r5, r3
 800a0b8:	d11b      	bne.n	800a0f2 <_vfiprintf_r+0x56>
 800a0ba:	6875      	ldr	r5, [r6, #4]
 800a0bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0be:	07d9      	lsls	r1, r3, #31
 800a0c0:	d405      	bmi.n	800a0ce <_vfiprintf_r+0x32>
 800a0c2:	89ab      	ldrh	r3, [r5, #12]
 800a0c4:	059a      	lsls	r2, r3, #22
 800a0c6:	d402      	bmi.n	800a0ce <_vfiprintf_r+0x32>
 800a0c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0ca:	f000 fdd9 	bl	800ac80 <__retarget_lock_acquire_recursive>
 800a0ce:	89ab      	ldrh	r3, [r5, #12]
 800a0d0:	071b      	lsls	r3, r3, #28
 800a0d2:	d501      	bpl.n	800a0d8 <_vfiprintf_r+0x3c>
 800a0d4:	692b      	ldr	r3, [r5, #16]
 800a0d6:	b9eb      	cbnz	r3, 800a114 <_vfiprintf_r+0x78>
 800a0d8:	4629      	mov	r1, r5
 800a0da:	4630      	mov	r0, r6
 800a0dc:	f000 fb48 	bl	800a770 <__swsetup_r>
 800a0e0:	b1c0      	cbz	r0, 800a114 <_vfiprintf_r+0x78>
 800a0e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0e4:	07dc      	lsls	r4, r3, #31
 800a0e6:	d50e      	bpl.n	800a106 <_vfiprintf_r+0x6a>
 800a0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ec:	b01d      	add	sp, #116	; 0x74
 800a0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f2:	4b7b      	ldr	r3, [pc, #492]	; (800a2e0 <_vfiprintf_r+0x244>)
 800a0f4:	429d      	cmp	r5, r3
 800a0f6:	d101      	bne.n	800a0fc <_vfiprintf_r+0x60>
 800a0f8:	68b5      	ldr	r5, [r6, #8]
 800a0fa:	e7df      	b.n	800a0bc <_vfiprintf_r+0x20>
 800a0fc:	4b79      	ldr	r3, [pc, #484]	; (800a2e4 <_vfiprintf_r+0x248>)
 800a0fe:	429d      	cmp	r5, r3
 800a100:	bf08      	it	eq
 800a102:	68f5      	ldreq	r5, [r6, #12]
 800a104:	e7da      	b.n	800a0bc <_vfiprintf_r+0x20>
 800a106:	89ab      	ldrh	r3, [r5, #12]
 800a108:	0598      	lsls	r0, r3, #22
 800a10a:	d4ed      	bmi.n	800a0e8 <_vfiprintf_r+0x4c>
 800a10c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a10e:	f000 fdb9 	bl	800ac84 <__retarget_lock_release_recursive>
 800a112:	e7e9      	b.n	800a0e8 <_vfiprintf_r+0x4c>
 800a114:	2300      	movs	r3, #0
 800a116:	9309      	str	r3, [sp, #36]	; 0x24
 800a118:	2320      	movs	r3, #32
 800a11a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a11e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a122:	2330      	movs	r3, #48	; 0x30
 800a124:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a2e8 <_vfiprintf_r+0x24c>
 800a128:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a12c:	f04f 0901 	mov.w	r9, #1
 800a130:	4623      	mov	r3, r4
 800a132:	469a      	mov	sl, r3
 800a134:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a138:	b10a      	cbz	r2, 800a13e <_vfiprintf_r+0xa2>
 800a13a:	2a25      	cmp	r2, #37	; 0x25
 800a13c:	d1f9      	bne.n	800a132 <_vfiprintf_r+0x96>
 800a13e:	ebba 0b04 	subs.w	fp, sl, r4
 800a142:	d00b      	beq.n	800a15c <_vfiprintf_r+0xc0>
 800a144:	465b      	mov	r3, fp
 800a146:	4622      	mov	r2, r4
 800a148:	4629      	mov	r1, r5
 800a14a:	4630      	mov	r0, r6
 800a14c:	f7ff ff93 	bl	800a076 <__sfputs_r>
 800a150:	3001      	adds	r0, #1
 800a152:	f000 80aa 	beq.w	800a2aa <_vfiprintf_r+0x20e>
 800a156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a158:	445a      	add	r2, fp
 800a15a:	9209      	str	r2, [sp, #36]	; 0x24
 800a15c:	f89a 3000 	ldrb.w	r3, [sl]
 800a160:	2b00      	cmp	r3, #0
 800a162:	f000 80a2 	beq.w	800a2aa <_vfiprintf_r+0x20e>
 800a166:	2300      	movs	r3, #0
 800a168:	f04f 32ff 	mov.w	r2, #4294967295
 800a16c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a170:	f10a 0a01 	add.w	sl, sl, #1
 800a174:	9304      	str	r3, [sp, #16]
 800a176:	9307      	str	r3, [sp, #28]
 800a178:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a17c:	931a      	str	r3, [sp, #104]	; 0x68
 800a17e:	4654      	mov	r4, sl
 800a180:	2205      	movs	r2, #5
 800a182:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a186:	4858      	ldr	r0, [pc, #352]	; (800a2e8 <_vfiprintf_r+0x24c>)
 800a188:	f7f6 f842 	bl	8000210 <memchr>
 800a18c:	9a04      	ldr	r2, [sp, #16]
 800a18e:	b9d8      	cbnz	r0, 800a1c8 <_vfiprintf_r+0x12c>
 800a190:	06d1      	lsls	r1, r2, #27
 800a192:	bf44      	itt	mi
 800a194:	2320      	movmi	r3, #32
 800a196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a19a:	0713      	lsls	r3, r2, #28
 800a19c:	bf44      	itt	mi
 800a19e:	232b      	movmi	r3, #43	; 0x2b
 800a1a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a1a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a1aa:	d015      	beq.n	800a1d8 <_vfiprintf_r+0x13c>
 800a1ac:	9a07      	ldr	r2, [sp, #28]
 800a1ae:	4654      	mov	r4, sl
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	f04f 0c0a 	mov.w	ip, #10
 800a1b6:	4621      	mov	r1, r4
 800a1b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1bc:	3b30      	subs	r3, #48	; 0x30
 800a1be:	2b09      	cmp	r3, #9
 800a1c0:	d94e      	bls.n	800a260 <_vfiprintf_r+0x1c4>
 800a1c2:	b1b0      	cbz	r0, 800a1f2 <_vfiprintf_r+0x156>
 800a1c4:	9207      	str	r2, [sp, #28]
 800a1c6:	e014      	b.n	800a1f2 <_vfiprintf_r+0x156>
 800a1c8:	eba0 0308 	sub.w	r3, r0, r8
 800a1cc:	fa09 f303 	lsl.w	r3, r9, r3
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	9304      	str	r3, [sp, #16]
 800a1d4:	46a2      	mov	sl, r4
 800a1d6:	e7d2      	b.n	800a17e <_vfiprintf_r+0xe2>
 800a1d8:	9b03      	ldr	r3, [sp, #12]
 800a1da:	1d19      	adds	r1, r3, #4
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	9103      	str	r1, [sp, #12]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	bfbb      	ittet	lt
 800a1e4:	425b      	neglt	r3, r3
 800a1e6:	f042 0202 	orrlt.w	r2, r2, #2
 800a1ea:	9307      	strge	r3, [sp, #28]
 800a1ec:	9307      	strlt	r3, [sp, #28]
 800a1ee:	bfb8      	it	lt
 800a1f0:	9204      	strlt	r2, [sp, #16]
 800a1f2:	7823      	ldrb	r3, [r4, #0]
 800a1f4:	2b2e      	cmp	r3, #46	; 0x2e
 800a1f6:	d10c      	bne.n	800a212 <_vfiprintf_r+0x176>
 800a1f8:	7863      	ldrb	r3, [r4, #1]
 800a1fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a1fc:	d135      	bne.n	800a26a <_vfiprintf_r+0x1ce>
 800a1fe:	9b03      	ldr	r3, [sp, #12]
 800a200:	1d1a      	adds	r2, r3, #4
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	9203      	str	r2, [sp, #12]
 800a206:	2b00      	cmp	r3, #0
 800a208:	bfb8      	it	lt
 800a20a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a20e:	3402      	adds	r4, #2
 800a210:	9305      	str	r3, [sp, #20]
 800a212:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a2f8 <_vfiprintf_r+0x25c>
 800a216:	7821      	ldrb	r1, [r4, #0]
 800a218:	2203      	movs	r2, #3
 800a21a:	4650      	mov	r0, sl
 800a21c:	f7f5 fff8 	bl	8000210 <memchr>
 800a220:	b140      	cbz	r0, 800a234 <_vfiprintf_r+0x198>
 800a222:	2340      	movs	r3, #64	; 0x40
 800a224:	eba0 000a 	sub.w	r0, r0, sl
 800a228:	fa03 f000 	lsl.w	r0, r3, r0
 800a22c:	9b04      	ldr	r3, [sp, #16]
 800a22e:	4303      	orrs	r3, r0
 800a230:	3401      	adds	r4, #1
 800a232:	9304      	str	r3, [sp, #16]
 800a234:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a238:	482c      	ldr	r0, [pc, #176]	; (800a2ec <_vfiprintf_r+0x250>)
 800a23a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a23e:	2206      	movs	r2, #6
 800a240:	f7f5 ffe6 	bl	8000210 <memchr>
 800a244:	2800      	cmp	r0, #0
 800a246:	d03f      	beq.n	800a2c8 <_vfiprintf_r+0x22c>
 800a248:	4b29      	ldr	r3, [pc, #164]	; (800a2f0 <_vfiprintf_r+0x254>)
 800a24a:	bb1b      	cbnz	r3, 800a294 <_vfiprintf_r+0x1f8>
 800a24c:	9b03      	ldr	r3, [sp, #12]
 800a24e:	3307      	adds	r3, #7
 800a250:	f023 0307 	bic.w	r3, r3, #7
 800a254:	3308      	adds	r3, #8
 800a256:	9303      	str	r3, [sp, #12]
 800a258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a25a:	443b      	add	r3, r7
 800a25c:	9309      	str	r3, [sp, #36]	; 0x24
 800a25e:	e767      	b.n	800a130 <_vfiprintf_r+0x94>
 800a260:	fb0c 3202 	mla	r2, ip, r2, r3
 800a264:	460c      	mov	r4, r1
 800a266:	2001      	movs	r0, #1
 800a268:	e7a5      	b.n	800a1b6 <_vfiprintf_r+0x11a>
 800a26a:	2300      	movs	r3, #0
 800a26c:	3401      	adds	r4, #1
 800a26e:	9305      	str	r3, [sp, #20]
 800a270:	4619      	mov	r1, r3
 800a272:	f04f 0c0a 	mov.w	ip, #10
 800a276:	4620      	mov	r0, r4
 800a278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a27c:	3a30      	subs	r2, #48	; 0x30
 800a27e:	2a09      	cmp	r2, #9
 800a280:	d903      	bls.n	800a28a <_vfiprintf_r+0x1ee>
 800a282:	2b00      	cmp	r3, #0
 800a284:	d0c5      	beq.n	800a212 <_vfiprintf_r+0x176>
 800a286:	9105      	str	r1, [sp, #20]
 800a288:	e7c3      	b.n	800a212 <_vfiprintf_r+0x176>
 800a28a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a28e:	4604      	mov	r4, r0
 800a290:	2301      	movs	r3, #1
 800a292:	e7f0      	b.n	800a276 <_vfiprintf_r+0x1da>
 800a294:	ab03      	add	r3, sp, #12
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	462a      	mov	r2, r5
 800a29a:	4b16      	ldr	r3, [pc, #88]	; (800a2f4 <_vfiprintf_r+0x258>)
 800a29c:	a904      	add	r1, sp, #16
 800a29e:	4630      	mov	r0, r6
 800a2a0:	f3af 8000 	nop.w
 800a2a4:	4607      	mov	r7, r0
 800a2a6:	1c78      	adds	r0, r7, #1
 800a2a8:	d1d6      	bne.n	800a258 <_vfiprintf_r+0x1bc>
 800a2aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2ac:	07d9      	lsls	r1, r3, #31
 800a2ae:	d405      	bmi.n	800a2bc <_vfiprintf_r+0x220>
 800a2b0:	89ab      	ldrh	r3, [r5, #12]
 800a2b2:	059a      	lsls	r2, r3, #22
 800a2b4:	d402      	bmi.n	800a2bc <_vfiprintf_r+0x220>
 800a2b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2b8:	f000 fce4 	bl	800ac84 <__retarget_lock_release_recursive>
 800a2bc:	89ab      	ldrh	r3, [r5, #12]
 800a2be:	065b      	lsls	r3, r3, #25
 800a2c0:	f53f af12 	bmi.w	800a0e8 <_vfiprintf_r+0x4c>
 800a2c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2c6:	e711      	b.n	800a0ec <_vfiprintf_r+0x50>
 800a2c8:	ab03      	add	r3, sp, #12
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	462a      	mov	r2, r5
 800a2ce:	4b09      	ldr	r3, [pc, #36]	; (800a2f4 <_vfiprintf_r+0x258>)
 800a2d0:	a904      	add	r1, sp, #16
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	f000 f880 	bl	800a3d8 <_printf_i>
 800a2d8:	e7e4      	b.n	800a2a4 <_vfiprintf_r+0x208>
 800a2da:	bf00      	nop
 800a2dc:	0800b318 	.word	0x0800b318
 800a2e0:	0800b338 	.word	0x0800b338
 800a2e4:	0800b2f8 	.word	0x0800b2f8
 800a2e8:	0800b2c4 	.word	0x0800b2c4
 800a2ec:	0800b2ce 	.word	0x0800b2ce
 800a2f0:	00000000 	.word	0x00000000
 800a2f4:	0800a077 	.word	0x0800a077
 800a2f8:	0800b2ca 	.word	0x0800b2ca

0800a2fc <_printf_common>:
 800a2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a300:	4616      	mov	r6, r2
 800a302:	4699      	mov	r9, r3
 800a304:	688a      	ldr	r2, [r1, #8]
 800a306:	690b      	ldr	r3, [r1, #16]
 800a308:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a30c:	4293      	cmp	r3, r2
 800a30e:	bfb8      	it	lt
 800a310:	4613      	movlt	r3, r2
 800a312:	6033      	str	r3, [r6, #0]
 800a314:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a318:	4607      	mov	r7, r0
 800a31a:	460c      	mov	r4, r1
 800a31c:	b10a      	cbz	r2, 800a322 <_printf_common+0x26>
 800a31e:	3301      	adds	r3, #1
 800a320:	6033      	str	r3, [r6, #0]
 800a322:	6823      	ldr	r3, [r4, #0]
 800a324:	0699      	lsls	r1, r3, #26
 800a326:	bf42      	ittt	mi
 800a328:	6833      	ldrmi	r3, [r6, #0]
 800a32a:	3302      	addmi	r3, #2
 800a32c:	6033      	strmi	r3, [r6, #0]
 800a32e:	6825      	ldr	r5, [r4, #0]
 800a330:	f015 0506 	ands.w	r5, r5, #6
 800a334:	d106      	bne.n	800a344 <_printf_common+0x48>
 800a336:	f104 0a19 	add.w	sl, r4, #25
 800a33a:	68e3      	ldr	r3, [r4, #12]
 800a33c:	6832      	ldr	r2, [r6, #0]
 800a33e:	1a9b      	subs	r3, r3, r2
 800a340:	42ab      	cmp	r3, r5
 800a342:	dc26      	bgt.n	800a392 <_printf_common+0x96>
 800a344:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a348:	1e13      	subs	r3, r2, #0
 800a34a:	6822      	ldr	r2, [r4, #0]
 800a34c:	bf18      	it	ne
 800a34e:	2301      	movne	r3, #1
 800a350:	0692      	lsls	r2, r2, #26
 800a352:	d42b      	bmi.n	800a3ac <_printf_common+0xb0>
 800a354:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a358:	4649      	mov	r1, r9
 800a35a:	4638      	mov	r0, r7
 800a35c:	47c0      	blx	r8
 800a35e:	3001      	adds	r0, #1
 800a360:	d01e      	beq.n	800a3a0 <_printf_common+0xa4>
 800a362:	6823      	ldr	r3, [r4, #0]
 800a364:	68e5      	ldr	r5, [r4, #12]
 800a366:	6832      	ldr	r2, [r6, #0]
 800a368:	f003 0306 	and.w	r3, r3, #6
 800a36c:	2b04      	cmp	r3, #4
 800a36e:	bf08      	it	eq
 800a370:	1aad      	subeq	r5, r5, r2
 800a372:	68a3      	ldr	r3, [r4, #8]
 800a374:	6922      	ldr	r2, [r4, #16]
 800a376:	bf0c      	ite	eq
 800a378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a37c:	2500      	movne	r5, #0
 800a37e:	4293      	cmp	r3, r2
 800a380:	bfc4      	itt	gt
 800a382:	1a9b      	subgt	r3, r3, r2
 800a384:	18ed      	addgt	r5, r5, r3
 800a386:	2600      	movs	r6, #0
 800a388:	341a      	adds	r4, #26
 800a38a:	42b5      	cmp	r5, r6
 800a38c:	d11a      	bne.n	800a3c4 <_printf_common+0xc8>
 800a38e:	2000      	movs	r0, #0
 800a390:	e008      	b.n	800a3a4 <_printf_common+0xa8>
 800a392:	2301      	movs	r3, #1
 800a394:	4652      	mov	r2, sl
 800a396:	4649      	mov	r1, r9
 800a398:	4638      	mov	r0, r7
 800a39a:	47c0      	blx	r8
 800a39c:	3001      	adds	r0, #1
 800a39e:	d103      	bne.n	800a3a8 <_printf_common+0xac>
 800a3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3a8:	3501      	adds	r5, #1
 800a3aa:	e7c6      	b.n	800a33a <_printf_common+0x3e>
 800a3ac:	18e1      	adds	r1, r4, r3
 800a3ae:	1c5a      	adds	r2, r3, #1
 800a3b0:	2030      	movs	r0, #48	; 0x30
 800a3b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3b6:	4422      	add	r2, r4
 800a3b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3c0:	3302      	adds	r3, #2
 800a3c2:	e7c7      	b.n	800a354 <_printf_common+0x58>
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	4622      	mov	r2, r4
 800a3c8:	4649      	mov	r1, r9
 800a3ca:	4638      	mov	r0, r7
 800a3cc:	47c0      	blx	r8
 800a3ce:	3001      	adds	r0, #1
 800a3d0:	d0e6      	beq.n	800a3a0 <_printf_common+0xa4>
 800a3d2:	3601      	adds	r6, #1
 800a3d4:	e7d9      	b.n	800a38a <_printf_common+0x8e>
	...

0800a3d8 <_printf_i>:
 800a3d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3dc:	7e0f      	ldrb	r7, [r1, #24]
 800a3de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a3e0:	2f78      	cmp	r7, #120	; 0x78
 800a3e2:	4691      	mov	r9, r2
 800a3e4:	4680      	mov	r8, r0
 800a3e6:	460c      	mov	r4, r1
 800a3e8:	469a      	mov	sl, r3
 800a3ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a3ee:	d807      	bhi.n	800a400 <_printf_i+0x28>
 800a3f0:	2f62      	cmp	r7, #98	; 0x62
 800a3f2:	d80a      	bhi.n	800a40a <_printf_i+0x32>
 800a3f4:	2f00      	cmp	r7, #0
 800a3f6:	f000 80d8 	beq.w	800a5aa <_printf_i+0x1d2>
 800a3fa:	2f58      	cmp	r7, #88	; 0x58
 800a3fc:	f000 80a3 	beq.w	800a546 <_printf_i+0x16e>
 800a400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a404:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a408:	e03a      	b.n	800a480 <_printf_i+0xa8>
 800a40a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a40e:	2b15      	cmp	r3, #21
 800a410:	d8f6      	bhi.n	800a400 <_printf_i+0x28>
 800a412:	a101      	add	r1, pc, #4	; (adr r1, 800a418 <_printf_i+0x40>)
 800a414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a418:	0800a471 	.word	0x0800a471
 800a41c:	0800a485 	.word	0x0800a485
 800a420:	0800a401 	.word	0x0800a401
 800a424:	0800a401 	.word	0x0800a401
 800a428:	0800a401 	.word	0x0800a401
 800a42c:	0800a401 	.word	0x0800a401
 800a430:	0800a485 	.word	0x0800a485
 800a434:	0800a401 	.word	0x0800a401
 800a438:	0800a401 	.word	0x0800a401
 800a43c:	0800a401 	.word	0x0800a401
 800a440:	0800a401 	.word	0x0800a401
 800a444:	0800a591 	.word	0x0800a591
 800a448:	0800a4b5 	.word	0x0800a4b5
 800a44c:	0800a573 	.word	0x0800a573
 800a450:	0800a401 	.word	0x0800a401
 800a454:	0800a401 	.word	0x0800a401
 800a458:	0800a5b3 	.word	0x0800a5b3
 800a45c:	0800a401 	.word	0x0800a401
 800a460:	0800a4b5 	.word	0x0800a4b5
 800a464:	0800a401 	.word	0x0800a401
 800a468:	0800a401 	.word	0x0800a401
 800a46c:	0800a57b 	.word	0x0800a57b
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	1d1a      	adds	r2, r3, #4
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	602a      	str	r2, [r5, #0]
 800a478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a47c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a480:	2301      	movs	r3, #1
 800a482:	e0a3      	b.n	800a5cc <_printf_i+0x1f4>
 800a484:	6820      	ldr	r0, [r4, #0]
 800a486:	6829      	ldr	r1, [r5, #0]
 800a488:	0606      	lsls	r6, r0, #24
 800a48a:	f101 0304 	add.w	r3, r1, #4
 800a48e:	d50a      	bpl.n	800a4a6 <_printf_i+0xce>
 800a490:	680e      	ldr	r6, [r1, #0]
 800a492:	602b      	str	r3, [r5, #0]
 800a494:	2e00      	cmp	r6, #0
 800a496:	da03      	bge.n	800a4a0 <_printf_i+0xc8>
 800a498:	232d      	movs	r3, #45	; 0x2d
 800a49a:	4276      	negs	r6, r6
 800a49c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4a0:	485e      	ldr	r0, [pc, #376]	; (800a61c <_printf_i+0x244>)
 800a4a2:	230a      	movs	r3, #10
 800a4a4:	e019      	b.n	800a4da <_printf_i+0x102>
 800a4a6:	680e      	ldr	r6, [r1, #0]
 800a4a8:	602b      	str	r3, [r5, #0]
 800a4aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a4ae:	bf18      	it	ne
 800a4b0:	b236      	sxthne	r6, r6
 800a4b2:	e7ef      	b.n	800a494 <_printf_i+0xbc>
 800a4b4:	682b      	ldr	r3, [r5, #0]
 800a4b6:	6820      	ldr	r0, [r4, #0]
 800a4b8:	1d19      	adds	r1, r3, #4
 800a4ba:	6029      	str	r1, [r5, #0]
 800a4bc:	0601      	lsls	r1, r0, #24
 800a4be:	d501      	bpl.n	800a4c4 <_printf_i+0xec>
 800a4c0:	681e      	ldr	r6, [r3, #0]
 800a4c2:	e002      	b.n	800a4ca <_printf_i+0xf2>
 800a4c4:	0646      	lsls	r6, r0, #25
 800a4c6:	d5fb      	bpl.n	800a4c0 <_printf_i+0xe8>
 800a4c8:	881e      	ldrh	r6, [r3, #0]
 800a4ca:	4854      	ldr	r0, [pc, #336]	; (800a61c <_printf_i+0x244>)
 800a4cc:	2f6f      	cmp	r7, #111	; 0x6f
 800a4ce:	bf0c      	ite	eq
 800a4d0:	2308      	moveq	r3, #8
 800a4d2:	230a      	movne	r3, #10
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4da:	6865      	ldr	r5, [r4, #4]
 800a4dc:	60a5      	str	r5, [r4, #8]
 800a4de:	2d00      	cmp	r5, #0
 800a4e0:	bfa2      	ittt	ge
 800a4e2:	6821      	ldrge	r1, [r4, #0]
 800a4e4:	f021 0104 	bicge.w	r1, r1, #4
 800a4e8:	6021      	strge	r1, [r4, #0]
 800a4ea:	b90e      	cbnz	r6, 800a4f0 <_printf_i+0x118>
 800a4ec:	2d00      	cmp	r5, #0
 800a4ee:	d04d      	beq.n	800a58c <_printf_i+0x1b4>
 800a4f0:	4615      	mov	r5, r2
 800a4f2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a4f6:	fb03 6711 	mls	r7, r3, r1, r6
 800a4fa:	5dc7      	ldrb	r7, [r0, r7]
 800a4fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a500:	4637      	mov	r7, r6
 800a502:	42bb      	cmp	r3, r7
 800a504:	460e      	mov	r6, r1
 800a506:	d9f4      	bls.n	800a4f2 <_printf_i+0x11a>
 800a508:	2b08      	cmp	r3, #8
 800a50a:	d10b      	bne.n	800a524 <_printf_i+0x14c>
 800a50c:	6823      	ldr	r3, [r4, #0]
 800a50e:	07de      	lsls	r6, r3, #31
 800a510:	d508      	bpl.n	800a524 <_printf_i+0x14c>
 800a512:	6923      	ldr	r3, [r4, #16]
 800a514:	6861      	ldr	r1, [r4, #4]
 800a516:	4299      	cmp	r1, r3
 800a518:	bfde      	ittt	le
 800a51a:	2330      	movle	r3, #48	; 0x30
 800a51c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a520:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a524:	1b52      	subs	r2, r2, r5
 800a526:	6122      	str	r2, [r4, #16]
 800a528:	f8cd a000 	str.w	sl, [sp]
 800a52c:	464b      	mov	r3, r9
 800a52e:	aa03      	add	r2, sp, #12
 800a530:	4621      	mov	r1, r4
 800a532:	4640      	mov	r0, r8
 800a534:	f7ff fee2 	bl	800a2fc <_printf_common>
 800a538:	3001      	adds	r0, #1
 800a53a:	d14c      	bne.n	800a5d6 <_printf_i+0x1fe>
 800a53c:	f04f 30ff 	mov.w	r0, #4294967295
 800a540:	b004      	add	sp, #16
 800a542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a546:	4835      	ldr	r0, [pc, #212]	; (800a61c <_printf_i+0x244>)
 800a548:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a54c:	6829      	ldr	r1, [r5, #0]
 800a54e:	6823      	ldr	r3, [r4, #0]
 800a550:	f851 6b04 	ldr.w	r6, [r1], #4
 800a554:	6029      	str	r1, [r5, #0]
 800a556:	061d      	lsls	r5, r3, #24
 800a558:	d514      	bpl.n	800a584 <_printf_i+0x1ac>
 800a55a:	07df      	lsls	r7, r3, #31
 800a55c:	bf44      	itt	mi
 800a55e:	f043 0320 	orrmi.w	r3, r3, #32
 800a562:	6023      	strmi	r3, [r4, #0]
 800a564:	b91e      	cbnz	r6, 800a56e <_printf_i+0x196>
 800a566:	6823      	ldr	r3, [r4, #0]
 800a568:	f023 0320 	bic.w	r3, r3, #32
 800a56c:	6023      	str	r3, [r4, #0]
 800a56e:	2310      	movs	r3, #16
 800a570:	e7b0      	b.n	800a4d4 <_printf_i+0xfc>
 800a572:	6823      	ldr	r3, [r4, #0]
 800a574:	f043 0320 	orr.w	r3, r3, #32
 800a578:	6023      	str	r3, [r4, #0]
 800a57a:	2378      	movs	r3, #120	; 0x78
 800a57c:	4828      	ldr	r0, [pc, #160]	; (800a620 <_printf_i+0x248>)
 800a57e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a582:	e7e3      	b.n	800a54c <_printf_i+0x174>
 800a584:	0659      	lsls	r1, r3, #25
 800a586:	bf48      	it	mi
 800a588:	b2b6      	uxthmi	r6, r6
 800a58a:	e7e6      	b.n	800a55a <_printf_i+0x182>
 800a58c:	4615      	mov	r5, r2
 800a58e:	e7bb      	b.n	800a508 <_printf_i+0x130>
 800a590:	682b      	ldr	r3, [r5, #0]
 800a592:	6826      	ldr	r6, [r4, #0]
 800a594:	6961      	ldr	r1, [r4, #20]
 800a596:	1d18      	adds	r0, r3, #4
 800a598:	6028      	str	r0, [r5, #0]
 800a59a:	0635      	lsls	r5, r6, #24
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	d501      	bpl.n	800a5a4 <_printf_i+0x1cc>
 800a5a0:	6019      	str	r1, [r3, #0]
 800a5a2:	e002      	b.n	800a5aa <_printf_i+0x1d2>
 800a5a4:	0670      	lsls	r0, r6, #25
 800a5a6:	d5fb      	bpl.n	800a5a0 <_printf_i+0x1c8>
 800a5a8:	8019      	strh	r1, [r3, #0]
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	6123      	str	r3, [r4, #16]
 800a5ae:	4615      	mov	r5, r2
 800a5b0:	e7ba      	b.n	800a528 <_printf_i+0x150>
 800a5b2:	682b      	ldr	r3, [r5, #0]
 800a5b4:	1d1a      	adds	r2, r3, #4
 800a5b6:	602a      	str	r2, [r5, #0]
 800a5b8:	681d      	ldr	r5, [r3, #0]
 800a5ba:	6862      	ldr	r2, [r4, #4]
 800a5bc:	2100      	movs	r1, #0
 800a5be:	4628      	mov	r0, r5
 800a5c0:	f7f5 fe26 	bl	8000210 <memchr>
 800a5c4:	b108      	cbz	r0, 800a5ca <_printf_i+0x1f2>
 800a5c6:	1b40      	subs	r0, r0, r5
 800a5c8:	6060      	str	r0, [r4, #4]
 800a5ca:	6863      	ldr	r3, [r4, #4]
 800a5cc:	6123      	str	r3, [r4, #16]
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5d4:	e7a8      	b.n	800a528 <_printf_i+0x150>
 800a5d6:	6923      	ldr	r3, [r4, #16]
 800a5d8:	462a      	mov	r2, r5
 800a5da:	4649      	mov	r1, r9
 800a5dc:	4640      	mov	r0, r8
 800a5de:	47d0      	blx	sl
 800a5e0:	3001      	adds	r0, #1
 800a5e2:	d0ab      	beq.n	800a53c <_printf_i+0x164>
 800a5e4:	6823      	ldr	r3, [r4, #0]
 800a5e6:	079b      	lsls	r3, r3, #30
 800a5e8:	d413      	bmi.n	800a612 <_printf_i+0x23a>
 800a5ea:	68e0      	ldr	r0, [r4, #12]
 800a5ec:	9b03      	ldr	r3, [sp, #12]
 800a5ee:	4298      	cmp	r0, r3
 800a5f0:	bfb8      	it	lt
 800a5f2:	4618      	movlt	r0, r3
 800a5f4:	e7a4      	b.n	800a540 <_printf_i+0x168>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	4632      	mov	r2, r6
 800a5fa:	4649      	mov	r1, r9
 800a5fc:	4640      	mov	r0, r8
 800a5fe:	47d0      	blx	sl
 800a600:	3001      	adds	r0, #1
 800a602:	d09b      	beq.n	800a53c <_printf_i+0x164>
 800a604:	3501      	adds	r5, #1
 800a606:	68e3      	ldr	r3, [r4, #12]
 800a608:	9903      	ldr	r1, [sp, #12]
 800a60a:	1a5b      	subs	r3, r3, r1
 800a60c:	42ab      	cmp	r3, r5
 800a60e:	dcf2      	bgt.n	800a5f6 <_printf_i+0x21e>
 800a610:	e7eb      	b.n	800a5ea <_printf_i+0x212>
 800a612:	2500      	movs	r5, #0
 800a614:	f104 0619 	add.w	r6, r4, #25
 800a618:	e7f5      	b.n	800a606 <_printf_i+0x22e>
 800a61a:	bf00      	nop
 800a61c:	0800b2d5 	.word	0x0800b2d5
 800a620:	0800b2e6 	.word	0x0800b2e6

0800a624 <_sbrk_r>:
 800a624:	b538      	push	{r3, r4, r5, lr}
 800a626:	4d06      	ldr	r5, [pc, #24]	; (800a640 <_sbrk_r+0x1c>)
 800a628:	2300      	movs	r3, #0
 800a62a:	4604      	mov	r4, r0
 800a62c:	4608      	mov	r0, r1
 800a62e:	602b      	str	r3, [r5, #0]
 800a630:	f7f8 f8b0 	bl	8002794 <_sbrk>
 800a634:	1c43      	adds	r3, r0, #1
 800a636:	d102      	bne.n	800a63e <_sbrk_r+0x1a>
 800a638:	682b      	ldr	r3, [r5, #0]
 800a63a:	b103      	cbz	r3, 800a63e <_sbrk_r+0x1a>
 800a63c:	6023      	str	r3, [r4, #0]
 800a63e:	bd38      	pop	{r3, r4, r5, pc}
 800a640:	20000854 	.word	0x20000854

0800a644 <_raise_r>:
 800a644:	291f      	cmp	r1, #31
 800a646:	b538      	push	{r3, r4, r5, lr}
 800a648:	4604      	mov	r4, r0
 800a64a:	460d      	mov	r5, r1
 800a64c:	d904      	bls.n	800a658 <_raise_r+0x14>
 800a64e:	2316      	movs	r3, #22
 800a650:	6003      	str	r3, [r0, #0]
 800a652:	f04f 30ff 	mov.w	r0, #4294967295
 800a656:	bd38      	pop	{r3, r4, r5, pc}
 800a658:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a65a:	b112      	cbz	r2, 800a662 <_raise_r+0x1e>
 800a65c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a660:	b94b      	cbnz	r3, 800a676 <_raise_r+0x32>
 800a662:	4620      	mov	r0, r4
 800a664:	f000 f830 	bl	800a6c8 <_getpid_r>
 800a668:	462a      	mov	r2, r5
 800a66a:	4601      	mov	r1, r0
 800a66c:	4620      	mov	r0, r4
 800a66e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a672:	f000 b817 	b.w	800a6a4 <_kill_r>
 800a676:	2b01      	cmp	r3, #1
 800a678:	d00a      	beq.n	800a690 <_raise_r+0x4c>
 800a67a:	1c59      	adds	r1, r3, #1
 800a67c:	d103      	bne.n	800a686 <_raise_r+0x42>
 800a67e:	2316      	movs	r3, #22
 800a680:	6003      	str	r3, [r0, #0]
 800a682:	2001      	movs	r0, #1
 800a684:	e7e7      	b.n	800a656 <_raise_r+0x12>
 800a686:	2400      	movs	r4, #0
 800a688:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a68c:	4628      	mov	r0, r5
 800a68e:	4798      	blx	r3
 800a690:	2000      	movs	r0, #0
 800a692:	e7e0      	b.n	800a656 <_raise_r+0x12>

0800a694 <raise>:
 800a694:	4b02      	ldr	r3, [pc, #8]	; (800a6a0 <raise+0xc>)
 800a696:	4601      	mov	r1, r0
 800a698:	6818      	ldr	r0, [r3, #0]
 800a69a:	f7ff bfd3 	b.w	800a644 <_raise_r>
 800a69e:	bf00      	nop
 800a6a0:	20000010 	.word	0x20000010

0800a6a4 <_kill_r>:
 800a6a4:	b538      	push	{r3, r4, r5, lr}
 800a6a6:	4d07      	ldr	r5, [pc, #28]	; (800a6c4 <_kill_r+0x20>)
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	4608      	mov	r0, r1
 800a6ae:	4611      	mov	r1, r2
 800a6b0:	602b      	str	r3, [r5, #0]
 800a6b2:	f7f7 ffe7 	bl	8002684 <_kill>
 800a6b6:	1c43      	adds	r3, r0, #1
 800a6b8:	d102      	bne.n	800a6c0 <_kill_r+0x1c>
 800a6ba:	682b      	ldr	r3, [r5, #0]
 800a6bc:	b103      	cbz	r3, 800a6c0 <_kill_r+0x1c>
 800a6be:	6023      	str	r3, [r4, #0]
 800a6c0:	bd38      	pop	{r3, r4, r5, pc}
 800a6c2:	bf00      	nop
 800a6c4:	20000854 	.word	0x20000854

0800a6c8 <_getpid_r>:
 800a6c8:	f7f7 bfd4 	b.w	8002674 <_getpid>

0800a6cc <__swbuf_r>:
 800a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ce:	460e      	mov	r6, r1
 800a6d0:	4614      	mov	r4, r2
 800a6d2:	4605      	mov	r5, r0
 800a6d4:	b118      	cbz	r0, 800a6de <__swbuf_r+0x12>
 800a6d6:	6983      	ldr	r3, [r0, #24]
 800a6d8:	b90b      	cbnz	r3, 800a6de <__swbuf_r+0x12>
 800a6da:	f000 fa33 	bl	800ab44 <__sinit>
 800a6de:	4b21      	ldr	r3, [pc, #132]	; (800a764 <__swbuf_r+0x98>)
 800a6e0:	429c      	cmp	r4, r3
 800a6e2:	d12b      	bne.n	800a73c <__swbuf_r+0x70>
 800a6e4:	686c      	ldr	r4, [r5, #4]
 800a6e6:	69a3      	ldr	r3, [r4, #24]
 800a6e8:	60a3      	str	r3, [r4, #8]
 800a6ea:	89a3      	ldrh	r3, [r4, #12]
 800a6ec:	071a      	lsls	r2, r3, #28
 800a6ee:	d52f      	bpl.n	800a750 <__swbuf_r+0x84>
 800a6f0:	6923      	ldr	r3, [r4, #16]
 800a6f2:	b36b      	cbz	r3, 800a750 <__swbuf_r+0x84>
 800a6f4:	6923      	ldr	r3, [r4, #16]
 800a6f6:	6820      	ldr	r0, [r4, #0]
 800a6f8:	1ac0      	subs	r0, r0, r3
 800a6fa:	6963      	ldr	r3, [r4, #20]
 800a6fc:	b2f6      	uxtb	r6, r6
 800a6fe:	4283      	cmp	r3, r0
 800a700:	4637      	mov	r7, r6
 800a702:	dc04      	bgt.n	800a70e <__swbuf_r+0x42>
 800a704:	4621      	mov	r1, r4
 800a706:	4628      	mov	r0, r5
 800a708:	f000 f988 	bl	800aa1c <_fflush_r>
 800a70c:	bb30      	cbnz	r0, 800a75c <__swbuf_r+0x90>
 800a70e:	68a3      	ldr	r3, [r4, #8]
 800a710:	3b01      	subs	r3, #1
 800a712:	60a3      	str	r3, [r4, #8]
 800a714:	6823      	ldr	r3, [r4, #0]
 800a716:	1c5a      	adds	r2, r3, #1
 800a718:	6022      	str	r2, [r4, #0]
 800a71a:	701e      	strb	r6, [r3, #0]
 800a71c:	6963      	ldr	r3, [r4, #20]
 800a71e:	3001      	adds	r0, #1
 800a720:	4283      	cmp	r3, r0
 800a722:	d004      	beq.n	800a72e <__swbuf_r+0x62>
 800a724:	89a3      	ldrh	r3, [r4, #12]
 800a726:	07db      	lsls	r3, r3, #31
 800a728:	d506      	bpl.n	800a738 <__swbuf_r+0x6c>
 800a72a:	2e0a      	cmp	r6, #10
 800a72c:	d104      	bne.n	800a738 <__swbuf_r+0x6c>
 800a72e:	4621      	mov	r1, r4
 800a730:	4628      	mov	r0, r5
 800a732:	f000 f973 	bl	800aa1c <_fflush_r>
 800a736:	b988      	cbnz	r0, 800a75c <__swbuf_r+0x90>
 800a738:	4638      	mov	r0, r7
 800a73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a73c:	4b0a      	ldr	r3, [pc, #40]	; (800a768 <__swbuf_r+0x9c>)
 800a73e:	429c      	cmp	r4, r3
 800a740:	d101      	bne.n	800a746 <__swbuf_r+0x7a>
 800a742:	68ac      	ldr	r4, [r5, #8]
 800a744:	e7cf      	b.n	800a6e6 <__swbuf_r+0x1a>
 800a746:	4b09      	ldr	r3, [pc, #36]	; (800a76c <__swbuf_r+0xa0>)
 800a748:	429c      	cmp	r4, r3
 800a74a:	bf08      	it	eq
 800a74c:	68ec      	ldreq	r4, [r5, #12]
 800a74e:	e7ca      	b.n	800a6e6 <__swbuf_r+0x1a>
 800a750:	4621      	mov	r1, r4
 800a752:	4628      	mov	r0, r5
 800a754:	f000 f80c 	bl	800a770 <__swsetup_r>
 800a758:	2800      	cmp	r0, #0
 800a75a:	d0cb      	beq.n	800a6f4 <__swbuf_r+0x28>
 800a75c:	f04f 37ff 	mov.w	r7, #4294967295
 800a760:	e7ea      	b.n	800a738 <__swbuf_r+0x6c>
 800a762:	bf00      	nop
 800a764:	0800b318 	.word	0x0800b318
 800a768:	0800b338 	.word	0x0800b338
 800a76c:	0800b2f8 	.word	0x0800b2f8

0800a770 <__swsetup_r>:
 800a770:	4b32      	ldr	r3, [pc, #200]	; (800a83c <__swsetup_r+0xcc>)
 800a772:	b570      	push	{r4, r5, r6, lr}
 800a774:	681d      	ldr	r5, [r3, #0]
 800a776:	4606      	mov	r6, r0
 800a778:	460c      	mov	r4, r1
 800a77a:	b125      	cbz	r5, 800a786 <__swsetup_r+0x16>
 800a77c:	69ab      	ldr	r3, [r5, #24]
 800a77e:	b913      	cbnz	r3, 800a786 <__swsetup_r+0x16>
 800a780:	4628      	mov	r0, r5
 800a782:	f000 f9df 	bl	800ab44 <__sinit>
 800a786:	4b2e      	ldr	r3, [pc, #184]	; (800a840 <__swsetup_r+0xd0>)
 800a788:	429c      	cmp	r4, r3
 800a78a:	d10f      	bne.n	800a7ac <__swsetup_r+0x3c>
 800a78c:	686c      	ldr	r4, [r5, #4]
 800a78e:	89a3      	ldrh	r3, [r4, #12]
 800a790:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a794:	0719      	lsls	r1, r3, #28
 800a796:	d42c      	bmi.n	800a7f2 <__swsetup_r+0x82>
 800a798:	06dd      	lsls	r5, r3, #27
 800a79a:	d411      	bmi.n	800a7c0 <__swsetup_r+0x50>
 800a79c:	2309      	movs	r3, #9
 800a79e:	6033      	str	r3, [r6, #0]
 800a7a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a7a4:	81a3      	strh	r3, [r4, #12]
 800a7a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7aa:	e03e      	b.n	800a82a <__swsetup_r+0xba>
 800a7ac:	4b25      	ldr	r3, [pc, #148]	; (800a844 <__swsetup_r+0xd4>)
 800a7ae:	429c      	cmp	r4, r3
 800a7b0:	d101      	bne.n	800a7b6 <__swsetup_r+0x46>
 800a7b2:	68ac      	ldr	r4, [r5, #8]
 800a7b4:	e7eb      	b.n	800a78e <__swsetup_r+0x1e>
 800a7b6:	4b24      	ldr	r3, [pc, #144]	; (800a848 <__swsetup_r+0xd8>)
 800a7b8:	429c      	cmp	r4, r3
 800a7ba:	bf08      	it	eq
 800a7bc:	68ec      	ldreq	r4, [r5, #12]
 800a7be:	e7e6      	b.n	800a78e <__swsetup_r+0x1e>
 800a7c0:	0758      	lsls	r0, r3, #29
 800a7c2:	d512      	bpl.n	800a7ea <__swsetup_r+0x7a>
 800a7c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7c6:	b141      	cbz	r1, 800a7da <__swsetup_r+0x6a>
 800a7c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7cc:	4299      	cmp	r1, r3
 800a7ce:	d002      	beq.n	800a7d6 <__swsetup_r+0x66>
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	f7ff fb59 	bl	8009e88 <_free_r>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	6363      	str	r3, [r4, #52]	; 0x34
 800a7da:	89a3      	ldrh	r3, [r4, #12]
 800a7dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a7e0:	81a3      	strh	r3, [r4, #12]
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	6063      	str	r3, [r4, #4]
 800a7e6:	6923      	ldr	r3, [r4, #16]
 800a7e8:	6023      	str	r3, [r4, #0]
 800a7ea:	89a3      	ldrh	r3, [r4, #12]
 800a7ec:	f043 0308 	orr.w	r3, r3, #8
 800a7f0:	81a3      	strh	r3, [r4, #12]
 800a7f2:	6923      	ldr	r3, [r4, #16]
 800a7f4:	b94b      	cbnz	r3, 800a80a <__swsetup_r+0x9a>
 800a7f6:	89a3      	ldrh	r3, [r4, #12]
 800a7f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a7fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a800:	d003      	beq.n	800a80a <__swsetup_r+0x9a>
 800a802:	4621      	mov	r1, r4
 800a804:	4630      	mov	r0, r6
 800a806:	f000 fa63 	bl	800acd0 <__smakebuf_r>
 800a80a:	89a0      	ldrh	r0, [r4, #12]
 800a80c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a810:	f010 0301 	ands.w	r3, r0, #1
 800a814:	d00a      	beq.n	800a82c <__swsetup_r+0xbc>
 800a816:	2300      	movs	r3, #0
 800a818:	60a3      	str	r3, [r4, #8]
 800a81a:	6963      	ldr	r3, [r4, #20]
 800a81c:	425b      	negs	r3, r3
 800a81e:	61a3      	str	r3, [r4, #24]
 800a820:	6923      	ldr	r3, [r4, #16]
 800a822:	b943      	cbnz	r3, 800a836 <__swsetup_r+0xc6>
 800a824:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a828:	d1ba      	bne.n	800a7a0 <__swsetup_r+0x30>
 800a82a:	bd70      	pop	{r4, r5, r6, pc}
 800a82c:	0781      	lsls	r1, r0, #30
 800a82e:	bf58      	it	pl
 800a830:	6963      	ldrpl	r3, [r4, #20]
 800a832:	60a3      	str	r3, [r4, #8]
 800a834:	e7f4      	b.n	800a820 <__swsetup_r+0xb0>
 800a836:	2000      	movs	r0, #0
 800a838:	e7f7      	b.n	800a82a <__swsetup_r+0xba>
 800a83a:	bf00      	nop
 800a83c:	20000010 	.word	0x20000010
 800a840:	0800b318 	.word	0x0800b318
 800a844:	0800b338 	.word	0x0800b338
 800a848:	0800b2f8 	.word	0x0800b2f8

0800a84c <__register_exitproc>:
 800a84c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a850:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800a90c <__register_exitproc+0xc0>
 800a854:	4606      	mov	r6, r0
 800a856:	f8d8 0000 	ldr.w	r0, [r8]
 800a85a:	461f      	mov	r7, r3
 800a85c:	460d      	mov	r5, r1
 800a85e:	4691      	mov	r9, r2
 800a860:	f000 fa0e 	bl	800ac80 <__retarget_lock_acquire_recursive>
 800a864:	4b25      	ldr	r3, [pc, #148]	; (800a8fc <__register_exitproc+0xb0>)
 800a866:	681c      	ldr	r4, [r3, #0]
 800a868:	b934      	cbnz	r4, 800a878 <__register_exitproc+0x2c>
 800a86a:	4c25      	ldr	r4, [pc, #148]	; (800a900 <__register_exitproc+0xb4>)
 800a86c:	601c      	str	r4, [r3, #0]
 800a86e:	4b25      	ldr	r3, [pc, #148]	; (800a904 <__register_exitproc+0xb8>)
 800a870:	b113      	cbz	r3, 800a878 <__register_exitproc+0x2c>
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800a878:	6863      	ldr	r3, [r4, #4]
 800a87a:	2b1f      	cmp	r3, #31
 800a87c:	dd07      	ble.n	800a88e <__register_exitproc+0x42>
 800a87e:	f8d8 0000 	ldr.w	r0, [r8]
 800a882:	f000 f9ff 	bl	800ac84 <__retarget_lock_release_recursive>
 800a886:	f04f 30ff 	mov.w	r0, #4294967295
 800a88a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a88e:	b34e      	cbz	r6, 800a8e4 <__register_exitproc+0x98>
 800a890:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800a894:	b988      	cbnz	r0, 800a8ba <__register_exitproc+0x6e>
 800a896:	4b1c      	ldr	r3, [pc, #112]	; (800a908 <__register_exitproc+0xbc>)
 800a898:	b923      	cbnz	r3, 800a8a4 <__register_exitproc+0x58>
 800a89a:	f8d8 0000 	ldr.w	r0, [r8]
 800a89e:	f000 f9f0 	bl	800ac82 <__retarget_lock_release>
 800a8a2:	e7f0      	b.n	800a886 <__register_exitproc+0x3a>
 800a8a4:	f44f 7084 	mov.w	r0, #264	; 0x108
 800a8a8:	f7ff fad6 	bl	8009e58 <malloc>
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	d0f4      	beq.n	800a89a <__register_exitproc+0x4e>
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800a8b6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800a8ba:	6863      	ldr	r3, [r4, #4]
 800a8bc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	409a      	lsls	r2, r3
 800a8c4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800a8c8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800a8d2:	2e02      	cmp	r6, #2
 800a8d4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 800a8d8:	bf02      	ittt	eq
 800a8da:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800a8de:	4313      	orreq	r3, r2
 800a8e0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800a8e4:	6863      	ldr	r3, [r4, #4]
 800a8e6:	f8d8 0000 	ldr.w	r0, [r8]
 800a8ea:	1c5a      	adds	r2, r3, #1
 800a8ec:	3302      	adds	r3, #2
 800a8ee:	6062      	str	r2, [r4, #4]
 800a8f0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800a8f4:	f000 f9c6 	bl	800ac84 <__retarget_lock_release_recursive>
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	e7c6      	b.n	800a88a <__register_exitproc+0x3e>
 800a8fc:	2000084c 	.word	0x2000084c
 800a900:	200007c0 	.word	0x200007c0
 800a904:	00000000 	.word	0x00000000
 800a908:	08009e59 	.word	0x08009e59
 800a90c:	20000074 	.word	0x20000074

0800a910 <__sflush_r>:
 800a910:	898a      	ldrh	r2, [r1, #12]
 800a912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a916:	4605      	mov	r5, r0
 800a918:	0710      	lsls	r0, r2, #28
 800a91a:	460c      	mov	r4, r1
 800a91c:	d458      	bmi.n	800a9d0 <__sflush_r+0xc0>
 800a91e:	684b      	ldr	r3, [r1, #4]
 800a920:	2b00      	cmp	r3, #0
 800a922:	dc05      	bgt.n	800a930 <__sflush_r+0x20>
 800a924:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a926:	2b00      	cmp	r3, #0
 800a928:	dc02      	bgt.n	800a930 <__sflush_r+0x20>
 800a92a:	2000      	movs	r0, #0
 800a92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a932:	2e00      	cmp	r6, #0
 800a934:	d0f9      	beq.n	800a92a <__sflush_r+0x1a>
 800a936:	2300      	movs	r3, #0
 800a938:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a93c:	682f      	ldr	r7, [r5, #0]
 800a93e:	602b      	str	r3, [r5, #0]
 800a940:	d032      	beq.n	800a9a8 <__sflush_r+0x98>
 800a942:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a944:	89a3      	ldrh	r3, [r4, #12]
 800a946:	075a      	lsls	r2, r3, #29
 800a948:	d505      	bpl.n	800a956 <__sflush_r+0x46>
 800a94a:	6863      	ldr	r3, [r4, #4]
 800a94c:	1ac0      	subs	r0, r0, r3
 800a94e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a950:	b10b      	cbz	r3, 800a956 <__sflush_r+0x46>
 800a952:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a954:	1ac0      	subs	r0, r0, r3
 800a956:	2300      	movs	r3, #0
 800a958:	4602      	mov	r2, r0
 800a95a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a95c:	6a21      	ldr	r1, [r4, #32]
 800a95e:	4628      	mov	r0, r5
 800a960:	47b0      	blx	r6
 800a962:	1c43      	adds	r3, r0, #1
 800a964:	89a3      	ldrh	r3, [r4, #12]
 800a966:	d106      	bne.n	800a976 <__sflush_r+0x66>
 800a968:	6829      	ldr	r1, [r5, #0]
 800a96a:	291d      	cmp	r1, #29
 800a96c:	d82c      	bhi.n	800a9c8 <__sflush_r+0xb8>
 800a96e:	4a2a      	ldr	r2, [pc, #168]	; (800aa18 <__sflush_r+0x108>)
 800a970:	40ca      	lsrs	r2, r1
 800a972:	07d6      	lsls	r6, r2, #31
 800a974:	d528      	bpl.n	800a9c8 <__sflush_r+0xb8>
 800a976:	2200      	movs	r2, #0
 800a978:	6062      	str	r2, [r4, #4]
 800a97a:	04d9      	lsls	r1, r3, #19
 800a97c:	6922      	ldr	r2, [r4, #16]
 800a97e:	6022      	str	r2, [r4, #0]
 800a980:	d504      	bpl.n	800a98c <__sflush_r+0x7c>
 800a982:	1c42      	adds	r2, r0, #1
 800a984:	d101      	bne.n	800a98a <__sflush_r+0x7a>
 800a986:	682b      	ldr	r3, [r5, #0]
 800a988:	b903      	cbnz	r3, 800a98c <__sflush_r+0x7c>
 800a98a:	6560      	str	r0, [r4, #84]	; 0x54
 800a98c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a98e:	602f      	str	r7, [r5, #0]
 800a990:	2900      	cmp	r1, #0
 800a992:	d0ca      	beq.n	800a92a <__sflush_r+0x1a>
 800a994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a998:	4299      	cmp	r1, r3
 800a99a:	d002      	beq.n	800a9a2 <__sflush_r+0x92>
 800a99c:	4628      	mov	r0, r5
 800a99e:	f7ff fa73 	bl	8009e88 <_free_r>
 800a9a2:	2000      	movs	r0, #0
 800a9a4:	6360      	str	r0, [r4, #52]	; 0x34
 800a9a6:	e7c1      	b.n	800a92c <__sflush_r+0x1c>
 800a9a8:	6a21      	ldr	r1, [r4, #32]
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	47b0      	blx	r6
 800a9b0:	1c41      	adds	r1, r0, #1
 800a9b2:	d1c7      	bne.n	800a944 <__sflush_r+0x34>
 800a9b4:	682b      	ldr	r3, [r5, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d0c4      	beq.n	800a944 <__sflush_r+0x34>
 800a9ba:	2b1d      	cmp	r3, #29
 800a9bc:	d001      	beq.n	800a9c2 <__sflush_r+0xb2>
 800a9be:	2b16      	cmp	r3, #22
 800a9c0:	d101      	bne.n	800a9c6 <__sflush_r+0xb6>
 800a9c2:	602f      	str	r7, [r5, #0]
 800a9c4:	e7b1      	b.n	800a92a <__sflush_r+0x1a>
 800a9c6:	89a3      	ldrh	r3, [r4, #12]
 800a9c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9cc:	81a3      	strh	r3, [r4, #12]
 800a9ce:	e7ad      	b.n	800a92c <__sflush_r+0x1c>
 800a9d0:	690f      	ldr	r7, [r1, #16]
 800a9d2:	2f00      	cmp	r7, #0
 800a9d4:	d0a9      	beq.n	800a92a <__sflush_r+0x1a>
 800a9d6:	0793      	lsls	r3, r2, #30
 800a9d8:	680e      	ldr	r6, [r1, #0]
 800a9da:	bf08      	it	eq
 800a9dc:	694b      	ldreq	r3, [r1, #20]
 800a9de:	600f      	str	r7, [r1, #0]
 800a9e0:	bf18      	it	ne
 800a9e2:	2300      	movne	r3, #0
 800a9e4:	eba6 0807 	sub.w	r8, r6, r7
 800a9e8:	608b      	str	r3, [r1, #8]
 800a9ea:	f1b8 0f00 	cmp.w	r8, #0
 800a9ee:	dd9c      	ble.n	800a92a <__sflush_r+0x1a>
 800a9f0:	6a21      	ldr	r1, [r4, #32]
 800a9f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a9f4:	4643      	mov	r3, r8
 800a9f6:	463a      	mov	r2, r7
 800a9f8:	4628      	mov	r0, r5
 800a9fa:	47b0      	blx	r6
 800a9fc:	2800      	cmp	r0, #0
 800a9fe:	dc06      	bgt.n	800aa0e <__sflush_r+0xfe>
 800aa00:	89a3      	ldrh	r3, [r4, #12]
 800aa02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa06:	81a3      	strh	r3, [r4, #12]
 800aa08:	f04f 30ff 	mov.w	r0, #4294967295
 800aa0c:	e78e      	b.n	800a92c <__sflush_r+0x1c>
 800aa0e:	4407      	add	r7, r0
 800aa10:	eba8 0800 	sub.w	r8, r8, r0
 800aa14:	e7e9      	b.n	800a9ea <__sflush_r+0xda>
 800aa16:	bf00      	nop
 800aa18:	20400001 	.word	0x20400001

0800aa1c <_fflush_r>:
 800aa1c:	b538      	push	{r3, r4, r5, lr}
 800aa1e:	690b      	ldr	r3, [r1, #16]
 800aa20:	4605      	mov	r5, r0
 800aa22:	460c      	mov	r4, r1
 800aa24:	b913      	cbnz	r3, 800aa2c <_fflush_r+0x10>
 800aa26:	2500      	movs	r5, #0
 800aa28:	4628      	mov	r0, r5
 800aa2a:	bd38      	pop	{r3, r4, r5, pc}
 800aa2c:	b118      	cbz	r0, 800aa36 <_fflush_r+0x1a>
 800aa2e:	6983      	ldr	r3, [r0, #24]
 800aa30:	b90b      	cbnz	r3, 800aa36 <_fflush_r+0x1a>
 800aa32:	f000 f887 	bl	800ab44 <__sinit>
 800aa36:	4b14      	ldr	r3, [pc, #80]	; (800aa88 <_fflush_r+0x6c>)
 800aa38:	429c      	cmp	r4, r3
 800aa3a:	d11b      	bne.n	800aa74 <_fflush_r+0x58>
 800aa3c:	686c      	ldr	r4, [r5, #4]
 800aa3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d0ef      	beq.n	800aa26 <_fflush_r+0xa>
 800aa46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa48:	07d0      	lsls	r0, r2, #31
 800aa4a:	d404      	bmi.n	800aa56 <_fflush_r+0x3a>
 800aa4c:	0599      	lsls	r1, r3, #22
 800aa4e:	d402      	bmi.n	800aa56 <_fflush_r+0x3a>
 800aa50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa52:	f000 f915 	bl	800ac80 <__retarget_lock_acquire_recursive>
 800aa56:	4628      	mov	r0, r5
 800aa58:	4621      	mov	r1, r4
 800aa5a:	f7ff ff59 	bl	800a910 <__sflush_r>
 800aa5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa60:	07da      	lsls	r2, r3, #31
 800aa62:	4605      	mov	r5, r0
 800aa64:	d4e0      	bmi.n	800aa28 <_fflush_r+0xc>
 800aa66:	89a3      	ldrh	r3, [r4, #12]
 800aa68:	059b      	lsls	r3, r3, #22
 800aa6a:	d4dd      	bmi.n	800aa28 <_fflush_r+0xc>
 800aa6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa6e:	f000 f909 	bl	800ac84 <__retarget_lock_release_recursive>
 800aa72:	e7d9      	b.n	800aa28 <_fflush_r+0xc>
 800aa74:	4b05      	ldr	r3, [pc, #20]	; (800aa8c <_fflush_r+0x70>)
 800aa76:	429c      	cmp	r4, r3
 800aa78:	d101      	bne.n	800aa7e <_fflush_r+0x62>
 800aa7a:	68ac      	ldr	r4, [r5, #8]
 800aa7c:	e7df      	b.n	800aa3e <_fflush_r+0x22>
 800aa7e:	4b04      	ldr	r3, [pc, #16]	; (800aa90 <_fflush_r+0x74>)
 800aa80:	429c      	cmp	r4, r3
 800aa82:	bf08      	it	eq
 800aa84:	68ec      	ldreq	r4, [r5, #12]
 800aa86:	e7da      	b.n	800aa3e <_fflush_r+0x22>
 800aa88:	0800b318 	.word	0x0800b318
 800aa8c:	0800b338 	.word	0x0800b338
 800aa90:	0800b2f8 	.word	0x0800b2f8

0800aa94 <std>:
 800aa94:	2300      	movs	r3, #0
 800aa96:	b510      	push	{r4, lr}
 800aa98:	4604      	mov	r4, r0
 800aa9a:	e9c0 3300 	strd	r3, r3, [r0]
 800aa9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aaa2:	6083      	str	r3, [r0, #8]
 800aaa4:	8181      	strh	r1, [r0, #12]
 800aaa6:	6643      	str	r3, [r0, #100]	; 0x64
 800aaa8:	81c2      	strh	r2, [r0, #14]
 800aaaa:	6183      	str	r3, [r0, #24]
 800aaac:	4619      	mov	r1, r3
 800aaae:	2208      	movs	r2, #8
 800aab0:	305c      	adds	r0, #92	; 0x5c
 800aab2:	f7ff f9e1 	bl	8009e78 <memset>
 800aab6:	4b05      	ldr	r3, [pc, #20]	; (800aacc <std+0x38>)
 800aab8:	6263      	str	r3, [r4, #36]	; 0x24
 800aaba:	4b05      	ldr	r3, [pc, #20]	; (800aad0 <std+0x3c>)
 800aabc:	62a3      	str	r3, [r4, #40]	; 0x28
 800aabe:	4b05      	ldr	r3, [pc, #20]	; (800aad4 <std+0x40>)
 800aac0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aac2:	4b05      	ldr	r3, [pc, #20]	; (800aad8 <std+0x44>)
 800aac4:	6224      	str	r4, [r4, #32]
 800aac6:	6323      	str	r3, [r4, #48]	; 0x30
 800aac8:	bd10      	pop	{r4, pc}
 800aaca:	bf00      	nop
 800aacc:	0800ad69 	.word	0x0800ad69
 800aad0:	0800ad8b 	.word	0x0800ad8b
 800aad4:	0800adc3 	.word	0x0800adc3
 800aad8:	0800ade7 	.word	0x0800ade7

0800aadc <_cleanup_r>:
 800aadc:	4901      	ldr	r1, [pc, #4]	; (800aae4 <_cleanup_r+0x8>)
 800aade:	f000 b8af 	b.w	800ac40 <_fwalk_reent>
 800aae2:	bf00      	nop
 800aae4:	0800aa1d 	.word	0x0800aa1d

0800aae8 <__sfmoreglue>:
 800aae8:	b570      	push	{r4, r5, r6, lr}
 800aaea:	2268      	movs	r2, #104	; 0x68
 800aaec:	1e4d      	subs	r5, r1, #1
 800aaee:	4355      	muls	r5, r2
 800aaf0:	460e      	mov	r6, r1
 800aaf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aaf6:	f7ff fa33 	bl	8009f60 <_malloc_r>
 800aafa:	4604      	mov	r4, r0
 800aafc:	b140      	cbz	r0, 800ab10 <__sfmoreglue+0x28>
 800aafe:	2100      	movs	r1, #0
 800ab00:	e9c0 1600 	strd	r1, r6, [r0]
 800ab04:	300c      	adds	r0, #12
 800ab06:	60a0      	str	r0, [r4, #8]
 800ab08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab0c:	f7ff f9b4 	bl	8009e78 <memset>
 800ab10:	4620      	mov	r0, r4
 800ab12:	bd70      	pop	{r4, r5, r6, pc}

0800ab14 <__sfp_lock_acquire>:
 800ab14:	4801      	ldr	r0, [pc, #4]	; (800ab1c <__sfp_lock_acquire+0x8>)
 800ab16:	f000 b8b3 	b.w	800ac80 <__retarget_lock_acquire_recursive>
 800ab1a:	bf00      	nop
 800ab1c:	20000852 	.word	0x20000852

0800ab20 <__sfp_lock_release>:
 800ab20:	4801      	ldr	r0, [pc, #4]	; (800ab28 <__sfp_lock_release+0x8>)
 800ab22:	f000 b8af 	b.w	800ac84 <__retarget_lock_release_recursive>
 800ab26:	bf00      	nop
 800ab28:	20000852 	.word	0x20000852

0800ab2c <__sinit_lock_acquire>:
 800ab2c:	4801      	ldr	r0, [pc, #4]	; (800ab34 <__sinit_lock_acquire+0x8>)
 800ab2e:	f000 b8a7 	b.w	800ac80 <__retarget_lock_acquire_recursive>
 800ab32:	bf00      	nop
 800ab34:	20000853 	.word	0x20000853

0800ab38 <__sinit_lock_release>:
 800ab38:	4801      	ldr	r0, [pc, #4]	; (800ab40 <__sinit_lock_release+0x8>)
 800ab3a:	f000 b8a3 	b.w	800ac84 <__retarget_lock_release_recursive>
 800ab3e:	bf00      	nop
 800ab40:	20000853 	.word	0x20000853

0800ab44 <__sinit>:
 800ab44:	b510      	push	{r4, lr}
 800ab46:	4604      	mov	r4, r0
 800ab48:	f7ff fff0 	bl	800ab2c <__sinit_lock_acquire>
 800ab4c:	69a3      	ldr	r3, [r4, #24]
 800ab4e:	b11b      	cbz	r3, 800ab58 <__sinit+0x14>
 800ab50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab54:	f7ff bff0 	b.w	800ab38 <__sinit_lock_release>
 800ab58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab5c:	6523      	str	r3, [r4, #80]	; 0x50
 800ab5e:	4b13      	ldr	r3, [pc, #76]	; (800abac <__sinit+0x68>)
 800ab60:	4a13      	ldr	r2, [pc, #76]	; (800abb0 <__sinit+0x6c>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab66:	42a3      	cmp	r3, r4
 800ab68:	bf04      	itt	eq
 800ab6a:	2301      	moveq	r3, #1
 800ab6c:	61a3      	streq	r3, [r4, #24]
 800ab6e:	4620      	mov	r0, r4
 800ab70:	f000 f820 	bl	800abb4 <__sfp>
 800ab74:	6060      	str	r0, [r4, #4]
 800ab76:	4620      	mov	r0, r4
 800ab78:	f000 f81c 	bl	800abb4 <__sfp>
 800ab7c:	60a0      	str	r0, [r4, #8]
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f000 f818 	bl	800abb4 <__sfp>
 800ab84:	2200      	movs	r2, #0
 800ab86:	60e0      	str	r0, [r4, #12]
 800ab88:	2104      	movs	r1, #4
 800ab8a:	6860      	ldr	r0, [r4, #4]
 800ab8c:	f7ff ff82 	bl	800aa94 <std>
 800ab90:	68a0      	ldr	r0, [r4, #8]
 800ab92:	2201      	movs	r2, #1
 800ab94:	2109      	movs	r1, #9
 800ab96:	f7ff ff7d 	bl	800aa94 <std>
 800ab9a:	68e0      	ldr	r0, [r4, #12]
 800ab9c:	2202      	movs	r2, #2
 800ab9e:	2112      	movs	r1, #18
 800aba0:	f7ff ff78 	bl	800aa94 <std>
 800aba4:	2301      	movs	r3, #1
 800aba6:	61a3      	str	r3, [r4, #24]
 800aba8:	e7d2      	b.n	800ab50 <__sinit+0xc>
 800abaa:	bf00      	nop
 800abac:	0800b2c0 	.word	0x0800b2c0
 800abb0:	0800aadd 	.word	0x0800aadd

0800abb4 <__sfp>:
 800abb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb6:	4607      	mov	r7, r0
 800abb8:	f7ff ffac 	bl	800ab14 <__sfp_lock_acquire>
 800abbc:	4b1e      	ldr	r3, [pc, #120]	; (800ac38 <__sfp+0x84>)
 800abbe:	681e      	ldr	r6, [r3, #0]
 800abc0:	69b3      	ldr	r3, [r6, #24]
 800abc2:	b913      	cbnz	r3, 800abca <__sfp+0x16>
 800abc4:	4630      	mov	r0, r6
 800abc6:	f7ff ffbd 	bl	800ab44 <__sinit>
 800abca:	3648      	adds	r6, #72	; 0x48
 800abcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800abd0:	3b01      	subs	r3, #1
 800abd2:	d503      	bpl.n	800abdc <__sfp+0x28>
 800abd4:	6833      	ldr	r3, [r6, #0]
 800abd6:	b30b      	cbz	r3, 800ac1c <__sfp+0x68>
 800abd8:	6836      	ldr	r6, [r6, #0]
 800abda:	e7f7      	b.n	800abcc <__sfp+0x18>
 800abdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800abe0:	b9d5      	cbnz	r5, 800ac18 <__sfp+0x64>
 800abe2:	4b16      	ldr	r3, [pc, #88]	; (800ac3c <__sfp+0x88>)
 800abe4:	60e3      	str	r3, [r4, #12]
 800abe6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800abea:	6665      	str	r5, [r4, #100]	; 0x64
 800abec:	f000 f847 	bl	800ac7e <__retarget_lock_init_recursive>
 800abf0:	f7ff ff96 	bl	800ab20 <__sfp_lock_release>
 800abf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800abf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800abfc:	6025      	str	r5, [r4, #0]
 800abfe:	61a5      	str	r5, [r4, #24]
 800ac00:	2208      	movs	r2, #8
 800ac02:	4629      	mov	r1, r5
 800ac04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac08:	f7ff f936 	bl	8009e78 <memset>
 800ac0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac14:	4620      	mov	r0, r4
 800ac16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac18:	3468      	adds	r4, #104	; 0x68
 800ac1a:	e7d9      	b.n	800abd0 <__sfp+0x1c>
 800ac1c:	2104      	movs	r1, #4
 800ac1e:	4638      	mov	r0, r7
 800ac20:	f7ff ff62 	bl	800aae8 <__sfmoreglue>
 800ac24:	4604      	mov	r4, r0
 800ac26:	6030      	str	r0, [r6, #0]
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	d1d5      	bne.n	800abd8 <__sfp+0x24>
 800ac2c:	f7ff ff78 	bl	800ab20 <__sfp_lock_release>
 800ac30:	230c      	movs	r3, #12
 800ac32:	603b      	str	r3, [r7, #0]
 800ac34:	e7ee      	b.n	800ac14 <__sfp+0x60>
 800ac36:	bf00      	nop
 800ac38:	0800b2c0 	.word	0x0800b2c0
 800ac3c:	ffff0001 	.word	0xffff0001

0800ac40 <_fwalk_reent>:
 800ac40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac44:	4606      	mov	r6, r0
 800ac46:	4688      	mov	r8, r1
 800ac48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac4c:	2700      	movs	r7, #0
 800ac4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac52:	f1b9 0901 	subs.w	r9, r9, #1
 800ac56:	d505      	bpl.n	800ac64 <_fwalk_reent+0x24>
 800ac58:	6824      	ldr	r4, [r4, #0]
 800ac5a:	2c00      	cmp	r4, #0
 800ac5c:	d1f7      	bne.n	800ac4e <_fwalk_reent+0xe>
 800ac5e:	4638      	mov	r0, r7
 800ac60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac64:	89ab      	ldrh	r3, [r5, #12]
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d907      	bls.n	800ac7a <_fwalk_reent+0x3a>
 800ac6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac6e:	3301      	adds	r3, #1
 800ac70:	d003      	beq.n	800ac7a <_fwalk_reent+0x3a>
 800ac72:	4629      	mov	r1, r5
 800ac74:	4630      	mov	r0, r6
 800ac76:	47c0      	blx	r8
 800ac78:	4307      	orrs	r7, r0
 800ac7a:	3568      	adds	r5, #104	; 0x68
 800ac7c:	e7e9      	b.n	800ac52 <_fwalk_reent+0x12>

0800ac7e <__retarget_lock_init_recursive>:
 800ac7e:	4770      	bx	lr

0800ac80 <__retarget_lock_acquire_recursive>:
 800ac80:	4770      	bx	lr

0800ac82 <__retarget_lock_release>:
 800ac82:	4770      	bx	lr

0800ac84 <__retarget_lock_release_recursive>:
 800ac84:	4770      	bx	lr

0800ac86 <__swhatbuf_r>:
 800ac86:	b570      	push	{r4, r5, r6, lr}
 800ac88:	460e      	mov	r6, r1
 800ac8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac8e:	2900      	cmp	r1, #0
 800ac90:	b096      	sub	sp, #88	; 0x58
 800ac92:	4614      	mov	r4, r2
 800ac94:	461d      	mov	r5, r3
 800ac96:	da08      	bge.n	800acaa <__swhatbuf_r+0x24>
 800ac98:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	602a      	str	r2, [r5, #0]
 800aca0:	061a      	lsls	r2, r3, #24
 800aca2:	d410      	bmi.n	800acc6 <__swhatbuf_r+0x40>
 800aca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aca8:	e00e      	b.n	800acc8 <__swhatbuf_r+0x42>
 800acaa:	466a      	mov	r2, sp
 800acac:	f000 f8c2 	bl	800ae34 <_fstat_r>
 800acb0:	2800      	cmp	r0, #0
 800acb2:	dbf1      	blt.n	800ac98 <__swhatbuf_r+0x12>
 800acb4:	9a01      	ldr	r2, [sp, #4]
 800acb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800acba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800acbe:	425a      	negs	r2, r3
 800acc0:	415a      	adcs	r2, r3
 800acc2:	602a      	str	r2, [r5, #0]
 800acc4:	e7ee      	b.n	800aca4 <__swhatbuf_r+0x1e>
 800acc6:	2340      	movs	r3, #64	; 0x40
 800acc8:	2000      	movs	r0, #0
 800acca:	6023      	str	r3, [r4, #0]
 800accc:	b016      	add	sp, #88	; 0x58
 800acce:	bd70      	pop	{r4, r5, r6, pc}

0800acd0 <__smakebuf_r>:
 800acd0:	898b      	ldrh	r3, [r1, #12]
 800acd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800acd4:	079d      	lsls	r5, r3, #30
 800acd6:	4606      	mov	r6, r0
 800acd8:	460c      	mov	r4, r1
 800acda:	d507      	bpl.n	800acec <__smakebuf_r+0x1c>
 800acdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ace0:	6023      	str	r3, [r4, #0]
 800ace2:	6123      	str	r3, [r4, #16]
 800ace4:	2301      	movs	r3, #1
 800ace6:	6163      	str	r3, [r4, #20]
 800ace8:	b002      	add	sp, #8
 800acea:	bd70      	pop	{r4, r5, r6, pc}
 800acec:	ab01      	add	r3, sp, #4
 800acee:	466a      	mov	r2, sp
 800acf0:	f7ff ffc9 	bl	800ac86 <__swhatbuf_r>
 800acf4:	9900      	ldr	r1, [sp, #0]
 800acf6:	4605      	mov	r5, r0
 800acf8:	4630      	mov	r0, r6
 800acfa:	f7ff f931 	bl	8009f60 <_malloc_r>
 800acfe:	b948      	cbnz	r0, 800ad14 <__smakebuf_r+0x44>
 800ad00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad04:	059a      	lsls	r2, r3, #22
 800ad06:	d4ef      	bmi.n	800ace8 <__smakebuf_r+0x18>
 800ad08:	f023 0303 	bic.w	r3, r3, #3
 800ad0c:	f043 0302 	orr.w	r3, r3, #2
 800ad10:	81a3      	strh	r3, [r4, #12]
 800ad12:	e7e3      	b.n	800acdc <__smakebuf_r+0xc>
 800ad14:	4b0d      	ldr	r3, [pc, #52]	; (800ad4c <__smakebuf_r+0x7c>)
 800ad16:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad18:	89a3      	ldrh	r3, [r4, #12]
 800ad1a:	6020      	str	r0, [r4, #0]
 800ad1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad20:	81a3      	strh	r3, [r4, #12]
 800ad22:	9b00      	ldr	r3, [sp, #0]
 800ad24:	6163      	str	r3, [r4, #20]
 800ad26:	9b01      	ldr	r3, [sp, #4]
 800ad28:	6120      	str	r0, [r4, #16]
 800ad2a:	b15b      	cbz	r3, 800ad44 <__smakebuf_r+0x74>
 800ad2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad30:	4630      	mov	r0, r6
 800ad32:	f000 f891 	bl	800ae58 <_isatty_r>
 800ad36:	b128      	cbz	r0, 800ad44 <__smakebuf_r+0x74>
 800ad38:	89a3      	ldrh	r3, [r4, #12]
 800ad3a:	f023 0303 	bic.w	r3, r3, #3
 800ad3e:	f043 0301 	orr.w	r3, r3, #1
 800ad42:	81a3      	strh	r3, [r4, #12]
 800ad44:	89a0      	ldrh	r0, [r4, #12]
 800ad46:	4305      	orrs	r5, r0
 800ad48:	81a5      	strh	r5, [r4, #12]
 800ad4a:	e7cd      	b.n	800ace8 <__smakebuf_r+0x18>
 800ad4c:	0800aadd 	.word	0x0800aadd

0800ad50 <__malloc_lock>:
 800ad50:	4801      	ldr	r0, [pc, #4]	; (800ad58 <__malloc_lock+0x8>)
 800ad52:	f7ff bf95 	b.w	800ac80 <__retarget_lock_acquire_recursive>
 800ad56:	bf00      	nop
 800ad58:	20000851 	.word	0x20000851

0800ad5c <__malloc_unlock>:
 800ad5c:	4801      	ldr	r0, [pc, #4]	; (800ad64 <__malloc_unlock+0x8>)
 800ad5e:	f7ff bf91 	b.w	800ac84 <__retarget_lock_release_recursive>
 800ad62:	bf00      	nop
 800ad64:	20000851 	.word	0x20000851

0800ad68 <__sread>:
 800ad68:	b510      	push	{r4, lr}
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad70:	f000 f894 	bl	800ae9c <_read_r>
 800ad74:	2800      	cmp	r0, #0
 800ad76:	bfab      	itete	ge
 800ad78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad7a:	89a3      	ldrhlt	r3, [r4, #12]
 800ad7c:	181b      	addge	r3, r3, r0
 800ad7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad82:	bfac      	ite	ge
 800ad84:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad86:	81a3      	strhlt	r3, [r4, #12]
 800ad88:	bd10      	pop	{r4, pc}

0800ad8a <__swrite>:
 800ad8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad8e:	461f      	mov	r7, r3
 800ad90:	898b      	ldrh	r3, [r1, #12]
 800ad92:	05db      	lsls	r3, r3, #23
 800ad94:	4605      	mov	r5, r0
 800ad96:	460c      	mov	r4, r1
 800ad98:	4616      	mov	r6, r2
 800ad9a:	d505      	bpl.n	800ada8 <__swrite+0x1e>
 800ad9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ada0:	2302      	movs	r3, #2
 800ada2:	2200      	movs	r2, #0
 800ada4:	f000 f868 	bl	800ae78 <_lseek_r>
 800ada8:	89a3      	ldrh	r3, [r4, #12]
 800adaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adb2:	81a3      	strh	r3, [r4, #12]
 800adb4:	4632      	mov	r2, r6
 800adb6:	463b      	mov	r3, r7
 800adb8:	4628      	mov	r0, r5
 800adba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adbe:	f000 b817 	b.w	800adf0 <_write_r>

0800adc2 <__sseek>:
 800adc2:	b510      	push	{r4, lr}
 800adc4:	460c      	mov	r4, r1
 800adc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adca:	f000 f855 	bl	800ae78 <_lseek_r>
 800adce:	1c43      	adds	r3, r0, #1
 800add0:	89a3      	ldrh	r3, [r4, #12]
 800add2:	bf15      	itete	ne
 800add4:	6560      	strne	r0, [r4, #84]	; 0x54
 800add6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800adda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800adde:	81a3      	strheq	r3, [r4, #12]
 800ade0:	bf18      	it	ne
 800ade2:	81a3      	strhne	r3, [r4, #12]
 800ade4:	bd10      	pop	{r4, pc}

0800ade6 <__sclose>:
 800ade6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adea:	f000 b813 	b.w	800ae14 <_close_r>
	...

0800adf0 <_write_r>:
 800adf0:	b538      	push	{r3, r4, r5, lr}
 800adf2:	4d07      	ldr	r5, [pc, #28]	; (800ae10 <_write_r+0x20>)
 800adf4:	4604      	mov	r4, r0
 800adf6:	4608      	mov	r0, r1
 800adf8:	4611      	mov	r1, r2
 800adfa:	2200      	movs	r2, #0
 800adfc:	602a      	str	r2, [r5, #0]
 800adfe:	461a      	mov	r2, r3
 800ae00:	f7f7 fc77 	bl	80026f2 <_write>
 800ae04:	1c43      	adds	r3, r0, #1
 800ae06:	d102      	bne.n	800ae0e <_write_r+0x1e>
 800ae08:	682b      	ldr	r3, [r5, #0]
 800ae0a:	b103      	cbz	r3, 800ae0e <_write_r+0x1e>
 800ae0c:	6023      	str	r3, [r4, #0]
 800ae0e:	bd38      	pop	{r3, r4, r5, pc}
 800ae10:	20000854 	.word	0x20000854

0800ae14 <_close_r>:
 800ae14:	b538      	push	{r3, r4, r5, lr}
 800ae16:	4d06      	ldr	r5, [pc, #24]	; (800ae30 <_close_r+0x1c>)
 800ae18:	2300      	movs	r3, #0
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	4608      	mov	r0, r1
 800ae1e:	602b      	str	r3, [r5, #0]
 800ae20:	f7f7 fc83 	bl	800272a <_close>
 800ae24:	1c43      	adds	r3, r0, #1
 800ae26:	d102      	bne.n	800ae2e <_close_r+0x1a>
 800ae28:	682b      	ldr	r3, [r5, #0]
 800ae2a:	b103      	cbz	r3, 800ae2e <_close_r+0x1a>
 800ae2c:	6023      	str	r3, [r4, #0]
 800ae2e:	bd38      	pop	{r3, r4, r5, pc}
 800ae30:	20000854 	.word	0x20000854

0800ae34 <_fstat_r>:
 800ae34:	b538      	push	{r3, r4, r5, lr}
 800ae36:	4d07      	ldr	r5, [pc, #28]	; (800ae54 <_fstat_r+0x20>)
 800ae38:	2300      	movs	r3, #0
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	4608      	mov	r0, r1
 800ae3e:	4611      	mov	r1, r2
 800ae40:	602b      	str	r3, [r5, #0]
 800ae42:	f7f7 fc7e 	bl	8002742 <_fstat>
 800ae46:	1c43      	adds	r3, r0, #1
 800ae48:	d102      	bne.n	800ae50 <_fstat_r+0x1c>
 800ae4a:	682b      	ldr	r3, [r5, #0]
 800ae4c:	b103      	cbz	r3, 800ae50 <_fstat_r+0x1c>
 800ae4e:	6023      	str	r3, [r4, #0]
 800ae50:	bd38      	pop	{r3, r4, r5, pc}
 800ae52:	bf00      	nop
 800ae54:	20000854 	.word	0x20000854

0800ae58 <_isatty_r>:
 800ae58:	b538      	push	{r3, r4, r5, lr}
 800ae5a:	4d06      	ldr	r5, [pc, #24]	; (800ae74 <_isatty_r+0x1c>)
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	4604      	mov	r4, r0
 800ae60:	4608      	mov	r0, r1
 800ae62:	602b      	str	r3, [r5, #0]
 800ae64:	f7f7 fc7d 	bl	8002762 <_isatty>
 800ae68:	1c43      	adds	r3, r0, #1
 800ae6a:	d102      	bne.n	800ae72 <_isatty_r+0x1a>
 800ae6c:	682b      	ldr	r3, [r5, #0]
 800ae6e:	b103      	cbz	r3, 800ae72 <_isatty_r+0x1a>
 800ae70:	6023      	str	r3, [r4, #0]
 800ae72:	bd38      	pop	{r3, r4, r5, pc}
 800ae74:	20000854 	.word	0x20000854

0800ae78 <_lseek_r>:
 800ae78:	b538      	push	{r3, r4, r5, lr}
 800ae7a:	4d07      	ldr	r5, [pc, #28]	; (800ae98 <_lseek_r+0x20>)
 800ae7c:	4604      	mov	r4, r0
 800ae7e:	4608      	mov	r0, r1
 800ae80:	4611      	mov	r1, r2
 800ae82:	2200      	movs	r2, #0
 800ae84:	602a      	str	r2, [r5, #0]
 800ae86:	461a      	mov	r2, r3
 800ae88:	f7f7 fc76 	bl	8002778 <_lseek>
 800ae8c:	1c43      	adds	r3, r0, #1
 800ae8e:	d102      	bne.n	800ae96 <_lseek_r+0x1e>
 800ae90:	682b      	ldr	r3, [r5, #0]
 800ae92:	b103      	cbz	r3, 800ae96 <_lseek_r+0x1e>
 800ae94:	6023      	str	r3, [r4, #0]
 800ae96:	bd38      	pop	{r3, r4, r5, pc}
 800ae98:	20000854 	.word	0x20000854

0800ae9c <_read_r>:
 800ae9c:	b538      	push	{r3, r4, r5, lr}
 800ae9e:	4d07      	ldr	r5, [pc, #28]	; (800aebc <_read_r+0x20>)
 800aea0:	4604      	mov	r4, r0
 800aea2:	4608      	mov	r0, r1
 800aea4:	4611      	mov	r1, r2
 800aea6:	2200      	movs	r2, #0
 800aea8:	602a      	str	r2, [r5, #0]
 800aeaa:	461a      	mov	r2, r3
 800aeac:	f7f7 fc04 	bl	80026b8 <_read>
 800aeb0:	1c43      	adds	r3, r0, #1
 800aeb2:	d102      	bne.n	800aeba <_read_r+0x1e>
 800aeb4:	682b      	ldr	r3, [r5, #0]
 800aeb6:	b103      	cbz	r3, 800aeba <_read_r+0x1e>
 800aeb8:	6023      	str	r3, [r4, #0]
 800aeba:	bd38      	pop	{r3, r4, r5, pc}
 800aebc:	20000854 	.word	0x20000854

0800aec0 <_init>:
 800aec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec2:	bf00      	nop
 800aec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aec6:	bc08      	pop	{r3}
 800aec8:	469e      	mov	lr, r3
 800aeca:	4770      	bx	lr

0800aecc <_fini>:
 800aecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aece:	bf00      	nop
 800aed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aed2:	bc08      	pop	{r3}
 800aed4:	469e      	mov	lr, r3
 800aed6:	4770      	bx	lr
